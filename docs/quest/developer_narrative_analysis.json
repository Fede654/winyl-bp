{
  "total_comments": 4874,
  "by_category": {
    "general": [
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.cpp",
        "line": 77,
        "text": "Write open command",
        "context_before": "75: \n76: \t\tHKEY key2 = NULL;",
        "context_after": "78: \t\tif (::RegCreateKeyEx(key, L\"command\", 0,\n79: \t\t\tREG_NONE, REG_OPTION_NON_VOLATILE, KEY_READ|KEY_WRITE, NULL, &key2, NULL) == ERROR_SUCCESS)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.cpp",
        "line": 85,
        "text": "Write DropTarget GUID",
        "context_before": "83: \t\t}\n84: ",
        "context_after": "86: \t\tif (::RegCreateKeyEx(key, L\"DropTarget\", 0,\n87: \t\t\tREG_NONE, REG_OPTION_NON_VOLATILE, KEY_READ|KEY_WRITE, NULL, &key2, NULL) == ERROR_SUCCESS)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.cpp",
        "line": 103,
        "text": "::SHDeleteKey(key, L\"Winyl.Play\");",
        "context_before": "101: \t{\n102: \t\tHelperDeleteKeyRecursively(key, L\"Winyl.Play\");",
        "context_after": "104: \t\t//::RegDeleteKey(key, L\"Winyl.Play\\\\command\");\n105: \t\t//::RegDeleteKey(key, L\"Winyl.Play\\\\DropTarget\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.cpp",
        "line": 104,
        "text": "::RegDeleteKey(key, L\"Winyl.Play\\\\command\");",
        "context_before": "102: \t\tHelperDeleteKeyRecursively(key, L\"Winyl.Play\");\n103: \t\t//::SHDeleteKey(key, L\"Winyl.Play\");",
        "context_after": "105: \t\t//::RegDeleteKey(key, L\"Winyl.Play\\\\DropTarget\");\n106: \t\t//::RegDeleteKey(key, L\"Winyl.Play\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.cpp",
        "line": 105,
        "text": "::RegDeleteKey(key, L\"Winyl.Play\\\\DropTarget\");",
        "context_before": "103: \t\t//::SHDeleteKey(key, L\"Winyl.Play\");\n104: \t\t//::RegDeleteKey(key, L\"Winyl.Play\\\\command\");",
        "context_after": "106: \t\t//::RegDeleteKey(key, L\"Winyl.Play\");\n107: \t\t::RegCloseKey(key);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.cpp",
        "line": 106,
        "text": "::RegDeleteKey(key, L\"Winyl.Play\");",
        "context_before": "104: \t\t//::RegDeleteKey(key, L\"Winyl.Play\\\\command\");\n105: \t\t//::RegDeleteKey(key, L\"Winyl.Play\\\\DropTarget\");",
        "context_after": "107: \t\t::RegCloseKey(key);\n108: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.cpp",
        "line": 114,
        "text": "__uuidof(ApplicationAssociationRegistrationUI)",
        "context_before": "112: {\n113: \tAutoCom<IApplicationAssociationRegistrationUI> assocUI;",
        "context_after": "115: \t\tassocUI->LaunchAdvancedAssociationUI(L\"Winyl\");\n116: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.cpp",
        "line": 177,
        "text": "The string does not match, write Backup",
        "context_before": "175: \t\t\tif (HelperGetStringValue(key, NULL, strKey, &sizeKey) == ERROR_SUCCESS)\n176: \t\t\t{",
        "context_after": "178: \t\t\t\tif ((winyl + assocExts[index]) != strKey)\n179: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.cpp",
        "line": 181,
        "text": "Write current state",
        "context_before": "179: \t\t\t\t{\n180: \t\t\t\t\tHelperSetStringValue(key, L\"Winyl_Backup\", strKey);",
        "context_after": "182: \n183: \t\t\t\t\t::RegCloseKey(key);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.cpp",
        "line": 190,
        "text": "Write current state",
        "context_before": "188: \t\t\t{\n189: \t\t\t\tHelperSetStringValue(key, L\"Winyl_Backup\", L\"\");",
        "context_after": "191: \n192: \t\t\t\t::RegCloseKey(key);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.cpp",
        "line": 200,
        "text": "Restore Backup",
        "context_before": "198: \t\t\tif (HelperGetStringValue(key, L\"Winyl_Backup\", strKey, &sizeKey) == ERROR_SUCCESS)\n199: \t\t\t{",
        "context_after": "201: \t\t\t\t::RegDeleteValue(key, L\"Winyl_Backup\"); // Delete Backup\n202: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.cpp",
        "line": 201,
        "text": "Delete Backup",
        "context_before": "199: \t\t\t{\n200: \t\t\t\tHelperSetStringValue(key, NULL, strKey); // Restore Backup",
        "context_after": "202: \n203: \t\t\t\t::RegCloseKey(key);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.cpp",
        "line": 223,
        "text": "Check the string for valid data",
        "context_before": "221: \tif (type != REG_SZ)\n222: \t\treturn ERROR_INVALID_DATA;",
        "context_after": "224: \t{\n225: \t\tif(*ptrSize != 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.h",
        "line": 32,
        "text": "Assotiations for folders",
        "context_before": "30: \tvoid RemoveAllAssoc(bool isVistaOrLater);\n31: ",
        "context_after": "33: \tinline void SetProgramPath(const std::wstring& path) {programFile = path + L\"Winyl.exe\";}\n34: \tinline void SetPlayInWinylString(const std::wstring& string) {playInWinyl = string;}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.h",
        "line": 40,
        "text": "Helper functions for Windows Vista/7",
        "context_before": "38: \tvoid RemoveAssocFolder();\n39: ",
        "context_after": "41: \tvoid AssocDialogVista();\n42: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Associations.h",
        "line": 43,
        "text": "Helper functions for Windows XP",
        "context_before": "41: \tvoid AssocDialogVista();\n42: ",
        "context_after": "44: \tvoid PrepareAssocExtXP();\n45: \tinline int GetAssocExtCountXP() {return (int)assocExts.size();}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\AutoHandle.h",
        "line": 22,
        "text": "template<typename T, BOOL(WINAPI* TCloseFunc)(T), T TNull = NULL> // nullT",
        "context_before": "20: #include <assert.h>\n21: ",
        "context_after": "23: template<typename T, BOOL(WINAPI* F)(T), T N = NULL>\n24: class AutoHandle"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\AutoHandle.h",
        "line": 60,
        "text": "///////////////////////////////////",
        "context_before": "58: // etc.\n59: ",
        "context_after": "61: \n62: template<typename T>"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\AutoHandle.h",
        "line": 85,
        "text": "CLSCTX_INPROC_SERVER",
        "context_before": "83: \tHRESULT CoCreateInstance(REFCLSID rclsid, LPUNKNOWN pUnkOuter = NULL, DWORD dwClsContext = CLSCTX_ALL)\n84: \t{",
        "context_after": "86: \t\tassert(pointer == nullptr);\n87: \t\treturn ::CoCreateInstance(rclsid, pUnkOuter, dwClsContext, __uuidof(T), (void**)&pointer);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 66,
        "text": "::DestroyMenu(mainMenuPlay);",
        "context_before": "64: {\n65: \t::DestroyMenu(mainMenu);",
        "context_after": "67: //\t::DestroyMenu(mainMenuOpen);\n68: //\t::DestroyMenu(mainMenuSetting);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 67,
        "text": "::DestroyMenu(mainMenuOpen);",
        "context_before": "65: \t::DestroyMenu(mainMenu);\n66: //\t::DestroyMenu(mainMenuPlay);",
        "context_after": "68: //\t::DestroyMenu(mainMenuSetting);\n69: \t::DestroyMenu(listMenu);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 68,
        "text": "::DestroyMenu(mainMenuSetting);",
        "context_before": "66: //\t::DestroyMenu(mainMenuPlay);\n67: //\t::DestroyMenu(mainMenuOpen);",
        "context_after": "69: \t::DestroyMenu(listMenu);\n70: //\t::DestroyMenu(listMenuPlay);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 70,
        "text": "::DestroyMenu(listMenuPlay);",
        "context_before": "68: //\t::DestroyMenu(mainMenuSetting);\n69: \t::DestroyMenu(listMenu);",
        "context_after": "71: \t::DestroyMenu(treePlayMenu);\n72: \t::DestroyMenu(treeSmartMenu);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 77,
        "text": "::DestroyMenu(lyricsMenuFont);",
        "context_before": "75: \t::DestroyMenu(searchMenu);\n76: \t::DestroyMenu(lyricsMenu);",
        "context_after": "78: //\t::DestroyMenu(lyricsMenuAlign);\n79: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 78,
        "text": "::DestroyMenu(lyricsMenuAlign);",
        "context_before": "76: \t::DestroyMenu(lyricsMenu);\n77: //\t::DestroyMenu(lyricsMenuFont);",
        "context_after": "79: }\n80: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 97,
        "text": "::AppendMenu(mainMenu, MF_STRING, ID_MENU_OPEN_PLAYLIST, L\"New Playlist\" + L\"\\t Ctrl+N\");",
        "context_before": "95: \t::AppendMenu(mainMenu, MF_SEPARATOR, NULL, NULL);\n96: ",
        "context_after": "98: //\t::AppendMenu(mainMenu, MF_STRING, ID_MENU_OPEN_PLAYLIST, L\"New Smart Playlist\" + L\"\\t Ctrl+M\");\n99: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 98,
        "text": "::AppendMenu(mainMenu, MF_STRING, ID_MENU_OPEN_PLAYLIST, L\"New Smart Playlist\" + L\"\\t Ctrl+M\");",
        "context_before": "96: \n97: //\t::AppendMenu(mainMenu, MF_STRING, ID_MENU_OPEN_PLAYLIST, L\"New Playlist\" + L\"\\t Ctrl+N\");",
        "context_after": "99: \n100: \t::AppendMenu(mainMenu, MF_STRING|MF_POPUP, (UINT_PTR)mainMenuOpen, lang->GetLine(Lang::MainMenu, 3));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 130,
        "text": "::AppendMenu(mainMenuSetting, MF_STRING, ID_MENU_LASTFM, lang->GetLine(Lang::MAIN_MENU, 22));",
        "context_before": "128: \t::AppendMenu(mainMenuSetting, MF_STRING, ID_MENU_EFFECT, lang->GetLine(Lang::MainMenu, 21));\n129: \t::AppendMenu(mainMenuSetting, MF_STRING, ID_MENU_SMOOTH, lang->GetLine(Lang::MainMenu, 22));",
        "context_after": "131: \t::AppendMenu(mainMenuSetting, MF_SEPARATOR, NULL, NULL);\n132: \t::AppendMenu(mainMenuSetting, MF_STRING, ID_MENU_HOTKEY, (lang->GetLineS(Lang::MainMenu, 24) + L\"\\t F7\").c_str());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 140,
        "text": "::AppendMenu(mainMenu, MF_STRING, ID_MENU_ABOUT, L\"Check for Updates\");",
        "context_before": "138: \t::AppendMenu(mainMenu, MF_SEPARATOR, NULL, NULL);\n139: ",
        "context_after": "141: \t::AppendMenu(mainMenu, MF_STRING, ID_MENU_ABOUT, lang->GetLine(Lang::MainMenu, 27));\n142: //\t::AppendMenu(mainMenu, MF_STRING, ID_MENU_DONATE, lang->GetLine(Lang::MAIN_MENU, 28));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 142,
        "text": "::AppendMenu(mainMenu, MF_STRING, ID_MENU_DONATE, lang->GetLine(Lang::MAIN_MENU, 28));",
        "context_before": "140: //\t::AppendMenu(mainMenu, MF_STRING, ID_MENU_ABOUT, L\"Check for Updates\");\n141: \t::AppendMenu(mainMenu, MF_STRING, ID_MENU_ABOUT, lang->GetLine(Lang::MainMenu, 27));",
        "context_after": "143: }\n144: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 281,
        "text": "|TPM_RIGHTBUTTON",
        "context_before": "279: void ContextMenu::ShowMainMenu(HWND wnd, CPoint& pt)\n280: {",
        "context_after": "283: \n284: void ContextMenu::ShowSearchMenu(HWND wnd, CPoint& pt)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 286,
        "text": "|TPM_RIGHTBUTTON",
        "context_before": "284: void ContextMenu::ShowSearchMenu(HWND wnd, CPoint& pt)\n285: {",
        "context_after": "288: \n289: void ContextMenu::ShowLyricsMenu(HWND wnd, CPoint& pt)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 291,
        "text": "|TPM_RIGHTBUTTON",
        "context_before": "289: void ContextMenu::ShowLyricsMenu(HWND wnd, CPoint& pt)\n290: {",
        "context_after": "293: \n294: void ContextMenu::ShowListMenu(HWND wnd, CPoint& pt, const std::vector<std::wstring>& playlists, bool isRadio, bool isPlaylist, int selPlaylist, bool isNowPlaying)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 312,
        "text": "Add playlists to \"Add to Playlist\" menu",
        "context_before": "310: \t::AppendMenu(listMenuPlay, MF_SEPARATOR, NULL, NULL);\n311: ",
        "context_after": "313: \tfor (std::size_t i = 0, size = playlists.size(); i < size; ++i)\n314: \t\t::AppendMenu(listMenuPlay, MF_STRING, 10002 + i, playlists[i].c_str());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 320,
        "text": "|TPM_RIGHTBUTTON",
        "context_before": "318: \n319: ",
        "context_after": "322: \n323: \tif (isRadio)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 331,
        "text": "Remove all items from \"Add to Playlist\" menu",
        "context_before": "329: \t}\n330: ",
        "context_after": "332: \twhile (::RemoveMenu(listMenuPlay, 0, MF_BYPOSITION));\n333: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 343,
        "text": "|TPM_RIGHTBUTTON",
        "context_before": "341: \t}\n342: ",
        "context_after": "345: \tif (!isEnable)\n346: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 362,
        "text": "|TPM_RIGHTBUTTON",
        "context_before": "360: \t}\n361: ",
        "context_after": "364: \tif (!isEnable)\n365: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 381,
        "text": "|TPM_RIGHTBUTTON",
        "context_before": "379: \t::GetCursorPos(&pt);\n380: ",
        "context_after": "383: \n384: void ContextMenu::ShowPopupMenu(HWND wnd, CPoint& pt, bool isEnableConfig)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 389,
        "text": "|TPM_RIGHTBUTTON",
        "context_before": "387: \t\t::EnableMenuItem(popupMenu, ID_MENU_POPUP_CONFIG, MF_BYCOMMAND|MF_DISABLED|MF_GRAYED);\n388: ",
        "context_after": "391: \tif (!isEnableConfig)\n392: \t\t::EnableMenuItem(popupMenu, ID_MENU_POPUP_CONFIG, MF_BYCOMMAND|MF_ENABLED);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 426,
        "text": "void ContextMenu::CheckLastFM(bool isCheck) { if (isCheck) ::CheckMenuItem(mainMenuSetting, ID_MENU_LASTFM, MF_BYCOMMAND|MF_CHECKED); else ::CheckMenuItem(mainMenuSetting, ID_MENU_LASTFM, MF_BYCOMMAND|MF_UNCHECKED); }",
        "context_before": "424: \t\t::CheckMenuItem(mainMenuPlay, ID_MENU_MUTE, MF_BYCOMMAND|MF_UNCHECKED);\n425: }",
        "context_after": "436: {\n437: \tif (isCheck)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 582,
        "text": "http://www.nanoant.com/programming/themed-menus-icons-a-complete-vista-xp-solution",
        "context_before": "580: void ContextMenu::InitDrawTrayMenuXP(HMENU menu, int itemID)\n581: {",
        "context_after": "583: \n584: \tMENUITEMINFO mii = {};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 593,
        "text": "http://www.nanoant.com/programming/themed-menus-icons-a-complete-vista-xp-solution",
        "context_before": "591: void ContextMenu::InitDrawTrayMenuVista(HMENU menu, int itemID, int iconID)\n592: {",
        "context_after": "594: \n595: \tint cxIcon = ::GetSystemMetrics(SM_CXSMICON);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.cpp",
        "line": 623,
        "text": "::DeleteObject(bitmap); // Don't do this",
        "context_before": "621: \t::SelectObject(dcBitmap, oldBitmap);\n622: \t::DeleteDC(dcBitmap);",
        "context_after": "624: \n625: \tMENUITEMINFO mii = {};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ContextMenu.h",
        "line": 45,
        "text": "void CheckLastFM(bool isCheck);",
        "context_before": "43: \tvoid CheckRepeat(bool isCheck);\n44: \tvoid CheckMute(bool isCheck);",
        "context_after": "46: \tvoid CheckEffect(bool isCheck);\n47: \tvoid CheckSmoothScroll(bool isCheck);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CoverLoader.cpp",
        "line": 50,
        "text": "Return false if embedded, because need to always reload such cover art",
        "context_before": "48: \telse if (LoadCoverFromTrack(file))\n49: \t{",
        "context_after": "51: \t\treturn false;\n52: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CoverLoader.cpp",
        "line": 130,
        "text": "*.jpeg & *.jpg",
        "context_before": "128: bool CoverLoader::FindImageByExt(const std::wstring& path, std::wstring& file)\n129: {",
        "context_after": "131: \tif (find1.Next())\n132: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CoverLoader.h",
        "line": 31,
        "text": "Return true if external cover, false if embedded or no cover",
        "context_before": "29: \tvirtual ~CoverLoader();\n30: ",
        "context_after": "32: \tbool LoadCoverImage(const std::wstring& file);\n33: \tbool LoadCoverImageTagEditor(const std::wstring& file);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CoverLoader.h",
        "line": 40,
        "text": "Search for a cover in the track folder by a name or extension",
        "context_before": "38: \tExImage::Source coverImage;\n39: ",
        "context_after": "41: \tbool FindImageByName(const std::wstring& path, const std::wstring& match, std::wstring& file);\n42: \tbool FindImageByExt(const std::wstring& path, std::wstring& file);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CoverLoader.h",
        "line": 44,
        "text": "Load cover from the track",
        "context_before": "42: \tbool FindImageByExt(const std::wstring& path, std::wstring& file);\n43: ",
        "context_after": "45: \tbool LoadCoverFromTrack(const std::wstring& file);\n46: };"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 44,
        "text": "Latest 4 bytes = 0 (this simplifies the code below)",
        "context_before": "42: \t\tstd::vector<char> bytes;\n43: ",
        "context_after": "45: \t\tstream.read(&bytes[0], fileSize);\n46: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 59,
        "text": "For all exclude latest",
        "context_before": "57: \tint highPart = 0;\n58: ",
        "context_after": "60: \t\thighPart = cueHeader.tracks[index + 1].frames;\n61: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 74,
        "text": "For all exclude latest",
        "context_before": "72: \tint time = 0;\n73: ",
        "context_after": "75: \t{\n76: \t\tint frames = cueHeader.tracks[index + 1].frames - cueHeader.tracks[index].frames;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 79,
        "text": "latest",
        "context_before": "77: \t\ttime = (frames * 1000 + 75 / 2) / 75;\n78: \t}",
        "context_after": "80: \t{\n81: \t\tint frames = cueHeader.tracks[index].frames;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 97,
        "text": "For all exclude latest",
        "context_before": "95: \tlong long size = 0;\n96: ",
        "context_after": "98: \t{\n99: \t\tint frames = cueHeader.tracks[index + 1].frames - cueHeader.tracks[index].frames;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 103,
        "text": "latest",
        "context_before": "101: \t\tsize = ((long long)time * filesize + duration / 2) / duration;\n102: \t}",
        "context_after": "104: \t{\n105: \t\tint frames = cueHeader.tracks[index].frames;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 117,
        "text": "Latest 2 bytes should be always 0",
        "context_before": "115: bool CueFile::ParseBytes(const char* p, size_t size)\n116: {",
        "context_after": "118: \tif (!(size > 2 && p[size - 1] == '\\0' && p[size - 2] == '\\0'))\n119: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 124,
        "text": "UTF8 BOM",
        "context_before": "122: \t}\n123: ",
        "context_after": "125: \t{\n126: \t\treturn ParseCue(p + 3);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 128,
        "text": "UTF-16LE BOM (Windows)",
        "context_before": "126: \t\treturn ParseCue(p + 3);\n127: \t}",
        "context_after": "129: \t{\n130: \t\treturn ParseCue(UTF::UTF8((const wchar_t*)(p + 2)).c_str());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 132,
        "text": "UTF-16BE BOM",
        "context_before": "130: \t\treturn ParseCue(UTF::UTF8((const wchar_t*)(p + 2)).c_str());\n131: \t}",
        "context_after": "133: \t{\n134: \t\treturn false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 136,
        "text": "No BOM",
        "context_before": "134: \t\treturn false;\n135: \t}",
        "context_after": "137: \t{\n138: \t\tif (UTF::IsUTF8(p))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 149,
        "text": "Useful links:",
        "context_before": "147: bool CueFile::ParseCue(const char* p)\n148: {",
        "context_after": "150: // https://en.wikipedia.org/wiki/Cue_sheet_%28computing%29\n151: // http://wiki.hydrogenaud.io/index.php?title=Cue_sheet"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 150,
        "text": "https://en.wikipedia.org/wiki/Cue_sheet_%28computing%29",
        "context_before": "148: {\n149: // Useful links:",
        "context_after": "151: // http://wiki.hydrogenaud.io/index.php?title=Cue_sheet\n152: // http://digitalx.org/cue-sheet/syntax/index.html"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 151,
        "text": "http://wiki.hydrogenaud.io/index.php?title=Cue_sheet",
        "context_before": "149: // Useful links:\n150: // https://en.wikipedia.org/wiki/Cue_sheet_%28computing%29",
        "context_after": "152: // http://digitalx.org/cue-sheet/syntax/index.html\n153: // http://digitalx.org/cue-sheet/examples/index.html"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 152,
        "text": "http://digitalx.org/cue-sheet/syntax/index.html",
        "context_before": "150: // https://en.wikipedia.org/wiki/Cue_sheet_%28computing%29\n151: // http://wiki.hydrogenaud.io/index.php?title=Cue_sheet",
        "context_after": "153: // http://digitalx.org/cue-sheet/examples/index.html\n154: /* CUE file example:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 153,
        "text": "http://digitalx.org/cue-sheet/examples/index.html",
        "context_before": "151: // http://wiki.hydrogenaud.io/index.php?title=Cue_sheet\n152: // http://digitalx.org/cue-sheet/syntax/index.html",
        "context_after": "154: /* CUE file example:\n155: REM DISCID 010A0B0C"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 154,
        "text": "CUE file example: REM DISCID 010A0B0C REM DISCNUMBER 1 REM TOTALDISCS 2 REM GENRE Test Genre REM DATE 2000 CATALOG 0000123456789 PERFORMER \"Test Artist\" TITLE \"Test Album\" FILE \"Test.mp3\" WAVE TRACK 01 AUDIO TITLE \"Test 1\" INDEX 01 00:00:00 TRACK 02 AUDIO TITLE \"Test 2\" INDEX 01 00:10:00 TRACK 03 AUDIO TITLE \"Test 3\" INDEX 01 00:20:00",
        "context_before": "152: // http://digitalx.org/cue-sheet/syntax/index.html\n153: // http://digitalx.org/cue-sheet/examples/index.html",
        "context_after": "175: \n176: \tbool header = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 183,
        "text": "Header",
        "context_before": "181: \t\t\tcontinue;\n182: ",
        "context_after": "184: \t\tif (strncmp(p, \"REM \", 4) == 0)\n185: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 188,
        "text": "Error. Skip if REM after TRACK",
        "context_before": "186: \t\t\tp += 4;\n187: ",
        "context_after": "189: \t\t\tif (!header)\n190: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 191,
        "text": "Skip REM XXXX",
        "context_before": "189: \t\t\tif (!header)\n190: \t\t\t{",
        "context_after": "192: \t\t\t\tcontinue;\n193: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 232,
        "text": "Header/Track",
        "context_before": "230: \t\t}\n231: ",
        "context_after": "233: \t\telse if (strncmp(p, \"TITLE \", 6) == 0)\n234: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 262,
        "text": "Skip XX AUDIO",
        "context_before": "260: \t\t{\n261: \t\t\tp += 6;",
        "context_after": "263: \n264: \t\t\tif (header)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 272,
        "text": "Error. Stop if empty FILE",
        "context_before": "270: \t\t\tp += ParseTime(p, &cueTrack.frames);\n271: ",
        "context_after": "273: \t\t\tif (cueTrack.file.empty())\n274: \t\t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 276,
        "text": "Add track",
        "context_before": "274: \t\t\t\tbreak;\n275: ",
        "context_after": "277: \n278: \t\t\tif (cueTrack.artist.empty())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 283,
        "text": "Do not add if frames lenght is incorrect",
        "context_before": "281: \t\t\t\tcueTrack.lyricist = cueHeader.albumLyricist;\n282: ",
        "context_after": "284: \t\t\tif (multipleFiles || cueHeader.tracks.empty() || cueTrack.frames > cueHeader.tracks.back().frames)\n285: \t\t\t\tcueHeader.tracks.push_back(cueTrack);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 305,
        "text": "If starts with \" or space then remove it",
        "context_before": "303: \tconst char* pend = p;\n304: ",
        "context_after": "306: \twhile (*pnew == '\\\"' || *pnew == ' ')\n307: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 312,
        "text": "Find new line",
        "context_before": "310: \t}\n311: ",
        "context_after": "313: \twhile (*pend && *pend != '\\r' && *pend != '\\n')\n314: \t\t++pend;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 318,
        "text": "If ends with \" or space then remove it",
        "context_before": "316: \tsize_t result = pend - p;\n317: ",
        "context_after": "319: \twhile (pend > pnew && (*(pend - 1) == '\\\"' || *(pend - 1) == ' '))\n320: \t\t--pend;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 332,
        "text": "If starts with space then remove it",
        "context_before": "330: \tconst char* pend = p;\n331: ",
        "context_after": "333: \twhile (*pnew == ' ')\n334: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 355,
        "text": "Find new line, skip file format",
        "context_before": "353: \tout.assign(pnew, pend);\n354: ",
        "context_after": "356: \twhile (*pend && *pend != '\\r' && *pend != '\\n')\n357: \t\t++pend;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 366,
        "text": "75 because according to CDDA format 1 sec = 75 frames",
        "context_before": "364: \tconst char* pend = p;\n365: ",
        "context_after": "367: \n368: \twhile (*pend && *pend != ':' && *pend != '\\r' && *pend != '\\n')"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 386,
        "text": "Find new line",
        "context_before": "384: \ti += atoi(pend);\n385: ",
        "context_after": "387: \t\t++pend;\n388: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.cpp",
        "line": 398,
        "text": "Find new line",
        "context_before": "396: \tconst char* pend = p;\n397: ",
        "context_after": "399: \twhile (*pend && *pend != '\\r' && *pend != '\\n')\n400: \t\t++pend;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.h",
        "line": 66,
        "text": "Multiple files in CUE",
        "context_before": "64: \n65: \tCueHeader cueHeader;",
        "context_after": "67: \n68: \tconst std::size_t maxFileSize = 1024 * 1024; // 1MB"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.h",
        "line": 71,
        "text": "Helpers",
        "context_before": "69: \n70: public:",
        "context_after": "72: \n73: \tlong long GetCueValue(std::size_t index);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.h",
        "line": 77,
        "text": "If end offset != 0",
        "context_before": "75: \tlong long GetCueFileSize(std::size_t index, int duration, long long filesize);\n76: ",
        "context_after": "78: \tstatic bool IsLenght(long long cue)\n79: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.h",
        "line": 83,
        "text": "If end offset != 0 and end offset of first cue == start offset of second",
        "context_before": "81: \t}\n82: ",
        "context_after": "84: \tstatic bool IsNextCue(long long cue, long long cueNext)\n85: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.h",
        "line": 89,
        "text": "Get offset and convert it to seconds in double",
        "context_before": "87: \t}\n88: ",
        "context_after": "90: \tstatic double GetOffset(long long cue)\n91: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\CueFile.h",
        "line": 95,
        "text": "Get lenght (end offset - start offset) and convert it to seconds in double",
        "context_before": "93: \t}\n94: ",
        "context_after": "96: \tstatic double GetLenght(long long cue)\n97: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 24,
        "text": "SQLite must be compiled with SQLITE_USE_URI=1, but to be sure, do the same thing in runtime.",
        "context_before": "22: DBase::DBase()\n23: {",
        "context_after": "25: \t// See also OpenLibrary function for comment about SQLITE_DEFAULT_FOREIGN_KEYS.\n26: \tif (sqlite3_config(SQLITE_CONFIG_URI, 1) != SQLITE_OK)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 25,
        "text": "See also OpenLibrary function for comment about SQLITE_DEFAULT_FOREIGN_KEYS.",
        "context_before": "23: {\n24: \t// SQLite must be compiled with SQLITE_USE_URI=1, but to be sure, do the same thing in runtime.",
        "context_after": "26: \tif (sqlite3_config(SQLITE_CONFIG_URI, 1) != SQLITE_OK)\n27: \t\tassert(false); // sqlite3_config must be called before other sqlite functions"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 27,
        "text": "sqlite3_config must be called before other sqlite functions",
        "context_before": "25: \t// See also OpenLibrary function for comment about SQLITE_DEFAULT_FOREIGN_KEYS.\n26: \tif (sqlite3_config(SQLITE_CONFIG_URI, 1) != SQLITE_OK)",
        "context_after": "28: }\n29: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 32,
        "text": "Close databases",
        "context_before": "30: DBase::~DBase()\n31: {",
        "context_after": "33: \n34: \tif (dbLibrary)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 54,
        "text": "int DBase::CompareStringToNum(const char* str, int len) { int value = 0; int sign = 1; int cnt = 0; while (cnt < len && *str == ' ') { cnt++; str++; } if (cnt < len && *str == '-') sign = -1; while (cnt < len && *str != '\\0') { if (*str >= '0' && *str <= '9') value = (value * 10) + (*str - '0'); else break; cnt++; str++; } return value * sign; } int DBase::CompareStringsNum(void* context, int len1, const void* str1, int len2, const void* str2) { int i1 = CompareStringToNum((const char*)str1, len1); int i2 = CompareStringToNum((const char*)str2, len2); if (i1 > i2) return 1; else if (i1 < i2) return -1; return 0; }",
        "context_before": "52: \t\tdbPlayTemp.Close();\n53: }",
        "context_after": "98: {\n99: \t//return lstrcmpi((const wchar_t*)str1, (const wchar_t*)str2);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 99,
        "text": "return lstrcmpi((const wchar_t*)str1, (const wchar_t*)str2);",
        "context_before": "97: int DBase::CompareStringsXP(void* context, int len1, const void* str1, int len2, const void* str2)\n98: {",
        "context_after": "100: \treturn CompareStringW(LOCALE_USER_DEFAULT, NORM_IGNORECASE, (LPCWSTR)str1, -1, (LPCWSTR)str2, -1) - CSTR_EQUAL;\n101: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 108,
        "text": "Find substring",
        "context_before": "106: \t\treturn -1;\n107: ",
        "context_after": "109: \tint i = 0, size = len1/2 - len2/2; // see assert\n110: \tfor (wchar_t* first = (wchar_t*)str1;*first && i <= size; ++first, ++i)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 109,
        "text": "see assert",
        "context_before": "107: \n108: \t// Find substring",
        "context_after": "110: \tfor (wchar_t* first = (wchar_t*)str1;*first && i <= size; ++first, ++i)\n111: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 112,
        "text": "assert((size_t)len2/2 <= wcslen(first));",
        "context_before": "110: \tfor (wchar_t* first = (wchar_t*)str1;*first && i <= size; ++first, ++i)\n111: \t{",
        "context_after": "113: \t\tif (CompareStringW(LOCALE_USER_DEFAULT, NORM_IGNORECASE, (LPCWSTR)first, len2/2, (LPCWSTR)str2, len2/2) == CSTR_EQUAL)\n114: \t\t\treturn 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 141,
        "text": "const wchar_t* find1 = wcsrchr((const wchar_t*)str1, '\\\\');",
        "context_before": "139: \n140: \t// Test",
        "context_after": "142: \t//const wchar_t* find2 = wcsrchr((const wchar_t*)str2, '\\\\');\n143: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 142,
        "text": "const wchar_t* find2 = wcsrchr((const wchar_t*)str2, '\\\\');",
        "context_before": "140: \t// Test\n141: \t//const wchar_t* find1 = wcsrchr((const wchar_t*)str1, '\\\\');",
        "context_after": "143: \n144: \t//unsigned int count1 = find1 ? find1 - (const wchar_t*)str1 + 1 : 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 144,
        "text": "unsigned int count1 = find1 ? find1 - (const wchar_t*)str1 + 1 : 0;",
        "context_before": "142: \t//const wchar_t* find2 = wcsrchr((const wchar_t*)str2, '\\\\');\n143: ",
        "context_after": "145: \t//unsigned int count2 = find2 ? find2 - (const wchar_t*)str2 + 1 : 0;\n146: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 145,
        "text": "unsigned int count2 = find2 ? find2 - (const wchar_t*)str2 + 1 : 0;",
        "context_before": "143: \n144: \t//unsigned int count1 = find1 ? find1 - (const wchar_t*)str1 + 1 : 0;",
        "context_after": "146: \n147: \t//int ret = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 147,
        "text": "int ret = 0;",
        "context_before": "145: \t//unsigned int count2 = find2 ? find2 - (const wchar_t*)str2 + 1 : 0;\n146: ",
        "context_after": "148: \t//if (count1 <= count2)\n149: \t//\tret = wcsncmp((const wchar_t*)str1, (const wchar_t*)str2, count1);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 148,
        "text": "if (count1 <= count2)",
        "context_before": "146: \n147: \t//int ret = 0;",
        "context_after": "149: \t//\tret = wcsncmp((const wchar_t*)str1, (const wchar_t*)str2, count1);\n150: \t//else"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 149,
        "text": "ret = wcsncmp((const wchar_t*)str1, (const wchar_t*)str2, count1);",
        "context_before": "147: \t//int ret = 0;\n148: \t//if (count1 <= count2)",
        "context_after": "150: \t//else\n151: \t//\tret = wcsncmp((const wchar_t*)str1, (const wchar_t*)str2, count2);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 151,
        "text": "ret = wcsncmp((const wchar_t*)str1, (const wchar_t*)str2, count2);",
        "context_before": "149: \t//\tret = wcsncmp((const wchar_t*)str1, (const wchar_t*)str2, count1);\n150: \t//else",
        "context_after": "152: \n153: \t//if (ret == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 153,
        "text": "if (ret == 0)",
        "context_before": "151: \t//\tret = wcsncmp((const wchar_t*)str1, (const wchar_t*)str2, count2);\n152: ",
        "context_after": "154: \t//\tret = count1 - count2;\n155: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 154,
        "text": "ret = count1 - count2;",
        "context_before": "152: \n153: \t//if (ret == 0)",
        "context_after": "155: \n156: \t//return ret;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 156,
        "text": "return ret;",
        "context_before": "154: \t//\tret = count1 - count2;\n155: ",
        "context_after": "157: }\n158: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 226,
        "text": "// Test load to memory",
        "context_before": "224: \tdbLibrary.OpenCreate(file);\n225: ",
        "context_after": "227: \t//DBase::SQLFile dbLibraryFile;\n228: \t//dbLibraryFile = dbLibrary;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 227,
        "text": "DBase::SQLFile dbLibraryFile;",
        "context_before": "225: \n226: \t//// Test load to memory",
        "context_after": "228: \t//dbLibraryFile = dbLibrary;\n229: \t//dbLibrary.Null();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 228,
        "text": "dbLibraryFile = dbLibrary;",
        "context_before": "226: \t//// Test load to memory\n227: \t//DBase::SQLFile dbLibraryFile;",
        "context_after": "229: \t//dbLibrary.Null();\n230: \t//dbLibrary.OpenCreate(\":memory:\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 229,
        "text": "dbLibrary.Null();",
        "context_before": "227: \t//DBase::SQLFile dbLibraryFile;\n228: \t//dbLibraryFile = dbLibrary;",
        "context_after": "230: \t//dbLibrary.OpenCreate(\":memory:\");\n231: \t//sqlite3_backup *pBackup = sqlite3_backup_init(dbLibrary.get(), \"main\", dbLibraryFile.get(), \"main\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 230,
        "text": "dbLibrary.OpenCreate(\":memory:\");",
        "context_before": "228: \t//dbLibraryFile = dbLibrary;\n229: \t//dbLibrary.Null();",
        "context_after": "231: \t//sqlite3_backup *pBackup = sqlite3_backup_init(dbLibrary.get(), \"main\", dbLibraryFile.get(), \"main\");\n232: \t//sqlite3_backup_step(pBackup, -1);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 231,
        "text": "sqlite3_backup *pBackup = sqlite3_backup_init(dbLibrary.get(), \"main\", dbLibraryFile.get(), \"main\");",
        "context_before": "229: \t//dbLibrary.Null();\n230: \t//dbLibrary.OpenCreate(\":memory:\");",
        "context_after": "232: \t//sqlite3_backup_step(pBackup, -1);\n233: \t//sqlite3_backup_finish(pBackup);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 232,
        "text": "sqlite3_backup_step(pBackup, -1);",
        "context_before": "230: \t//dbLibrary.OpenCreate(\":memory:\");\n231: \t//sqlite3_backup *pBackup = sqlite3_backup_init(dbLibrary.get(), \"main\", dbLibraryFile.get(), \"main\");",
        "context_after": "233: \t//sqlite3_backup_finish(pBackup);\n234: \t//dbLibraryFile.Close();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 233,
        "text": "sqlite3_backup_finish(pBackup);",
        "context_before": "231: \t//sqlite3_backup *pBackup = sqlite3_backup_init(dbLibrary.get(), \"main\", dbLibraryFile.get(), \"main\");\n232: \t//sqlite3_backup_step(pBackup, -1);",
        "context_after": "234: \t//dbLibraryFile.Close();\n235: \t//// Test save from memory"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 234,
        "text": "dbLibraryFile.Close();",
        "context_before": "232: \t//sqlite3_backup_step(pBackup, -1);\n233: \t//sqlite3_backup_finish(pBackup);",
        "context_after": "235: \t//// Test save from memory\n236: \t//int c1 = sqlite3_changes(dbLibrary.get());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 235,
        "text": "// Test save from memory",
        "context_before": "233: \t//sqlite3_backup_finish(pBackup);\n234: \t//dbLibraryFile.Close();",
        "context_after": "236: \t//int c1 = sqlite3_changes(dbLibrary.get());\n237: \t//int c2 = sqlite3_total_changes(dbLibrary.get());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 236,
        "text": "int c1 = sqlite3_changes(dbLibrary.get());",
        "context_before": "234: \t//dbLibraryFile.Close();\n235: \t//// Test save from memory",
        "context_after": "237: \t//int c2 = sqlite3_total_changes(dbLibrary.get());\n238: \t//DBase::SQLFile dbLibraryTemp;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 237,
        "text": "int c2 = sqlite3_total_changes(dbLibrary.get());",
        "context_before": "235: \t//// Test save from memory\n236: \t//int c1 = sqlite3_changes(dbLibrary.get());",
        "context_after": "238: \t//DBase::SQLFile dbLibraryTemp;\n239: \t//dbLibraryTemp.OpenCreate(profilePath + L\"Test.db\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 238,
        "text": "DBase::SQLFile dbLibraryTemp;",
        "context_before": "236: \t//int c1 = sqlite3_changes(dbLibrary.get());\n237: \t//int c2 = sqlite3_total_changes(dbLibrary.get());",
        "context_after": "239: \t//dbLibraryTemp.OpenCreate(profilePath + L\"Test.db\");\n240: \t//SQLRequest::Exec(dbLibraryTemp, \"PRAGMA journal_mode = OFF;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 239,
        "text": "dbLibraryTemp.OpenCreate(profilePath + L\"Test.db\");",
        "context_before": "237: \t//int c2 = sqlite3_total_changes(dbLibrary.get());\n238: \t//DBase::SQLFile dbLibraryTemp;",
        "context_after": "240: \t//SQLRequest::Exec(dbLibraryTemp, \"PRAGMA journal_mode = OFF;\");\n241: \t////SQLRequest::Exec(dbLibraryTemp, \"PRAGMA locking_mode = EXCLUSIVE;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 240,
        "text": "SQLRequest::Exec(dbLibraryTemp, \"PRAGMA journal_mode = OFF;\");",
        "context_before": "238: \t//DBase::SQLFile dbLibraryTemp;\n239: \t//dbLibraryTemp.OpenCreate(profilePath + L\"Test.db\");",
        "context_after": "241: \t////SQLRequest::Exec(dbLibraryTemp, \"PRAGMA locking_mode = EXCLUSIVE;\");\n242: \t////SQLRequest::Exec(dbLibraryTemp, \"PRAGMA synchronous = OFF;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 241,
        "text": "//SQLRequest::Exec(dbLibraryTemp, \"PRAGMA locking_mode = EXCLUSIVE;\");",
        "context_before": "239: \t//dbLibraryTemp.OpenCreate(profilePath + L\"Test.db\");\n240: \t//SQLRequest::Exec(dbLibraryTemp, \"PRAGMA journal_mode = OFF;\");",
        "context_after": "242: \t////SQLRequest::Exec(dbLibraryTemp, \"PRAGMA synchronous = OFF;\");\n243: \t//pBackup = sqlite3_backup_init(dbLibraryTemp.get(), \"main\", dbLibrary.get(), \"main\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 242,
        "text": "//SQLRequest::Exec(dbLibraryTemp, \"PRAGMA synchronous = OFF;\");",
        "context_before": "240: \t//SQLRequest::Exec(dbLibraryTemp, \"PRAGMA journal_mode = OFF;\");\n241: \t////SQLRequest::Exec(dbLibraryTemp, \"PRAGMA locking_mode = EXCLUSIVE;\");",
        "context_after": "243: \t//pBackup = sqlite3_backup_init(dbLibraryTemp.get(), \"main\", dbLibrary.get(), \"main\");\n244: \t//sqlite3_backup_step(pBackup, -1);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 243,
        "text": "pBackup = sqlite3_backup_init(dbLibraryTemp.get(), \"main\", dbLibrary.get(), \"main\");",
        "context_before": "241: \t////SQLRequest::Exec(dbLibraryTemp, \"PRAGMA locking_mode = EXCLUSIVE;\");\n242: \t////SQLRequest::Exec(dbLibraryTemp, \"PRAGMA synchronous = OFF;\");",
        "context_after": "244: \t//sqlite3_backup_step(pBackup, -1);\n245: \t//sqlite3_backup_finish(pBackup);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 244,
        "text": "sqlite3_backup_step(pBackup, -1);",
        "context_before": "242: \t////SQLRequest::Exec(dbLibraryTemp, \"PRAGMA synchronous = OFF;\");\n243: \t//pBackup = sqlite3_backup_init(dbLibraryTemp.get(), \"main\", dbLibrary.get(), \"main\");",
        "context_after": "245: \t//sqlite3_backup_finish(pBackup);\n246: \t//dbLibraryTemp.Close();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 245,
        "text": "sqlite3_backup_finish(pBackup);",
        "context_before": "243: \t//pBackup = sqlite3_backup_init(dbLibraryTemp.get(), \"main\", dbLibrary.get(), \"main\");\n244: \t//sqlite3_backup_step(pBackup, -1);",
        "context_after": "246: \t//dbLibraryTemp.Close();\n247: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 246,
        "text": "dbLibraryTemp.Close();",
        "context_before": "244: \t//sqlite3_backup_step(pBackup, -1);\n245: \t//sqlite3_backup_finish(pBackup);",
        "context_after": "247: \n248: \t//// Test some pragmas"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 248,
        "text": "// Test some pragmas",
        "context_before": "246: \t//dbLibraryTemp.Close();\n247: ",
        "context_after": "249: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA locking_mode=EXCLUSIVE;\"); // PRAGMA journal_size_limit\n250: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA synchronous=NORMAL;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 249,
        "text": "SQLRequest::Exec(dbLibrary, \"PRAGMA locking_mode=EXCLUSIVE;\"); // PRAGMA journal_size_limit",
        "context_before": "247: \n248: \t//// Test some pragmas",
        "context_after": "250: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA synchronous=NORMAL;\");\n251: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA journal_mode=WAL;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 250,
        "text": "SQLRequest::Exec(dbLibrary, \"PRAGMA synchronous=NORMAL;\");",
        "context_before": "248: \t//// Test some pragmas\n249: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA locking_mode=EXCLUSIVE;\"); // PRAGMA journal_size_limit",
        "context_after": "251: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA journal_mode=WAL;\");\n252: \t//// Can be changed back with"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 251,
        "text": "SQLRequest::Exec(dbLibrary, \"PRAGMA journal_mode=WAL;\");",
        "context_before": "249: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA locking_mode=EXCLUSIVE;\"); // PRAGMA journal_size_limit\n250: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA synchronous=NORMAL;\");",
        "context_after": "252: \t//// Can be changed back with\n253: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA journal_mode=DELETE;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 252,
        "text": "// Can be changed back with",
        "context_before": "250: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA synchronous=NORMAL;\");\n251: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA journal_mode=WAL;\");",
        "context_after": "253: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA journal_mode=DELETE;\");\n254: \t//// Maybe truncate? (if DELETE and EXCLUSIVE or WAL)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 253,
        "text": "SQLRequest::Exec(dbLibrary, \"PRAGMA journal_mode=DELETE;\");",
        "context_before": "251: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA journal_mode=WAL;\");\n252: \t//// Can be changed back with",
        "context_after": "254: \t//// Maybe truncate? (if DELETE and EXCLUSIVE or WAL)\n255: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA journal_size_limit=0;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 255,
        "text": "SQLRequest::Exec(dbLibrary, \"PRAGMA journal_size_limit=0;\");",
        "context_before": "253: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA journal_mode=DELETE;\");\n254: \t//// Maybe truncate? (if DELETE and EXCLUSIVE or WAL)",
        "context_after": "256: \n257: \tfile = profilePath + L\"Cue.db\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 261,
        "text": "SQLite must be compiled with SQLITE_DEFAULT_FOREIGN_KEYS=1, use these asserts to check this,",
        "context_before": "259: \tdbCue.OpenCreate(file);\n260: ",
        "context_after": "262: \t// but to be sure we still use PRAGMA foreign_keys = ON.\n263: \t// Note: Instead of this it would be better to use sqlite3_compileoption_used to check both"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 262,
        "text": "but to be sure we still use PRAGMA foreign_keys = ON.",
        "context_before": "260: \n261: \t// SQLite must be compiled with SQLITE_DEFAULT_FOREIGN_KEYS=1, use these asserts to check this,",
        "context_after": "263: \t// Note: Instead of this it would be better to use sqlite3_compileoption_used to check both\n264: \t// SQLITE_DEFAULT_FOREIGN_KEYS and SQLITE_USE_URI, but it seems the function does not work for these options."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 265,
        "text": "See also constructor of DBase for comment about SQLITE_USE_URI.",
        "context_before": "263: \t// Note: Instead of this it would be better to use sqlite3_compileoption_used to check both\n264: \t// SQLITE_DEFAULT_FOREIGN_KEYS and SQLITE_USE_URI, but it seems the function does not work for these options.",
        "context_after": "266: #ifndef NDEBUG\n267: \tSQLRequest sqlCheckForeignKeys(dbLibrary, \"PRAGMA foreign_keys;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 273,
        "text": "sqlite3_create_collation(dbLibrary.get(), \"MYNUM\", SQLITE_UTF8, nullptr, CompareStringsNum);",
        "context_before": "271: #endif\n272: ",
        "context_after": "274: \tif (futureWin->IsVistaOrLater())\n275: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 338,
        "text": "If playlist is open it becomes Now Playing",
        "context_before": "336: void DBase::NewNowPlaying()\n337: {",
        "context_after": "339: \t{\n340: \t\t// If assert then something bad is happening"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 340,
        "text": "If assert then something bad is happening",
        "context_before": "338: \tif (dbPlaylist) // If playlist is open it becomes Now Playing\n339: \t{",
        "context_after": "341: \t\tassert(!dbPlayOpen);\n342: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 343,
        "text": "Can we really do this?",
        "context_before": "341: \t\tassert(!dbPlayOpen);\n342: ",
        "context_after": "344: \t\t\tdbPlayOpen = dbPlaylist;\n345: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 369,
        "text": "SQLRequest::Exec(db, \"PRAGMA cache_spill = OFF;\"); // See DeleteNotUpdated",
        "context_before": "367: void DBase::CreateTableLibrary(const SQLFile& db)\n368: {",
        "context_after": "370: \tSQLRequest::Exec(db, \"PRAGMA cache_size = 10000;\"); // Use this instead of previous\n371: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 370,
        "text": "Use this instead of previous",
        "context_before": "368: {\n369: \t//SQLRequest::Exec(db, \"PRAGMA cache_spill = OFF;\"); // See DeleteNotUpdated",
        "context_after": "371: \n372: \tSQLRequest::Exec(db, \"PRAGMA foreign_keys = ON;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 374,
        "text": "Library tables already created",
        "context_before": "372: \tSQLRequest::Exec(db, \"PRAGMA foreign_keys = ON;\");\n373: ",
        "context_after": "375: \tif (SQLRequest::ExecRow(db, \"SELECT name FROM sqlite_master WHERE type='table' AND name='library';\"))\n376: \t\treturn;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 382,
        "text": "Track ID (Primary key)",
        "context_before": "380: \tSQLRequest::Exec(db,\n381: \t\t\"CREATE TABLE IF NOT EXISTS library (\"",
        "context_after": "383: \t\t\"flag INTEGER,\"            // Update flag\n384: \t\t\"deleted INTEGER,\"         // Is track deleted?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 383,
        "text": "Update flag",
        "context_before": "381: \t\t\"CREATE TABLE IF NOT EXISTS library (\"\n382: \t\t\"id INTEGER PRIMARY KEY AUTOINCREMENT,\" // Track ID (Primary key)",
        "context_after": "384: \t\t\"deleted INTEGER,\"         // Is track deleted?\n385: \t\t\"added INTEGER,\"           // Date time when added to the library"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 384,
        "text": "Is track deleted?",
        "context_before": "382: \t\t\"id INTEGER PRIMARY KEY AUTOINCREMENT,\" // Track ID (Primary key)\n383: \t\t\"flag INTEGER,\"            // Update flag",
        "context_after": "385: \t\t\"added INTEGER,\"           // Date time when added to the library\n386: \t\t\"disabled INTEGER,\"        // Disabled state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 385,
        "text": "Date time when added to the library",
        "context_before": "383: \t\t\"flag INTEGER,\"            // Update flag\n384: \t\t\"deleted INTEGER,\"         // Is track deleted?",
        "context_after": "386: \t\t\"disabled INTEGER,\"        // Disabled state\n387: \t\t\"collapsed INTEGER,\"       // Collapsed state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 386,
        "text": "Disabled state",
        "context_before": "384: \t\t\"deleted INTEGER,\"         // Is track deleted?\n385: \t\t\"added INTEGER,\"           // Date time when added to the library",
        "context_after": "387: \t\t\"collapsed INTEGER,\"       // Collapsed state\n388: \t\t\"cue INTEGER,\"             // CUE"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 387,
        "text": "Collapsed state",
        "context_before": "385: \t\t\"added INTEGER,\"           // Date time when added to the library\n386: \t\t\"disabled INTEGER,\"        // Disabled state",
        "context_after": "388: \t\t\"cue INTEGER,\"             // CUE\n389: \t\t\"filehash INTEGER,\"        // File hash"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 389,
        "text": "File hash",
        "context_before": "387: \t\t\"collapsed INTEGER,\"       // Collapsed state\n388: \t\t\"cue INTEGER,\"             // CUE",
        "context_after": "390: \t\t\"path TEXT,\"               // File path\n391: \t\t\"file TEXT,\"               // File name"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 390,
        "text": "File path",
        "context_before": "388: \t\t\"cue INTEGER,\"             // CUE\n389: \t\t\"filehash INTEGER,\"        // File hash",
        "context_after": "391: \t\t\"file TEXT,\"               // File name\n392: \t\t\"filesize INTEGER,\"        // File size"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 391,
        "text": "File name",
        "context_before": "389: \t\t\"filehash INTEGER,\"        // File hash\n390: \t\t\"path TEXT,\"               // File path",
        "context_after": "392: \t\t\"filesize INTEGER,\"        // File size\n393: \t\t\"modified INTEGER,\"        // Date time when file last modified"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 392,
        "text": "File size",
        "context_before": "390: \t\t\"path TEXT,\"               // File path\n391: \t\t\"file TEXT,\"               // File name",
        "context_after": "393: \t\t\"modified INTEGER,\"        // Date time when file last modified\n394: \t\t\"category INTEGER,\"        // Track category"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 393,
        "text": "Date time when file last modified",
        "context_before": "391: \t\t\"file TEXT,\"               // File name\n392: \t\t\"filesize INTEGER,\"        // File size",
        "context_after": "394: \t\t\"category INTEGER,\"        // Track category\n395: \t\t\"trackhash INTEGER,\"       // Track hash"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 394,
        "text": "Track category",
        "context_before": "392: \t\t\"filesize INTEGER,\"        // File size\n393: \t\t\"modified INTEGER,\"        // Date time when file last modified",
        "context_after": "395: \t\t\"trackhash INTEGER,\"       // Track hash\n396: \t\t\"track TEXT,\"              // Track number in album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 395,
        "text": "Track hash",
        "context_before": "393: \t\t\"modified INTEGER,\"        // Date time when file last modified\n394: \t\t\"category INTEGER,\"        // Track category",
        "context_after": "396: \t\t\"track TEXT,\"              // Track number in album\n397: \t\t\"totaltracks TEXT,\"        // Total tracks in album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 396,
        "text": "Track number in album",
        "context_before": "394: \t\t\"category INTEGER,\"        // Track category\n395: \t\t\"trackhash INTEGER,\"       // Track hash",
        "context_after": "397: \t\t\"totaltracks TEXT,\"        // Total tracks in album\n398: \t\t\"disc TEXT,\"               // Disc number"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 397,
        "text": "Total tracks in album",
        "context_before": "395: \t\t\"trackhash INTEGER,\"       // Track hash\n396: \t\t\"track TEXT,\"              // Track number in album",
        "context_after": "398: \t\t\"disc TEXT,\"               // Disc number\n399: \t\t\"totaldiscs TEXT,\"         // Total discs"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 398,
        "text": "Disc number",
        "context_before": "396: \t\t\"track TEXT,\"              // Track number in album\n397: \t\t\"totaltracks TEXT,\"        // Total tracks in album",
        "context_after": "399: \t\t\"totaldiscs TEXT,\"         // Total discs\n400: \t\t\"title TEXT,\"              // Track title"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 399,
        "text": "Total discs",
        "context_before": "397: \t\t\"totaltracks TEXT,\"        // Total tracks in album\n398: \t\t\"disc TEXT,\"               // Disc number",
        "context_after": "400: \t\t\"title TEXT,\"              // Track title\n401: \t\t\"album TEXT,\"              // Track album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 400,
        "text": "Track title",
        "context_before": "398: \t\t\"disc TEXT,\"               // Disc number\n399: \t\t\"totaldiscs TEXT,\"         // Total discs",
        "context_after": "401: \t\t\"album TEXT,\"              // Track album\n402: \t\t\"artist TEXT,\"             // Track artist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 401,
        "text": "Track album",
        "context_before": "399: \t\t\"totaldiscs TEXT,\"         // Total discs\n400: \t\t\"title TEXT,\"              // Track title",
        "context_after": "402: \t\t\"artist TEXT,\"             // Track artist\n403: \t\t\"albumartist TEXT,\"        // Track album artist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 402,
        "text": "Track artist",
        "context_before": "400: \t\t\"title TEXT,\"              // Track title\n401: \t\t\"album TEXT,\"              // Track album",
        "context_after": "403: \t\t\"albumartist TEXT,\"        // Track album artist\n404: \t\t\"composer TEXT,\"           // Track composer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 403,
        "text": "Track album artist",
        "context_before": "401: \t\t\"album TEXT,\"              // Track album\n402: \t\t\"artist TEXT,\"             // Track artist",
        "context_after": "404: \t\t\"composer TEXT,\"           // Track composer\n405: \t\t\"genre TEXT,\"              // Track genre"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 404,
        "text": "Track composer",
        "context_before": "402: \t\t\"artist TEXT,\"             // Track artist\n403: \t\t\"albumartist TEXT,\"        // Track album artist",
        "context_after": "405: \t\t\"genre TEXT,\"              // Track genre\n406: \t\t\"year TEXT,\"               // Track release year"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 405,
        "text": "Track genre",
        "context_before": "403: \t\t\"albumartist TEXT,\"        // Track album artist\n404: \t\t\"composer TEXT,\"           // Track composer",
        "context_after": "406: \t\t\"year TEXT,\"               // Track release year\n407: \t\t\"bpm TEXT,\"                // Track BPM"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 406,
        "text": "Track release year",
        "context_before": "404: \t\t\"composer TEXT,\"           // Track composer\n405: \t\t\"genre TEXT,\"              // Track genre",
        "context_after": "407: \t\t\"bpm TEXT,\"                // Track BPM\n408: \t\t\"compilation TEXT,\"        // Track Part of Compilation"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 407,
        "text": "Track BPM",
        "context_before": "405: \t\t\"genre TEXT,\"              // Track genre\n406: \t\t\"year TEXT,\"               // Track release year",
        "context_after": "408: \t\t\"compilation TEXT,\"        // Track Part of Compilation\n409: \t\t\"publisher TEXT,\"          // Track publisher"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 408,
        "text": "Track Part of Compilation",
        "context_before": "406: \t\t\"year TEXT,\"               // Track release year\n407: \t\t\"bpm TEXT,\"                // Track BPM",
        "context_after": "409: \t\t\"publisher TEXT,\"          // Track publisher\n410: \t\t\"conductor TEXT,\"          // Track conductor"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 409,
        "text": "Track publisher",
        "context_before": "407: \t\t\"bpm TEXT,\"                // Track BPM\n408: \t\t\"compilation TEXT,\"        // Track Part of Compilation",
        "context_after": "410: \t\t\"conductor TEXT,\"          // Track conductor\n411: \t\t\"lyricist TEXT,\"           // Track lyricist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 410,
        "text": "Track conductor",
        "context_before": "408: \t\t\"compilation TEXT,\"        // Track Part of Compilation\n409: \t\t\"publisher TEXT,\"          // Track publisher",
        "context_after": "411: \t\t\"lyricist TEXT,\"           // Track lyricist\n412: \t\t\"remixer TEXT,\"            // Track remixer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 411,
        "text": "Track lyricist",
        "context_before": "409: \t\t\"publisher TEXT,\"          // Track publisher\n410: \t\t\"conductor TEXT,\"          // Track conductor",
        "context_after": "412: \t\t\"remixer TEXT,\"            // Track remixer\n413: \t\t\"grouping TEXT,\"           // Track grouping"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 412,
        "text": "Track remixer",
        "context_before": "410: \t\t\"conductor TEXT,\"          // Track conductor\n411: \t\t\"lyricist TEXT,\"           // Track lyricist",
        "context_after": "413: \t\t\"grouping TEXT,\"           // Track grouping\n414: \t\t\"subtitle TEXT,\"           // Track subtitle"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 413,
        "text": "Track grouping",
        "context_before": "411: \t\t\"lyricist TEXT,\"           // Track lyricist\n412: \t\t\"remixer TEXT,\"            // Track remixer",
        "context_after": "414: \t\t\"subtitle TEXT,\"           // Track subtitle\n415: \t\t\"copyright TEXT,\"          // Track copyright"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 414,
        "text": "Track subtitle",
        "context_before": "412: \t\t\"remixer TEXT,\"            // Track remixer\n413: \t\t\"grouping TEXT,\"           // Track grouping",
        "context_after": "415: \t\t\"copyright TEXT,\"          // Track copyright\n416: \t\t\"encodedby TEXT,\"          // Track encoded by"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 416,
        "text": "Track encoded by",
        "context_before": "414: \t\t\"subtitle TEXT,\"           // Track subtitle\n415: \t\t\"copyright TEXT,\"          // Track copyright",
        "context_after": "417: \t\t\"comment TEXT,\"            // Track comment\n418: \t\t\"duration INTEGER,\"        // Track time length"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 417,
        "text": "Track comment",
        "context_before": "415: \t\t\"copyright TEXT,\"          // Track copyright\n416: \t\t\"encodedby TEXT,\"          // Track encoded by",
        "context_after": "418: \t\t\"duration INTEGER,\"        // Track time length\n419: \t\t\"channels INTEGER,\"        // Track number of channels"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 418,
        "text": "Track time length",
        "context_before": "416: \t\t\"encodedby TEXT,\"          // Track encoded by\n417: \t\t\"comment TEXT,\"            // Track comment",
        "context_after": "419: \t\t\"channels INTEGER,\"        // Track number of channels\n420: \t\t\"bitrate INTEGER,\"         // Track bitrate"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 419,
        "text": "Track number of channels",
        "context_before": "417: \t\t\"comment TEXT,\"            // Track comment\n418: \t\t\"duration INTEGER,\"        // Track time length",
        "context_after": "420: \t\t\"bitrate INTEGER,\"         // Track bitrate\n421: \t\t\"samplerate INTEGER,\"      // Track sample rate"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 420,
        "text": "Track bitrate",
        "context_before": "418: \t\t\"duration INTEGER,\"        // Track time length\n419: \t\t\"channels INTEGER,\"        // Track number of channels",
        "context_after": "421: \t\t\"samplerate INTEGER,\"      // Track sample rate\n422: \t\t\"rating INTEGER,\"          // Track rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 421,
        "text": "Track sample rate",
        "context_before": "419: \t\t\"channels INTEGER,\"        // Track number of channels\n420: \t\t\"bitrate INTEGER,\"         // Track bitrate",
        "context_after": "422: \t\t\"rating INTEGER,\"          // Track rating\n423: \t\t\"loverating INTEGER,\"      // Track love rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 422,
        "text": "Track rating",
        "context_before": "420: \t\t\"bitrate INTEGER,\"         // Track bitrate\n421: \t\t\"samplerate INTEGER,\"      // Track sample rate",
        "context_after": "423: \t\t\"loverating INTEGER,\"      // Track love rating\n424: \t\t\"albumrating INTEGER,\"     // Album rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 423,
        "text": "Track love rating",
        "context_before": "421: \t\t\"samplerate INTEGER,\"      // Track sample rate\n422: \t\t\"rating INTEGER,\"          // Track rating",
        "context_after": "424: \t\t\"albumrating INTEGER,\"     // Album rating\n425: \t\t\"folderrating INTEGER,\"    // Folder rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 424,
        "text": "Album rating",
        "context_before": "422: \t\t\"rating INTEGER,\"          // Track rating\n423: \t\t\"loverating INTEGER,\"      // Track love rating",
        "context_after": "425: \t\t\"folderrating INTEGER,\"    // Folder rating\n426: \t\t\"playcount INTEGER,\"       // Track play count"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 425,
        "text": "Folder rating",
        "context_before": "423: \t\t\"loverating INTEGER,\"      // Track love rating\n424: \t\t\"albumrating INTEGER,\"     // Album rating",
        "context_after": "426: \t\t\"playcount INTEGER,\"       // Track play count\n427: \t\t\"lastplayed INTEGER,\"      // Track date time of last play"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 426,
        "text": "Track play count",
        "context_before": "424: \t\t\"albumrating INTEGER,\"     // Album rating\n425: \t\t\"folderrating INTEGER,\"    // Folder rating",
        "context_after": "427: \t\t\"lastplayed INTEGER,\"      // Track date time of last play\n428: \t\t\"skipcount INTEGER,\"       // Track skin count"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 427,
        "text": "Track date time of last play",
        "context_before": "425: \t\t\"folderrating INTEGER,\"    // Folder rating\n426: \t\t\"playcount INTEGER,\"       // Track play count",
        "context_after": "428: \t\t\"skipcount INTEGER,\"       // Track skin count\n429: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 428,
        "text": "Track skin count",
        "context_before": "426: \t\t\"playcount INTEGER,\"       // Track play count\n427: \t\t\"lastplayed INTEGER,\"      // Track date time of last play",
        "context_after": "429: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip\n430: \t\t\"bookmark INTEGER,\"        // Track bookmark"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 429,
        "text": "Track date time of last skip",
        "context_before": "427: \t\t\"lastplayed INTEGER,\"      // Track date time of last play\n428: \t\t\"skipcount INTEGER,\"       // Track skin count",
        "context_after": "430: \t\t\"bookmark INTEGER,\"        // Track bookmark\n431: \t\t\"replaygain TEXT,\"         // ReplayGain values"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 430,
        "text": "Track bookmark",
        "context_before": "428: \t\t\"skipcount INTEGER,\"       // Track skin count\n429: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip",
        "context_after": "431: \t\t\"replaygain TEXT,\"         // ReplayGain values\n432: \t\t\"equalizer TEXT,\"          // Track equalizer settings"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 431,
        "text": "ReplayGain values",
        "context_before": "429: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip\n430: \t\t\"bookmark INTEGER,\"        // Track bookmark",
        "context_after": "432: \t\t\"equalizer TEXT,\"          // Track equalizer settings\n433: \t\t\"keywords TEXT);\"          // Keywords/tags for track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 432,
        "text": "Track equalizer settings",
        "context_before": "430: \t\t\"bookmark INTEGER,\"        // Track bookmark\n431: \t\t\"replaygain TEXT,\"         // ReplayGain values",
        "context_after": "433: \t\t\"keywords TEXT);\"          // Keywords/tags for track\n434: \t);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 433,
        "text": "Keywords/tags for track",
        "context_before": "431: \t\t\"replaygain TEXT,\"         // ReplayGain values\n432: \t\t\"equalizer TEXT,\"          // Track equalizer settings",
        "context_after": "434: \t);\n435: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 459,
        "text": "Playlist tables already created",
        "context_before": "457: \tSQLRequest::Exec(db, \"PRAGMA foreign_keys = ON;\");\n458: ",
        "context_after": "460: \tif (SQLRequest::ExecRow(db, \"SELECT name FROM sqlite_master WHERE type='table' AND name='playlist';\"))\n461: \t\treturn;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 467,
        "text": "Track ID (Primary key)",
        "context_before": "465: \tSQLRequest::Exec(db,\n466: \t\t\"CREATE TABLE IF NOT EXISTS playlist (\"",
        "context_after": "468: \t\t\"idlib INTEGER,\"           // Track ID in the library database\n469: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 468,
        "text": "Track ID in the library database",
        "context_before": "466: \t\t\"CREATE TABLE IF NOT EXISTS playlist (\"\n467: \t\t\"id INTEGER PRIMARY KEY AUTOINCREMENT,\"  // Track ID (Primary key)",
        "context_after": "469: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)\n470: \t\t\"added INTEGER,\"           // Date time when added to the playlist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 469,
        "text": "Track index (for order in the playlist)",
        "context_before": "467: \t\t\"id INTEGER PRIMARY KEY AUTOINCREMENT,\"  // Track ID (Primary key)\n468: \t\t\"idlib INTEGER,\"           // Track ID in the library database",
        "context_after": "470: \t\t\"added INTEGER,\"           // Date time when added to the playlist\n471: \t\t\"disabled INTEGER,\"        // Disabled state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 470,
        "text": "Date time when added to the playlist",
        "context_before": "468: \t\t\"idlib INTEGER,\"           // Track ID in the library database\n469: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)",
        "context_after": "471: \t\t\"disabled INTEGER,\"        // Disabled state\n472: \t\t\"collapsed INTEGER,\"       // Collapsed state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 471,
        "text": "Disabled state",
        "context_before": "469: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)\n470: \t\t\"added INTEGER,\"           // Date time when added to the playlist",
        "context_after": "472: \t\t\"collapsed INTEGER,\"       // Collapsed state\n473: \t\t\"cue INTEGER,\"             // CUE"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 472,
        "text": "Collapsed state",
        "context_before": "470: \t\t\"added INTEGER,\"           // Date time when added to the playlist\n471: \t\t\"disabled INTEGER,\"        // Disabled state",
        "context_after": "473: \t\t\"cue INTEGER,\"             // CUE\n474: \t\t\"filehash INTEGER,\"        // File hash"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 474,
        "text": "File hash",
        "context_before": "472: \t\t\"collapsed INTEGER,\"       // Collapsed state\n473: \t\t\"cue INTEGER,\"             // CUE",
        "context_after": "475: \t\t\"path TEXT,\"               // File path\n476: \t\t\"file TEXT,\"               // File name"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 475,
        "text": "File path",
        "context_before": "473: \t\t\"cue INTEGER,\"             // CUE\n474: \t\t\"filehash INTEGER,\"        // File hash",
        "context_after": "476: \t\t\"file TEXT,\"               // File name\n477: \t\t\"filesize INTEGER,\"        // File size"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 476,
        "text": "File name",
        "context_before": "474: \t\t\"filehash INTEGER,\"        // File hash\n475: \t\t\"path TEXT,\"               // File path",
        "context_after": "477: \t\t\"filesize INTEGER,\"        // File size\n478: \t\t\"modified INTEGER,\"        // Date time when file last modified"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 477,
        "text": "File size",
        "context_before": "475: \t\t\"path TEXT,\"               // File path\n476: \t\t\"file TEXT,\"               // File name",
        "context_after": "478: \t\t\"modified INTEGER,\"        // Date time when file last modified\n479: \t\t\"category INTEGER,\"        // Track category"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 478,
        "text": "Date time when file last modified",
        "context_before": "476: \t\t\"file TEXT,\"               // File name\n477: \t\t\"filesize INTEGER,\"        // File size",
        "context_after": "479: \t\t\"category INTEGER,\"        // Track category\n480: \t\t\"trackhash INTEGER,\"       // Track hash"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 479,
        "text": "Track category",
        "context_before": "477: \t\t\"filesize INTEGER,\"        // File size\n478: \t\t\"modified INTEGER,\"        // Date time when file last modified",
        "context_after": "480: \t\t\"trackhash INTEGER,\"       // Track hash\n481: \t\t\"track TEXT,\"              // Track number in album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 480,
        "text": "Track hash",
        "context_before": "478: \t\t\"modified INTEGER,\"        // Date time when file last modified\n479: \t\t\"category INTEGER,\"        // Track category",
        "context_after": "481: \t\t\"track TEXT,\"              // Track number in album\n482: \t\t\"totaltracks TEXT,\"        // Total tracks in album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 481,
        "text": "Track number in album",
        "context_before": "479: \t\t\"category INTEGER,\"        // Track category\n480: \t\t\"trackhash INTEGER,\"       // Track hash",
        "context_after": "482: \t\t\"totaltracks TEXT,\"        // Total tracks in album\n483: \t\t\"disc TEXT,\"               // Disc number"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 482,
        "text": "Total tracks in album",
        "context_before": "480: \t\t\"trackhash INTEGER,\"       // Track hash\n481: \t\t\"track TEXT,\"              // Track number in album",
        "context_after": "483: \t\t\"disc TEXT,\"               // Disc number\n484: \t\t\"totaldiscs TEXT,\"         // Total discs"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 483,
        "text": "Disc number",
        "context_before": "481: \t\t\"track TEXT,\"              // Track number in album\n482: \t\t\"totaltracks TEXT,\"        // Total tracks in album",
        "context_after": "484: \t\t\"totaldiscs TEXT,\"         // Total discs\n485: \t\t\"title TEXT,\"              // Track title"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 484,
        "text": "Total discs",
        "context_before": "482: \t\t\"totaltracks TEXT,\"        // Total tracks in album\n483: \t\t\"disc TEXT,\"               // Disc number",
        "context_after": "485: \t\t\"title TEXT,\"              // Track title\n486: \t\t\"album TEXT,\"              // Track album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 485,
        "text": "Track title",
        "context_before": "483: \t\t\"disc TEXT,\"               // Disc number\n484: \t\t\"totaldiscs TEXT,\"         // Total discs",
        "context_after": "486: \t\t\"album TEXT,\"              // Track album\n487: \t\t\"artist TEXT,\"             // Track artist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 486,
        "text": "Track album",
        "context_before": "484: \t\t\"totaldiscs TEXT,\"         // Total discs\n485: \t\t\"title TEXT,\"              // Track title",
        "context_after": "487: \t\t\"artist TEXT,\"             // Track artist\n488: \t\t\"albumartist TEXT,\"        // Track album artist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 487,
        "text": "Track artist",
        "context_before": "485: \t\t\"title TEXT,\"              // Track title\n486: \t\t\"album TEXT,\"              // Track album",
        "context_after": "488: \t\t\"albumartist TEXT,\"        // Track album artist\n489: \t\t\"composer TEXT,\"           // Track composer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 488,
        "text": "Track album artist",
        "context_before": "486: \t\t\"album TEXT,\"              // Track album\n487: \t\t\"artist TEXT,\"             // Track artist",
        "context_after": "489: \t\t\"composer TEXT,\"           // Track composer\n490: \t\t\"genre TEXT,\"              // Track genre"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 489,
        "text": "Track composer",
        "context_before": "487: \t\t\"artist TEXT,\"             // Track artist\n488: \t\t\"albumartist TEXT,\"        // Track album artist",
        "context_after": "490: \t\t\"genre TEXT,\"              // Track genre\n491: \t\t\"year TEXT,\"               // Track release year"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 490,
        "text": "Track genre",
        "context_before": "488: \t\t\"albumartist TEXT,\"        // Track album artist\n489: \t\t\"composer TEXT,\"           // Track composer",
        "context_after": "491: \t\t\"year TEXT,\"               // Track release year\n492: \t\t\"bpm TEXT,\"                // Track BPM"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 491,
        "text": "Track release year",
        "context_before": "489: \t\t\"composer TEXT,\"           // Track composer\n490: \t\t\"genre TEXT,\"              // Track genre",
        "context_after": "492: \t\t\"bpm TEXT,\"                // Track BPM\n493: \t\t\"compilation TEXT,\"        // Track Part of Compilation"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 492,
        "text": "Track BPM",
        "context_before": "490: \t\t\"genre TEXT,\"              // Track genre\n491: \t\t\"year TEXT,\"               // Track release year",
        "context_after": "493: \t\t\"compilation TEXT,\"        // Track Part of Compilation\n494: \t\t\"publisher TEXT,\"          // Track publisher"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 493,
        "text": "Track Part of Compilation",
        "context_before": "491: \t\t\"year TEXT,\"               // Track release year\n492: \t\t\"bpm TEXT,\"                // Track BPM",
        "context_after": "494: \t\t\"publisher TEXT,\"          // Track publisher\n495: \t\t\"conductor TEXT,\"          // Track conductor"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 494,
        "text": "Track publisher",
        "context_before": "492: \t\t\"bpm TEXT,\"                // Track BPM\n493: \t\t\"compilation TEXT,\"        // Track Part of Compilation",
        "context_after": "495: \t\t\"conductor TEXT,\"          // Track conductor\n496: \t\t\"lyricist TEXT,\"           // Track lyricist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 495,
        "text": "Track conductor",
        "context_before": "493: \t\t\"compilation TEXT,\"        // Track Part of Compilation\n494: \t\t\"publisher TEXT,\"          // Track publisher",
        "context_after": "496: \t\t\"lyricist TEXT,\"           // Track lyricist\n497: \t\t\"remixer TEXT,\"            // Track remixer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 496,
        "text": "Track lyricist",
        "context_before": "494: \t\t\"publisher TEXT,\"          // Track publisher\n495: \t\t\"conductor TEXT,\"          // Track conductor",
        "context_after": "497: \t\t\"remixer TEXT,\"            // Track remixer\n498: \t\t\"grouping TEXT,\"           // Track grouping"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 497,
        "text": "Track remixer",
        "context_before": "495: \t\t\"conductor TEXT,\"          // Track conductor\n496: \t\t\"lyricist TEXT,\"           // Track lyricist",
        "context_after": "498: \t\t\"grouping TEXT,\"           // Track grouping\n499: \t\t\"subtitle TEXT,\"           // Track subtitle"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 498,
        "text": "Track grouping",
        "context_before": "496: \t\t\"lyricist TEXT,\"           // Track lyricist\n497: \t\t\"remixer TEXT,\"            // Track remixer",
        "context_after": "499: \t\t\"subtitle TEXT,\"           // Track subtitle\n500: \t\t\"copyright TEXT,\"          // Track copyright"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 499,
        "text": "Track subtitle",
        "context_before": "497: \t\t\"remixer TEXT,\"            // Track remixer\n498: \t\t\"grouping TEXT,\"           // Track grouping",
        "context_after": "500: \t\t\"copyright TEXT,\"          // Track copyright\n501: \t\t\"encodedby TEXT,\"          // Track encoded by"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 501,
        "text": "Track encoded by",
        "context_before": "499: \t\t\"subtitle TEXT,\"           // Track subtitle\n500: \t\t\"copyright TEXT,\"          // Track copyright",
        "context_after": "502: \t\t\"comment TEXT,\"            // Track comment\n503: \t\t\"duration INTEGER,\"        // Track time length"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 502,
        "text": "Track comment",
        "context_before": "500: \t\t\"copyright TEXT,\"          // Track copyright\n501: \t\t\"encodedby TEXT,\"          // Track encoded by",
        "context_after": "503: \t\t\"duration INTEGER,\"        // Track time length\n504: \t\t\"channels INTEGER,\"        // Track number of channels"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 503,
        "text": "Track time length",
        "context_before": "501: \t\t\"encodedby TEXT,\"          // Track encoded by\n502: \t\t\"comment TEXT,\"            // Track comment",
        "context_after": "504: \t\t\"channels INTEGER,\"        // Track number of channels\n505: \t\t\"bitrate INTEGER,\"         // Track bitrate"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 504,
        "text": "Track number of channels",
        "context_before": "502: \t\t\"comment TEXT,\"            // Track comment\n503: \t\t\"duration INTEGER,\"        // Track time length",
        "context_after": "505: \t\t\"bitrate INTEGER,\"         // Track bitrate\n506: \t\t\"samplerate INTEGER,\"      // Track sample rate"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 505,
        "text": "Track bitrate",
        "context_before": "503: \t\t\"duration INTEGER,\"        // Track time length\n504: \t\t\"channels INTEGER,\"        // Track number of channels",
        "context_after": "506: \t\t\"samplerate INTEGER,\"      // Track sample rate\n507: \t\t\"rating INTEGER,\"          // Track rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 506,
        "text": "Track sample rate",
        "context_before": "504: \t\t\"channels INTEGER,\"        // Track number of channels\n505: \t\t\"bitrate INTEGER,\"         // Track bitrate",
        "context_after": "507: \t\t\"rating INTEGER,\"          // Track rating\n508: \t\t\"loverating INTEGER,\"      // Track love rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 507,
        "text": "Track rating",
        "context_before": "505: \t\t\"bitrate INTEGER,\"         // Track bitrate\n506: \t\t\"samplerate INTEGER,\"      // Track sample rate",
        "context_after": "508: \t\t\"loverating INTEGER,\"      // Track love rating\n509: \t\t\"albumrating INTEGER,\"     // Album rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 508,
        "text": "Track love rating",
        "context_before": "506: \t\t\"samplerate INTEGER,\"      // Track sample rate\n507: \t\t\"rating INTEGER,\"          // Track rating",
        "context_after": "509: \t\t\"albumrating INTEGER,\"     // Album rating\n510: \t\t\"folderrating INTEGER,\"    // Folder rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 509,
        "text": "Album rating",
        "context_before": "507: \t\t\"rating INTEGER,\"          // Track rating\n508: \t\t\"loverating INTEGER,\"      // Track love rating",
        "context_after": "510: \t\t\"folderrating INTEGER,\"    // Folder rating\n511: \t\t\"playcount INTEGER,\"       // Track play count"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 510,
        "text": "Folder rating",
        "context_before": "508: \t\t\"loverating INTEGER,\"      // Track love rating\n509: \t\t\"albumrating INTEGER,\"     // Album rating",
        "context_after": "511: \t\t\"playcount INTEGER,\"       // Track play count\n512: \t\t\"lastplayed INTEGER,\"      // Track date time of last play"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 511,
        "text": "Track play count",
        "context_before": "509: \t\t\"albumrating INTEGER,\"     // Album rating\n510: \t\t\"folderrating INTEGER,\"    // Folder rating",
        "context_after": "512: \t\t\"lastplayed INTEGER,\"      // Track date time of last play\n513: \t\t\"skipcount INTEGER,\"       // Track skin count"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 512,
        "text": "Track date time of last play",
        "context_before": "510: \t\t\"folderrating INTEGER,\"    // Folder rating\n511: \t\t\"playcount INTEGER,\"       // Track play count",
        "context_after": "513: \t\t\"skipcount INTEGER,\"       // Track skin count\n514: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 513,
        "text": "Track skin count",
        "context_before": "511: \t\t\"playcount INTEGER,\"       // Track play count\n512: \t\t\"lastplayed INTEGER,\"      // Track date time of last play",
        "context_after": "514: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip\n515: \t\t\"bookmark INTEGER,\"        // Track bookmark"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 514,
        "text": "Track date time of last skip",
        "context_before": "512: \t\t\"lastplayed INTEGER,\"      // Track date time of last play\n513: \t\t\"skipcount INTEGER,\"       // Track skin count",
        "context_after": "515: \t\t\"bookmark INTEGER,\"        // Track bookmark\n516: \t\t\"replaygain TEXT,\"         // ReplayGain values"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 515,
        "text": "Track bookmark",
        "context_before": "513: \t\t\"skipcount INTEGER,\"       // Track skin count\n514: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip",
        "context_after": "516: \t\t\"replaygain TEXT,\"         // ReplayGain values\n517: \t\t\"equalizer TEXT,\"          // Track equalizer settings"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 516,
        "text": "ReplayGain values",
        "context_before": "514: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip\n515: \t\t\"bookmark INTEGER,\"        // Track bookmark",
        "context_after": "517: \t\t\"equalizer TEXT,\"          // Track equalizer settings\n518: \t\t\"keywords TEXT);\"          // Keywords/tags for track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 517,
        "text": "Track equalizer settings",
        "context_before": "515: \t\t\"bookmark INTEGER,\"        // Track bookmark\n516: \t\t\"replaygain TEXT,\"         // ReplayGain values",
        "context_after": "518: \t\t\"keywords TEXT);\"          // Keywords/tags for track\n519: \t);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 518,
        "text": "Keywords/tags for track",
        "context_before": "516: \t\t\"replaygain TEXT,\"         // ReplayGain values\n517: \t\t\"equalizer TEXT,\"          // Track equalizer settings",
        "context_after": "519: \t);\n520: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 540,
        "text": "Track ID (Primary key)",
        "context_before": "538: \tSQLRequest::Exec(db,\n539: \t\t\"CREATE TABLE IF NOT EXISTS smartlist (\"",
        "context_after": "541: \t\t\"idlib INTEGER,\"           // Track ID in the library database\n542: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 541,
        "text": "Track ID in the library database",
        "context_before": "539: \t\t\"CREATE TABLE IF NOT EXISTS smartlist (\"\n540: \t\t\"id INTEGER PRIMARY KEY AUTOINCREMENT,\" // Track ID (Primary key)",
        "context_after": "542: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)\n543: \t\t\"added INTEGER,\"           // Date time when added to the smartlist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 542,
        "text": "Track index (for order in the playlist)",
        "context_before": "540: \t\t\"id INTEGER PRIMARY KEY AUTOINCREMENT,\" // Track ID (Primary key)\n541: \t\t\"idlib INTEGER,\"           // Track ID in the library database",
        "context_after": "543: \t\t\"added INTEGER,\"           // Date time when added to the smartlist\n544: \t\t\"disabled INTEGER,\"        // Disabled state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 543,
        "text": "Date time when added to the smartlist",
        "context_before": "541: \t\t\"idlib INTEGER,\"           // Track ID in the library database\n542: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)",
        "context_after": "544: \t\t\"disabled INTEGER,\"        // Disabled state\n545: \t\t\"collapsed INTEGER);\"      // Collapsed state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 544,
        "text": "Disabled state",
        "context_before": "542: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)\n543: \t\t\"added INTEGER,\"           // Date time when added to the smartlist",
        "context_after": "545: \t\t\"collapsed INTEGER);\"      // Collapsed state\n546: \t);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 545,
        "text": "Collapsed state",
        "context_before": "543: \t\t\"added INTEGER,\"           // Date time when added to the smartlist\n544: \t\t\"disabled INTEGER,\"        // Disabled state",
        "context_after": "546: \t);\n547: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 582,
        "text": "Create the folder for playlists",
        "context_before": "580: \tfolder += L\"Playlists\";\n581: ",
        "context_after": "583: \tFileSystem::CreateDir(folder);\n584: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 605,
        "text": "std::random_device randomDevice;",
        "context_before": "603: \t}\n604: ",
        "context_after": "606: \tauto randomSeed = std::chrono::system_clock::now().time_since_epoch().count();\n607: \tstd::mt19937 randomEngine((unsigned)randomSeed);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 611,
        "text": "Try to create database three times in the case of matching file names",
        "context_before": "609: \tauto randomHex = [&](){return randomInt(randomEngine);};\n610: ",
        "context_after": "612: \tfor (int i = 0; i < 3; ++i)\n613: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 614,
        "text": "Generate 4 random numbers",
        "context_before": "612: \tfor (int i = 0; i < 3; ++i)\n613: \t{",
        "context_after": "615: \t\tint random1 = randomHex();\n616: \t\tint random2 = randomHex();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 620,
        "text": "Make a database name from the random numbers",
        "context_before": "618: \t\tint random4 = randomHex();\n619: ",
        "context_after": "621: \t\tstd::wstring random = StringEx::Format(L\"%.2x%.2x%.2x%.2x\", random1, random2, random3, random4);\n622: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 630,
        "text": "Create a new database (if a database with the same name doesn't exist)",
        "context_before": "628: \t\tSQLFile dbNew;\n629: ",
        "context_after": "631: \t\tif (!FileSystem::Exists(file))\n632: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 662,
        "text": "Load all elements",
        "context_before": "660: \t\tif (xmlMain)\n661: \t\t{",
        "context_after": "663: \t\t\tfor (XmlNode xmlNode = xmlMain.FirstChild(\"Play\"); xmlNode; xmlNode = xmlNode.NextChild(\"Play\"))\n664: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 687,
        "text": "Playlists are disabled",
        "context_before": "685: \tTreeNodeUnsafe playNode = skinTree->GetPlaylistNode();\n686: ",
        "context_after": "688: \t\treturn false;\n689: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 720,
        "text": "Delete the database file",
        "context_before": "718: \tif (focusNode)\n719: \t{",
        "context_after": "721: \t\tstd::wstring file = profilePath;\n722: \t\tfile += L\"Playlists\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 728,
        "text": "If the file has been deleted then delete the node",
        "context_before": "726: \t\tif (FileSystem::RemoveFile(file))\n727: \t\t{",
        "context_after": "729: \t\t\tskinTree->DeleteSelected(skinTree->GetFocusNode());\n730: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 731,
        "text": "And save new nodes state",
        "context_before": "729: \t\t\tskinTree->DeleteSelected(skinTree->GetFocusNode());\n730: ",
        "context_after": "732: \t\t\tSavePlaylist(skinTree);\n733: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 746,
        "text": "1. Update flag",
        "context_before": "744: \n745: ",
        "context_after": "747: \tsqlInsert.BindNull(1);\n748: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 749,
        "text": "2. Date time when added to the library",
        "context_before": "747: \tsqlInsert.BindNull(1);\n748: ",
        "context_after": "750: \tassert(tags->added != 0);\n751: \tsqlInsert.BindInt64(2, tags->added);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 753,
        "text": "3. CUE",
        "context_before": "751: \tsqlInsert.BindInt64(2, tags->added);\n752: ",
        "context_after": "754: \tif (tags->cue)\n755: \t\tsqlInsert.BindInt64(3, tags->cue);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 759,
        "text": "4. File hash",
        "context_before": "757: \t\tsqlInsert.BindNull(3);\n758: ",
        "context_after": "760: \tsqlInsert.BindInt(4, tags->fileHash);\n761: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 762,
        "text": "5. File path",
        "context_before": "760: \tsqlInsert.BindInt(4, tags->fileHash);\n761: ",
        "context_after": "763: \tassert(!tags->path.empty());\n764: \tsqlInsert.BindText8(5, tags->path);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 766,
        "text": "6. File name",
        "context_before": "764: \tsqlInsert.BindText8(5, tags->path);\n765: ",
        "context_after": "767: \tassert(!tags->file.empty());\n768: \tsqlInsert.BindText8(6, tags->file);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 770,
        "text": "7. File size",
        "context_before": "768: \tsqlInsert.BindText8(6, tags->file);\n769: ",
        "context_after": "771: \tsqlInsert.BindInt64(7, tags->size);\n772: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 773,
        "text": "8. Date time when file last modified",
        "context_before": "771: \tsqlInsert.BindInt64(7, tags->size);\n772: ",
        "context_after": "774: \tassert(tags->modified != 0);\n775: \tsqlInsert.BindInt64(8, tags->modified);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 777,
        "text": "9. Track hash",
        "context_before": "775: \tsqlInsert.BindInt64(8, tags->modified);\n776: ",
        "context_after": "778: \tsqlInsert.BindInt(9, tags->trackHash);\n779: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 780,
        "text": "10. Track number",
        "context_before": "778: \tsqlInsert.BindInt(9, tags->trackHash);\n779: ",
        "context_after": "781: \tif (!tags->track.empty())\n782: \t\tsqlInsert.BindText8(10, tags->track);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 786,
        "text": "11. Total tracks",
        "context_before": "784: \t\tsqlInsert.BindNull(10);\n785: ",
        "context_after": "787: \tif (!tags->totalTracks.empty())\n788: \t\tsqlInsert.BindText8(11, tags->totalTracks);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 792,
        "text": "12. Disc number",
        "context_before": "790: \t\tsqlInsert.BindNull(11);\n791: ",
        "context_after": "793: \tif (!tags->disc.empty())\n794: \t\tsqlInsert.BindText8(12, tags->disc);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 798,
        "text": "13. Total discs",
        "context_before": "796: \t\tsqlInsert.BindNull(12);\n797: ",
        "context_after": "799: \tif (!tags->totalDiscs.empty())\n800: \t\tsqlInsert.BindText8(13, tags->totalDiscs);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 804,
        "text": "14. Track title",
        "context_before": "802: \t\tsqlInsert.BindNull(13);\n803: ",
        "context_after": "805: \tif (!tags->title.empty())\n806: \t\tsqlInsert.BindText8(14, tags->title);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 810,
        "text": "15. Track album",
        "context_before": "808: \t\tsqlInsert.BindNull(14);\n809: ",
        "context_after": "811: \tif (!tags->album.empty())\n812: \t\tsqlInsert.BindText8(15, tags->album);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 816,
        "text": "16. Track artist",
        "context_before": "814: \t\tsqlInsert.BindNull(15);\n815: ",
        "context_after": "817: \tif (!tags->artist.empty())\n818: \t\tsqlInsert.BindText8(16, tags->artist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 822,
        "text": "17. Track album artist",
        "context_before": "820: \t\tsqlInsert.BindNull(16);\n821: ",
        "context_after": "823: \tif (!tags->albumArtist.empty())\n824: \t\tsqlInsert.BindText8(17, tags->albumArtist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 828,
        "text": "18. Track composer",
        "context_before": "826: \t\tsqlInsert.BindNull(17);\n827: ",
        "context_after": "829: \tif (!tags->composer.empty())\n830: \t\tsqlInsert.BindText8(18, tags->composer);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 834,
        "text": "19. Track genre",
        "context_before": "832: \t\tsqlInsert.BindNull(18);\n833: ",
        "context_after": "835: \tif (!tags->genre.empty())\n836: \t\tsqlInsert.BindText8(19, tags->genre);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 840,
        "text": "20. Track release year",
        "context_before": "838: \t\tsqlInsert.BindNull(19);\n839: ",
        "context_after": "841: \tif (!tags->year.empty())\n842: \t\tsqlInsert.BindText8(20, tags->year);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 846,
        "text": "21. Track BPM",
        "context_before": "844: \t\tsqlInsert.BindNull(20);\n845: ",
        "context_after": "847: \tif (!tags->bpm.empty())\n848: \t\tsqlInsert.BindText8(21, tags->bpm);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 852,
        "text": "22. Track compilation",
        "context_before": "850: \t\tsqlInsert.BindNull(21);\n851: ",
        "context_after": "853: \tif (!tags->compilation.empty())\n854: \t\tsqlInsert.BindText8(22, tags->compilation);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 858,
        "text": "23. Track publisher",
        "context_before": "856: \t\tsqlInsert.BindNull(22);\n857: ",
        "context_after": "859: \tif (!tags->publisher.empty())\n860: \t\tsqlInsert.BindText8(23, tags->publisher);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 864,
        "text": "24. Track conductor",
        "context_before": "862: \t\tsqlInsert.BindNull(23);\n863: ",
        "context_after": "865: \tif (!tags->conductor.empty())\n866: \t\tsqlInsert.BindText8(24, tags->conductor);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 870,
        "text": "25. Track lyricist",
        "context_before": "868: \t\tsqlInsert.BindNull(24);\n869: ",
        "context_after": "871: \tif (!tags->lyricist.empty())\n872: \t\tsqlInsert.BindText8(25, tags->lyricist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 876,
        "text": "26. Track remixer",
        "context_before": "874: \t\tsqlInsert.BindNull(25);\n875: ",
        "context_after": "877: \tif (!tags->remixer.empty())\n878: \t\tsqlInsert.BindText8(26, tags->remixer);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 882,
        "text": "27. Track grouping",
        "context_before": "880: \t\tsqlInsert.BindNull(26);\n881: ",
        "context_after": "883: \tif (!tags->grouping.empty())\n884: \t\tsqlInsert.BindText8(27, tags->grouping);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 888,
        "text": "28. Track subtitle",
        "context_before": "886: \t\tsqlInsert.BindNull(27);\n887: ",
        "context_after": "889: \tif (!tags->subtitle.empty())\n890: \t\tsqlInsert.BindText8(28, tags->subtitle);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 900,
        "text": "30. Track encoded by",
        "context_before": "898: \t\tsqlInsert.BindNull(29);\n899: ",
        "context_after": "901: \tif (!tags->encodedby.empty())\n902: \t\tsqlInsert.BindText8(30, tags->encodedby);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 906,
        "text": "31. Track comment",
        "context_before": "904: \t\tsqlInsert.BindNull(30);\n905: ",
        "context_after": "907: \tif (!tags->comment.empty())\n908: \t\tsqlInsert.BindText8(31, tags->comment);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 912,
        "text": "32. Track time length",
        "context_before": "910: \t\tsqlInsert.BindNull(31);\n911: ",
        "context_after": "913: \tsqlInsert.BindInt(32, tags->duration);\n914: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 915,
        "text": "33. Track number of channels",
        "context_before": "913: \tsqlInsert.BindInt(32, tags->duration);\n914: ",
        "context_after": "916: \tsqlInsert.BindInt(33, tags->channels);\n917: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 918,
        "text": "34. Track bitrate",
        "context_before": "916: \tsqlInsert.BindInt(33, tags->channels);\n917: ",
        "context_after": "919: \tsqlInsert.BindInt(34, tags->bitrate);\n920: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 921,
        "text": "35. Track sample rate",
        "context_before": "919: \tsqlInsert.BindInt(34, tags->bitrate);\n920: ",
        "context_after": "922: \tsqlInsert.BindInt(35, tags->samplerate);\n923: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 960,
        "text": "1. Track index (for order in the playlist)",
        "context_before": "958: \n959: ",
        "context_after": "961: \tsqlInsert.BindInt(1, index);\n962: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 963,
        "text": "2. Date time when added to the library",
        "context_before": "961: \tsqlInsert.BindInt(1, index);\n962: ",
        "context_after": "964: \tassert(tags->added != 0);\n965: \tsqlInsert.BindInt64(2, tags->added);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 967,
        "text": "3. CUE",
        "context_before": "965: \tsqlInsert.BindInt64(2, tags->added);\n966: ",
        "context_after": "968: \tif (tags->cue)\n969: \t\tsqlInsert.BindInt64(3, tags->cue);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 973,
        "text": "4. File hash",
        "context_before": "971: \t\tsqlInsert.BindNull(3);\n972: ",
        "context_after": "974: \tsqlInsert.BindInt(4, tags->fileHash);\n975: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 976,
        "text": "5. File path",
        "context_before": "974: \tsqlInsert.BindInt(4, tags->fileHash);\n975: ",
        "context_after": "977: \tassert(!tags->path.empty());\n978: \tsqlInsert.BindText8(5, tags->path);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 980,
        "text": "6. File name",
        "context_before": "978: \tsqlInsert.BindText8(5, tags->path);\n979: ",
        "context_after": "981: \tassert(!tags->file.empty());\n982: \tsqlInsert.BindText8(6, tags->file);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 984,
        "text": "7. File size",
        "context_before": "982: \tsqlInsert.BindText8(6, tags->file);\n983: ",
        "context_after": "985: \tsqlInsert.BindInt64(7, tags->size);\n986: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 987,
        "text": "8. Date time when file last modified",
        "context_before": "985: \tsqlInsert.BindInt64(7, tags->size);\n986: ",
        "context_after": "988: \tassert(tags->modified != 0);\n989: \tsqlInsert.BindInt64(8, tags->modified);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 991,
        "text": "9. Track hash",
        "context_before": "989: \tsqlInsert.BindInt64(8, tags->modified);\n990: ",
        "context_after": "992: \tsqlInsert.BindInt(9, tags->trackHash);\n993: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 994,
        "text": "10. Track number",
        "context_before": "992: \tsqlInsert.BindInt(9, tags->trackHash);\n993: ",
        "context_after": "995: \tif (!tags->track.empty())\n996: \t\tsqlInsert.BindText8(10, tags->track);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1000,
        "text": "11. Total tracks",
        "context_before": "998: \t\tsqlInsert.BindNull(10);\n999: ",
        "context_after": "1001: \tif (!tags->totalTracks.empty())\n1002: \t\tsqlInsert.BindText8(11, tags->totalTracks);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1006,
        "text": "12. Disc number",
        "context_before": "1004: \t\tsqlInsert.BindNull(11);\n1005: ",
        "context_after": "1007: \tif (!tags->disc.empty())\n1008: \t\tsqlInsert.BindText8(12, tags->disc);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1012,
        "text": "13. Total discs",
        "context_before": "1010: \t\tsqlInsert.BindNull(12);\n1011: ",
        "context_after": "1013: \tif (!tags->totalDiscs.empty())\n1014: \t\tsqlInsert.BindText8(13, tags->totalDiscs);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1018,
        "text": "14. Track title",
        "context_before": "1016: \t\tsqlInsert.BindNull(13);\n1017: ",
        "context_after": "1019: \tif (!tags->title.empty())\n1020: \t\tsqlInsert.BindText8(14, tags->title);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1024,
        "text": "15. Track album",
        "context_before": "1022: \t\tsqlInsert.BindNull(14);\n1023: ",
        "context_after": "1025: \tif (!tags->album.empty())\n1026: \t\tsqlInsert.BindText8(15, tags->album);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1030,
        "text": "16. Track artist",
        "context_before": "1028: \t\tsqlInsert.BindNull(15);\n1029: ",
        "context_after": "1031: \tif (!tags->artist.empty())\n1032: \t\tsqlInsert.BindText8(16, tags->artist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1036,
        "text": "17. Track album artist",
        "context_before": "1034: \t\tsqlInsert.BindNull(16);\n1035: ",
        "context_after": "1037: \tif (!tags->albumArtist.empty())\n1038: \t\tsqlInsert.BindText8(17, tags->albumArtist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1042,
        "text": "18. Track composer",
        "context_before": "1040: \t\tsqlInsert.BindNull(17);\n1041: ",
        "context_after": "1043: \tif (!tags->composer.empty())\n1044: \t\tsqlInsert.BindText8(18, tags->composer);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1048,
        "text": "19. Track genre",
        "context_before": "1046: \t\tsqlInsert.BindNull(18);\n1047: ",
        "context_after": "1049: \tif (!tags->genre.empty())\n1050: \t\tsqlInsert.BindText8(19, tags->genre);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1054,
        "text": "20. Track release year",
        "context_before": "1052: \t\tsqlInsert.BindNull(19);\n1053: ",
        "context_after": "1055: \tif (!tags->year.empty())\n1056: \t\tsqlInsert.BindText8(20, tags->year);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1060,
        "text": "21. Track BPM",
        "context_before": "1058: \t\tsqlInsert.BindNull(20);\n1059: ",
        "context_after": "1061: \tif (!tags->bpm.empty())\n1062: \t\tsqlInsert.BindText8(21, tags->bpm);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1066,
        "text": "22. Track compilation",
        "context_before": "1064: \t\tsqlInsert.BindNull(21);\n1065: ",
        "context_after": "1067: \tif (!tags->compilation.empty())\n1068: \t\tsqlInsert.BindText8(22, tags->compilation);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1072,
        "text": "23. Track publisher",
        "context_before": "1070: \t\tsqlInsert.BindNull(22);\n1071: ",
        "context_after": "1073: \tif (!tags->publisher.empty())\n1074: \t\tsqlInsert.BindText8(23, tags->publisher);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1078,
        "text": "24. Track conductor",
        "context_before": "1076: \t\tsqlInsert.BindNull(23);\n1077: ",
        "context_after": "1079: \tif (!tags->conductor.empty())\n1080: \t\tsqlInsert.BindText8(24, tags->conductor);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1084,
        "text": "25. Track lyricist",
        "context_before": "1082: \t\tsqlInsert.BindNull(24);\n1083: ",
        "context_after": "1085: \tif (!tags->lyricist.empty())\n1086: \t\tsqlInsert.BindText8(25, tags->lyricist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1090,
        "text": "26. Track remixer",
        "context_before": "1088: \t\tsqlInsert.BindNull(25);\n1089: ",
        "context_after": "1091: \tif (!tags->remixer.empty())\n1092: \t\tsqlInsert.BindText8(26, tags->remixer);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1096,
        "text": "27. Track grouping",
        "context_before": "1094: \t\tsqlInsert.BindNull(26);\n1095: ",
        "context_after": "1097: \tif (!tags->grouping.empty())\n1098: \t\tsqlInsert.BindText8(27, tags->grouping);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1102,
        "text": "28. Track subtitle",
        "context_before": "1100: \t\tsqlInsert.BindNull(27);\n1101: ",
        "context_after": "1103: \tif (!tags->subtitle.empty())\n1104: \t\tsqlInsert.BindText8(28, tags->subtitle);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1114,
        "text": "30. Track encoded by",
        "context_before": "1112: \t\tsqlInsert.BindNull(29);\n1113: ",
        "context_after": "1115: \tif (!tags->encodedby.empty())\n1116: \t\tsqlInsert.BindText8(30, tags->encodedby);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1120,
        "text": "31. Track comment",
        "context_before": "1118: \t\tsqlInsert.BindNull(30);\n1119: ",
        "context_after": "1121: \tif (!tags->comment.empty())\n1122: \t\tsqlInsert.BindText8(31, tags->comment);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1126,
        "text": "32. Track time length",
        "context_before": "1124: \t\tsqlInsert.BindNull(31);\n1125: ",
        "context_after": "1127: \tsqlInsert.BindInt(32, tags->duration);\n1128: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1129,
        "text": "33. Track number of channels",
        "context_before": "1127: \tsqlInsert.BindInt(32, tags->duration);\n1128: ",
        "context_after": "1130: \tsqlInsert.BindInt(33, tags->channels);\n1131: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1132,
        "text": "34. Track bitrate",
        "context_before": "1130: \tsqlInsert.BindInt(33, tags->channels);\n1131: ",
        "context_after": "1133: \tsqlInsert.BindInt(34, tags->bitrate);\n1134: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1135,
        "text": "35. Track sample rate",
        "context_before": "1133: \tsqlInsert.BindInt(34, tags->bitrate);\n1134: ",
        "context_after": "1136: \tsqlInsert.BindInt(35, tags->samplerate);\n1137: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1145,
        "text": "SQLRequest sqlDeleteM(!isTemp ? dbPlaylist : dbPlayTemp,",
        "context_before": "1143: \t\tlong long lastInsert = (long long)sqlite3_last_insert_rowid(!isTemp ? dbPlaylist.get() : dbPlayTemp.get());\n1144: ",
        "context_after": "1146: \t\t//\t\"DELETE FROM storage WHERE sid=?\");\n1147: \t\t//sqlDeleteM.BindInt64(1, lastInsert);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1146,
        "text": "\"DELETE FROM storage WHERE sid=?\");",
        "context_before": "1144: \n1145: \t\t//SQLRequest sqlDeleteM(!isTemp ? dbPlaylist : dbPlayTemp,",
        "context_after": "1147: \t\t//sqlDeleteM.BindInt64(1, lastInsert);\n1148: \t\t//sqlDeleteM.Step();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1147,
        "text": "sqlDeleteM.BindInt64(1, lastInsert);",
        "context_before": "1145: \t\t//SQLRequest sqlDeleteM(!isTemp ? dbPlaylist : dbPlayTemp,\n1146: \t\t//\t\"DELETE FROM storage WHERE sid=?\");",
        "context_after": "1148: \t\t//sqlDeleteM.Step();\n1149: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1148,
        "text": "sqlDeleteM.Step();",
        "context_before": "1146: \t\t//\t\"DELETE FROM storage WHERE sid=?\");\n1147: \t\t//sqlDeleteM.BindInt64(1, lastInsert);",
        "context_after": "1149: \n1150: \t\tif (!tags->genres.empty() || !tags->artists.empty() || !tags->composers.empty() ||"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1231,
        "text": "Update tags because a file was modified",
        "context_before": "1229: void DBase::UpdateTagsModified(long long id, DATABASE_SONGINFO* tags)\n1230: {",
        "context_after": "1232: \t// We skip \"file\" and \"added\" because the file was just updated.\n1233: \t// Note: We do not change any ratings."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1232,
        "text": "We skip \"file\" and \"added\" because the file was just updated.",
        "context_before": "1230: {\n1231: \t// Update tags because a file was modified",
        "context_after": "1233: \t// Note: We do not change any ratings.\n1234: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1240,
        "text": "17. Track ID which we update",
        "context_before": "1238: \t\t\"remixer=?,grouping=?,subtitle=?,copyright=?,encodedby=?,comment=?,duration=?,channels=?,bitrate=?,samplerate=? WHERE id=?;\");\n1239: ",
        "context_after": "1241: \tsqlUpdate.BindInt64(32, id);\n1242: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1243,
        "text": "1. Update flag",
        "context_before": "1241: \tsqlUpdate.BindInt64(32, id);\n1242: ",
        "context_after": "1244: \tsqlUpdate.BindNull(1);\n1245: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1246,
        "text": "2. CUE",
        "context_before": "1244: \tsqlUpdate.BindNull(1);\n1245: ",
        "context_after": "1247: \tif (tags->cue)\n1248: \t\tsqlUpdate.BindInt64(2, tags->cue);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1252,
        "text": "3. File size",
        "context_before": "1250: \t\tsqlUpdate.BindNull(2);\n1251: ",
        "context_after": "1253: \tsqlUpdate.BindInt64(3, tags->size);\n1254: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1255,
        "text": "4. Date time when file last modified",
        "context_before": "1253: \tsqlUpdate.BindInt64(3, tags->size);\n1254: ",
        "context_after": "1256: \tassert(tags->modified != 0);\n1257: \tsqlUpdate.BindInt64(4, tags->modified);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1259,
        "text": "5. Track hash",
        "context_before": "1257: \tsqlUpdate.BindInt64(4, tags->modified);\n1258: ",
        "context_after": "1260: \tsqlUpdate.BindInt(5, tags->trackHash);\n1261: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1262,
        "text": "6. Track number in album",
        "context_before": "1260: \tsqlUpdate.BindInt(5, tags->trackHash);\n1261: ",
        "context_after": "1263: \tif (!tags->track.empty())\n1264: \t\tsqlUpdate.BindText8(6, tags->track);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1268,
        "text": "7. Total tracks in album",
        "context_before": "1266: \t\tsqlUpdate.BindNull(6);\n1267: ",
        "context_after": "1269: \tif (!tags->totalTracks.empty())\n1270: \t\tsqlUpdate.BindText8(7, tags->totalTracks);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1274,
        "text": "8. Disc number",
        "context_before": "1272: \t\tsqlUpdate.BindNull(7);\n1273: ",
        "context_after": "1275: \tif (!tags->disc.empty())\n1276: \t\tsqlUpdate.BindText8(8, tags->disc);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1280,
        "text": "9. Total discs",
        "context_before": "1278: \t\tsqlUpdate.BindNull(8);\n1279: ",
        "context_after": "1281: \tif (!tags->totalDiscs.empty())\n1282: \t\tsqlUpdate.BindText8(9, tags->totalDiscs);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1286,
        "text": "10. Track title",
        "context_before": "1284: \t\tsqlUpdate.BindNull(9);\n1285: ",
        "context_after": "1287: \tif (!tags->title.empty())\n1288: \t\tsqlUpdate.BindText8(10, tags->title);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1292,
        "text": "11. Track album",
        "context_before": "1290: \t\tsqlUpdate.BindNull(10);\n1291: ",
        "context_after": "1293: \tif (!tags->album.empty())\n1294: \t\tsqlUpdate.BindText8(11, tags->album);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1298,
        "text": "12. Track artist",
        "context_before": "1296: \t\tsqlUpdate.BindNull(11);\n1297: ",
        "context_after": "1299: \tif (!tags->artist.empty())\n1300: \t\tsqlUpdate.BindText8(12, tags->artist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1304,
        "text": "13. Track album artist",
        "context_before": "1302: \t\tsqlUpdate.BindNull(12);\n1303: ",
        "context_after": "1305: \tif (!tags->albumArtist.empty())\n1306: \t\tsqlUpdate.BindText8(13, tags->albumArtist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1310,
        "text": "14. Track composer",
        "context_before": "1308: \t\tsqlUpdate.BindNull(13);\n1309: ",
        "context_after": "1311: \tif (!tags->composer.empty())\n1312: \t\tsqlUpdate.BindText8(14, tags->composer);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1316,
        "text": "15. Track genre",
        "context_before": "1314: \t\tsqlUpdate.BindNull(14);\n1315: ",
        "context_after": "1317: \tif (!tags->genre.empty())\n1318: \t\tsqlUpdate.BindText8(15, tags->genre);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1322,
        "text": "16. Track release year",
        "context_before": "1320: \t\tsqlUpdate.BindNull(15);\n1321: ",
        "context_after": "1323: \tif (!tags->year.empty())\n1324: \t\tsqlUpdate.BindText8(16, tags->year);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1328,
        "text": "17. Track BPM",
        "context_before": "1326: \t\tsqlUpdate.BindNull(16);\n1327: ",
        "context_after": "1329: \tif (!tags->bpm.empty())\n1330: \t\tsqlUpdate.BindText8(17, tags->bpm);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1334,
        "text": "18. Track compilation",
        "context_before": "1332: \t\tsqlUpdate.BindNull(17);\n1333: ",
        "context_after": "1335: \tif (!tags->bpm.empty())\n1336: \t\tsqlUpdate.BindText8(18, tags->bpm);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1340,
        "text": "19. Track publisher",
        "context_before": "1338: \t\tsqlUpdate.BindNull(18);\n1339: ",
        "context_after": "1341: \tif (!tags->publisher.empty())\n1342: \t\tsqlUpdate.BindText8(19, tags->publisher);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1346,
        "text": "20. Track conductor",
        "context_before": "1344: \t\tsqlUpdate.BindNull(19);\n1345: ",
        "context_after": "1347: \tif (!tags->conductor.empty())\n1348: \t\tsqlUpdate.BindText8(20, tags->conductor);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1352,
        "text": "21. Track lyricist",
        "context_before": "1350: \t\tsqlUpdate.BindNull(20);\n1351: ",
        "context_after": "1353: \tif (!tags->lyricist.empty())\n1354: \t\tsqlUpdate.BindText8(21, tags->lyricist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1358,
        "text": "22. Track remixer",
        "context_before": "1356: \t\tsqlUpdate.BindNull(21);\n1357: ",
        "context_after": "1359: \tif (!tags->remixer.empty())\n1360: \t\tsqlUpdate.BindText8(22, tags->remixer);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1364,
        "text": "23. Track grouping",
        "context_before": "1362: \t\tsqlUpdate.BindNull(22);\n1363: ",
        "context_after": "1365: \tif (!tags->grouping.empty())\n1366: \t\tsqlUpdate.BindText8(23, tags->grouping);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1370,
        "text": "24. Track subtitle",
        "context_before": "1368: \t\tsqlUpdate.BindNull(23);\n1369: ",
        "context_after": "1371: \tif (!tags->subtitle.empty())\n1372: \t\tsqlUpdate.BindText8(24, tags->subtitle);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1382,
        "text": "26. Track encoded by",
        "context_before": "1380: \t\tsqlUpdate.BindNull(25);\n1381: ",
        "context_after": "1383: \tif (!tags->encodedby.empty())\n1384: \t\tsqlUpdate.BindText8(26, tags->encodedby);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1388,
        "text": "27. Track comment",
        "context_before": "1386: \t\tsqlUpdate.BindNull(26);\n1387: ",
        "context_after": "1389: \tif (!tags->comment.empty())\n1390: \t\tsqlUpdate.BindText8(27, tags->comment);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1395,
        "text": "28. Track time length",
        "context_before": "1393: \n1394: ",
        "context_after": "1396: \tsqlUpdate.BindInt(28, tags->duration);\n1397: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1398,
        "text": "29. Track number of channels",
        "context_before": "1396: \tsqlUpdate.BindInt(28, tags->duration);\n1397: ",
        "context_after": "1399: \tsqlUpdate.BindInt(29, tags->channels);\n1400: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1401,
        "text": "30. Track bitrate",
        "context_before": "1399: \tsqlUpdate.BindInt(29, tags->channels);\n1400: ",
        "context_after": "1402: \tsqlUpdate.BindInt(30, tags->bitrate);\n1403: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1404,
        "text": "31. Track sample rate",
        "context_before": "1402: \tsqlUpdate.BindInt(30, tags->bitrate);\n1403: ",
        "context_after": "1405: \tsqlUpdate.BindInt(31, tags->samplerate);\n1406: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1432,
        "text": "Update tags because a file was moved",
        "context_before": "1430: void DBase::UpdateTagsFileMove(long long id, DATABASE_SONGINFO* tags)\n1431: {",
        "context_after": "1433: \t// Note: We do not change any ratings.\n1434: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1441,
        "text": "26. Track ID which we update",
        "context_before": "1439: \n1440: ",
        "context_after": "1442: \tsqlUpdate.BindInt64(36, id);\n1443: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1444,
        "text": "1. Update flag",
        "context_before": "1442: \tsqlUpdate.BindInt64(36, id);\n1443: ",
        "context_after": "1445: \tsqlUpdate.BindNull(1);\n1446: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1447,
        "text": "2. Date time when added to the library",
        "context_before": "1445: \tsqlUpdate.BindNull(1);\n1446: ",
        "context_after": "1448: \tassert(tags->added != 0);\n1449: \tsqlUpdate.BindInt64(2, tags->added);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1451,
        "text": "3. CUE",
        "context_before": "1449: \tsqlUpdate.BindInt64(2, tags->added);\n1450: ",
        "context_after": "1452: \tsqlUpdate.BindNull(3);\n1453: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1454,
        "text": "4. File hash",
        "context_before": "1452: \tsqlUpdate.BindNull(3);\n1453: ",
        "context_after": "1455: \tsqlUpdate.BindInt(4, tags->fileHash);\n1456: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1457,
        "text": "5. File path",
        "context_before": "1455: \tsqlUpdate.BindInt(4, tags->fileHash);\n1456: ",
        "context_after": "1458: \tassert(!tags->path.empty());\n1459: \tsqlUpdate.BindText8(5, tags->path);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1461,
        "text": "6. File name",
        "context_before": "1459: \tsqlUpdate.BindText8(5, tags->path);\n1460: ",
        "context_after": "1462: \tassert(!tags->file.empty());\n1463: \tsqlUpdate.BindText8(6, tags->file);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1465,
        "text": "7. File size",
        "context_before": "1463: \tsqlUpdate.BindText8(6, tags->file);\n1464: ",
        "context_after": "1466: \tsqlUpdate.BindInt64(7, tags->size);\n1467: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1468,
        "text": "8. Date time when file last modified",
        "context_before": "1466: \tsqlUpdate.BindInt64(7, tags->size);\n1467: ",
        "context_after": "1469: \tassert(tags->modified != 0);\n1470: \tsqlUpdate.BindInt64(8, tags->modified);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1472,
        "text": "9. Track hash",
        "context_before": "1470: \tsqlUpdate.BindInt64(8, tags->modified);\n1471: ",
        "context_after": "1473: \tsqlUpdate.BindInt(9, tags->trackHash);\n1474: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1475,
        "text": "10. Track number in album",
        "context_before": "1473: \tsqlUpdate.BindInt(9, tags->trackHash);\n1474: ",
        "context_after": "1476: \tif (!tags->track.empty())\n1477: \t\tsqlUpdate.BindText8(10, tags->track);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1481,
        "text": "11. Total tracks in album",
        "context_before": "1479: \t\tsqlUpdate.BindNull(10);\n1480: ",
        "context_after": "1482: \tif (!tags->totalTracks.empty())\n1483: \t\tsqlUpdate.BindText8(11, tags->totalTracks);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1487,
        "text": "12. Disc number",
        "context_before": "1485: \t\tsqlUpdate.BindNull(11);\n1486: ",
        "context_after": "1488: \tif (!tags->disc.empty())\n1489: \t\tsqlUpdate.BindText8(12, tags->disc);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1493,
        "text": "13. Total discs",
        "context_before": "1491: \t\tsqlUpdate.BindNull(12);\n1492: ",
        "context_after": "1494: \tif (!tags->totalDiscs.empty())\n1495: \t\tsqlUpdate.BindText8(13, tags->totalDiscs);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1499,
        "text": "14. Track title",
        "context_before": "1497: \t\tsqlUpdate.BindNull(13);\n1498: ",
        "context_after": "1500: \tif (!tags->title.empty())\n1501: \t\tsqlUpdate.BindText8(14, tags->title);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1505,
        "text": "15. Track album",
        "context_before": "1503: \t\tsqlUpdate.BindNull(14);\n1504: ",
        "context_after": "1506: \tif (!tags->album.empty())\n1507: \t\tsqlUpdate.BindText8(15, tags->album);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1511,
        "text": "16. Track artist",
        "context_before": "1509: \t\tsqlUpdate.BindNull(15);\n1510: ",
        "context_after": "1512: \tif (!tags->artist.empty())\n1513: \t\tsqlUpdate.BindText8(16, tags->artist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1517,
        "text": "17. Track album artist",
        "context_before": "1515: \t\tsqlUpdate.BindNull(16);\n1516: ",
        "context_after": "1518: \tif (!tags->albumArtist.empty())\n1519: \t\tsqlUpdate.BindText8(17, tags->albumArtist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1523,
        "text": "18. Track composer",
        "context_before": "1521: \t\tsqlUpdate.BindNull(17);\n1522: ",
        "context_after": "1524: \tif (!tags->composer.empty())\n1525: \t\tsqlUpdate.BindText8(18, tags->composer);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1529,
        "text": "19. Track genre",
        "context_before": "1527: \t\tsqlUpdate.BindNull(18);\n1528: ",
        "context_after": "1530: \tif (!tags->genre.empty())\n1531: \t\tsqlUpdate.BindText8(19, tags->genre);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1535,
        "text": "20. Track release year",
        "context_before": "1533: \t\tsqlUpdate.BindNull(19);\n1534: ",
        "context_after": "1536: \tif (!tags->year.empty())\n1537: \t\tsqlUpdate.BindText8(20, tags->year);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1541,
        "text": "21. Track BPM",
        "context_before": "1539: \t\tsqlUpdate.BindNull(20);\n1540: ",
        "context_after": "1542: \tif (!tags->bpm.empty())\n1543: \t\tsqlUpdate.BindText8(21, tags->bpm);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1547,
        "text": "22. Track compilation",
        "context_before": "1545: \t\tsqlUpdate.BindNull(21);\n1546: ",
        "context_after": "1548: \tif (!tags->compilation.empty())\n1549: \t\tsqlUpdate.BindText8(22, tags->compilation);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1553,
        "text": "23. Track publisher",
        "context_before": "1551: \t\tsqlUpdate.BindNull(22);\n1552: ",
        "context_after": "1554: \tif (!tags->publisher.empty())\n1555: \t\tsqlUpdate.BindText8(23, tags->publisher);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1559,
        "text": "24. Track conductor",
        "context_before": "1557: \t\tsqlUpdate.BindNull(23);\n1558: ",
        "context_after": "1560: \tif (!tags->conductor.empty())\n1561: \t\tsqlUpdate.BindText8(24, tags->conductor);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1565,
        "text": "25. Track lyricist",
        "context_before": "1563: \t\tsqlUpdate.BindNull(24);\n1564: ",
        "context_after": "1566: \tif (!tags->lyricist.empty())\n1567: \t\tsqlUpdate.BindText8(25, tags->lyricist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1571,
        "text": "26. Track remixer",
        "context_before": "1569: \t\tsqlUpdate.BindNull(25);\n1570: ",
        "context_after": "1572: \tif (!tags->remixer.empty())\n1573: \t\tsqlUpdate.BindText8(26, tags->remixer);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1577,
        "text": "27 Track grouping",
        "context_before": "1575: \t\tsqlUpdate.BindNull(26);\n1576: ",
        "context_after": "1578: \tif (!tags->grouping.empty())\n1579: \t\tsqlUpdate.BindText8(27, tags->grouping);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1583,
        "text": "28. Track subtitle",
        "context_before": "1581: \t\tsqlUpdate.BindNull(27);\n1582: ",
        "context_after": "1584: \tif (!tags->subtitle.empty())\n1585: \t\tsqlUpdate.BindText8(28, tags->subtitle);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1595,
        "text": "30. Track encoded by",
        "context_before": "1593: \t\tsqlUpdate.BindNull(29);\n1594: ",
        "context_after": "1596: \tif (!tags->encodedby.empty())\n1597: \t\tsqlUpdate.BindText8(30, tags->encodedby);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1601,
        "text": "31. Track comment",
        "context_before": "1599: \t\tsqlUpdate.BindNull(30);\n1600: ",
        "context_after": "1602: \tif (!tags->comment.empty())\n1603: \t\tsqlUpdate.BindText8(31, tags->comment);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1608,
        "text": "32. Track time length",
        "context_before": "1606: \n1607: ",
        "context_after": "1609: \tsqlUpdate.BindInt(32, tags->duration);\n1610: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1611,
        "text": "33. Track number of channels",
        "context_before": "1609: \tsqlUpdate.BindInt(32, tags->duration);\n1610: ",
        "context_after": "1612: \tsqlUpdate.BindInt(33, tags->channels);\n1613: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1614,
        "text": "34. Track bitrate",
        "context_before": "1612: \tsqlUpdate.BindInt(33, tags->channels);\n1613: ",
        "context_after": "1615: \tsqlUpdate.BindInt(34, tags->bitrate);\n1616: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1617,
        "text": "35. Track sample rate",
        "context_before": "1615: \tsqlUpdate.BindInt(34, tags->bitrate);\n1616: ",
        "context_after": "1618: \tsqlUpdate.BindInt(35, tags->samplerate);\n1619: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1708,
        "text": "Update library",
        "context_before": "1706: bool DBase::UpdateCueLibrary(bool noDrive, const std::wstring& path, const std::wstring& file, int hash)\n1707: {",
        "context_after": "1709: \tSQLRequest sqlSelectLib(dbLibrary,\n1710: \t\t\"SELECT id,cue FROM library WHERE filehash=? AND file=? COLLATE FILECASE AND path=? COLLATE FILECASE;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1732,
        "text": "DeleteCueImage do the same job, but to make sure also use this",
        "context_before": "1730: \t\tSetUpdateOK(id);\n1731: ",
        "context_after": "1733: \t\tif (sqlSelectLib.ColumnIsNull(1))\n1734: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1971,
        "text": "Previously I used flag column for this, but it very slow when update flag for entire database",
        "context_before": "1969: void DBase::SetUpdateAll()\n1970: {",
        "context_after": "1972: \t// from other thread (for 60000 tracks, 4 sec from main thread, and 40+ sec! from other). So now I use temp table.\n1973: \t//SQLRequest::Exec(dbLibrary, \"UPDATE library SET flag=1 WHERE flag IS NULL;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1972,
        "text": "from other thread (for 60000 tracks, 4 sec from main thread, and 40+ sec! from other). So now I use temp table.",
        "context_before": "1970: {\n1971: \t// Previously I used flag column for this, but it very slow when update flag for entire database",
        "context_after": "1973: \t//SQLRequest::Exec(dbLibrary, \"UPDATE library SET flag=1 WHERE flag IS NULL;\");\n1974: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1973,
        "text": "SQLRequest::Exec(dbLibrary, \"UPDATE library SET flag=1 WHERE flag IS NULL;\");",
        "context_before": "1971: \t// Previously I used flag column for this, but it very slow when update flag for entire database\n1972: \t// from other thread (for 60000 tracks, 4 sec from main thread, and 40+ sec! from other). So now I use temp table.",
        "context_after": "1974: \n1975: \tSQLRequest::Exec(dbLibrary, \"CREATE TABLE memory_db.memflag (fpk INTEGER PRIMARY KEY,fid INTEGER,fflag INTEGER);\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1977,
        "text": "With database lock",
        "context_before": "1975: \tSQLRequest::Exec(dbLibrary, \"CREATE TABLE memory_db.memflag (fpk INTEGER PRIMARY KEY,fid INTEGER,fflag INTEGER);\");\n1976: ",
        "context_after": "1978: \tSQLRequest::Exec(dbLibrary, \"INSERT INTO memflag (fid,fflag) SELECT id,1 FROM library;\");\n1979: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1980,
        "text": "Without database lock (test)",
        "context_before": "1978: \tSQLRequest::Exec(dbLibrary, \"INSERT INTO memflag (fid,fflag) SELECT id,1 FROM library;\");\n1979: ",
        "context_after": "1981: \t//SQLRequest sqlSelect(dbLibrary, \"SELECT id FROM library;\");\n1982: \t//SQLRequest sqlInsert(dbLibrary, \"INSERT INTO memflag (fid,fflag) VALUES (?,?);\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1981,
        "text": "SQLRequest sqlSelect(dbLibrary, \"SELECT id FROM library;\");",
        "context_before": "1979: \n1980: \t// Without database lock (test)",
        "context_after": "1982: \t//SQLRequest sqlInsert(dbLibrary, \"INSERT INTO memflag (fid,fflag) VALUES (?,?);\");\n1983: \t//while (sqlSelect.StepRow())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1982,
        "text": "SQLRequest sqlInsert(dbLibrary, \"INSERT INTO memflag (fid,fflag) VALUES (?,?);\");",
        "context_before": "1980: \t// Without database lock (test)\n1981: \t//SQLRequest sqlSelect(dbLibrary, \"SELECT id FROM library;\");",
        "context_after": "1983: \t//while (sqlSelect.StepRow())\n1984: \t//{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1983,
        "text": "while (sqlSelect.StepRow())",
        "context_before": "1981: \t//SQLRequest sqlSelect(dbLibrary, \"SELECT id FROM library;\");\n1982: \t//SQLRequest sqlInsert(dbLibrary, \"INSERT INTO memflag (fid,fflag) VALUES (?,?);\");",
        "context_after": "1984: \t//{\n1985: \t//\tsqlInsert.BindInt64(1, sqlSelect.ColumnInt64(0));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1985,
        "text": "sqlInsert.BindInt64(1, sqlSelect.ColumnInt64(0));",
        "context_before": "1983: \t//while (sqlSelect.StepRow())\n1984: \t//{",
        "context_after": "1986: \t//\tsqlInsert.BindInt(2, 1);\n1987: \t//\tsqlInsert.StepReset();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1986,
        "text": "sqlInsert.BindInt(2, 1);",
        "context_before": "1984: \t//{\n1985: \t//\tsqlInsert.BindInt64(1, sqlSelect.ColumnInt64(0));",
        "context_after": "1987: \t//\tsqlInsert.StepReset();\n1988: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1987,
        "text": "sqlInsert.StepReset();",
        "context_before": "1985: \t//\tsqlInsert.BindInt64(1, sqlSelect.ColumnInt64(0));\n1986: \t//\tsqlInsert.BindInt(2, 1);",
        "context_after": "1988: \t//}\n1989: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2025,
        "text": "and again from other thread. With my tests delete 60000 tracks takes 3+ min, but 20000 only 4 sec",
        "context_before": "2023: {\n2024: \t// It seems SQLite is extremely slow when deleting massive data with indexes",
        "context_after": "2026: \t// It looks like a bug in SQLite. We can drop and recreate indexes here to avoid this, but I don't like it.\n2027: \t// ---"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2026,
        "text": "It looks like a bug in SQLite. We can drop and recreate indexes here to avoid this, but I don't like it.",
        "context_before": "2024: \t// It seems SQLite is extremely slow when deleting massive data with indexes\n2025: \t// and again from other thread. With my tests delete 60000 tracks takes 3+ min, but 20000 only 4 sec",
        "context_after": "2027: \t// ---\n2028: \t// It seems PRAGMA cache_spill=OFF can help, but it increases memory usage of commits, so don't use it."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2029,
        "text": "OK we can just increase cache to avoid this, use PRAGMA cache_size = 10000.",
        "context_before": "2027: \t// ---\n2028: \t// It seems PRAGMA cache_spill=OFF can help, but it increases memory usage of commits, so don't use it.",
        "context_after": "2030: \t// ---\n2031: \t// It seems all the above is not actual for new versions of SQLite, but I'll leave it for history."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2033,
        "text": "With database lock",
        "context_before": "2031: \t// It seems all the above is not actual for new versions of SQLite, but I'll leave it for history.\n2032: ",
        "context_after": "2034: \tSQLRequest::Exec(dbLibrary, \"DELETE FROM library WHERE id IN (SELECT fid FROM memflag WHERE fflag=1);\");\n2035: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2036,
        "text": "Without database lock (test)",
        "context_before": "2034: \tSQLRequest::Exec(dbLibrary, \"DELETE FROM library WHERE id IN (SELECT fid FROM memflag WHERE fflag=1);\");\n2035: ",
        "context_after": "2037: \t//SQLRequest sqlSelect(dbLibrary, \"SELECT fid FROM memflag WHERE fflag=1;\");\n2038: \t//SQLRequest sqlDelete(dbLibrary, \"DELETE FROM library WHERE id=?;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2037,
        "text": "SQLRequest sqlSelect(dbLibrary, \"SELECT fid FROM memflag WHERE fflag=1;\");",
        "context_before": "2035: \n2036: \t// Without database lock (test)",
        "context_after": "2038: \t//SQLRequest sqlDelete(dbLibrary, \"DELETE FROM library WHERE id=?;\");\n2039: \t//while (sqlSelect.StepRow())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2038,
        "text": "SQLRequest sqlDelete(dbLibrary, \"DELETE FROM library WHERE id=?;\");",
        "context_before": "2036: \t// Without database lock (test)\n2037: \t//SQLRequest sqlSelect(dbLibrary, \"SELECT fid FROM memflag WHERE fflag=1;\");",
        "context_after": "2039: \t//while (sqlSelect.StepRow())\n2040: \t//{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2039,
        "text": "while (sqlSelect.StepRow())",
        "context_before": "2037: \t//SQLRequest sqlSelect(dbLibrary, \"SELECT fid FROM memflag WHERE fflag=1;\");\n2038: \t//SQLRequest sqlDelete(dbLibrary, \"DELETE FROM library WHERE id=?;\");",
        "context_after": "2040: \t//{\n2041: \t//\tsqlDelete.BindInt64(1, sqlSelect.ColumnInt64(0));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2041,
        "text": "sqlDelete.BindInt64(1, sqlSelect.ColumnInt64(0));",
        "context_before": "2039: \t//while (sqlSelect.StepRow())\n2040: \t//{",
        "context_after": "2042: \t//\tsqlDelete.StepReset();\n2043: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2042,
        "text": "sqlDelete.StepReset();",
        "context_before": "2040: \t//{\n2041: \t//\tsqlDelete.BindInt64(1, sqlSelect.ColumnInt64(0));",
        "context_after": "2043: \t//}\n2044: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2053,
        "text": "With database lock",
        "context_before": "2051: void DBase::RestoreDeleted()\n2052: {",
        "context_after": "2054: \tSQLRequest::Exec(dbLibrary, \"UPDATE library SET deleted=NULL WHERE deleted=1;\");\n2055: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2056,
        "text": "Without database lock (test)",
        "context_before": "2054: \tSQLRequest::Exec(dbLibrary, \"UPDATE library SET deleted=NULL WHERE deleted=1;\");\n2055: ",
        "context_after": "2057: \t//SQLRequest sqlSelect(dbLibrary, \"SELECT id FROM library WHERE deleted=1;\");\n2058: \t//SQLRequest sqlUpdate(dbLibrary, \"UPDATE library SET deleted=NULL WHERE id=?;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2057,
        "text": "SQLRequest sqlSelect(dbLibrary, \"SELECT id FROM library WHERE deleted=1;\");",
        "context_before": "2055: \n2056: \t// Without database lock (test)",
        "context_after": "2058: \t//SQLRequest sqlUpdate(dbLibrary, \"UPDATE library SET deleted=NULL WHERE id=?;\");\n2059: \t//while (sqlSelect.StepRow())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2058,
        "text": "SQLRequest sqlUpdate(dbLibrary, \"UPDATE library SET deleted=NULL WHERE id=?;\");",
        "context_before": "2056: \t// Without database lock (test)\n2057: \t//SQLRequest sqlSelect(dbLibrary, \"SELECT id FROM library WHERE deleted=1;\");",
        "context_after": "2059: \t//while (sqlSelect.StepRow())\n2060: \t//{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2059,
        "text": "while (sqlSelect.StepRow())",
        "context_before": "2057: \t//SQLRequest sqlSelect(dbLibrary, \"SELECT id FROM library WHERE deleted=1;\");\n2058: \t//SQLRequest sqlUpdate(dbLibrary, \"UPDATE library SET deleted=NULL WHERE id=?;\");",
        "context_after": "2060: \t//{\n2061: \t//\tsqlUpdate.BindInt64(1, sqlSelect.ColumnInt64(0));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2061,
        "text": "sqlUpdate.BindInt64(1, sqlSelect.ColumnInt64(0));",
        "context_before": "2059: \t//while (sqlSelect.StepRow())\n2060: \t//{",
        "context_after": "2062: \t//\tsqlUpdate.StepReset();\n2063: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2062,
        "text": "sqlUpdate.StepReset();",
        "context_before": "2060: \t//{\n2061: \t//\tsqlUpdate.BindInt64(1, sqlSelect.ColumnInt64(0));",
        "context_after": "2063: \t//}\n2064: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2068,
        "text": "With database lock",
        "context_before": "2066: void DBase::DeleteLibFromPls()\n2067: {",
        "context_after": "2069: \tSQLRequest::Exec(dbLibrary, \"DELETE FROM library WHERE id IN (SELECT fid FROM memflag WHERE fflag=1) AND deleted=1;\");\n2070: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2071,
        "text": "Without database lock (test)",
        "context_before": "2069: \tSQLRequest::Exec(dbLibrary, \"DELETE FROM library WHERE id IN (SELECT fid FROM memflag WHERE fflag=1) AND deleted=1;\");\n2070: ",
        "context_after": "2072: \t//SQLRequest sqlSelect(dbLibrary, \"SELECT fid FROM memflag WHERE fflag=1;\");\n2073: \t//SQLRequest sqlDelete(dbLibrary, \"DELETE FROM library WHERE id=? AND deleted=1;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2072,
        "text": "SQLRequest sqlSelect(dbLibrary, \"SELECT fid FROM memflag WHERE fflag=1;\");",
        "context_before": "2070: \n2071: \t// Without database lock (test)",
        "context_after": "2073: \t//SQLRequest sqlDelete(dbLibrary, \"DELETE FROM library WHERE id=? AND deleted=1;\");\n2074: \t//while (sqlSelect.StepRow())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2073,
        "text": "SQLRequest sqlDelete(dbLibrary, \"DELETE FROM library WHERE id=? AND deleted=1;\");",
        "context_before": "2071: \t// Without database lock (test)\n2072: \t//SQLRequest sqlSelect(dbLibrary, \"SELECT fid FROM memflag WHERE fflag=1;\");",
        "context_after": "2074: \t//while (sqlSelect.StepRow())\n2075: \t//{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2074,
        "text": "while (sqlSelect.StepRow())",
        "context_before": "2072: \t//SQLRequest sqlSelect(dbLibrary, \"SELECT fid FROM memflag WHERE fflag=1;\");\n2073: \t//SQLRequest sqlDelete(dbLibrary, \"DELETE FROM library WHERE id=? AND deleted=1;\");",
        "context_after": "2075: \t//{\n2076: \t//\tsqlDelete.BindInt64(1, sqlSelect.ColumnInt64(0));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2076,
        "text": "sqlDelete.BindInt64(1, sqlSelect.ColumnInt64(0));",
        "context_before": "2074: \t//while (sqlSelect.StepRow())\n2075: \t//{",
        "context_after": "2077: \t//\tsqlDelete.StepReset();\n2078: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2077,
        "text": "sqlDelete.StepReset();",
        "context_before": "2075: \t//{\n2076: \t//\tsqlDelete.BindInt64(1, sqlSelect.ColumnInt64(0));",
        "context_after": "2078: \t//}\n2079: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2134,
        "text": "Adjust the rating",
        "context_before": "2132: void DBase::SetRating(long long idLibrary, long long idPlaylist, int rating, bool isPlay)\n2133: {",
        "context_after": "2135: \trating = std::max(0, std::min(5, rating));\n2136: \trating *= 20;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2138,
        "text": "Set rating in the library",
        "context_before": "2136: \trating *= 20;\n2137: ",
        "context_after": "2139: \t{\n2140: \t\tSQLRequest sqlUpdate(dbLibrary,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2148,
        "text": "Set rating in the playlist",
        "context_before": "2146: \t\tsqlUpdate.Step();\n2147: \t}",
        "context_after": "2149: \t{\n2150: \t\tif (isPlay && dbPlayOpen) // In the playing playlist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2150,
        "text": "In the playing playlist",
        "context_before": "2148: \telse if (idPlaylist) // Set rating in the playlist\n2149: \t{",
        "context_after": "2151: \t\t{\n2152: \t\t\tSQLRequest sqlUpdate(dbPlayOpen,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2160,
        "text": "In the current playlist",
        "context_before": "2158: \t\t\tsqlUpdate.Step();\n2159: \t\t}",
        "context_after": "2161: \t\t{\n2162: \t\t\tSQLRequest sqlUpdate(dbPlaylist,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2177,
        "text": "Increase play count in the library",
        "context_before": "2175: \tlong long timeNow = FileSystem::GetTimeNow();\n2176: ",
        "context_after": "2178: \t{\n2179: \t\tSQLRequest sqlUpdate(dbLibrary,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2187,
        "text": "Increase play count in the playlist",
        "context_before": "2185: \t\tsqlUpdate.Step();\n2186: \t}",
        "context_after": "2188: \t{\n2189: \t\tif (dbPlayOpen) // In the playing playlist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2189,
        "text": "In the playing playlist",
        "context_before": "2187: \telse if (idPlaylist) // Increase play count in the playlist\n2188: \t{",
        "context_after": "2190: \t\t{\n2191: \t\t\tSQLRequest sqlUpdate(dbPlayOpen,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2199,
        "text": "In the current playlist",
        "context_before": "2197: \t\t\tsqlUpdate.Step();\n2198: \t\t}",
        "context_after": "2200: \t\t{\n2201: \t\t\tSQLRequest sqlUpdate(dbPlaylist,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2216,
        "text": "Increase skip count in the library",
        "context_before": "2214: \tlong long timeNow = FileSystem::GetTimeNow();\n2215: ",
        "context_after": "2217: \t{\n2218: \t\tSQLRequest sqlUpdate(dbLibrary,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2226,
        "text": "Increase skip count in the playlist",
        "context_before": "2224: \t\tsqlUpdate.Step();\n2225: \t}",
        "context_after": "2227: \t{\n2228: \t\tif (dbPlayOpen) // In the playing playlist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2228,
        "text": "In the playing playlist",
        "context_before": "2226: \telse if (idPlaylist) // Increase skip count in the playlist\n2227: \t{",
        "context_after": "2229: \t\t{\n2230: \t\t\tSQLRequest sqlUpdate(dbPlayOpen,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2238,
        "text": "In the current playlist",
        "context_before": "2236: \t\t\tsqlUpdate.Step();\n2237: \t\t}",
        "context_after": "2239: \t\t{\n2240: \t\t\tSQLRequest sqlUpdate(dbPlaylist,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2256,
        "text": "Tags from the library",
        "context_before": "2254: \tSQLRequest sqlSelect;\n2255: ",
        "context_after": "2257: \t{\n2258: \t\tsqlSelect.Prepare(dbLibrary,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2263,
        "text": "Tags from the playlist",
        "context_before": "2261: \t\tsqlSelect.BindInt64(1, idLibrary);\n2262: \t}",
        "context_after": "2264: \t{\n2265: \t\tif (isPlay && dbPlayOpen)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2300,
        "text": "\"SELECT album FROM library WHERE deleted IS NULL GROUP BY album COLLATE MYCASE ORDER BY album COLLATE MYCASE;\");",
        "context_before": "2298: \n2299: \tSQLRequest sqlSelect(dbLibrary,",
        "context_after": "2301: \t\t\"SELECT DISTINCT album COLLATE MYCASE FROM library WHERE deleted IS NULL ORDER BY album COLLATE MYCASE;\");\n2302: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2311,
        "text": "\"SELECT artist FROM library WHERE deleted IS NULL GROUP BY artist COLLATE MYCASE ORDER BY artist COLLATE MYCASE;\");",
        "context_before": "2309: \n2310: \tSQLRequest sqlSelect(dbLibrary,",
        "context_after": "2312: \t\t//\"SELECT DISTINCT IFNULL(albumartist,artist) COLLATE MYCASE FROM library WHERE deleted IS NULL ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE;\");\n2313: \t\t\"SELECT art FROM (\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2312,
        "text": "\"SELECT DISTINCT IFNULL(albumartist,artist) COLLATE MYCASE FROM library WHERE deleted IS NULL ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE;\");",
        "context_before": "2310: \tSQLRequest sqlSelect(dbLibrary,\n2311: \t\t//\"SELECT artist FROM library WHERE deleted IS NULL GROUP BY artist COLLATE MYCASE ORDER BY artist COLLATE MYCASE;\");",
        "context_after": "2313: \t\t\"SELECT art FROM (\"\n2314: \t\t\"SELECT IFNULL(albumartist,artist) AS art FROM library WHERE deleted IS NULL\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2342,
        "text": "\"SELECT genre FROM library WHERE deleted IS NULL GROUP BY genre COLLATE MYCASE ORDER BY genre COLLATE MYCASE;\");",
        "context_before": "2340: \n2341: \tSQLRequest sqlSelect(dbLibrary,",
        "context_after": "2343: \t\t//\"SELECT DISTINCT genre COLLATE MYCASE FROM library WHERE deleted IS NULL ORDER BY genre COLLATE MYCASE;\");\n2344: \t\t\"SELECT gen FROM (\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2343,
        "text": "\"SELECT DISTINCT genre COLLATE MYCASE FROM library WHERE deleted IS NULL ORDER BY genre COLLATE MYCASE;\");",
        "context_before": "2341: \tSQLRequest sqlSelect(dbLibrary,\n2342: \t\t//\"SELECT genre FROM library WHERE deleted IS NULL GROUP BY genre COLLATE MYCASE ORDER BY genre COLLATE MYCASE;\");",
        "context_after": "2344: \t\t\"SELECT gen FROM (\"\n2345: \t\t\"SELECT genre AS gen FROM library WHERE deleted IS NULL\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2358,
        "text": "\"SELECT year FROM library WHERE deleted IS NULL GROUP BY year COLLATE MYCASE ORDER BY year DESC;\");",
        "context_before": "2356: \n2357: \tSQLRequest sqlSelect(dbLibrary,",
        "context_after": "2359: \t\t\"SELECT DISTINCT CAST(year AS INTEGER) FROM library WHERE deleted IS NULL ORDER BY CAST(year AS INTEGER) DESC;\");\n2360: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2554,
        "text": "\" WHERE deleted IS NULL AND album IS ? ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,disc,track;\");",
        "context_before": "2552: \tskinList->DeleteAllNode();\n2553: ",
        "context_after": "2555: \t// As a reminder: ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE can be replaced to\n2556: \t// ORDER BY albumartist COLLATE MYCASE,artist COLLATE MYCASE. Need to test perfomance of both."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2555,
        "text": "As a reminder: ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE can be replaced to",
        "context_before": "2553: \n2554: \t// \" WHERE deleted IS NULL AND album IS ? ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,disc,track;\");",
        "context_after": "2556: \t// ORDER BY albumartist COLLATE MYCASE,artist COLLATE MYCASE. Need to test perfomance of both.\n2557: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2556,
        "text": "ORDER BY albumartist COLLATE MYCASE,artist COLLATE MYCASE. Need to test perfomance of both.",
        "context_before": "2554: \t// \" WHERE deleted IS NULL AND album IS ? ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,disc,track;\");\n2555: \t// As a reminder: ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE can be replaced to",
        "context_after": "2557: \n2558: \tSQLRequest sqlSelect(dbLibrary,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2870,
        "text": "\"SELECT id,file,size,number,title,artist,albumartist,album,year,genre,time,rating FROM library WHERE deleted IS NULL AND IFNULL(albumartist,artist)=? COLLATE LIKECASE ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,year DESC,album COLLATE MYCASE,number LIMIT 1000;\");",
        "context_before": "2868: {\n2869: \tSQLRequest sqlSelect(dbLibrary,",
        "context_after": "2871: \t\t// Further I noticed, if we need to find artist and albumartist separately, if we use \"=\" then it does not work, but if we use \"IS\" then it does, I don't know why. Affect our collation LIKECASE, which doesn't compare but find the substring.\n2872: \t\t//\"SELECT id,file,size,number,title,artist,albumartist,album,year,genre,time,rating FROM library WHERE deleted IS NULL AND (artist IS ?1 COLLATE LIKECASE OR albumartist IS ?1 COLLATE LIKECASE) ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,year DESC,album COLLATE MYCASE,number LIMIT 500;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2872,
        "text": "\"SELECT id,file,size,number,title,artist,albumartist,album,year,genre,time,rating FROM library WHERE deleted IS NULL AND (artist IS ?1 COLLATE LIKECASE OR albumartist IS ?1 COLLATE LIKECASE) ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,year DESC,album COLLATE MYCASE,number LIMIT 500;\");",
        "context_before": "2870: \t\t//\"SELECT id,file,size,number,title,artist,albumartist,album,year,genre,time,rating FROM library WHERE deleted IS NULL AND IFNULL(albumartist,artist)=? COLLATE LIKECASE ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,year DESC,album COLLATE MYCASE,number LIMIT 1000;\");\n2871: \t\t// Further I noticed, if we need to find artist and albumartist separately, if we use \"=\" then it does not work, but if we use \"IS\" then it does, I don't know why. Affect our collation LIKECASE, which doesn't compare but find the substring.",
        "context_after": "2873: \t\t\"SELECT id,cue,path,file,filesize,CAST(track AS INTEGER),CAST(disc AS INTEGER),title,album,artist,albumartist,genre,CAST(year AS INTEGER),duration,rating FROM library\"\n2874: \t\t\" WHERE deleted IS NULL AND (artist IS ?1 COLLATE LIKECASE OR albumartist IS ?1 COLLATE LIKECASE) ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,CAST(year AS INTEGER) DESC,album COLLATE MYCASE,CAST(disc AS INTEGER),CAST(track AS INTEGER) LIMIT 1000;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2876,
        "text": "Reminder: artist LIKE '%'||?||'%'",
        "context_before": "2874: \t\t\" WHERE deleted IS NULL AND (artist IS ?1 COLLATE LIKECASE OR albumartist IS ?1 COLLATE LIKECASE) ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,CAST(year AS INTEGER) DESC,album COLLATE MYCASE,CAST(disc AS INTEGER),CAST(track AS INTEGER) LIMIT 1000;\");\n2875: ",
        "context_after": "2877: \n2878: \tsqlSelect.BindText16(1, value);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2932,
        "text": "Path + File",
        "context_before": "2930: \t\t\treturn;\n2931: ",
        "context_after": "2933: \t\tif (isPortableVersion && file[0] == '?')\n2934: \t\t\tfile[0] = programPath[0];"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2938,
        "text": "Album Artist",
        "context_before": "2936: \t\tint newDisc = sqlSelect.ColumnInt(6);\n2937: \t\tstd::wstring newAlbum = sqlSelect.ColumnText16(8); // Album",
        "context_after": "2939: \n2940: \t\t// When the album changed then add a header for this album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2940,
        "text": "When the album changed then add a header for this album",
        "context_before": "2938: \t\tstd::wstring newArtist = sqlSelect.ColumnText16(10); // Album Artist\n2939: ",
        "context_after": "2941: \t\tif (headNode == nullptr || newDisc != oldDisc ||\n2942: \t\t\t!StringEx::IsEqual(newAlbum, oldAlbum) || !StringEx::IsEqual(newArtist, oldArtist))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2944,
        "text": "Add a header",
        "context_before": "2942: \t\t\t!StringEx::IsEqual(newAlbum, oldAlbum) || !StringEx::IsEqual(newArtist, oldArtist))\n2943: \t\t{",
        "context_after": "2945: \t\t\theadNode = skinList->InsertHead(nullptr, file);\n2946: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2947,
        "text": "Fill texts for the header",
        "context_before": "2945: \t\t\theadNode = skinList->InsertHead(nullptr, file);\n2946: ",
        "context_after": "2948: \t\t\tfor (std::size_t i = 0, size = skinList->skinHead.size(); i < size; ++i)\n2949: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2954,
        "text": "Album artist",
        "context_before": "2952: \t\t\t\tif (type == SkinListElement::Type::Artist)\n2953: \t\t\t\t{",
        "context_after": "2955: \t\t\t\t\tif (text == nullptr) text = sqlSelect.ColumnTextRaw(9); // Artist\n2956: \t\t\t\t\tif (text)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2955,
        "text": "Artist",
        "context_before": "2953: \t\t\t\t{\n2954: \t\t\t\t\tconst char* text = sqlSelect.ColumnTextRaw(10); // Album artist",
        "context_after": "2956: \t\t\t\t\tif (text)\n2957: \t\t\t\t\t\tskinList->SetNodeString2(headNode, type, UTF::UTF16(text));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2996,
        "text": "Album Artist",
        "context_before": "2994: \t\t\t\telse if (type == SkinListElement::Type::ArtistAlbum)\n2995: \t\t\t\t{",
        "context_after": "2997: \t\t\t\t\tif (artist == nullptr) artist = sqlSelect.ColumnTextRaw(9); // Artist\n2998: \t\t\t\t\tconst char* album = sqlSelect.ColumnTextRaw(8); // Album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2997,
        "text": "Artist",
        "context_before": "2995: \t\t\t\t{\n2996: \t\t\t\t\tconst char* artist = sqlSelect.ColumnTextRaw(10); // Album Artist",
        "context_after": "2998: \t\t\t\t\tconst char* album = sqlSelect.ColumnTextRaw(8); // Album\n2999: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3031,
        "text": "We have the header, add a track to it",
        "context_before": "3029: \t\t}\n3030: ",
        "context_after": "3032: \t\tif (headNode)\n3033: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3034,
        "text": "Get track rating and track ID",
        "context_before": "3032: \t\tif (headNode)\n3033: \t\t{",
        "context_after": "3035: \t\t\tlong long idLibrary = sqlSelect.ColumnInt64(0);\n3036: \t\t\tlong long idPlaylist = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3042,
        "text": "Adjust the rating",
        "context_before": "3040: \t\t\tint rating = sqlSelect.ColumnInt(14);\n3041: ",
        "context_after": "3043: \t\t\trating /= 20;\n3044: \t\t\trating = std::max(0, std::min(5, rating));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3050,
        "text": "Add a track",
        "context_before": "3048: \t\t\tunsigned size = (unsigned)sqlSelect.ColumnInt(4);\n3049: ",
        "context_after": "3051: \t\t\tListNodeUnsafe trackNode = skinList->InsertTrack(headNode, file, idLibrary, idPlaylist, rating, time, size, cue);\n3052: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3053,
        "text": "Fill texts for the track",
        "context_before": "3051: \t\t\tListNodeUnsafe trackNode = skinList->InsertTrack(headNode, file, idLibrary, idPlaylist, rating, time, size, cue);\n3052: ",
        "context_after": "3054: \t\t\tfor (std::size_t i = 0, size = skinList->skinTrack.size(); i < size; ++i)\n3055: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3069,
        "text": "File Name",
        "context_before": "3067: \t\t\t\t\tcase SkinListElement::Type::Title: // Title\n3068: \t\t\t\t\t\ttext = sqlSelect.ColumnTextRaw(7);",
        "context_after": "3070: \t\t\t\t\t\tbreak;\n3071: \t\t\t\t\tcase SkinListElement::Type::Album: // Album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3074,
        "text": "Artist",
        "context_before": "3072: \t\t\t\t\t\ttext = sqlSelect.ColumnTextRaw(8);\n3073: \t\t\t\t\t\tbreak;",
        "context_after": "3075: \t\t\t\t\t\ttext = sqlSelect.ColumnTextRaw(10);\n3076: \t\t\t\t\t\tif (text == nullptr) text = sqlSelect.ColumnTextRaw(9);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3084,
        "text": "Track number",
        "context_before": "3082: \t\t\t\t\t\ttext = sqlSelect.ColumnTextRaw(12);\n3083: \t\t\t\t\t\tbreak;",
        "context_after": "3085: \t\t\t\t\t\ttext = sqlSelect.ColumnTextRaw(5);\n3086: \t\t\t\t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3087,
        "text": "Track time length",
        "context_before": "3085: \t\t\t\t\t\ttext = sqlSelect.ColumnTextRaw(5);\n3086: \t\t\t\t\t\tbreak;",
        "context_after": "3088: \t\t\t\t\t\twchar_t str[100];\n3089: \t\t\t\t\t\tswprintf_s(str, L\"%d:%.2d\", time / 60, time % 60);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3099,
        "text": "Artist",
        "context_before": "3097: \t\t\t\telse if (type == SkinListElement::Type::ArtistTitle)\n3098: \t\t\t\t{",
        "context_after": "3100: \t\t\t\t\tif (artist == nullptr) artist = sqlSelect.ColumnTextRaw(10); // Album artist\n3101: \t\t\t\t\tconst char* title = sqlSelect.ColumnTextRaw(7); // Title"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3100,
        "text": "Album artist",
        "context_before": "3098: \t\t\t\t{\n3099: \t\t\t\t\tconst char* artist = sqlSelect.ColumnTextRaw(9); // Artist",
        "context_after": "3101: \t\t\t\t\tconst char* title = sqlSelect.ColumnTextRaw(7); // Title\n3102: \t\t\t\t\tif (title == nullptr) title = sqlSelect.ColumnTextRaw(3); // File Name"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3102,
        "text": "File Name",
        "context_before": "3100: \t\t\t\t\tif (artist == nullptr) artist = sqlSelect.ColumnTextRaw(10); // Album artist\n3101: \t\t\t\t\tconst char* title = sqlSelect.ColumnTextRaw(7); // Title",
        "context_after": "3103: \n3104: \t\t\t\t\tif (artist)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3121,
        "text": "Tags from the library",
        "context_before": "3119: \tconst char *selectM = \"SELECT svalue FROM storage WHERE skey=? AND sid=? ORDER BY sidx;\";\n3120: ",
        "context_after": "3122: \t{\n3123: \t\tsqlSelect.Prepare(dbLibrary,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3131,
        "text": "Tags from the playlist",
        "context_before": "3129: \t\tsqlSelectM.BindInt64(2, idLibrary);\n3130: \t}",
        "context_after": "3132: \t{\n3133: \t\tsqlSelect.Prepare(dbPlaylist,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3205,
        "text": "Select tracks from the playlist on the basis of: first select all linked with the library, then all others, and then sort them by order in the playlist.",
        "context_before": "3203: \tSQLRequest::Exec(dbLibrary, (\"ATTACH DATABASE '\" + fileDB + \"' AS playlist_db;\").c_str());\n3204: ",
        "context_after": "3206: \t// The query is not much optimized, but most of the time the number of tracks in a playlist is not that big, so it doesn't matter.\n3207: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3222,
        "text": "SQLRequest::Exec(dbLibrary, \"DETACH DATABASE playlist_db;\");",
        "context_before": "3220: \tskinList->SetControlRedraw(true);\n3221: ",
        "context_after": "3223: \n3224: \t//////////////////"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3224,
        "text": "////////////////",
        "context_before": "3222: \t//SQLRequest::Exec(dbLibrary, \"DETACH DATABASE playlist_db;\");\n3223: ",
        "context_after": "3225: \t// Experimental: Delete files from the playlist which are not linked with the library\n3226: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3225,
        "text": "Experimental: Delete files from the playlist which are not linked with the library",
        "context_before": "3223: \n3224: \t//////////////////",
        "context_after": "3226: \n3227: \tif (dbPlaylist != dbPlayOpen) // If the playlist is playing the do nothing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3227,
        "text": "If the playlist is playing the do nothing",
        "context_before": "3225: \t// Experimental: Delete files from the playlist which are not linked with the library\n3226: ",
        "context_after": "3228: \t{\n3229: \t\tint tracksCount = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3239,
        "text": "Need to close and reopen the playlist database otherwise DELETE does not work",
        "context_before": "3237: \t\t{\n3238: \t\t\tassert(dbPlaylist != dbPlayOpen);",
        "context_after": "3240: \t\t\t//dbPlaylist.Close();\n3241: \t\t\t//SQLRequest::Exec(dbLibrary, (\"ATTACH DATABASE '\" + fileDB + \"' AS playlist_db;\").c_str());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3240,
        "text": "dbPlaylist.Close();",
        "context_before": "3238: \t\t\tassert(dbPlaylist != dbPlayOpen);\n3239: \t\t\t// Need to close and reopen the playlist database otherwise DELETE does not work",
        "context_after": "3241: \t\t\t//SQLRequest::Exec(dbLibrary, (\"ATTACH DATABASE '\" + fileDB + \"' AS playlist_db;\").c_str());\n3242: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3241,
        "text": "SQLRequest::Exec(dbLibrary, (\"ATTACH DATABASE '\" + fileDB + \"' AS playlist_db;\").c_str());",
        "context_before": "3239: \t\t\t// Need to close and reopen the playlist database otherwise DELETE does not work\n3240: \t\t\t//dbPlaylist.Close();",
        "context_after": "3242: \n3243: \t\t\t// Beware! Never use IN with != in WHERE instead of NOT IN with =="
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3243,
        "text": "Beware! Never use IN with != in WHERE instead of NOT IN with ==",
        "context_before": "3241: \t\t\t//SQLRequest::Exec(dbLibrary, (\"ATTACH DATABASE '\" + fileDB + \"' AS playlist_db;\").c_str());\n3242: ",
        "context_after": "3244: \t\t\tSQLRequest sqlDelete(dbLibrary,\n3245: \t\t\t\t\"DELETE FROM playlist WHERE idlib IS NOT NULL AND id NOT IN (SELECT playlist.id FROM playlist,library\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3249,
        "text": "SQLRequest::Exec(dbLibrary, \"DETACH DATABASE playlist_db;\");",
        "context_before": "3247: \t\t\tsqlDelete.Step();\n3248: ",
        "context_after": "3250: \t\t\t//dbPlaylist.OpenCreate(fileDB);\n3251: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3250,
        "text": "dbPlaylist.OpenCreate(fileDB);",
        "context_before": "3248: \n3249: \t\t\t//SQLRequest::Exec(dbLibrary, \"DETACH DATABASE playlist_db;\");",
        "context_after": "3251: \t\t}\n3252: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3259,
        "text": "To attach in readonly or readwrite mode (by default readwritecreate) SQLite must be compiled with SQLITE_USE_URI=1",
        "context_before": "3257: void DBase::FillPlaylistOpenFile(SkinList* skinList, const std::wstring& file, int start)\n3258: {",
        "context_after": "3260: \t// SQLRequest::Exec(dbLibrary, (\"ATTACH DATABASE 'file:\" + UTF::UTF8S(fileDB) + \"?mode=rw' AS playlist_db;\").c_str());\n3261: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3260,
        "text": "SQLRequest::Exec(dbLibrary, (\"ATTACH DATABASE 'file:\" + UTF::UTF8S(fileDB) + \"?mode=rw' AS playlist_db;\").c_str());",
        "context_before": "3258: {\n3259: \t// To attach in readonly or readwrite mode (by default readwritecreate) SQLite must be compiled with SQLITE_USE_URI=1",
        "context_after": "3261: \n3262: \tstd::wstring fileDB = profilePath + L\"Playlists\" + L\"\\\\\" + file + L\".db\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3313,
        "text": "Get track rating and track ID",
        "context_before": "3311: \twhile (sqlSelect.StepRow())\n3312: \t{",
        "context_after": "3314: \t\tlong long idLibrary = sqlSelect.ColumnInt64(0);\n3315: \t\tlong long idPlaylist = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3321,
        "text": "Adjust the rating",
        "context_before": "3319: \t\tint rating = sqlSelect.ColumnInt(14);\n3320: ",
        "context_after": "3322: \t\trating /= 20;\n3323: \t\trating = std::max(0, std::min(5, rating));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3329,
        "text": "Path + File",
        "context_before": "3327: \t\tunsigned size = (unsigned)sqlSelect.ColumnInt(4);\n3328: ",
        "context_after": "3330: \t\tif (isPortableVersion && file[0] == '?')\n3331: \t\t\tfile[0] = programPath[0];"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3333,
        "text": "Add a track",
        "context_before": "3331: \t\t\tfile[0] = programPath[0];\n3332: ",
        "context_after": "3334: \t\tListNodeUnsafe trackNode = nullptr;\n3335: \t\tif (!isNowPlaying)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3340,
        "text": "Fill texts for the track",
        "context_before": "3338: \t\t\ttrackNode = skinList->InsertTrackToNowPlaying(nullptr, file, idLibrary, idPlaylist, rating, time, size, cue);\n3339: ",
        "context_after": "3341: \t\tfor (std::size_t i = 0, size = skinList->skinTrack.size(); i < size; ++i)\n3342: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3356,
        "text": "File Name",
        "context_before": "3354: \t\t\t\tcase SkinListElement::Type::Title: // Title\n3355: \t\t\t\t\ttext = sqlSelect.ColumnTextRaw(7);",
        "context_after": "3357: \t\t\t\t\tbreak;\n3358: \t\t\t\tcase SkinListElement::Type::Album: // Album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3361,
        "text": "Artist",
        "context_before": "3359: \t\t\t\t\ttext = sqlSelect.ColumnTextRaw(8);\n3360: \t\t\t\t\tbreak;",
        "context_after": "3362: \t\t\t\t\ttext = sqlSelect.ColumnTextRaw(9); // Artist\n3363: \t\t\t\t\tif (text == nullptr) sqlSelect.ColumnTextRaw(10); // Album Artist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3362,
        "text": "Artist",
        "context_before": "3360: \t\t\t\t\tbreak;\n3361: \t\t\t\tcase SkinListElement::Type::Artist: // Artist",
        "context_after": "3363: \t\t\t\t\tif (text == nullptr) sqlSelect.ColumnTextRaw(10); // Album Artist\n3364: \t\t\t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3363,
        "text": "Album Artist",
        "context_before": "3361: \t\t\t\tcase SkinListElement::Type::Artist: // Artist\n3362: \t\t\t\t\ttext = sqlSelect.ColumnTextRaw(9); // Artist",
        "context_after": "3364: \t\t\t\t\tbreak;\n3365: \t\t\t\tcase SkinListElement::Type::Genre: // Genre"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3371,
        "text": "Track number",
        "context_before": "3369: \t\t\t\t\ttext = (char*)sqlSelect.ColumnTextRaw(12);\n3370: \t\t\t\t\tbreak;",
        "context_after": "3372: \t\t\t\t\ttext = sqlSelect.ColumnTextRaw(5);\n3373: \t\t\t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3374,
        "text": "Track time length",
        "context_before": "3372: \t\t\t\t\ttext = sqlSelect.ColumnTextRaw(5);\n3373: \t\t\t\t\tbreak;",
        "context_after": "3375: \t\t\t\t\twchar_t str[100];\n3376: \t\t\t\t\tswprintf_s(str, L\"%d:%.2d\", time / 60, time % 60);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3386,
        "text": "Artist",
        "context_before": "3384: \t\t\telse if (type == SkinListElement::Type::ArtistTitle)\n3385: \t\t\t{",
        "context_after": "3387: \t\t\t\tif (artist == nullptr) artist = sqlSelect.ColumnTextRaw(10); // Album Artist\n3388: \t\t\t\tconst char* title = sqlSelect.ColumnTextRaw(7); // Title"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3387,
        "text": "Album Artist",
        "context_before": "3385: \t\t\t{\n3386: \t\t\t\tconst char* artist = sqlSelect.ColumnTextRaw(9); // Artist",
        "context_after": "3388: \t\t\t\tconst char* title = sqlSelect.ColumnTextRaw(7); // Title\n3389: \t\t\t\tif (title == nullptr) title = sqlSelect.ColumnTextRaw(3); // File Name"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3389,
        "text": "File Name",
        "context_before": "3387: \t\t\t\tif (artist == nullptr) artist = sqlSelect.ColumnTextRaw(10); // Album Artist\n3388: \t\t\t\tconst char* title = sqlSelect.ColumnTextRaw(7); // Title",
        "context_after": "3390: \n3391: \t\t\t\tif (artist)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3431,
        "text": "Let's find out if the file belongs to one of the library folders",
        "context_before": "3429: \t\telse\n3430: \t\t{",
        "context_after": "3432: \t\t\tconst std::wstring& file = skinList->GetSelectedAt(i)->GetFile();\n3433: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3590,
        "text": "Get fields from the current playlist",
        "context_before": "3588: \tTempBegin();\n3589: ",
        "context_after": "3591: \tSQLRequest sqlSelect(dbPlaylist,\n3592: \t\t\"SELECT idlib,disabled,collapsed,cue,filehash,path,file,filesize,modified,category,\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3600,
        "text": "Add the fields to another playlist",
        "context_before": "3598: \t\t\" FROM playlist WHERE id=? LIMIT 1;\");\n3599: ",
        "context_after": "3601: \tSQLRequest sqlInsert(dbPlayTemp,\n3602: \t\t\"INSERT INTO playlist (idlib,idx,added,disabled,collapsed,cue,filehash,path,file,filesize,modified,category,\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3723,
        "text": "Add fields to the playlist",
        "context_before": "3721: \tTempBegin();\n3722: ",
        "context_after": "3724: \tSQLRequest sqlInsert(dbPlayTemp,\n3725: \t\t\"INSERT INTO playlist (idx,added,category,file,title,artist,albumartist) VALUES (?,?,?,?,?,?,?);\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3813,
        "text": "sqlite3_create_collation(dbPlaylist.get(), \"MYNUM\", SQLITE_UTF8, nullptr, CompareStringsNum);",
        "context_before": "3811: \t\treturn;\n3812: ",
        "context_after": "3814: \tif (futureWin->IsVistaOrLater())\n3815: \t\tsqlite3_create_collation(dbPlaylist.get(), \"MYCASE\", SQLITE_UTF16LE, nullptr, CompareStrings);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3819,
        "text": "std::wstring fileDB = profilePath + L\"Playlists\" + L\"\\\\\" + name + L\".db\";",
        "context_before": "3817: \t\tsqlite3_create_collation(dbPlaylist.get(), \"MYCASE\", SQLITE_UTF16LE, nullptr, CompareStringsXP);\n3818: ",
        "context_after": "3820: \t//SQLRequest::Exec(dbLibrary, (\"ATTACH DATABASE '\" + UTF::UTF8S(fileDB) + \"' AS playlist_db;\").c_str());\n3821: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3820,
        "text": "SQLRequest::Exec(dbLibrary, (\"ATTACH DATABASE '\" + UTF::UTF8S(fileDB) + \"' AS playlist_db;\").c_str());",
        "context_before": "3818: \n3819: \t//std::wstring fileDB = profilePath + L\"Playlists\" + L\"\\\\\" + name + L\".db\";",
        "context_after": "3821: \n3822: \tSQLRequest sqlSelect(dbPlaylist,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3823,
        "text": "\"SELECT id FROM playlist WHERE idx>? ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,year DESC,album COLLATE MYCASE,number,title COLLATE MYCASE;\");",
        "context_before": "3821: \n3822: \tSQLRequest sqlSelect(dbPlaylist,",
        "context_after": "3824: \t\t//\"SELECT id FROM playlist WHERE idx>? ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,CAST(year AS INTEGER) DESC,album COLLATE MYCASE,path,CAST(disc AS INTEGER),CAST(track AS INTEGER),file;\");\n3825: \t\t\"SELECT playlist.id,library.path,library.file,CAST(library.track AS INTEGER) AS track2,CAST(library.disc AS INTEGER) as disc2,library.album,\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3824,
        "text": "\"SELECT id FROM playlist WHERE idx>? ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,CAST(year AS INTEGER) DESC,album COLLATE MYCASE,path,CAST(disc AS INTEGER),CAST(track AS INTEGER),file;\");",
        "context_before": "3822: \tSQLRequest sqlSelect(dbPlaylist,\n3823: \t\t//\"SELECT id FROM playlist WHERE idx>? ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,year DESC,album COLLATE MYCASE,number,title COLLATE MYCASE;\");",
        "context_after": "3825: \t\t\"SELECT playlist.id,library.path,library.file,CAST(library.track AS INTEGER) AS track2,CAST(library.disc AS INTEGER) as disc2,library.album,\"\n3826: \t\t\"IFNULL(library.albumartist,library.artist) AS artist2,CAST(library.year AS INTEGER) AS year2 FROM playlist,library WHERE playlist.idx>?1 AND playlist.idlib=library.id\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3833,
        "text": "PlayBegin();",
        "context_before": "3831: \tsqlSelect.BindInt(1, start);\n3832: ",
        "context_after": "3834: \n3835: \tSQLRequest sqlUpdate(dbPlaylist,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3846,
        "text": "PlayCommit();",
        "context_before": "3844: \t}\n3845: ",
        "context_after": "3847: \n3848: \t//SQLRequest::Exec(dbLibrary, \"DETACH DATABASE playlist_db;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3848,
        "text": "SQLRequest::Exec(dbLibrary, \"DETACH DATABASE playlist_db;\");",
        "context_before": "3846: \t//PlayCommit();\n3847: ",
        "context_after": "3849: }\n3850: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3866,
        "text": "If not a drive",
        "context_before": "3864: \n3865: \t\tstd::wstring name = path;",
        "context_after": "3867: \t\t{\n3868: \t\t\tname.pop_back();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3886,
        "text": "GROUP BY file COLLATE FOLDER2 ORDER BY file COLLATE FOLDER3;\");// GROUP BY album COLLATE MYCASE ORDER BY album COLLATE MYCASE;\");",
        "context_before": "3884: \n3885: \tSQLRequest sqlSelect(dbLibrary,",
        "context_after": "3887: \n3888: \tsqlSelect.BindText16(1, treeNode->GetValue());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3893,
        "text": "Just in case we check again, the data should be perfect for the algorithm",
        "context_before": "3891: \tTreeNodeUnsafe lastNode = treeNode;\n3892: ",
        "context_after": "3894: \tif (!lastPath.empty() && lastPath.back() != '\\\\')\n3895: \t\tlastPath.push_back('\\\\');"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3904,
        "text": "Uncomment to see what the algorithm do",
        "context_before": "3902: \t\tif (text)\n3903: \t\t{",
        "context_after": "3905: \t\t\t//skinTree->InsertNode(treeNode, UTF::UTF16(text), UTF::UTF16(text));\n3906: \t\t\t//continue;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3905,
        "text": "skinTree->InsertNode(treeNode, UTF::UTF16(text), UTF::UTF16(text));",
        "context_before": "3903: \t\t{\n3904: \t\t\t// Uncomment to see what the algorithm do",
        "context_after": "3906: \t\t\t//continue;\n3907: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3906,
        "text": "continue;",
        "context_before": "3904: \t\t\t// Uncomment to see what the algorithm do\n3905: \t\t\t//skinTree->InsertNode(treeNode, UTF::UTF16(text), UTF::UTF16(text));",
        "context_after": "3907: \n3908: \t\t\tstd::wstring path = UTF::UTF16(text);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3914,
        "text": "Go back through the path to get needed lastNode",
        "context_before": "3912: \t\t\t\tstd::wstring tempPath = path;\n3913: ",
        "context_after": "3915: \t\t\t\tdo\n3916: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3918,
        "text": "For add a drive",
        "context_before": "3916: \t\t\t\t{\n3917: \t\t\t\t\tstd::size_t find = lastPath.rfind('\\\\', lastPath.size() - 2);",
        "context_after": "3919: \t\t\t\t\t{\n3920: \t\t\t\t\t\tlastPath.clear();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3944,
        "text": "Go forward through the path to add a node to the tree",
        "context_before": "3942: \t\t\t}\n3943: ",
        "context_after": "3945: \t\t\tstd::size_t i = lastPath.size();\n3946: \t\t\twhile (i != std::string::npos)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3970,
        "text": "lastNode = skinTree->InsertFolder(lastNode, lang->GetLineS(Lang::Library, 12),",
        "context_before": "3968: \t\t\t\t\t\tif (isPortableVersion && path[0] == '?')\n3969: \t\t\t\t\t\t{",
        "context_after": "3971: \t\t\t\t\t\t\t//\tpath.substr(0, j));\n3972: \t\t\t\t\t\t\tlastNode = skinTree->InsertFolder(lastNode, lang->GetLineS(Lang::Library, 12) +"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3971,
        "text": "path.substr(0, j));",
        "context_before": "3969: \t\t\t\t\t\t{\n3970: \t\t\t\t\t\t\t//lastNode = skinTree->InsertFolder(lastNode, lang->GetLineS(Lang::Library, 12),",
        "context_after": "3972: \t\t\t\t\t\t\tlastNode = skinTree->InsertFolder(lastNode, lang->GetLineS(Lang::Library, 12) +\n3973: \t\t\t\t\t\t\t\tL\" (\" + programPath.substr(0, 2) + L\")\", path.substr(0, j));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3998,
        "text": "LIMIT 5000;\");",
        "context_before": "3996: \tSQLRequest sqlSelect(dbLibrary,\n3997: \t\t\"SELECT id,cue,path,file,filesize,CAST(track AS INTEGER),CAST(disc AS INTEGER),title,album,artist,albumartist,genre,CAST(year AS INTEGER),duration,rating FROM library\"",
        "context_after": "3999: \n4000: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4008,
        "text": "If not a drive",
        "context_before": "4006: \n4007: \tstd::wstring rootFolder = value;",
        "context_after": "4009: \t{\n4010: \t\trootFolder.pop_back();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4025,
        "text": "Path + File",
        "context_before": "4023: \n4024: \t\tstd::wstring path = sqlSelect.ColumnText16(2);",
        "context_after": "4026: \t\tif (isPortableVersion && file[0] == '?')\n4027: \t\t\tfile[0] = programPath[0];"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4028,
        "text": "std::wstring path = file.substr(0, file.rfind('\\\\') + 1);",
        "context_before": "4026: \t\tif (isPortableVersion && file[0] == '?')\n4027: \t\t\tfile[0] = programPath[0];",
        "context_after": "4029: \n4030: \t\t// When the path changed then add a header for this path"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4030,
        "text": "When the path changed then add a header for this path",
        "context_before": "4028: \t\t//std::wstring path = file.substr(0, file.rfind('\\\\') + 1);\n4029: ",
        "context_after": "4031: \t\tif (headNode == nullptr || !StringEx::IsEqual(path, oldPath))\n4032: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4035,
        "text": "Add a header",
        "context_before": "4033: \t\t\toldPath = path;\n4034: ",
        "context_after": "4036: \t\t\theadNode = skinList->InsertHead(nullptr, file);\n4037: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4038,
        "text": "Fill texts for the header",
        "context_before": "4036: \t\t\theadNode = skinList->InsertHead(nullptr, file);\n4037: ",
        "context_after": "4039: \t\t\tfor (std::size_t i = 0, size = skinList->skinHead.size(); i < size; ++i)\n4040: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4076,
        "text": "We have the header, add a track to it",
        "context_before": "4074: \t\t}\n4075: ",
        "context_after": "4077: \t\tif (headNode)\n4078: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4079,
        "text": "Get track rating and track ID",
        "context_before": "4077: \t\tif (headNode)\n4078: \t\t{",
        "context_after": "4080: \t\t\tlong long idLibrary = sqlSelect.ColumnInt64(0);\n4081: \t\t\tint rating = sqlSelect.ColumnInt(14);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4083,
        "text": "Adjust the rating",
        "context_before": "4081: \t\t\tint rating = sqlSelect.ColumnInt(14);\n4082: ",
        "context_after": "4084: \t\t\trating /= 20;\n4085: \t\t\trating = std::max(0, std::min(5, rating));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4091,
        "text": "Add a track",
        "context_before": "4089: \t\t\tunsigned size = (unsigned)sqlSelect.ColumnInt(4);\n4090: ",
        "context_after": "4092: \t\t\tListNodeUnsafe trackNode = skinList->InsertTrack(headNode, file, idLibrary, 0, rating, time, size, cue);\n4093: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4094,
        "text": "Fill texts for the track",
        "context_before": "4092: \t\t\tListNodeUnsafe trackNode = skinList->InsertTrack(headNode, file, idLibrary, 0, rating, time, size, cue);\n4093: ",
        "context_after": "4095: \t\t\tfor (std::size_t i = 0, size = skinList->skinTrack.size(); i < size; ++i)\n4096: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4110,
        "text": "File Name",
        "context_before": "4108: \t\t\t\t\tcase SkinListElement::Type::Title: // Title\n4109: \t\t\t\t\t\ttext = sqlSelect.ColumnTextRaw(7);",
        "context_after": "4111: \t\t\t\t\t\tbreak;\n4112: \t\t\t\t\tcase SkinListElement::Type::Album: // Album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4115,
        "text": "Artist",
        "context_before": "4113: \t\t\t\t\t\ttext = sqlSelect.ColumnTextRaw(8);\n4114: \t\t\t\t\t\tbreak;",
        "context_after": "4116: \t\t\t\t\t\ttext = sqlSelect.ColumnTextRaw(9); // Artist\n4117: \t\t\t\t\t\tif (text == nullptr) text = sqlSelect.ColumnTextRaw(10); // Album artist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4116,
        "text": "Artist",
        "context_before": "4114: \t\t\t\t\t\tbreak;\n4115: \t\t\t\t\tcase SkinListElement::Type::Artist: // Artist",
        "context_after": "4117: \t\t\t\t\t\tif (text == nullptr) text = sqlSelect.ColumnTextRaw(10); // Album artist\n4118: \t\t\t\t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4117,
        "text": "Album artist",
        "context_before": "4115: \t\t\t\t\tcase SkinListElement::Type::Artist: // Artist\n4116: \t\t\t\t\t\ttext = sqlSelect.ColumnTextRaw(9); // Artist",
        "context_after": "4118: \t\t\t\t\t\tbreak;\n4119: \t\t\t\t\tcase SkinListElement::Type::Genre: // Genre"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4125,
        "text": "Track number",
        "context_before": "4123: \t\t\t\t\t\ttext = sqlSelect.ColumnTextRaw(12);\n4124: \t\t\t\t\t\tbreak;",
        "context_after": "4126: \t\t\t\t\t\ttext = sqlSelect.ColumnTextRaw(5);\n4127: \t\t\t\t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4128,
        "text": "Track time length",
        "context_before": "4126: \t\t\t\t\t\ttext = sqlSelect.ColumnTextRaw(5);\n4127: \t\t\t\t\t\tbreak;",
        "context_after": "4129: \t\t\t\t\t\twchar_t str[100];\n4130: \t\t\t\t\t\tswprintf_s(str, L\"%d:%.2d\", time / 60, time % 60);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4140,
        "text": "Artist",
        "context_before": "4138: \t\t\t\telse if (type == SkinListElement::Type::ArtistTitle)\n4139: \t\t\t\t{",
        "context_after": "4141: \t\t\t\t\tif (artist == nullptr) artist = sqlSelect.ColumnTextRaw(10); // Album artist\n4142: \t\t\t\t\tconst char* title = sqlSelect.ColumnTextRaw(7); // Title"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4141,
        "text": "Album artist",
        "context_before": "4139: \t\t\t\t{\n4140: \t\t\t\t\tconst char* artist = sqlSelect.ColumnTextRaw(9); // Artist",
        "context_after": "4142: \t\t\t\t\tconst char* title = sqlSelect.ColumnTextRaw(7); // Title\n4143: \t\t\t\t\tif (title == nullptr) title = sqlSelect.ColumnTextRaw(3); // File Name"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4143,
        "text": "File Name",
        "context_before": "4141: \t\t\t\t\tif (artist == nullptr) artist = sqlSelect.ColumnTextRaw(10); // Album artist\n4142: \t\t\t\t\tconst char* title = sqlSelect.ColumnTextRaw(7); // Title",
        "context_after": "4144: \n4145: \t\t\t\t\tif (artist)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4163,
        "text": "For year we use a more complicated parsing",
        "context_before": "4161: \t\treturn;\n4162: ",
        "context_after": "4164: \tbool isYears = false;\n4165: \tstd::vector<int> years;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4173,
        "text": "If true then exclude all items",
        "context_before": "4171: \t\tisFolders = true;\n4172: ",
        "context_after": "4174: \tif (!smart.fromString.empty() && smart.fromString[0] == '-')\n4175: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4185,
        "text": "Separate all items separated by '+' (and '-' for year)",
        "context_before": "4183: \tfor (std::size_t i = 0, size = smart.fromString.size(); i <= size; ++i)\n4184: \t{",
        "context_after": "4186: \t\tif (i == size || smart.fromString[i] == '+' || (isYears && smart.fromString[i] == '-'))\n4187: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4209,
        "text": "First, check for incorrect record. For example: 2000-2008-2010",
        "context_before": "4207: \t\t\t\tif (isYears)\n4208: \t\t\t\t{",
        "context_after": "4210: \t\t\t\t\tif (!years.empty() && years.back() == 1)\n4211: \t\t\t\t\t\tyears.push_back(0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4212,
        "text": "Next, mark in years if couple or a single value",
        "context_before": "4210: \t\t\t\t\tif (!years.empty() && years.back() == 1)\n4211: \t\t\t\t\t\tyears.push_back(0);",
        "context_after": "4213: \t\t\t\t\t{\n4214: \t\t\t\t\t\tif (i < size && smart.fromString[i] == '-')"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4224,
        "text": "If years ended with '-', fix it",
        "context_before": "4222: \t}\n4223: ",
        "context_after": "4225: \tif (!years.empty())\n4226: \t\tyears.back() = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4228,
        "text": "If values are empty add null value",
        "context_before": "4226: \t\tyears.back() = 0;\n4227: ",
        "context_after": "4229: \tif (values.empty())\n4230: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4237,
        "text": "For example our first condition (artist=? OR albumartist=?) much slower than (artist IS ? OR albumartist IS ?)",
        "context_before": "4235: \n4236: \t// Note. I don't know why but in SQLite \"IS\" and \"IS NOT\" sometimes works much faster than \"=\" and \"<>\".",
        "context_after": "4238: \t// So we use \"IS\" instead of \"=\". Also we use it in all our conditions because we need a comparison with NULL.\n4239: \t// Also we use \"IS\" in our last condition (file IS ?) because \"=\" doesn't work with multiple values."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4238,
        "text": "So we use \"IS\" instead of \"=\". Also we use it in all our conditions because we need a comparison with NULL.",
        "context_before": "4236: \t// Note. I don't know why but in SQLite \"IS\" and \"IS NOT\" sometimes works much faster than \"=\" and \"<>\".\n4237: \t// For example our first condition (artist=? OR albumartist=?) much slower than (artist IS ? OR albumartist IS ?)",
        "context_after": "4239: \t// Also we use \"IS\" in our last condition (file IS ?) because \"=\" doesn't work with multiple values.\n4240: \t// It doesn't work because we use our own collation COLLATE FSELECT."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4239,
        "text": "Also we use \"IS\" in our last condition (file IS ?) because \"=\" doesn't work with multiple values.",
        "context_before": "4237: \t// For example our first condition (artist=? OR albumartist=?) much slower than (artist IS ? OR albumartist IS ?)\n4238: \t// So we use \"IS\" instead of \"=\". Also we use it in all our conditions because we need a comparison with NULL.",
        "context_after": "4240: \t// It doesn't work because we use our own collation COLLATE FSELECT.\n4241: \t// It seems all that above is not actual with new versions of SQLite, performance is equal. But I leave as is."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4240,
        "text": "It doesn't work because we use our own collation COLLATE FSELECT.",
        "context_before": "4238: \t// So we use \"IS\" instead of \"=\". Also we use it in all our conditions because we need a comparison with NULL.\n4239: \t// Also we use \"IS\" in our last condition (file IS ?) because \"=\" doesn't work with multiple values.",
        "context_after": "4241: \t// It seems all that above is not actual with new versions of SQLite, performance is equal. But I leave as is.\n4242: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4260,
        "text": "Artist",
        "context_before": "4258: \t\tswitch (smart.from)\n4259: \t\t{",
        "context_after": "4261: \t\t{\n4262: \t\t\tstd::string n = std::to_string(i + 1);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4266,
        "text": "request += \"IFNULL(albumartist,artist)=? COLLATE MYCASE\";",
        "context_before": "4264: \t\t\t{\n4265: \t\t\t\tif (!isExclude)",
        "context_after": "4267: \t\t\t\t\t//request += \"(artist=?\"+n+\" COLLATE MYCASE OR albumartist=?\"+n+\" COLLATE MYCASE)\";\n4268: \t\t\t\t\tselect += \"(artist IS ?\"+n+\" COLLATE MYCASE OR albumartist IS ?\"+n+\" COLLATE MYCASE)\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4267,
        "text": "request += \"(artist=?\"+n+\" COLLATE MYCASE OR albumartist=?\"+n+\" COLLATE MYCASE)\";",
        "context_before": "4265: \t\t\t\tif (!isExclude)\n4266: \t\t\t\t\t//request += \"IFNULL(albumartist,artist)=? COLLATE MYCASE\";",
        "context_after": "4268: \t\t\t\t\tselect += \"(artist IS ?\"+n+\" COLLATE MYCASE OR albumartist IS ?\"+n+\" COLLATE MYCASE)\";\n4269: \t\t\t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4270,
        "text": "request += \"IFNULL(albumartist,artist)<>? COLLATE MYCASE\";",
        "context_before": "4268: \t\t\t\t\tselect += \"(artist IS ?\"+n+\" COLLATE MYCASE OR albumartist IS ?\"+n+\" COLLATE MYCASE)\";\n4269: \t\t\t\telse",
        "context_after": "4271: \t\t\t\t\t//request += \"(artist<>?\"+n+\" COLLATE MYCASE AND albumartist<>?\"+n+\" COLLATE MYCASE)\";\n4272: \t\t\t\t\tselect += \"(artist IS NOT ?\"+n+\" COLLATE MYCASE AND albumartist IS NOT ?\"+n+\" COLLATE MYCASE)\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4271,
        "text": "request += \"(artist<>?\"+n+\" COLLATE MYCASE AND albumartist<>?\"+n+\" COLLATE MYCASE)\";",
        "context_before": "4269: \t\t\t\telse\n4270: \t\t\t\t\t//request += \"IFNULL(albumartist,artist)<>? COLLATE MYCASE\";",
        "context_after": "4272: \t\t\t\t\tselect += \"(artist IS NOT ?\"+n+\" COLLATE MYCASE AND albumartist IS NOT ?\"+n+\" COLLATE MYCASE)\";\n4273: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4332,
        "text": "Folder",
        "context_before": "4330: \t\t\t}\n4331: \t\t\tbreak;",
        "context_after": "4333: \t\t\tif (!isExclude)\n4334: \t\t\t\tselect += \"path IS ? COLLATE FSELECT\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4341,
        "text": "if (smart.from == 1) // If from Artists then duplicate all items",
        "context_before": "4339: \t}\n4340: ",
        "context_after": "4342: //\t{\n4343: //\t\tstd::vector<std::wstring> temp(values.size() * 2);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4343,
        "text": "std::vector<std::wstring> temp(values.size() * 2);",
        "context_before": "4341: //\tif (smart.from == 1) // If from Artists then duplicate all items\n4342: //\t{",
        "context_after": "4344: //\t\tfor (std::size_t i = 0, size = values.size(); i < size; ++i)\n4345: //\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4344,
        "text": "for (std::size_t i = 0, size = values.size(); i < size; ++i)",
        "context_before": "4342: //\t{\n4343: //\t\tstd::vector<std::wstring> temp(values.size() * 2);",
        "context_after": "4345: //\t\t{\n4346: //\t\t\ttemp[i * 2]     = values[i];"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4346,
        "text": "temp[i * 2]     = values[i];",
        "context_before": "4344: //\t\tfor (std::size_t i = 0, size = values.size(); i < size; ++i)\n4345: //\t\t{",
        "context_after": "4347: //\t\t\ttemp[i * 2 + 1] = values[i];\n4348: //\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4347,
        "text": "temp[i * 2 + 1] = values[i];",
        "context_before": "4345: //\t\t{\n4346: //\t\t\ttemp[i * 2]     = values[i];",
        "context_after": "4348: //\t\t}\n4349: //\t\tvalues = temp;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4349,
        "text": "values = temp;",
        "context_before": "4347: //\t\t\ttemp[i * 2 + 1] = values[i];\n4348: //\t\t}",
        "context_after": "4350: //\t}\n4351: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4366,
        "text": "Filter to exclude not played, not rated etc. tracks",
        "context_before": "4364: \t\tselect += \"GROUP BY album COLLATE MYCASE HAVING \";\n4365: ",
        "context_after": "4367: \t\tswitch (smart.order)\n4368: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4369,
        "text": "Most Played",
        "context_before": "4367: \t\tswitch (smart.order)\n4368: \t\t{",
        "context_after": "4370: \t\tcase 2: // Rarely Played\n4371: \t\t\tselect += \"SUM(playcount)>0 \";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4370,
        "text": "Rarely Played",
        "context_before": "4368: \t\t{\n4369: \t\tcase 1: // Most Played",
        "context_after": "4371: \t\t\tselect += \"SUM(playcount)>0 \";\n4372: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4373,
        "text": "Top Rated",
        "context_before": "4371: \t\t\tselect += \"SUM(playcount)>0 \";\n4372: \t\t\tbreak;",
        "context_after": "4374: \t\tcase 4: // Lowest Rated\n4375: \t\t\tselect += \"SUM(rating)>0 \";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4374,
        "text": "Lowest Rated",
        "context_before": "4372: \t\t\tbreak;\n4373: \t\tcase 3: // Top Rated",
        "context_after": "4375: \t\t\tselect += \"SUM(rating)>0 \";\n4376: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4391,
        "text": "Equal to",
        "context_before": "4389: \t\tswitch (smart.tracksCount)\n4390: \t\t{",
        "context_after": "4392: \t\t\tselect += \"COUNT(*)=? \";\n4393: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4394,
        "text": "Greater than",
        "context_before": "4392: \t\t\tselect += \"COUNT(*)=? \";\n4393: \t\t\tbreak;",
        "context_after": "4395: \t\t\tselect += \"COUNT(*)>? \";\n4396: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4397,
        "text": "Less than",
        "context_before": "4395: \t\t\tselect += \"COUNT(*)>? \";\n4396: \t\t\tbreak;",
        "context_after": "4398: \t\t\tselect += \"COUNT(*)<? \";\n4399: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4412,
        "text": "Most Played",
        "context_before": "4410: \t\tswitch (smart.order)\n4411: \t\t{",
        "context_after": "4413: \t\t\tselect += \"ORDER BY AVG(IFNULL(playcount,0)) DESC\";\n4414: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4415,
        "text": "Rarely Played",
        "context_before": "4413: \t\t\tselect += \"ORDER BY AVG(IFNULL(playcount,0)) DESC\";\n4414: \t\t\tbreak;",
        "context_after": "4416: \t\t\tselect += \"ORDER BY AVG(IFNULL(playcount,0))\";\n4417: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4418,
        "text": "Top Rated",
        "context_before": "4416: \t\t\tselect += \"ORDER BY AVG(IFNULL(playcount,0))\";\n4417: \t\t\tbreak;",
        "context_after": "4419: \t\t\tselect += \"ORDER BY AVG(IFNULL(rating,0)) DESC\";\n4420: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4421,
        "text": "Lowest Rated",
        "context_before": "4419: \t\t\tselect += \"ORDER BY AVG(IFNULL(rating,0)) DESC\";\n4420: \t\t\tbreak;",
        "context_after": "4422: \t\t\tselect += \"ORDER BY AVG(IFNULL(rating,0))\";\n4423: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4426,
        "text": "Default sorting",
        "context_before": "4424: \t\t}\n4425: \t}",
        "context_after": "4427: \t\tselect += \"ORDER BY artist COLLATE MYCASE,CAST(year AS INTEGER) DESC,album COLLATE MYCASE,CAST(disc AS INTEGER),CAST(track AS INTEGER)\";\n4428: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4456,
        "text": "Filter to exclude not played, not rated etc. tracks",
        "context_before": "4454: \tif (smart.order)\n4455: \t{",
        "context_after": "4457: \t\tswitch (smart.order)\n4458: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4459,
        "text": "Most Played",
        "context_before": "4457: \t\tswitch (smart.order)\n4458: \t\t{",
        "context_after": "4460: \t\tcase 2: // Rarely Played\n4461: \t\t\tif (!smart.playCount) // Only without additional filter"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4460,
        "text": "Rarely Played",
        "context_before": "4458: \t\t{\n4459: \t\tcase 1: // Most Played",
        "context_after": "4461: \t\t\tif (!smart.playCount) // Only without additional filter\n4462: \t\t\t\tselect += \"AND IFNULL(playcount,0)>0 \";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4461,
        "text": "Only without additional filter",
        "context_before": "4459: \t\tcase 1: // Most Played\n4460: \t\tcase 2: // Rarely Played",
        "context_after": "4462: \t\t\t\tselect += \"AND IFNULL(playcount,0)>0 \";\n4463: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4464,
        "text": "Top Rated",
        "context_before": "4462: \t\t\t\tselect += \"AND IFNULL(playcount,0)>0 \";\n4463: \t\t\tbreak;",
        "context_after": "4465: \t\tcase 4: // Lowest Rated\n4466: \t\t\tif (!smart.rating) // Only without additional filter"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4465,
        "text": "Lowest Rated",
        "context_before": "4463: \t\t\tbreak;\n4464: \t\tcase 3: // Top Rated",
        "context_after": "4466: \t\t\tif (!smart.rating) // Only without additional filter\n4467: \t\t\t\tselect += \"AND IFNULL(rating,0)>0 \";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4466,
        "text": "Only without additional filter",
        "context_before": "4464: \t\tcase 3: // Top Rated\n4465: \t\tcase 4: // Lowest Rated",
        "context_after": "4467: \t\t\t\tselect += \"AND IFNULL(rating,0)>0 \";\n4468: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4469,
        "text": "Recently Played",
        "context_before": "4467: \t\t\t\tselect += \"AND IFNULL(rating,0)>0 \";\n4468: \t\t\tbreak;",
        "context_after": "4470: \t\t\tif (!smart.lastPlayed) // Only without additional filter\n4471: \t\t\t\tselect += \"AND lastplayed IS NOT NULL \";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4470,
        "text": "Only without additional filter",
        "context_before": "4468: \t\t\tbreak;\n4469: \t\tcase 5: // Recently Played",
        "context_after": "4471: \t\t\t\tselect += \"AND lastplayed IS NOT NULL \";\n4472: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4473,
        "text": "Recently Added",
        "context_before": "4471: \t\t\t\tselect += \"AND lastplayed IS NOT NULL \";\n4472: \t\t\tbreak;",
        "context_after": "4474: \t\t\tif (!smart.dateAdded) // Only without additional filter\n4475: \t\t\t\tselect += \"AND added IN (SELECT MAX(added) FROM library) \";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4474,
        "text": "Only without additional filter",
        "context_before": "4472: \t\t\tbreak;\n4473: \t\tcase 6: // Recently Added",
        "context_after": "4475: \t\t\t\tselect += \"AND added IN (SELECT MAX(added) FROM library) \";\n4476: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4492,
        "text": "Equal to",
        "context_before": "4490: \t\tswitch (smart.playCount)\n4491: \t\t{",
        "context_after": "4493: \t\t\tselect += \"IFNULL(playcount,0)=?\";\n4494: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4495,
        "text": "Greater than",
        "context_before": "4493: \t\t\tselect += \"IFNULL(playcount,0)=?\";\n4494: \t\t\tbreak;",
        "context_after": "4496: \t\t\tselect += \"IFNULL(playcount,0)>?\";\n4497: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4498,
        "text": "Less than",
        "context_before": "4496: \t\t\tselect += \"IFNULL(playcount,0)>?\";\n4497: \t\t\tbreak;",
        "context_after": "4499: \t\t\tselect += \"IFNULL(playcount,0)<?\";\n4500: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4520,
        "text": "Equal to",
        "context_before": "4518: \t\tswitch (smart.rating)\n4519: \t\t{",
        "context_after": "4521: \t\t\tselect += \"IFNULL(rating,0)=?\";\n4522: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4523,
        "text": "Greater than",
        "context_before": "4521: \t\t\tselect += \"IFNULL(rating,0)=?\";\n4522: \t\t\tbreak;",
        "context_after": "4524: \t\t\tselect += \"IFNULL(rating,0)>?\";\n4525: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4526,
        "text": "Less than",
        "context_before": "4524: \t\t\tselect += \"IFNULL(rating,0)>?\";\n4525: \t\t\tbreak;",
        "context_after": "4527: \t\t\tselect += \"IFNULL(rating,0)<?\";\n4528: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4548,
        "text": "In the last",
        "context_before": "4546: \t\tswitch (smart.lastPlayed)\n4547: \t\t{",
        "context_after": "4549: \t\t\tselect += \"lastplayed>\" + SmartList::GetSmartDate(smart.lastPlayedNum);\n4550: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4551,
        "text": "Before",
        "context_before": "4549: \t\t\tselect += \"lastplayed>\" + SmartList::GetSmartDate(smart.lastPlayedNum);\n4550: \t\t\tbreak;",
        "context_after": "4552: \t\t\tselect += \"lastplayed<\" + SmartList::GetSmartDate(smart.lastPlayedNum);\n4553: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4571,
        "text": "In the last",
        "context_before": "4569: \t\tswitch (smart.dateAdded)\n4570: \t\t{",
        "context_after": "4572: \t\t\tselect += \"added>\" + SmartList::GetSmartDate(smart.dateAddedNum);\n4573: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4574,
        "text": "Before",
        "context_before": "4572: \t\t\tselect += \"added>\" + SmartList::GetSmartDate(smart.dateAddedNum);\n4573: \t\t\tbreak;",
        "context_after": "4575: \t\t\tselect += \"added<\" + SmartList::GetSmartDate(smart.dateAddedNum);\n4576: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4587,
        "text": "Most Played",
        "context_before": "4585: \t\tswitch (smart.order)\n4586: \t\t{",
        "context_after": "4588: \t\t\tselect += \"ORDER BY playcount DESC\";\n4589: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4590,
        "text": "Rarely Played",
        "context_before": "4588: \t\t\tselect += \"ORDER BY playcount DESC\";\n4589: \t\t\tbreak;",
        "context_after": "4591: \t\t\tselect += \"ORDER BY playcount\";\n4592: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4593,
        "text": "Top Rated",
        "context_before": "4591: \t\t\tselect += \"ORDER BY playcount\";\n4592: \t\t\tbreak;",
        "context_after": "4594: \t\t\tselect += \"ORDER BY rating DESC\";\n4595: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4596,
        "text": "Lowest Rated",
        "context_before": "4594: \t\t\tselect += \"ORDER BY rating DESC\";\n4595: \t\t\tbreak;",
        "context_after": "4597: \t\t\tselect += \"ORDER BY rating\";\n4598: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4599,
        "text": "Recently Played",
        "context_before": "4597: \t\t\tselect += \"ORDER BY rating\";\n4598: \t\t\tbreak;",
        "context_after": "4600: \t\t\t// Here we add additional condition in WHERE to exclude not played tracks\n4601: \t\t\tselect += \"ORDER BY lastplayed DESC\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4603,
        "text": "case 6: // Recently Added",
        "context_before": "4601: \t\t\tselect += \"ORDER BY lastplayed DESC\";\n4602: \t\t\tbreak;",
        "context_after": "4604: \t\t//\tselect += \"ORDER BY added DESC\";\n4605: \t\t//\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4604,
        "text": "select += \"ORDER BY added DESC\";",
        "context_before": "4602: \t\t\tbreak;\n4603: \t\t//case 6: // Recently Added",
        "context_after": "4605: \t\t//\tbreak;\n4606: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4605,
        "text": "break;",
        "context_before": "4603: \t\t//case 6: // Recently Added\n4604: \t\t//\tselect += \"ORDER BY added DESC\";",
        "context_after": "4606: \t\t}\n4607: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4608,
        "text": "Default sorting",
        "context_before": "4606: \t\t}\n4607: \t}",
        "context_after": "4609: \t\tselect += \"ORDER BY artist COLLATE MYCASE,CAST(year AS INTEGER) DESC,album COLLATE MYCASE,CAST(disc AS INTEGER),CAST(track AS INTEGER)\";\n4610: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4712,
        "text": "\"SELECT id,path,file,filesize,CAST(track AS INTEGER),CAST(disc AS INTEGER),title,album,artist,albumartist,genre,CAST(year AS INTEGER),duration,rating,cue,filehash FROM library,abm\"",
        "context_before": "4710: \n4711: \t\tSQLRequest sqlSelect(dbLibrary,",
        "context_after": "4713: \t\t\t//\" WHERE album=album2 COLLATE MYCASE ORDER BY id2,CAST(disc AS INTEGER),CAST(track AS INTEGER);\");\n4714: \t\t\t\"SELECT id,cue,path,file,filesize,CAST(track AS INTEGER),CAST(disc AS INTEGER),title,album,artist,albumartist,genre,CAST(year AS INTEGER),duration,rating,cue,filehash FROM library\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4713,
        "text": "\" WHERE album=album2 COLLATE MYCASE ORDER BY id2,CAST(disc AS INTEGER),CAST(track AS INTEGER);\");",
        "context_before": "4711: \t\tSQLRequest sqlSelect(dbLibrary,\n4712: \t\t\t//\"SELECT id,path,file,filesize,CAST(track AS INTEGER),CAST(disc AS INTEGER),title,album,artist,albumartist,genre,CAST(year AS INTEGER),duration,rating,cue,filehash FROM library,abm\"",
        "context_after": "4714: \t\t\t\"SELECT id,cue,path,file,filesize,CAST(track AS INTEGER),CAST(disc AS INTEGER),title,album,artist,albumartist,genre,CAST(year AS INTEGER),duration,rating,cue,filehash FROM library\"\n4715: \t\t\t\" WHERE album COLLATE MYCASE IN (SELECT album2 FROM abm) ORDER BY album COLLATE MYCASE,CAST(disc AS INTEGER),CAST(track AS INTEGER);\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4757,
        "text": "Delete the smartlist database if smartlist changed to auto update",
        "context_before": "4755: \t}\n4756: ",
        "context_after": "4758: \tif (isUpdate && smart.isAutoUpdate)\n4759: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4778,
        "text": "Create the folder for smartlists",
        "context_before": "4776: \tfolder += L\"Smartlists\";\n4777: ",
        "context_after": "4779: \tFileSystem::CreateDir(folder);\n4780: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4788,
        "text": "Try to create database three times in the case of matching file names",
        "context_before": "4786: \tauto randomHex = [&](){return randomInt(randomEngine);};\n4787: ",
        "context_after": "4789: \tfor (int i = 0; i < 3; ++i)\n4790: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4791,
        "text": "Generate 4 random numbers",
        "context_before": "4789: \tfor (int i = 0; i < 3; ++i)\n4790: \t{",
        "context_after": "4792: \t\tint random1 = randomHex();\n4793: \t\tint random2 = randomHex();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4797,
        "text": "Make a database name from the random numbers",
        "context_before": "4795: \t\tint random4 = randomHex();\n4796: ",
        "context_after": "4798: \t\tstd::wstring random = StringEx::Format(L\"%.2x%.2x%.2x%.2x\", random1, random2, random3, random4);\n4799: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4805,
        "text": "Create a new database (if a database with the same name doesn't exist)",
        "context_before": "4803: \t\tfile += L\".xml\";\n4804: ",
        "context_after": "4806: \t\tif (!FileSystem::Exists(file))\n4807: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4827,
        "text": "Create the folder for smartlists",
        "context_before": "4825: \tfolder += L\"Smartlists\";\n4826: ",
        "context_after": "4828: \tFileSystem::CreateDir(folder);\n4829: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4837,
        "text": "Try to create database three times in the case of matching file names",
        "context_before": "4835: \tauto randomHex = [&](){return randomInt(randomEngine);};\n4836: ",
        "context_after": "4838: \tfor (int i = 0; i < 30; ++i)\n4839: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4840,
        "text": "Generate 4 random numbers",
        "context_before": "4838: \tfor (int i = 0; i < 30; ++i)\n4839: \t{",
        "context_after": "4841: \t\tint random1 = randomHex();\n4842: \t\tint random2 = randomHex();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4846,
        "text": "Make a database name from the random numbers",
        "context_before": "4844: \t\tint random4 = randomHex();\n4845: ",
        "context_after": "4847: \t\tstd::wstring random = StringEx::Format(L\"%.2x%.2x%.2x%.2x\", random1, random2, random3, random4);\n4848: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4854,
        "text": "Create a new database (if a database with the same name doesn't exist)",
        "context_before": "4852: \t\tfile +=\tL\".xml\";\n4853: ",
        "context_after": "4855: \t\tif (!FileSystem::Exists(file))\n4856: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5068,
        "text": "Load all elements",
        "context_before": "5066: \t\tif (xmlMain)\n5067: \t\t{",
        "context_after": "5069: \t\t\tfor (XmlNode xmlNode = xmlMain.FirstChild(\"Smart\"); xmlNode; xmlNode = xmlNode.NextChild(\"Smart\"))\n5070: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5091,
        "text": "Smartlists are disabled",
        "context_before": "5089: \tTreeNodeUnsafe smartNode = skinTree->GetSmartlistNode();\n5090: ",
        "context_after": "5092: \t\treturn true;\n5093: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5136,
        "text": "Add fields to the smartlist database",
        "context_before": "5134: \tCreateTableSmartlist(dbSmartlist);\n5135: ",
        "context_after": "5137: \tSQLRequest sqlInsert(dbSmartlist,\n5138: \t\t\"INSERT INTO smartlist (idlib,idx,added) VALUES (?,?,?);\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5166,
        "text": "Delete the database file",
        "context_before": "5164: \tif (focusNode)\n5165: \t{",
        "context_after": "5167: \t\tstd::wstring file = profilePath;\n5168: \t\tfile += L\"Smartlists\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5183,
        "text": "If the file has been deleted then delete the node",
        "context_before": "5181: \t\tif (!dbExists && FileSystem::RemoveFile(file + L\".xml\"))\n5182: \t\t{",
        "context_after": "5184: \t\t\tskinTree->DeleteSelected(skinTree->GetFocusNode());\n5185: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5186,
        "text": "And save new nodes state",
        "context_before": "5184: \t\t\tskinTree->DeleteSelected(skinTree->GetFocusNode());\n5185: ",
        "context_after": "5187: \t\t\tSaveTreeSmartlists(skinTree);\n5188: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5253,
        "text": "Update tags through tags editor (through properties dialog)",
        "context_before": "5251: void DBase::UpdateTagsEditor(long long id, DATABASE_SONGINFO* tags, bool isPlaylist)\n5252: {",
        "context_after": "5254: \t// We skip \"file\" and \"added\" because the file was just updated.\n5255: \t// Note: We do not change any ratings."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5254,
        "text": "We skip \"file\" and \"added\" because the file was just updated.",
        "context_before": "5252: {\n5253: \t// Update tags through tags editor (through properties dialog)",
        "context_after": "5255: \t// Note: We do not change any ratings.\n5256: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5275,
        "text": "26. Track ID which we update",
        "context_before": "5273: \tSQLRequest sqlUpdate(!isPlaylist ? dbLibrary : dbPlaylist, update);\n5274: ",
        "context_after": "5276: \tsqlUpdate.BindInt64(26, id);\n5277: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5278,
        "text": "1. File size",
        "context_before": "5276: \tsqlUpdate.BindInt64(26, id);\n5277: ",
        "context_after": "5279: \tsqlUpdate.BindInt64(1, tags->size);\n5280: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5281,
        "text": "2. Date time when file last modified",
        "context_before": "5279: \tsqlUpdate.BindInt64(1, tags->size);\n5280: ",
        "context_after": "5282: \tassert(tags->modified != 0);\n5283: \tsqlUpdate.BindInt64(2, tags->modified);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5285,
        "text": "3. Track hash",
        "context_before": "5283: \tsqlUpdate.BindInt64(2, tags->modified);\n5284: ",
        "context_after": "5286: \tsqlUpdate.BindInt(3, tags->trackHash);\n5287: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5288,
        "text": "4. Track number in album",
        "context_before": "5286: \tsqlUpdate.BindInt(3, tags->trackHash);\n5287: ",
        "context_after": "5289: \tif (!tags->track.empty())\n5290: \t\tsqlUpdate.BindText8(4, tags->track);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5294,
        "text": "5. Total tracks in album",
        "context_before": "5292: \t\tsqlUpdate.BindNull(4);\n5293: ",
        "context_after": "5295: \tif (!tags->totalTracks.empty())\n5296: \t\tsqlUpdate.BindText8(5, tags->totalTracks);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5300,
        "text": "6. Disc number",
        "context_before": "5298: \t\tsqlUpdate.BindNull(5);\n5299: ",
        "context_after": "5301: \tif (!tags->disc.empty())\n5302: \t\tsqlUpdate.BindText8(6, tags->disc);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5306,
        "text": "7. Total discs",
        "context_before": "5304: \t\tsqlUpdate.BindNull(6);\n5305: ",
        "context_after": "5307: \tif (!tags->totalDiscs.empty())\n5308: \t\tsqlUpdate.BindText8(7, tags->totalDiscs);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5312,
        "text": "8. Track title",
        "context_before": "5310: \t\tsqlUpdate.BindNull(7);\n5311: ",
        "context_after": "5313: \tif (!tags->title.empty())\n5314: \t\tsqlUpdate.BindText8(8, tags->title);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5318,
        "text": "9. Track album",
        "context_before": "5316: \t\tsqlUpdate.BindNull(8);\n5317: ",
        "context_after": "5319: \tif (!tags->album.empty())\n5320: \t\tsqlUpdate.BindText8(9, tags->album);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5324,
        "text": "10. Track artist",
        "context_before": "5322: \t\tsqlUpdate.BindNull(9);\n5323: ",
        "context_after": "5325: \tif (!tags->artist.empty())\n5326: \t\tsqlUpdate.BindText8(10, tags->artist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5330,
        "text": "11. Track album artist",
        "context_before": "5328: \t\tsqlUpdate.BindNull(10);\n5329: ",
        "context_after": "5331: \tif (!tags->albumArtist.empty())\n5332: \t\tsqlUpdate.BindText8(11, tags->albumArtist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5336,
        "text": "12. Track composer",
        "context_before": "5334: \t\tsqlUpdate.BindNull(11);\n5335: ",
        "context_after": "5337: \tif (!tags->composer.empty())\n5338: \t\tsqlUpdate.BindText8(12, tags->composer);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5342,
        "text": "13. Track genre",
        "context_before": "5340: \t\tsqlUpdate.BindNull(12);\n5341: ",
        "context_after": "5343: \tif (!tags->genre.empty())\n5344: \t\tsqlUpdate.BindText8(13, tags->genre);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5348,
        "text": "14. Track release year",
        "context_before": "5346: \t\tsqlUpdate.BindNull(13);\n5347: ",
        "context_after": "5349: \tif (!tags->year.empty())\n5350: \t\tsqlUpdate.BindText8(14, tags->year);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5354,
        "text": "15. Track BPM",
        "context_before": "5352: \t\tsqlUpdate.BindNull(14);\n5353: ",
        "context_after": "5355: \tif (!tags->bpm.empty())\n5356: \t\tsqlUpdate.BindText8(15, tags->bpm);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5360,
        "text": "16. Track compilation",
        "context_before": "5358: \t\tsqlUpdate.BindNull(15);\n5359: ",
        "context_after": "5361: \tif (!tags->compilation.empty())\n5362: \t\tsqlUpdate.BindText8(16, tags->compilation);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5366,
        "text": "17. Track publisher",
        "context_before": "5364: \t\tsqlUpdate.BindNull(16);\n5365: ",
        "context_after": "5367: \tif (!tags->publisher.empty())\n5368: \t\tsqlUpdate.BindText8(17, tags->publisher);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5372,
        "text": "18. Track conductor",
        "context_before": "5370: \t\tsqlUpdate.BindNull(17);\n5371: ",
        "context_after": "5373: \tif (!tags->conductor.empty())\n5374: \t\tsqlUpdate.BindText8(18, tags->conductor);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5378,
        "text": "19. Track lyricist",
        "context_before": "5376: \t\tsqlUpdate.BindNull(18);\n5377: ",
        "context_after": "5379: \tif (!tags->lyricist.empty())\n5380: \t\tsqlUpdate.BindText8(19, tags->lyricist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5384,
        "text": "20. Track remixer",
        "context_before": "5382: \t\tsqlUpdate.BindNull(19);\n5383: ",
        "context_after": "5385: \tif (!tags->remixer.empty())\n5386: \t\tsqlUpdate.BindText8(20, tags->remixer);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5390,
        "text": "21. Track grouping",
        "context_before": "5388: \t\tsqlUpdate.BindNull(20);\n5389: ",
        "context_after": "5391: \tif (!tags->grouping.empty())\n5392: \t\tsqlUpdate.BindText8(21, tags->grouping);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5396,
        "text": "22. Track subtitle",
        "context_before": "5394: \t\tsqlUpdate.BindNull(21);\n5395: ",
        "context_after": "5397: \tif (!tags->subtitle.empty())\n5398: \t\tsqlUpdate.BindText8(22, tags->subtitle);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5408,
        "text": "24. Track encoded by",
        "context_before": "5406: \t\tsqlUpdate.BindNull(23);\n5407: ",
        "context_after": "5409: \tif (!tags->encodedby.empty())\n5410: \t\tsqlUpdate.BindText8(24, tags->encodedby);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5414,
        "text": "25. Track comment",
        "context_before": "5412: \t\tsqlUpdate.BindNull(24);\n5413: ",
        "context_after": "5415: \tif (!tags->comment.empty())\n5416: \t\tsqlUpdate.BindText8(25, tags->comment);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5444,
        "text": "Update tags in the library and playlist database",
        "context_before": "5442: void DBase::UpdateTagsNode(SkinList* skinList, ListNodeUnsafe listNode, DATABASE_SONGINFO* tags)\n5443: {",
        "context_after": "5445: \tif (listNode->idLibrary)\n5446: \t\tUpdateTagsEditor(listNode->idLibrary, tags, false);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5450,
        "text": "Fill texts for the track",
        "context_before": "5448: \t\tUpdateTagsEditor(listNode->idPlaylist, tags, true);\n5449: ",
        "context_after": "5451: \tfor (std::size_t i = 0, size = skinList->skinTrack.size(); i < size; ++i)\n5452: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5468,
        "text": "Artist",
        "context_before": "5466: \t\t\t\tskinList->SetNodeString(listNode, type, UTF::UTF16S(tags->album));\n5467: \t\t\t\tbreak;",
        "context_after": "5469: \t\t\t\tif (!tags->artist.empty())\n5470: \t\t\t\t\tskinList->SetNodeString(listNode, type, UTF::UTF16S(tags->artist));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5486,
        "text": "Track number",
        "context_before": "5484: \t\t\t\t\tskinList->SetNodeString(listNode, type, L\"\");\n5485: \t\t\t\tbreak;",
        "context_after": "5487: \t\t\t\tif (!tags->track.empty())\n5488: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5507,
        "text": "Also change a header of the album, if the first track changed",
        "context_before": "5505: \t}\n5506: ",
        "context_after": "5508: \tif (listNode->Parent() != skinList->GetRootNode() && listNode == listNode->Parent()->Child())\n5509: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5512,
        "text": "Fill texts for the header",
        "context_before": "5510: \t\tListNodeUnsafe headNode = listNode->Parent();\n5511: ",
        "context_after": "5513: \t\tfor (std::size_t i = 0, size = skinList->skinHead.size(); i < size; ++i)\n5514: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5527,
        "text": "Artist",
        "context_before": "5525: \t\t\t\t\t\tskinList->SetNodeString(headNode, type, lang->GetLineS(Lang::Playlist, 0));\n5526: \t\t\t\t\tbreak;",
        "context_after": "5528: \t\t\t\t\tif (!tags->albumArtist.empty())\n5529: \t\t\t\t\t\tskinList->SetNodeString(headNode, type, UTF::UTF16S(tags->albumArtist));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 37,
        "text": "Forward declaration",
        "context_before": "35: \n36: public:",
        "context_after": "38: \tclass SQLRequest;\n39: \tclass SQLFile"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 54,
        "text": "Beware",
        "context_before": "52: \t\t}\n53: \t\tSQLFile(const SQLFile&) = delete;",
        "context_after": "55: \t\tbool operator==(const SQLFile& r) {return db == r.db;}\n56: \t\tbool operator!=(const SQLFile& r) {return !(*this == r);}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 58,
        "text": "Beware",
        "context_before": "56: \t\tbool operator!=(const SQLFile& r) {return !(*this == r);}\n57: \t\texplicit operator bool() {return (db ? true : false);}",
        "context_after": "59: \t\tsqlite3* get() {return db;}\n60: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 118,
        "text": "Library database (always open)",
        "context_before": "116: \tLanguage* lang = nullptr;\n117: ",
        "context_after": "119: \tSQLFile dbPlaylist; // Opened playlist database\n120: \tSQLFile dbPlayOpen; // Playing playlist database"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 119,
        "text": "Opened playlist database",
        "context_before": "117: \n118: \tSQLFile dbLibrary;  // Library database (always open)",
        "context_after": "120: \tSQLFile dbPlayOpen; // Playing playlist database\n121: \tSQLFile dbPlayTemp; // Additional database for advanced actions in the playlist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 120,
        "text": "Playing playlist database",
        "context_before": "118: \tSQLFile dbLibrary;  // Library database (always open)\n119: \tSQLFile dbPlaylist; // Opened playlist database",
        "context_after": "121: \tSQLFile dbPlayTemp; // Additional database for advanced actions in the playlist\n122: \tSQLFile dbCue; // Cue sheets cache database"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 121,
        "text": "Additional database for advanced actions in the playlist",
        "context_before": "119: \tSQLFile dbPlaylist; // Opened playlist database\n120: \tSQLFile dbPlayOpen; // Playing playlist database",
        "context_after": "122: \tSQLFile dbCue; // Cue sheets cache database\n123: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 122,
        "text": "Cue sheets cache database",
        "context_before": "120: \tSQLFile dbPlayOpen; // Playing playlist database\n121: \tSQLFile dbPlayTemp; // Additional database for advanced actions in the playlist",
        "context_after": "123: \n124: \tbool isSmartlistOpen = false; // Is smartlist open?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 124,
        "text": "Is smartlist open?",
        "context_before": "122: \tSQLFile dbCue; // Cue sheets cache database\n123: ",
        "context_after": "125: \tbool isSmartlistPlay = false; // Is smartlist playing?\n126: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 125,
        "text": "Is smartlist playing?",
        "context_before": "123: \n124: \tbool isSmartlistOpen = false; // Is smartlist open?",
        "context_after": "126: \n127: \tlong long libraryLastInsertID = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 140,
        "text": "Date time when added to the library",
        "context_before": "138: \t\tstd::string file;\n139: \t\tstd::string path;",
        "context_after": "141: \n142: \t\tlong long cue = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 143,
        "text": "File size",
        "context_before": "141: \n142: \t\tlong long cue = 0;",
        "context_after": "144: \t\tlong long modified = 0; // Date time when file last modified\n145: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 144,
        "text": "Date time when file last modified",
        "context_before": "142: \t\tlong long cue = 0;\n143: \t\tlong long size = 0; // File size",
        "context_after": "145: \n146: \t\tint fileHash = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 268,
        "text": "static const int Next = 4;",
        "context_before": "266: \t\tstatic const int Album = 1;\n267: \t\tstatic const int Folder = 2;",
        "context_after": "269: \t};\n270: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 273,
        "text": "Audiobook = 1,",
        "context_before": "271: \tenum class Category\n272: \t{",
        "context_after": "274: \t\tRadio = 10,\n275: \t\tUserRadio = 11"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 278,
        "text": "Create table for the library",
        "context_before": "276: \t};\n277: ",
        "context_after": "279: \tvoid CreateTablePlaylist(const SQLFile& db); // Create table for a playlist\n280: \tvoid CreateTableSmartlist(const SQLFile& db); // Create table for a smartlist (not auto updating, for auto updating we no need table)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 279,
        "text": "Create table for a playlist",
        "context_before": "277: \n278: \tvoid CreateTableLibrary(const SQLFile& db); // Create table for the library",
        "context_after": "280: \tvoid CreateTableSmartlist(const SQLFile& db); // Create table for a smartlist (not auto updating, for auto updating we no need table)\n281: \tvoid CreateTableCue(const SQLFile& db); // Create table for cue sheets cache"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 280,
        "text": "Create table for a smartlist (not auto updating, for auto updating we no need table)",
        "context_before": "278: \tvoid CreateTableLibrary(const SQLFile& db); // Create table for the library\n279: \tvoid CreateTablePlaylist(const SQLFile& db); // Create table for a playlist",
        "context_after": "281: \tvoid CreateTableCue(const SQLFile& db); // Create table for cue sheets cache\n282: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 281,
        "text": "Create table for cue sheets cache",
        "context_before": "279: \tvoid CreateTablePlaylist(const SQLFile& db); // Create table for a playlist\n280: \tvoid CreateTableSmartlist(const SQLFile& db); // Create table for a smartlist (not auto updating, for auto updating we no need table)",
        "context_after": "282: \n283: \tvoid InsertMultipleValues(long long id, SQLRequest& sqlInsert, DATABASE_SONGINFO* tags);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 285,
        "text": "Begin: Functions to add and update a data in the library database //",
        "context_before": "283: \tvoid InsertMultipleValues(long long id, SQLRequest& sqlInsert, DATABASE_SONGINFO* tags);\n284: ",
        "context_after": "286: \n287: \tint GetCountLibFromPls();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 299,
        "text": "Add a file to the library",
        "context_before": "297: \t\tlong long& outModified, long long& outSize, std::wstring& outRefFile, int& outRefHash);\n298: ",
        "context_after": "300: \tbool AddFileToLibrary(DATABASE_SONGINFO* tags);\n301: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 302,
        "text": "Update tags because a file was modified",
        "context_before": "300: \tbool AddFileToLibrary(DATABASE_SONGINFO* tags);\n301: ",
        "context_after": "303: \tvoid UpdateTagsModified(long long id, DATABASE_SONGINFO* tags);\n304: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 305,
        "text": "Update tags because a file was moved",
        "context_before": "303: \tvoid UpdateTagsModified(long long id, DATABASE_SONGINFO* tags);\n304: ",
        "context_after": "306: \tvoid UpdateTagsFileMove(long long id, DATABASE_SONGINFO* tags);\n307: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 308,
        "text": "Add a file to cue cache",
        "context_before": "306: \tvoid UpdateTagsFileMove(long long id, DATABASE_SONGINFO* tags);\n307: ",
        "context_after": "309: \tvoid AddCueFile(bool noDrive, const std::wstring& path, const std::wstring& file,\n310: \t\tint hash, long long size, long long modified, const std::wstring& refFile, int refHash);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 312,
        "text": "Update a file in cue cache",
        "context_before": "310: \t\tint hash, long long size, long long modified, const std::wstring& refFile, int refHash);\n311: ",
        "context_after": "313: \tvoid UpdateCueFile(long long id, long long size, long long modified, const std::wstring& refFile, int refHash);\n314: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 315,
        "text": "Update cues in the library",
        "context_before": "313: \tvoid UpdateCueFile(long long id, long long size, long long modified, const std::wstring& refFile, int refHash);\n314: ",
        "context_after": "316: \tbool UpdateCueLibrary(bool noDrive, const std::wstring& path, const std::wstring& file, int hash);\n317: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 318,
        "text": "Delete cue image file from the library",
        "context_before": "316: \tbool UpdateCueLibrary(bool noDrive, const std::wstring& path, const std::wstring& file, int hash);\n317: ",
        "context_after": "319: \tbool DeleteCueImage(bool noDrive, const std::wstring& path, const std::wstring& file, int hash);\n320: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 321,
        "text": "Check that a file (part of cue) is existing in the library",
        "context_before": "319: \tbool DeleteCueImage(bool noDrive, const std::wstring& path, const std::wstring& file, int hash);\n320: ",
        "context_after": "322: \tbool CheckCueFile(bool noDrive, const std::wstring& path, const std::wstring& file,\n323: \t\tint hash, long long size, long long modified, long long& outID, bool flag = false, bool isRescanAll = false);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 325,
        "text": "Check that a file is existing in the library",
        "context_before": "323: \t\tint hash, long long size, long long modified, long long& outID, bool flag = false, bool isRescanAll = false);\n324: ",
        "context_after": "326: \tbool CheckFile(bool noDrive, const std::wstring& path, const std::wstring& file,\n327: \t\tint hash, long long cue, long long& outID, long long& outModified, long long& outSize, bool &outCue, bool flag = false);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 329,
        "text": "Search for a file by tags",
        "context_before": "327: \t\tint hash, long long cue, long long& outID, long long& outModified, long long& outSize, bool &outCue, bool flag = false);\n328: ",
        "context_after": "330: \tbool CheckTags(long long& outID, DATABASE_SONGINFO* tags);\n331: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 332,
        "text": "End: Functions to add and update a data in the library database //",
        "context_before": "330: \tbool CheckTags(long long& outID, DATABASE_SONGINFO* tags);\n331: ",
        "context_after": "333: \n334: \t// Begin: Functions to add a data to the playlist database //"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 334,
        "text": "Begin: Functions to add a data to the playlist database //",
        "context_before": "332: \t// End: Functions to add and update a data in the library database //\n333: ",
        "context_after": "335: \n336: \t// The following two functions can add a file to opened and additional playlist depending on isTemp"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 336,
        "text": "The following two functions can add a file to opened and additional playlist depending on isTemp",
        "context_before": "334: \t// Begin: Functions to add a data to the playlist database //\n335: ",
        "context_after": "337: \t// By default add to opened playlist (bool isTemp = false)\n338: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 337,
        "text": "By default add to opened playlist (bool isTemp = false)",
        "context_before": "335: \n336: \t// The following two functions can add a file to opened and additional playlist depending on isTemp",
        "context_after": "338: \n339: \t// Add a file to the playlist (opened or additional)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 339,
        "text": "Add a file to the playlist (opened or additional)",
        "context_before": "337: \t// By default add to opened playlist (bool isTemp = false)\n338: ",
        "context_after": "340: \tbool AddFileToPlaylist(int index, DATABASE_SONGINFO* tags, bool isTemp = false);\n341: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 342,
        "text": "Add a file to the playlist (opened or additional) from Library or struct.",
        "context_before": "340: \tbool AddFileToPlaylist(int index, DATABASE_SONGINFO* tags, bool isTemp = false);\n341: ",
        "context_after": "343: \tvoid AddFileToPlaylistFrom(long long id, int index, long long added, bool isTemp = false);\n344: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 345,
        "text": "Add url to the playlist (opened or additional)",
        "context_before": "343: \tvoid AddFileToPlaylistFrom(long long id, int index, long long added, bool isTemp = false);\n344: ",
        "context_after": "346: \tvoid AddURLToPlaylist(int index, long long added, const std::wstring& url, const std::wstring& title, bool isTemp = false);\n347: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 348,
        "text": "End: Functions to add a data to the playlist database //",
        "context_before": "346: \tvoid AddURLToPlaylist(int index, long long added, const std::wstring& url, const std::wstring& title, bool isTemp = false);\n347: ",
        "context_after": "349: \n350: \t// Begin: Functions to fill controls with a data //"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 350,
        "text": "Begin: Functions to fill controls with a data //",
        "context_before": "348: \t// End: Functions to add a data to the playlist database //\n349: ",
        "context_after": "351: \n352: \t// All following functions directly works with SkinList and SkinTree controls"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 352,
        "text": "All following functions directly works with SkinList and SkinTree controls",
        "context_before": "350: \t// Begin: Functions to fill controls with a data //\n351: ",
        "context_after": "353: \n354: \tvoid FillTreeAlbum(SkinTree* skinTree, TreeNodeUnsafe treeNode);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 400,
        "text": "End: Functions for fill controls with a data //",
        "context_before": "398: \tvoid FillListFolder(SkinList* skinList, const std::wstring& value);\n399: ",
        "context_after": "401: \n402: \t// Return a song info (used only in properties dialog)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 402,
        "text": "Return a song info (used only in properties dialog)",
        "context_before": "400: \t// End: Functions for fill controls with a data //\n401: ",
        "context_after": "403: \tvoid GetLibFile(long long idLibrary, long long idPlaylist, DATABASE_GETINFO* info);\n404: \t// Return tags to display (used to display in the skin)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 404,
        "text": "Return tags to display (used to display in the skin)",
        "context_before": "402: \t// Return a song info (used only in properties dialog)\n403: \tvoid GetLibFile(long long idLibrary, long long idPlaylist, DATABASE_GETINFO* info);",
        "context_after": "405: \tvoid GetSongTags(long long idLibrary, long long idPlaylist, std::wstring& file, std::wstring& title, std::wstring& album,\n406: \t\t\t\t\tstd::wstring& artist, std::wstring& genre, std::wstring& year, bool isPlay = true);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 417,
        "text": "Create a playlist (return the created playlist in the tree control or nullptr if error)",
        "context_before": "415: \tinline void SetProfilePath(const std::wstring& path) {profilePath = path;}\n416: ",
        "context_after": "418: \tTreeNodeUnsafe CreatePlaylist(SkinTree* skinTree, const std::wstring& name, bool isDefault = false);\n419: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 420,
        "text": "Load all playlists to the tree control",
        "context_before": "418: \tTreeNodeUnsafe CreatePlaylist(SkinTree* skinTree, const std::wstring& name, bool isDefault = false);\n419: ",
        "context_after": "421: \tbool SavePlaylist(SkinTree* skinTree); // Save all playlists from the tree control\n422: \tvoid DeletePlaylist(SkinTree* skinTree); // Delete a playlist selected in the tree control"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 421,
        "text": "Save all playlists from the tree control",
        "context_before": "419: \n420: \tbool LoadPlaylist(SkinTree* skinTree); // Load all playlists to the tree control",
        "context_after": "422: \tvoid DeletePlaylist(SkinTree* skinTree); // Delete a playlist selected in the tree control\n423: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 422,
        "text": "Delete a playlist selected in the tree control",
        "context_before": "420: \tbool LoadPlaylist(SkinTree* skinTree); // Load all playlists to the tree control\n421: \tbool SavePlaylist(SkinTree* skinTree); // Save all playlists from the tree control",
        "context_after": "423: \n424: \tvoid OpenPlaylist(const std::wstring& fileName); // Open playlist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 424,
        "text": "Open playlist",
        "context_before": "422: \tvoid DeletePlaylist(SkinTree* skinTree); // Delete a playlist selected in the tree control\n423: ",
        "context_after": "425: \tvoid ClosePlaylist(); // Close playlist\n426: \tbool IsPlaylistOpen() {return (dbPlaylist ? true : false);} // Is playlist open?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 425,
        "text": "Close playlist",
        "context_before": "423: \n424: \tvoid OpenPlaylist(const std::wstring& fileName); // Open playlist",
        "context_after": "426: \tbool IsPlaylistOpen() {return (dbPlaylist ? true : false);} // Is playlist open?\n427: \tvoid ReturnNowPlaying(); // Now Playing playlist becomes current open"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 426,
        "text": "Is playlist open?",
        "context_before": "424: \tvoid OpenPlaylist(const std::wstring& fileName); // Open playlist\n425: \tvoid ClosePlaylist(); // Close playlist",
        "context_after": "427: \tvoid ReturnNowPlaying(); // Now Playing playlist becomes current open\n428: \tvoid NewNowPlaying(); // The current open playlist becomes Now Playing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 427,
        "text": "Now Playing playlist becomes current open",
        "context_before": "425: \tvoid ClosePlaylist(); // Close playlist\n426: \tbool IsPlaylistOpen() {return (dbPlaylist ? true : false);} // Is playlist open?",
        "context_after": "428: \tvoid NewNowPlaying(); // The current open playlist becomes Now Playing\n429: \tvoid CloseNowPlaying(); // Close Now Playing playlist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 428,
        "text": "The current open playlist becomes Now Playing",
        "context_before": "426: \tbool IsPlaylistOpen() {return (dbPlaylist ? true : false);} // Is playlist open?\n427: \tvoid ReturnNowPlaying(); // Now Playing playlist becomes current open",
        "context_after": "429: \tvoid CloseNowPlaying(); // Close Now Playing playlist\n430: \tinline bool IsNowPlayingOpen() {return (dbPlayOpen && (dbPlayOpen == dbPlaylist));} // Now Playing playlist is open and is current?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 429,
        "text": "Close Now Playing playlist",
        "context_before": "427: \tvoid ReturnNowPlaying(); // Now Playing playlist becomes current open\n428: \tvoid NewNowPlaying(); // The current open playlist becomes Now Playing",
        "context_after": "430: \tinline bool IsNowPlayingOpen() {return (dbPlayOpen && (dbPlayOpen == dbPlaylist));} // Now Playing playlist is open and is current?\n431: \tinline bool IsNowPlaying() {return (dbPlayOpen ? true : false);} // Now Playing playlist is open?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 430,
        "text": "Now Playing playlist is open and is current?",
        "context_before": "428: \tvoid NewNowPlaying(); // The current open playlist becomes Now Playing\n429: \tvoid CloseNowPlaying(); // Close Now Playing playlist",
        "context_after": "431: \tinline bool IsNowPlaying() {return (dbPlayOpen ? true : false);} // Now Playing playlist is open?\n432: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 431,
        "text": "Now Playing playlist is open?",
        "context_before": "429: \tvoid CloseNowPlaying(); // Close Now Playing playlist\n430: \tinline bool IsNowPlayingOpen() {return (dbPlayOpen && (dbPlayOpen == dbPlaylist));} // Now Playing playlist is open and is current?",
        "context_after": "432: \n433: \tint GetPlaylistMax(); // Return the latest track ID in the playlist database"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 433,
        "text": "Return the latest track ID in the playlist database",
        "context_before": "431: \tinline bool IsNowPlaying() {return (dbPlayOpen ? true : false);} // Now Playing playlist is open?\n432: ",
        "context_after": "434: \n435: \t// Delete selected tracks from the library database"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 435,
        "text": "Delete selected tracks from the library database",
        "context_before": "433: \tint GetPlaylistMax(); // Return the latest track ID in the playlist database\n434: ",
        "context_after": "436: \tvoid DeleteFromLibrary(SkinList* skinList, std::vector<std::wstring>* libraryFolders = nullptr);\n437: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 438,
        "text": "Delete selected tracks from the playlist database",
        "context_before": "436: \tvoid DeleteFromLibrary(SkinList* skinList, std::vector<std::wstring>* libraryFolders = nullptr);\n437: ",
        "context_after": "439: \tvoid DeleteFromPlaylist(SkinList* skinList);\n440: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 441,
        "text": "Update the index of elements in the playlist database",
        "context_before": "439: \tvoid DeleteFromPlaylist(SkinList* skinList);\n440: ",
        "context_after": "442: \tvoid SwapPlaylist(SkinList* skinList);\n443: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 444,
        "text": "Add to a playlist from: library, other playlist or radio list",
        "context_before": "442: \tvoid SwapPlaylist(SkinList* skinList);\n443: ",
        "context_after": "445: \tint FromLibraryToPlaylist(SkinList* skinList, const std::wstring& fileName);\n446: \tint FromPlaylistToPlaylist(SkinList* skinList, const std::wstring& fileName);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 449,
        "text": "Begin transaction in the library database",
        "context_before": "447: \tint FromRadioToPlaylist(SkinList* skinList, const std::wstring& fileName);\n448: ",
        "context_after": "450: \tvoid Commit(); // Commit transaction in the library database\n451: \tvoid Vacuum(); // Shrink the library database"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 450,
        "text": "Commit transaction in the library database",
        "context_before": "448: \n449: \tvoid Begin(); // Begin transaction in the library database",
        "context_after": "451: \tvoid Vacuum(); // Shrink the library database\n452: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 451,
        "text": "Shrink the library database",
        "context_before": "449: \tvoid Begin(); // Begin transaction in the library database\n450: \tvoid Commit(); // Commit transaction in the library database",
        "context_after": "452: \n453: \tvoid PlayBegin(); // Begin transaction in the open playlist database"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 453,
        "text": "Begin transaction in the open playlist database",
        "context_before": "451: \tvoid Vacuum(); // Shrink the library database\n452: ",
        "context_after": "454: \tvoid PlayCommit(); // Commit transaction in the open playlist database\n455: \tvoid PlayVacuum(); // Shrink the open playlist database"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 454,
        "text": "Commit transaction in the open playlist database",
        "context_before": "452: \n453: \tvoid PlayBegin(); // Begin transaction in the open playlist database",
        "context_after": "455: \tvoid PlayVacuum(); // Shrink the open playlist database\n456: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 455,
        "text": "Shrink the open playlist database",
        "context_before": "453: \tvoid PlayBegin(); // Begin transaction in the open playlist database\n454: \tvoid PlayCommit(); // Commit transaction in the open playlist database",
        "context_after": "456: \n457: \tvoid TempBegin(); // Begin transaction in the additional database"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 457,
        "text": "Begin transaction in the additional database",
        "context_before": "455: \tvoid PlayVacuum(); // Shrink the open playlist database\n456: ",
        "context_after": "458: \tvoid TempCommit(); // Commit transaction in the additional database\n459: \tvoid TempVacuum(); // Shrink the additional playlist database"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 458,
        "text": "Commit transaction in the additional database",
        "context_before": "456: \n457: \tvoid TempBegin(); // Begin transaction in the additional database",
        "context_after": "459: \tvoid TempVacuum(); // Shrink the additional playlist database\n460: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 459,
        "text": "Shrink the additional playlist database",
        "context_before": "457: \tvoid TempBegin(); // Begin transaction in the additional database\n458: \tvoid TempCommit(); // Commit transaction in the additional database",
        "context_after": "460: \n461: \tvoid CueBegin(); // Begin transaction in the cue database"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 461,
        "text": "Begin transaction in the cue database",
        "context_before": "459: \tvoid TempVacuum(); // Shrink the additional playlist database\n460: ",
        "context_after": "462: \tvoid CueCommit(); // Commit transaction in the cue database\n463: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 462,
        "text": "Commit transaction in the cue database",
        "context_before": "460: \n461: \tvoid CueBegin(); // Begin transaction in the cue database",
        "context_after": "463: \n464: \tvoid OpenTemp(const std::wstring& fileName); // Open the additional database"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 464,
        "text": "Open the additional database",
        "context_before": "462: \tvoid CueCommit(); // Commit transaction in the cue database\n463: ",
        "context_after": "465: \tvoid CloseTemp(); // Close the additional database\n466: \tint GetTempMax(); // Return the latest track ID in the additional database"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 465,
        "text": "Close the additional database",
        "context_before": "463: \n464: \tvoid OpenTemp(const std::wstring& fileName); // Open the additional database",
        "context_after": "466: \tint GetTempMax(); // Return the latest track ID in the additional database\n467: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 466,
        "text": "Return the latest track ID in the additional database",
        "context_before": "464: \tvoid OpenTemp(const std::wstring& fileName); // Open the additional database\n465: \tvoid CloseTemp(); // Close the additional database",
        "context_after": "467: \n468: \tvoid SetRating(long long idLibrary, long long idPlaylist, int rating, bool isPlay); // Set track rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 468,
        "text": "Set track rating",
        "context_before": "466: \tint GetTempMax(); // Return the latest track ID in the additional database\n467: ",
        "context_after": "469: \tvoid IncreaseCount(long long idLibrary, long long idPlaylist); // Increase track play count\n470: \tvoid IncreaseSkip(long long idLibrary, long long idPlaylist); // Increase track skip count"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 469,
        "text": "Increase track play count",
        "context_before": "467: \n468: \tvoid SetRating(long long idLibrary, long long idPlaylist, int rating, bool isPlay); // Set track rating",
        "context_after": "470: \tvoid IncreaseSkip(long long idLibrary, long long idPlaylist); // Increase track skip count\n471: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 470,
        "text": "Increase track skip count",
        "context_before": "468: \tvoid SetRating(long long idLibrary, long long idPlaylist, int rating, bool isPlay); // Set track rating\n469: \tvoid IncreaseCount(long long idLibrary, long long idPlaylist); // Increase track play count",
        "context_after": "471: \n472: \tbool IsLibraryEmpty(); // The library is empty?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 472,
        "text": "The library is empty?",
        "context_before": "470: \tvoid IncreaseSkip(long long idLibrary, long long idPlaylist); // Increase track skip count\n471: ",
        "context_after": "473: \tvoid RestoreDeleted(); // Restore tracks deleted from the library\n474: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 473,
        "text": "Restore tracks deleted from the library",
        "context_before": "471: \n472: \tbool IsLibraryEmpty(); // The library is empty?",
        "context_after": "474: \n475: \tvoid SortPlaylist(int start, const std::wstring& name); // Sort playlist (before add files to playlist need to sort them by tags)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 475,
        "text": "Sort playlist (before add files to playlist need to sort them by tags)",
        "context_before": "473: \tvoid RestoreDeleted(); // Restore tracks deleted from the library\n474: ",
        "context_after": "476: \tvoid SortHelperAttach();\n477: \tvoid SortHelperDetach();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 479,
        "text": "Fill smartlist (fill list control or fill smartlist database)",
        "context_before": "477: \tvoid SortHelperDetach();\n478: ",
        "context_after": "480: \tvoid FillSmartlist(SkinList* skinList, const std::wstring& fileName, bool isUpdate = false);\n481: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 482,
        "text": "Open smartlist",
        "context_before": "480: \tvoid FillSmartlist(SkinList* skinList, const std::wstring& fileName, bool isUpdate = false);\n481: ",
        "context_after": "483: \tbool SaveSmartlist(const std::wstring& fileName, SmartList& smart); // Save smartlist\n484: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 483,
        "text": "Save smartlist",
        "context_before": "481: \n482: \tbool OpenSmartlist(const std::wstring& fileName, SmartList& smart); // Open smartlist",
        "context_after": "484: \n485: \tbool LoadTreeSmartlists(SkinTree* skinTree); // Load all smartlists to the tree control"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 485,
        "text": "Load all smartlists to the tree control",
        "context_before": "483: \tbool SaveSmartlist(const std::wstring& fileName, SmartList& smart); // Save smartlist\n484: ",
        "context_after": "486: \tbool SaveTreeSmartlists(SkinTree* skinTree); // Save all smartlists from the tree control\n487: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 486,
        "text": "Save all smartlists from the tree control",
        "context_before": "484: \n485: \tbool LoadTreeSmartlists(SkinTree* skinTree); // Load all smartlists to the tree control",
        "context_after": "487: \n488: \tvoid DeleteTreeSmartlist(SkinTree* skinTree); // Delete a smartlist selected in the tree control"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 488,
        "text": "Delete a smartlist selected in the tree control",
        "context_before": "486: \tbool SaveTreeSmartlists(SkinTree* skinTree); // Save all smartlists from the tree control\n487: ",
        "context_after": "489: \n490: \t// Add from the library to a smartlist by SQLRequest"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 490,
        "text": "Add from the library to a smartlist by SQLRequest",
        "context_before": "488: \tvoid DeleteTreeSmartlist(SkinTree* skinTree); // Delete a smartlist selected in the tree control\n489: ",
        "context_after": "491: \tvoid FromLibraryToSmartlist(const std::wstring& fileName, SQLRequest &sqlSelect);\n492: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 493,
        "text": "Create a smartlist (return created smartlist in the tree control or null if error)",
        "context_before": "491: \tvoid FromLibraryToSmartlist(const std::wstring& fileName, SQLRequest &sqlSelect);\n492: ",
        "context_after": "494: \tTreeNodeUnsafe CreateSmartlist(SkinTree* skinTree, const std::wstring& name, SmartList& smart);\n495: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 496,
        "text": "Create default smartlists (it is located in this class for simplicity, here is not quite the place for this)",
        "context_before": "494: \tTreeNodeUnsafe CreateSmartlist(SkinTree* skinTree, const std::wstring& name, SmartList& smart);\n495: ",
        "context_after": "497: \tvoid CreateMySmartlists(SkinTree* skinTree);\n498: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 499,
        "text": "Delete selected elements from the smartlist database",
        "context_before": "497: \tvoid CreateMySmartlists(SkinTree* skinTree);\n498: ",
        "context_after": "500: \tvoid DeleteFromSmartlist(SkinList* skinList, const std::wstring& file);\n501: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 502,
        "text": "Is smartlist open?",
        "context_before": "500: \tvoid DeleteFromSmartlist(SkinList* skinList, const std::wstring& file);\n501: ",
        "context_after": "503: \n504: \t// Compound filters for smartlists"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 504,
        "text": "Compound filters for smartlists",
        "context_before": "502: \tbool IsSmartlistOpen() {return isSmartlistOpen;} // Is smartlist open?\n503: ",
        "context_after": "505: \tvoid SmartPrepareSelect(SmartList &smart, std::string& select, std::vector<std::wstring>& values);\n506: \tvoid SmartFilterAlbums(SmartList &smart, std::string& select, std::vector<int>& values);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 514,
        "text": "Extensions for SQLite, compare strings with ignore case etc.",
        "context_before": "512: \tvoid UpdateTagsNode(SkinList* skinList, ListNodeUnsafe listNode, DATABASE_SONGINFO* tags);\n513: ",
        "context_after": "515: \tstatic int CompareStringsXP(void* context, int len1, const void* str1, int len2, const void* str2);\n516: \tstatic int CompareStringsLikeXP(void* context, int len1, const void* str1, int len2, const void* str2);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 527,
        "text": "static int CompareStringsNum(void* context, int len1, const void* str1, int len2, const void* str2);",
        "context_before": "525: \tstatic int CompareStringsFile(void* context, int len1, const void* str1, int len2, const void* str2);\n526: ",
        "context_after": "528: \t//static int CompareStringToNum(const char* str, int len);\n529: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 528,
        "text": "static int CompareStringToNum(const char* str, int len);",
        "context_before": "526: \n527: \t//static int CompareStringsNum(void* context, int len1, const void* str1, int len2, const void* str2);",
        "context_after": "529: \n530: \tbool IsEqualPaths(const std::wstring& str1, size_t len1, const std::wstring& str2, size_t len2);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 545,
        "text": "Helper for database requests",
        "context_before": "543: \n544: public:",
        "context_after": "546: \tclass SQLRequest\n547: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 728,
        "text": "inline static bool Exec(sqlite3* db, const char* text)",
        "context_before": "726: \t\t}\n727: ",
        "context_after": "729: \t\t//{\n730: \t\t//\tsqlite3_stmt* ppVmExec = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 730,
        "text": "sqlite3_stmt* ppVmExec = nullptr;",
        "context_before": "728: \t\t//inline static bool Exec(sqlite3* db, const char* text)\n729: \t\t//{",
        "context_after": "731: \t\t//\tsqlite3_prepare_v2(db, text, -1, &ppVmExec, &text);\n732: \t\t//\tif (ppVmExec)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 731,
        "text": "sqlite3_prepare_v2(db, text, -1, &ppVmExec, &text);",
        "context_before": "729: \t\t//{\n730: \t\t//\tsqlite3_stmt* ppVmExec = nullptr;",
        "context_after": "732: \t\t//\tif (ppVmExec)\n733: \t\t//\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 732,
        "text": "if (ppVmExec)",
        "context_before": "730: \t\t//\tsqlite3_stmt* ppVmExec = nullptr;\n731: \t\t//\tsqlite3_prepare_v2(db, text, -1, &ppVmExec, &text);",
        "context_after": "733: \t\t//\t{\n734: \t\t//\t\tint result = sqlite3_step(ppVmExec);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 734,
        "text": "int result = sqlite3_step(ppVmExec);",
        "context_before": "732: \t\t//\tif (ppVmExec)\n733: \t\t//\t{",
        "context_after": "735: \t\t//\t\tsqlite3_finalize(ppVmExec);\n736: \t\t//"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 735,
        "text": "sqlite3_finalize(ppVmExec);",
        "context_before": "733: \t\t//\t{\n734: \t\t//\t\tint result = sqlite3_step(ppVmExec);",
        "context_after": "736: \t\t//\n737: \t\t//\t\tif (result == SQLITE_ROW)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 737,
        "text": "if (result == SQLITE_ROW)",
        "context_before": "735: \t\t//\t\tsqlite3_finalize(ppVmExec);\n736: \t\t//",
        "context_after": "738: \t\t//\t\t\treturn true;\n739: \t\t//\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 738,
        "text": "return true;",
        "context_before": "736: \t\t//\n737: \t\t//\t\tif (result == SQLITE_ROW)",
        "context_after": "739: \t\t//\t}\n740: \t\t//\treturn false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.h",
        "line": 740,
        "text": "return false;",
        "context_before": "738: \t\t//\t\t\treturn true;\n739: \t\t//\t}",
        "context_after": "741: \t\t//}\n742: \t};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DebugMacros.h",
        "line": 1,
        "text": "Debug Macros for Winyl Player Centralized debug logging system for development builds",
        "context_before": "",
        "context_after": "5: #pragma once\n6: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DebugMacros.h",
        "line": 11,
        "text": "Basic debug logging",
        "context_before": "9:     #include <stdio.h>\n10: ",
        "context_after": "12:     #define DEBUG_LOG(msg) ::OutputDebugStringW(L##msg L\"\\n\")\n13: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DebugMacros.h",
        "line": 14,
        "text": "Formatted debug logging",
        "context_before": "12:     #define DEBUG_LOG(msg) ::OutputDebugStringW(L##msg L\"\\n\")\n13: ",
        "context_after": "15:     #define DEBUG_LOGF(fmt, ...) do { \\\n16:         wchar_t debugBuf[512]; \\"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DebugMacros.h",
        "line": 21,
        "text": "Function entry/exit logging",
        "context_before": "19:     } while(0)\n20: ",
        "context_after": "22:     #define DEBUG_FUNC_ENTRY(func) DEBUG_LOG(#func \" - ENTRY\")\n23:     #define DEBUG_FUNC_SUCCESS(func) DEBUG_LOG(#func \" - SUCCESS\")"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DebugMacros.h",
        "line": 26,
        "text": "Pointer validation logging",
        "context_before": "24:     #define DEBUG_FUNC_FAILED(func) DEBUG_LOG(#func \" - FAILED\")\n25: ",
        "context_after": "27:     #define DEBUG_PTR_CHECK(ptr, name) do { \\\n28:         if (ptr == nullptr) { \\"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DebugMacros.h",
        "line": 33,
        "text": "WASAPI specific logging (detailed)",
        "context_before": "31:     } while(0)\n32: ",
        "context_after": "34:     #ifdef WINYL_WASAPI_DEBUG\n35:         #define WASAPI_DEBUG_LOG(msg) DEBUG_LOG(\"WASAPI: \" msg)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DebugMacros.h",
        "line": 42,
        "text": "Equalizer specific logging (detailed)",
        "context_before": "40:     #endif\n41: ",
        "context_after": "43:     #ifdef WINYL_EQ_DEBUG\n44:         #define EQ_DEBUG_LOG(msg) DEBUG_LOG(\"EQ: \" msg)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DebugMacros.h",
        "line": 52,
        "text": "Release builds - no logging",
        "context_before": "50: \n51: #else",
        "context_after": "53:     #define DEBUG_LOG(msg)\n54:     #define DEBUG_LOGF(fmt, ...)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 41,
        "text": "Test (MFC way modal dialog)",
        "context_before": "39: \treturn ::DialogBoxParamW(::GetModuleHandleW(NULL), MAKEINTRESOURCEW(dlgTemplate), parent, MainDialogProc, (LPARAM)this);\n40: ",
        "context_after": "42: \n43: \t//http://blogs.msdn.com/b/oldnewthing/archive/2005/04/06/405827.aspx"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 43,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2005/04/06/405827.aspx",
        "context_before": "41: \t// Test (MFC way modal dialog)\n42: ",
        "context_after": "44: \n45: \t//::CreateDialogParam(::GetModuleHandle(NULL), MAKEINTRESOURCE(dlgTemplate), parent, MainDialogProc, (LPARAM)this);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 45,
        "text": "::CreateDialogParam(::GetModuleHandle(NULL), MAKEINTRESOURCE(dlgTemplate), parent, MainDialogProc, (LPARAM)this);",
        "context_before": "43: \t//http://blogs.msdn.com/b/oldnewthing/archive/2005/04/06/405827.aspx\n44: ",
        "context_after": "46: \n47: \t//if (thisWnd == NULL)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 47,
        "text": "if (thisWnd == NULL)",
        "context_before": "45: \t//::CreateDialogParam(::GetModuleHandle(NULL), MAKEINTRESOURCE(dlgTemplate), parent, MainDialogProc, (LPARAM)this);\n46: ",
        "context_after": "48: \t//\treturn false;\n49: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 48,
        "text": "return false;",
        "context_before": "46: \n47: \t//if (thisWnd == NULL)",
        "context_after": "49: \n50: \t//if (thisParentWnd)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 50,
        "text": "if (thisParentWnd)",
        "context_before": "48: \t//\treturn false;\n49: ",
        "context_after": "51: \t//\tEnableWindow(thisParentWnd, FALSE);\n52: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 51,
        "text": "EnableWindow(thisParentWnd, FALSE);",
        "context_before": "49: \n50: \t//if (thisParentWnd)",
        "context_after": "52: \n53: \t//::ShowWindow(thisWnd, TRUE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 53,
        "text": "::ShowWindow(thisWnd, TRUE);",
        "context_before": "51: \t//\tEnableWindow(thisParentWnd, FALSE);\n52: ",
        "context_after": "54: \n55: \t//MSG msg;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 55,
        "text": "MSG msg;",
        "context_before": "53: \t//::ShowWindow(thisWnd, TRUE);\n54: ",
        "context_after": "56: \t//msg.message = WM_NULL;\n57: \t//stopResult = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 57,
        "text": "stopResult = 0;",
        "context_before": "55: \t//MSG msg;\n56: \t//msg.message = WM_NULL;",
        "context_after": "58: \t//while (!stopResult)\n59: \t//{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 58,
        "text": "while (!stopResult)",
        "context_before": "56: \t//msg.message = WM_NULL;\n57: \t//stopResult = 0;",
        "context_after": "59: \t//{\n60: \t//\tif (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 63,
        "text": "break;",
        "context_before": "61: \t//\t{\n62: \t//\t\tif (msg.message == WM_QUIT)",
        "context_after": "64: \t//\t\telse if (!IsDialogMessage(thisWnd, &msg))\n65: \t//\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 70,
        "text": "else if (!stopResult)",
        "context_before": "68: \t//\t\t}\n69: \t//\t}",
        "context_after": "71: \t//\t\tWaitMessage();\n72: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 77,
        "text": "if (thisParentWnd)",
        "context_before": "75: \n76: ",
        "context_after": "78: \t//\tEnableWindow(thisParentWnd, TRUE);\n79: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 78,
        "text": "EnableWindow(thisParentWnd, TRUE);",
        "context_before": "76: \n77: \t//if (thisParentWnd)",
        "context_after": "79: \n80: \t//::DestroyWindow(thisWnd);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 80,
        "text": "::DestroyWindow(thisWnd);",
        "context_before": "78: \t//\tEnableWindow(thisParentWnd, TRUE);\n79: ",
        "context_after": "81: \n82: \t//return stopResult;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 82,
        "text": "return stopResult;",
        "context_before": "80: \t//::DestroyWindow(thisWnd);\n81: ",
        "context_after": "83: }\n84: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 105,
        "text": "but don't need to check for modeless dialog here",
        "context_before": "103: \n104: \t// IsDialogMessage is only needed for modeless dialogs",
        "context_after": "106: \t// because the main message loop waits when modal dialog\n107: \t// so it will be working for modeless dialogs only anyway"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 107,
        "text": "so it will be working for modeless dialogs only anyway",
        "context_before": "105: \t// but don't need to check for modeless dialog here\n106: \t// because the main message loop waits when modal dialog",
        "context_after": "108: \tfor (std::map<HWND, DialogEx*>::iterator it = mapDialogs.begin(), end = mapDialogs.end(); it != end; ++it)\n109: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 156,
        "text": "Similar to: MFC -> wincore.cpp -> void CWnd::CenterWindow(CWnd* pAlternateOwner)",
        "context_before": "154: void DialogEx::CenterDialog(HWND hDlg, HWND hParentWnd)\n155: {",
        "context_after": "157: \n158: \tif (hParentWnd == NULL)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.h",
        "line": 46,
        "text": "INT_PTR stopResult = 0;",
        "context_before": "44: \tHWND thisParentWnd = NULL;\n45: ",
        "context_after": "47: \tvoid EndDialog(INT_PTR result)\n48: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.h",
        "line": 49,
        "text": "stopResult = result;",
        "context_before": "47: \tvoid EndDialog(INT_PTR result)\n48: \t{",
        "context_after": "50: \t\t::EndDialog(thisWnd, result);\n51: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.h",
        "line": 54,
        "text": "http://www.codeguru.com/forum/showthread.php?t=287823&highlight=WndProc",
        "context_before": "52: \n53: private:",
        "context_after": "55: \t// http://blogs.msdn.com/b/oldnewthing/archive/2005/04/22/410773.aspx\n56: \tstatic std::map<HWND, DialogEx*> mapDialogs;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.h",
        "line": 55,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2005/04/22/410773.aspx",
        "context_before": "53: private:\n54: \t// http://www.codeguru.com/forum/showthread.php?t=287823&highlight=WndProc",
        "context_after": "56: \tstatic std::map<HWND, DialogEx*> mapDialogs;\n57: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.cpp",
        "line": 66,
        "text": "Move the icon to the center or when High DPI the position of the icon is incorrect",
        "context_before": "64: \t::SetDlgItemText(thisWnd, IDC_STATIC_LINE2, lang->GetLine(Lang::AboutDialog, 4));\n65: ",
        "context_after": "67: \tCRect rcDialog, rcIcon;\n68: \t::GetWindowRect(thisWnd, rcDialog);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.cpp",
        "line": 73,
        "text": "/////////////////////////////////",
        "context_before": "71: \trcIcon.MoveToX((rcDialog.Width() - rcIcon.Width()) / 2);\n72: \tMoveWindow(::GetDlgItem(thisWnd, IDC_STATIC_ICON_WINYL), rcIcon.left, rcIcon.top, rcIcon.Width(), rcIcon.Height(), TRUE);",
        "context_after": "74: \n75: \tstd::wstring site = lang->GetLineS(Lang::AboutDialog, 3) + L\" winyl-player.github.io\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.cpp",
        "line": 78,
        "text": "winyl-player.github.io\\\">winyl-player.github.io</A>\";",
        "context_before": "76: \tstd::wstring mail = lang->GetLineS(Lang::AboutDialog, 4) + L\" winyl.player@gmail.com\";\n77: ",
        "context_after": "79: \tstd::wstring mailLink = lang->GetLineS(Lang::AboutDialog, 4) + L\" <A HREF=\\\"mailto:winyl.player@gmail.com\\\">winyl.player@gmail.com</A>\";\n80: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.cpp",
        "line": 84,
        "text": "Compose \"Translated by\" text line",
        "context_before": "82: \twndMail = CreateLink(IDC_STATIC_MAIL, mail, mailLink);\n83: ",
        "context_after": "85: \tif (!lang->GetLineS(Lang::AboutDialog, 5).empty())\n86: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.cpp",
        "line": 136,
        "text": "Set the font or in Vista or newer incorrent font is set",
        "context_before": "134: \t\trc.left, rc.top, rc.Width(), rc.Height(), thisWnd, NULL, ::GetModuleHandle(NULL), NULL);\n135: ",
        "context_after": "137: \t::SendMessage(wnd, WM_SETFONT, (WPARAM)font, FALSE);\n138: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.h",
        "line": 41,
        "text": "void HelperScreenToClient(HWND wnd, LPRECT rect)",
        "context_before": "39: \tHWND CreateLink(int idStatic, const std::wstring& text, const std::wstring& link);\n40: ",
        "context_after": "42: \t//{\n43: \t//\t::ScreenToClient(wnd, (LPPOINT)rect);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.h",
        "line": 43,
        "text": "::ScreenToClient(wnd, (LPPOINT)rect);",
        "context_before": "41: \t//void HelperScreenToClient(HWND wnd, LPRECT rect)\n42: \t//{",
        "context_after": "44: \t//\t::ScreenToClient(wnd, ((LPPOINT)rect)+1);\n45: \t//\tif (::GetWindowLongPtr(wnd, GWL_EXSTYLE) & WS_EX_LAYOUTRTL)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.h",
        "line": 44,
        "text": "::ScreenToClient(wnd, ((LPPOINT)rect)+1);",
        "context_before": "42: \t//{\n43: \t//\t::ScreenToClient(wnd, (LPPOINT)rect);",
        "context_after": "45: \t//\tif (::GetWindowLongPtr(wnd, GWL_EXSTYLE) & WS_EX_LAYOUTRTL)\n46: \t//\t\tCRect::SwapLeftRight(rect);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.h",
        "line": 45,
        "text": "if (::GetWindowLongPtr(wnd, GWL_EXSTYLE) & WS_EX_LAYOUTRTL)",
        "context_before": "43: \t//\t::ScreenToClient(wnd, (LPPOINT)rect);\n44: \t//\t::ScreenToClient(wnd, ((LPPOINT)rect)+1);",
        "context_after": "46: \t//\t\tCRect::SwapLeftRight(rect);\n47: \t//};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.h",
        "line": 46,
        "text": "CRect::SwapLeftRight(rect);",
        "context_before": "44: \t//\t::ScreenToClient(wnd, ((LPPOINT)rect)+1);\n45: \t//\tif (::GetWindowLongPtr(wnd, GWL_EXSTYLE) & WS_EX_LAYOUTRTL)",
        "context_after": "47: \t//};\n48: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.h",
        "line": 49,
        "text": "void HelperClientToScreen(HWND wnd, LPRECT rect)",
        "context_before": "47: \t//};\n48: ",
        "context_after": "50: \t//{\n51: \t//\t::ClientToScreen(wnd, (LPPOINT)rect);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.h",
        "line": 51,
        "text": "::ClientToScreen(wnd, (LPPOINT)rect);",
        "context_before": "49: \t//void HelperClientToScreen(HWND wnd, LPRECT rect)\n50: \t//{",
        "context_after": "52: \t//\t::ClientToScreen(wnd, ((LPPOINT)rect)+1);\n53: \t//\tif (::GetWindowLongPtr(wnd, GWL_EXSTYLE) & WS_EX_LAYOUTRTL)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.h",
        "line": 52,
        "text": "::ClientToScreen(wnd, ((LPPOINT)rect)+1);",
        "context_before": "50: \t//{\n51: \t//\t::ClientToScreen(wnd, (LPPOINT)rect);",
        "context_after": "53: \t//\tif (::GetWindowLongPtr(wnd, GWL_EXSTYLE) & WS_EX_LAYOUTRTL)\n54: \t//\t\tCRect::SwapLeftRight(rect);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.h",
        "line": 53,
        "text": "if (::GetWindowLongPtr(wnd, GWL_EXSTYLE) & WS_EX_LAYOUTRTL)",
        "context_before": "51: \t//\t::ClientToScreen(wnd, (LPPOINT)rect);\n52: \t//\t::ClientToScreen(wnd, ((LPPOINT)rect)+1);",
        "context_after": "54: \t//\t\tCRect::SwapLeftRight(rect);\n55: \t//};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.h",
        "line": 54,
        "text": "CRect::SwapLeftRight(rect);",
        "context_before": "52: \t//\t::ClientToScreen(wnd, ((LPPOINT)rect)+1);\n53: \t//\tif (::GetWindowLongPtr(wnd, GWL_EXSTYLE) & WS_EX_LAYOUTRTL)",
        "context_after": "55: \t//};\n56: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgConfig.cpp",
        "line": 37,
        "text": "Without WS_CLIPCHILDREN controls are blinking a bit when change a tab",
        "context_before": "35: \t{\n36: \tcase WM_INITDIALOG:",
        "context_after": "38: \t\tLONG_PTR style;\n39: \t\tstyle = ::GetWindowLongPtr(thisWnd, GWL_STYLE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgConfig.cpp",
        "line": 95,
        "text": "::GetClientRect(tabConfig, rcTab);",
        "context_before": "93: \n94: \tCRect rcTab;",
        "context_after": "96: \t::GetWindowRect(tabConfig, rcTab);\n97: \t::MapWindowPoints(NULL, thisWnd, (LPPOINT)&rcTab, 2);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgConfig.cpp",
        "line": 165,
        "text": "::BringWindowToTop(pageGeneral.Wnd());",
        "context_before": "163: \tif (page == 0)\n164: \t{",
        "context_after": "166: \t\t::ShowWindow(pageGeneral.Wnd(), SW_SHOW);\n167: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgConfig.cpp",
        "line": 170,
        "text": "::BringWindowToTop(pageSystem.Wnd());",
        "context_before": "168: \telse if (page == 1)\n169: \t{",
        "context_after": "171: \t\t::ShowWindow(pageSystem.Wnd(), SW_SHOW);\n172: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgConfig.cpp",
        "line": 175,
        "text": "::BringWindowToTop(pagePopup.Wnd());",
        "context_before": "173: \telse if (page == 2)\n174: \t{",
        "context_after": "176: \t\t::ShowWindow(pagePopup.Wnd(), SW_SHOW);\n177: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgConfig.cpp",
        "line": 180,
        "text": "::BringWindowToTop(pageMini.Wnd());",
        "context_before": "178: \telse if (page == 3)\n179: \t{",
        "context_after": "181: \t\t::ShowWindow(pageMini.Wnd(), SW_SHOW);\n182: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 81,
        "text": "Get equalizer settings",
        "context_before": "79: \teqSteps = 10;\n80: ",
        "context_after": "82: \teqPreamp = FromFloat(libAudio->GetPreamp());\n83: \tfor (int i = 0; i < 10; ++i)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 114,
        "text": "Set all sliders",
        "context_before": "112: \tsliderEQ9 = ::GetDlgItem(thisWnd, IDC_SLIDER_EQ9);\n113: ",
        "context_after": "115: \t::SendMessage(sliderPreamp, TBM_SETRANGE, TRUE, MAKELPARAM(0, 48));\n116: \t::SendMessage(sliderEQ0, TBM_SETRANGE, TRUE, MAKELPARAM(0, 48));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 148,
        "text": "-::MulDiv(7, ::GetDeviceCaps(dcTemp, LOGPIXELSY), 72);",
        "context_before": "146: \n147: \tHDC dcTemp = ::GetDC(thisWnd);",
        "context_after": "149: \t::ReleaseDC(thisWnd, dcTemp);\n150: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 173,
        "text": "Menu init",
        "context_before": "171: \tLoadPresets();\n172: ",
        "context_after": "174: \n175: \tpresetsMenu = ::CreatePopupMenu();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 182,
        "text": "Toolbar init",
        "context_before": "180: \t\t::AppendMenu(presetsMenu, MF_STRING, 10000 + i + 1, presets[i].name.c_str());\n181: ",
        "context_after": "183: \n184: \tCRect rcTL;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 187,
        "text": "For High DPI",
        "context_before": "185: \t::GetWindowRect(::GetDlgItem(thisWnd, IDC_STATIC_RECT), rcTL);\n186: \t::MapWindowPoints(NULL, thisWnd, (LPPOINT)&rcTL, 2);",
        "context_after": "188: \trcTL.bottom += (rcTL.Height() - 20) / 4; // For High DPI\n189: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 188,
        "text": "For High DPI",
        "context_before": "186: \t::MapWindowPoints(NULL, thisWnd, (LPPOINT)&rcTL, 2);\n187: \trcTL.top += (rcTL.Height() - 20) / 4; // For High DPI",
        "context_after": "189: \n190: \tpresetsBar = ::CreateWindowEx(0, TOOLBARCLASSNAME, L\"\", CCS_NODIVIDER|CCS_NORESIZE|TBSTYLE_LIST|TBSTYLE_FLAT|WS_CHILD|WS_VISIBLE,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 199,
        "text": "For High DPI",
        "context_before": "197: \t::SendMessage(presetsBar, TB_SETIMAGELIST, 0, NULL);\n198: ",
        "context_after": "200: \t::SendMessage(presetsBar, TB_SETBUTTONWIDTH, 0, MAKELPARAM(width, width)); // MAKELPARAM(74, 74)\n201: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 200,
        "text": "MAKELPARAM(74, 74)",
        "context_before": "198: \n199: \tint width = rcTL.Width() - 10 - (rcTL.Width() - 84) / 4; // For High DPI",
        "context_after": "201: \n202: \tTBBUTTON button = {};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 204,
        "text": "|TBSTYLE_DROPDOWN;",
        "context_before": "202: \tTBBUTTON button = {};\n203: \tbutton.fsState = TBSTATE_ENABLED;",
        "context_after": "205: \n206: \tbutton.idCommand = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 207,
        "text": "I_IMAGENONE;",
        "context_before": "205: \n206: \tbutton.idCommand = 0;",
        "context_after": "208: \tbutton.iString = reinterpret_cast<INT_PTR>(L\"\"); // Need!\n209: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 285,
        "text": "case TB_ENDTRACK:",
        "context_before": "283: \t\tcase TB_LINEUP:\n284: \t\tcase TB_LINEDOWN:",
        "context_after": "286: \t\t{\n287: \t\t\tif (!isUserDefined)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 362,
        "text": "Handle click on \"0 db\" label to reset all faders",
        "context_before": "360: void DlgEqualizer::OnCommand(WPARAM wParam, LPARAM lParam)\n361: {",
        "context_after": "363: \tif (LOWORD(wParam) == IDC_STATIC_ZERO && HIWORD(wParam) == STN_CLICKED)\n364: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 496,
        "text": "Convert dB value to slider position",
        "context_before": "494: int DlgEqualizer::FromFloat(float f)\n495: {",
        "context_after": "497: \t// Range: ±15 dB for more musical headroom (was ±12 dB)\n498: \t// Formula: center_position - (dB_value * steps_per_dB)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 497,
        "text": "Range: ±15 dB for more musical headroom (was ±12 dB)",
        "context_before": "495: {\n496: \t// Convert dB value to slider position",
        "context_after": "498: \t// Formula: center_position - (dB_value * steps_per_dB)\n499: \treturn 24 - (int)(f * 24.0f / 15.0f);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 498,
        "text": "Formula: center_position - (dB_value * steps_per_dB)",
        "context_before": "496: \t// Convert dB value to slider position\n497: \t// Range: ±15 dB for more musical headroom (was ±12 dB)",
        "context_after": "499: \treturn 24 - (int)(f * 24.0f / 15.0f);\n500: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 504,
        "text": "Convert slider position to dB value",
        "context_before": "502: float DlgEqualizer::ToFloat(int i)\n503: {",
        "context_after": "505: \t// Range: ±15 dB for more musical headroom (was ±12 dB)\n506: \t// Formula: (center_position - slider_position) * dB_per_step"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 505,
        "text": "Range: ±15 dB for more musical headroom (was ±12 dB)",
        "context_before": "503: {\n504: \t// Convert slider position to dB value",
        "context_after": "506: \t// Formula: (center_position - slider_position) * dB_per_step\n507: \treturn ((float)(int)(24 - i) * 15.0f / 24.0f);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 506,
        "text": "Formula: (center_position - slider_position) * dB_per_step",
        "context_before": "504: \t// Convert slider position to dB value\n505: \t// Range: ±15 dB for more musical headroom (was ±12 dB)",
        "context_after": "507: \treturn ((float)(int)(24 - i) * 15.0f / 24.0f);\n508: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 517,
        "text": "if (!libAudio->IsFloatSupport())",
        "context_before": "515: \t\tApplyEqualizer();\n516: ",
        "context_after": "518: \t\t//\tMessageBox(lang->GetLine(Lang::MESSAGE, 9) + CString('\\n') + lang->GetLine(Lang::MESSAGE, 10), lang->GetLine(Lang::MESSAGE, 1), MB_OK|MB_ICONWARNING);\n519: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 534,
        "text": "Load default presets from data directory",
        "context_before": "532: bool DlgEqualizer::LoadPresets()\n533: {",
        "context_after": "535: \tstd::wstring defaultFile = programPath;\n536: \tdefaultFile += L\"data\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 548,
        "text": "Load user presets from profile directory",
        "context_before": "546: \tLoadPresetsFromFile(defaultFile);\n547: ",
        "context_after": "549: \tstd::wstring userFile = profilePath;\n550: \tuserFile += L\"Equalizer\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 629,
        "text": "Set all sliders to center position (24 = 0 dB)",
        "context_before": "627: void DlgEqualizer::ResetAllFaders()\n628: {",
        "context_after": "630: \tconst int centerPos = 24;\n631: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 632,
        "text": "Reset preamp",
        "context_before": "630: \tconst int centerPos = 24;\n631: ",
        "context_after": "633: \t::SendMessage(sliderPreamp, TBM_SETPOS, TRUE, centerPos);\n634: \teqPreamp = centerPos;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 637,
        "text": "Reset all EQ bands",
        "context_before": "635: \tlibAudio->SetPreamp(ToFloat(eqPreamp));\n636: ",
        "context_after": "638: \t::SendMessage(sliderEQ0, TBM_SETPOS, TRUE, centerPos);\n639: \t::SendMessage(sliderEQ1, TBM_SETPOS, TRUE, centerPos);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 649,
        "text": "Update internal values and apply to audio system",
        "context_before": "647: \t::SendMessage(sliderEQ9, TBM_SETPOS, TRUE, centerPos);\n648: ",
        "context_after": "650: \tfor (int i = 0; i < 10; ++i) {\n651: \t\teqValues[i] = centerPos;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 655,
        "text": "Clear preset selection since we manually reset",
        "context_before": "653: \t}\n654: ",
        "context_after": "656: \tlibAudio->SetEqPreset(L\"\");\n657: \tisUserDefined = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 44,
        "text": "Pass the keys to the parent window",
        "context_before": "42: \t\treturn 0;\n43: ",
        "context_after": "45: \telse if (message == WM_KEYDOWN || message == WM_SYSKEYDOWN)\n46: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 59,
        "text": "Subclass ListView to overlap keys",
        "context_before": "57: \t{\n58: \tcase WM_INITDIALOG:",
        "context_after": "60: \t\tHWND wndSubclass;\n61: \t\tdlgHotKeys = this;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 98,
        "text": "Assign styles and the theme to ListView (Vista/7 selection style like in explorer)",
        "context_before": "96: \tlistKeys = ::GetDlgItem(thisWnd, IDC_LIST_KEYS);\n97: ",
        "context_after": "99: \tListView_SetExtendedListViewStyleEx(listKeys, 0, LVS_EX_FULLROWSELECT|LVS_EX_INFOTIP|LVS_EX_DOUBLEBUFFER);\n100: \t::SetWindowTheme(listKeys, L\"explorer\", NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 102,
        "text": "Load icon",
        "context_before": "100: \t::SetWindowTheme(listKeys, L\"explorer\", NULL);\n101: ",
        "context_after": "103: \timListKeys = ::ImageList_Create(16, 16, ILC_COLOR32, 0, 0);\n104: \tif (imListKeys)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 146,
        "text": "Critical error",
        "context_before": "144: \tSetWindowRedraw(listKeys, TRUE);\n145: ",
        "context_after": "147: \tif (keys.size() != keysState.size())\n148: \t\tListView_DeleteAllItems(listKeys);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 153,
        "text": "Critical error",
        "context_before": "151: void DlgHotKeys::OnBnClickedOK()\n152: {",
        "context_after": "154: \tif (keys.size() != keysState.size())\n155: \t\treturn;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 177,
        "text": "Search for a hotkey",
        "context_before": "175: \tstd::wstring keyString;\n176: ",
        "context_after": "178: \tstd::size_t find = hotKeys->FindKeyByType(type);\n179: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 180,
        "text": "Compose the hotkey name",
        "context_before": "178: \tstd::size_t find = hotKeys->FindKeyByType(type);\n179: ",
        "context_after": "181: \tif (find != -1)\n182: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 221,
        "text": "Nothing is selected",
        "context_before": "219: void DlgHotKeys::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)\n220: {",
        "context_after": "222: \tif (ListView_GetItemCount(listKeys) == 0)\n223: \t\treturn;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 225,
        "text": "Modifier key is pressed",
        "context_before": "223: \t\treturn;\n224: ",
        "context_after": "226: \tif (nChar == VK_CONTROL || nChar == VK_MENU || nChar == VK_SHIFT ||\n227: \t\tnChar == VK_LWIN || nChar == VK_RWIN)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 234,
        "text": "When press \"Delete\", \"Backspace\", \"F12\" or an undefined key remove the hotkey",
        "context_before": "232: \tstd::wstring keyString = NameFromVKey(nChar);\n233: ",
        "context_after": "235: \t// F12 note https://msdn.microsoft.com/en-us/library/windows/desktop/ms646309(v=vs.85).aspx\n236: \t// The F12 key is reserved for use by the debugger at all times, so it should not be registered as a hot key."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 236,
        "text": "The F12 key is reserved for use by the debugger at all times, so it should not be registered as a hot key.",
        "context_before": "234: \t// When press \"Delete\", \"Backspace\", \"F12\" or an undefined key remove the hotkey\n235: \t// F12 note https://msdn.microsoft.com/en-us/library/windows/desktop/ms646309(v=vs.85).aspx",
        "context_after": "237: \t// Even when you are not debugging an application, F12 is reserved in case a kernel-mode debugger or a just-in-time debugger is resident.\n238: \tif (nChar == VK_DELETE || nChar == VK_BACK || nChar == VK_F12 || keyString.empty())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 237,
        "text": "Even when you are not debugging an application, F12 is reserved in case a kernel-mode debugger or a just-in-time debugger is resident.",
        "context_before": "235: \t// F12 note https://msdn.microsoft.com/en-us/library/windows/desktop/ms646309(v=vs.85).aspx\n236: \t// The F12 key is reserved for use by the debugger at all times, so it should not be registered as a hot key.",
        "context_after": "238: \tif (nChar == VK_DELETE || nChar == VK_BACK || nChar == VK_F12 || keyString.empty())\n239: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 263,
        "text": "if (!keys[index].isCtrl &&",
        "context_before": "261: \t\tkeys[index].isShift = true;\n262: ",
        "context_after": "264: //\t\t!keys[index].isAlt &&\n265: //\t\t!keys[index].isWin &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 264,
        "text": "!keys[index].isAlt &&",
        "context_before": "262: \n263: //\tif (!keys[index].isCtrl &&",
        "context_after": "265: //\t\t!keys[index].isWin &&\n266: //\t\t!keys[index].isShift)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 265,
        "text": "!keys[index].isWin &&",
        "context_before": "263: //\tif (!keys[index].isCtrl &&\n264: //\t\t!keys[index].isAlt &&",
        "context_after": "266: //\t\t!keys[index].isShift)\n267: //\t\tkeys[index].isCtrl = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 266,
        "text": "!keys[index].isShift)",
        "context_before": "264: //\t\t!keys[index].isAlt &&\n265: //\t\t!keys[index].isWin &&",
        "context_after": "267: //\t\tkeys[index].isCtrl = true;\n268: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 267,
        "text": "keys[index].isCtrl = true;",
        "context_before": "265: //\t\t!keys[index].isWin &&\n266: //\t\t!keys[index].isShift)",
        "context_after": "268: \n269: \tstd::wstring keyString2;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 314,
        "text": "Basic keys names",
        "context_before": "312: \tswitch(nVK)\n313: \t{",
        "context_after": "315: \t\tcase VK_PAUSE:\n316: \t\t\treturn L\"Pause\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 342,
        "text": "Media keys names",
        "context_before": "340: \t\t\treturn L\"Num Lock\";\n341: ",
        "context_after": "343: \t\tcase VK_BROWSER_BACK:\n344: \t\t\treturn L\"Browser Back\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 381,
        "text": "Use GetKeyNameText to get other key names",
        "context_before": "379: \t}\n380: ",
        "context_after": "382: \n383: \tUINT scanCode = ::MapVirtualKey(nVK, 0);//, GetKeyboardLayout(0));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 383,
        "text": ", GetKeyboardLayout(0));",
        "context_before": "381: \t// Use GetKeyNameText to get other key names\n382: ",
        "context_after": "384: \n385: \twchar_t key[80] = {};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.h",
        "line": 55,
        "text": "For control subclassing",
        "context_before": "53: \tvoid DeleteDuplicated(int index);\n54: ",
        "context_after": "56: \tstatic DlgHotKeys* dlgHotKeys;\n57: \tstatic WNDPROC mainDlgProc;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLanguage.cpp",
        "line": 71,
        "text": "Assign styles and the theme to ListView (Vista/7 selection style like in explorer)",
        "context_before": "69: \tlistLanguage = ::GetDlgItem(thisWnd, IDC_LIST_LANGUAGE);\n70: ",
        "context_after": "72: \tListView_SetExtendedListViewStyleEx(listLanguage, 0, LVS_EX_FULLROWSELECT|LVS_EX_INFOTIP|LVS_EX_DOUBLEBUFFER);\n73: \t::SetWindowTheme(listLanguage, L\"explorer\", NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLanguage.cpp",
        "line": 75,
        "text": "imListLanguage = ::ImageList_Create(16, 16, ILC_COLOR32, 0, 0);",
        "context_before": "73: \t::SetWindowTheme(listLanguage, L\"explorer\", NULL);\n74: ",
        "context_after": "76: \t//ListView_SetImageList(listLanguage, imListLanguage, LVSIL_SMALL);\n77: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLanguage.cpp",
        "line": 76,
        "text": "ListView_SetImageList(listLanguage, imListLanguage, LVSIL_SMALL);",
        "context_before": "74: \n75: \t//imListLanguage = ::ImageList_Create(16, 16, ILC_COLOR32, 0, 0);",
        "context_after": "77: \n78: \t// Load icon"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLanguage.cpp",
        "line": 78,
        "text": "Load icon",
        "context_before": "76: \t//ListView_SetImageList(listLanguage, imListLanguage, LVSIL_SMALL);\n77: ",
        "context_after": "79: \timListLanguage = ::ImageList_Create(16, 16, ILC_COLOR32, 0, 0);\n80: \tif (imListLanguage)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLanguage.cpp",
        "line": 99,
        "text": "Search for subfolders in Language folder",
        "context_before": "97: \n98: ",
        "context_after": "100: \tstd::wstring path = programPath;\n101: \tpath += L\"Language\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLanguage.cpp",
        "line": 114,
        "text": "Compose a flag icon path",
        "context_before": "112: \t\t\tstd::wstring fileName = find.GetFileName();\n113: ",
        "context_after": "115: \t\t\tstd::wstring fileIcon = programPath;\n116: \t\t\tfileIcon += L\"Language\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLanguage.cpp",
        "line": 130,
        "text": "item.iImage = ImageList_GetImageCount(imListLanguage) - 1;",
        "context_before": "128: \t\t\titem.iItem = 0;\n129: \t\t\titem.iSubItem = 0;",
        "context_after": "131: \t\t\titem.iImage = 0;\n132: \t\t\titem.pszText = const_cast<wchar_t*>(fileName.c_str());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLanguage.cpp",
        "line": 137,
        "text": "Alternative for column.cx = rcList.Width() - ::GetSystemMetrics(SM_CXVSCROLL);",
        "context_before": "135: \t}\n136: ",
        "context_after": "138: \t//ListView_SetColumnWidth(listLanguage, 0, LVSCW_AUTOSIZE_USEHEADER);\n139: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLanguage.cpp",
        "line": 138,
        "text": "ListView_SetColumnWidth(listLanguage, 0, LVSCW_AUTOSIZE_USEHEADER);",
        "context_before": "136: \n137: \t// Alternative for column.cx = rcList.Width() - ::GetSystemMetrics(SM_CXVSCROLL);",
        "context_after": "139: \n140: \tSetWindowRedraw(listLanguage, TRUE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLibrary.cpp",
        "line": 37,
        "text": "Without WS_CLIPCHILDREN controls are blinking a bit when change a tab",
        "context_before": "35: \t{\n36: \tcase WM_INITDIALOG:",
        "context_after": "38: \t\tLONG_PTR style;\n39: \t\tstyle = ::GetWindowLongPtr(thisWnd, GWL_STYLE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLibrary.cpp",
        "line": 111,
        "text": "if (HIWORD(GetAsyncKeyState(VK_CONTROL)))",
        "context_before": "109: void DlgLibrary::OnBnClickedOK()\n110: {",
        "context_after": "112: \t//\tisUpdateAll = true;\n113: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLibrary.cpp",
        "line": 112,
        "text": "isUpdateAll = true;",
        "context_before": "110: {\n111: \t//if (HIWORD(GetAsyncKeyState(VK_CONTROL)))",
        "context_after": "113: \n114: \tpageLibrary.Save();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 60,
        "text": "Disable close button",
        "context_before": "58: void DlgNewVersion::OnInitDialog()\n59: {",
        "context_after": "61: \t//LONG_PTR style = GetWindowLongPtr(thisWnd, GWL_STYLE);\n62: \t//SetWindowLongPtr(thisWnd, GWL_STYLE, style & ~WS_SYSMENU);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 61,
        "text": "LONG_PTR style = GetWindowLongPtr(thisWnd, GWL_STYLE);",
        "context_before": "59: {\n60: \t// Disable close button",
        "context_after": "62: \t//SetWindowLongPtr(thisWnd, GWL_STYLE, style & ~WS_SYSMENU);\n63: \t::EnableMenuItem(::GetSystemMenu(thisWnd, FALSE), SC_CLOSE, MF_BYCOMMAND|MF_GRAYED);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 62,
        "text": "SetWindowLongPtr(thisWnd, GWL_STYLE, style & ~WS_SYSMENU);",
        "context_before": "60: \t// Disable close button\n61: \t//LONG_PTR style = GetWindowLongPtr(thisWnd, GWL_STYLE);",
        "context_after": "63: \t::EnableMenuItem(::GetSystemMenu(thisWnd, FALSE), SC_CLOSE, MF_BYCOMMAND|MF_GRAYED);\n64: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 127,
        "text": "If update from version before 2.4 need to do this",
        "context_before": "125: \tif (IsLibraryOld())\n126: \t{",
        "context_after": "128: \t\tFileSystem::Rename(profilePath + L\"Playlist\", profilePath + L\"Playlists\");\n129: \t\tFileSystem::Rename(profilePath + L\"Playlist.xml\", profilePath + L\"Playlists.xml\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 174,
        "text": "file is 5th column = old format",
        "context_before": "172: \t\tfor (int i = 0; i < 5 && sqlSelect.StepRow(); ++i)\n173: \t\t{",
        "context_after": "175: \t\t\t\tresult = true;\n176: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 235,
        "text": "fromto: id",
        "context_before": "233: \t\t\twhile (sqlSelect.StepRow())\n234: \t\t\t{",
        "context_after": "236: \n237: \t\t\t\tsqlInsert.BindTextRaw(3, sqlSelect.ColumnTextRaw(2)); // fromto: deleted"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 237,
        "text": "fromto: deleted",
        "context_before": "235: \t\t\t\tsqlInsert.BindInt64(1, sqlSelect.ColumnInt64(0)); // fromto: id\n236: ",
        "context_after": "238: \n239: \t\t\t\tsqlInsert.BindTextRaw(4, sqlSelect.ColumnTextRaw(7)); // fromto: added"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 239,
        "text": "fromto: added",
        "context_before": "237: \t\t\t\tsqlInsert.BindTextRaw(3, sqlSelect.ColumnTextRaw(2)); // fromto: deleted\n238: ",
        "context_after": "240: \n241: \t\t\t\tstd::wstring file = sqlSelect.ColumnText16(4); // from: file"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 241,
        "text": "from: file",
        "context_before": "239: \t\t\t\tsqlInsert.BindTextRaw(4, sqlSelect.ColumnTextRaw(7)); // fromto: added\n240: ",
        "context_after": "242: \n243: \t\t\t\tsqlInsert.BindInt(8, StringEx::HashFNV1a32(StringEx::ToLowerUS(file))); // to: filehash"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 243,
        "text": "to: filehash",
        "context_before": "241: \t\t\t\tstd::wstring file = sqlSelect.ColumnText16(4); // from: file\n242: ",
        "context_after": "244: \t\t\t\tsqlInsert.BindText16(9, PathEx::PathFromFile(file)); // to: path\n245: \t\t\t\tsqlInsert.BindText16(10, PathEx::FileFromPath(file)); // to: file"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 244,
        "text": "to: path",
        "context_before": "242: \n243: \t\t\t\tsqlInsert.BindInt(8, StringEx::HashFNV1a32(StringEx::ToLowerUS(file))); // to: filehash",
        "context_after": "245: \t\t\t\tsqlInsert.BindText16(10, PathEx::FileFromPath(file)); // to: file\n246: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 245,
        "text": "to: file",
        "context_before": "243: \t\t\t\tsqlInsert.BindInt(8, StringEx::HashFNV1a32(StringEx::ToLowerUS(file))); // to: filehash\n244: \t\t\t\tsqlInsert.BindText16(9, PathEx::PathFromFile(file)); // to: path",
        "context_after": "246: \n247: \t\t\t\tsqlInsert.BindTextRaw(11, sqlSelect.ColumnTextRaw(5)); // from: size to: filesize"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 247,
        "text": "from: size to: filesize",
        "context_before": "245: \t\t\t\tsqlInsert.BindText16(10, PathEx::FileFromPath(file)); // to: file\n246: ",
        "context_after": "248: \t\t\t\tsqlInsert.BindTextRaw(12, sqlSelect.ColumnTextRaw(6)); // fromto: modified\n249: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 248,
        "text": "fromto: modified",
        "context_before": "246: \n247: \t\t\t\tsqlInsert.BindTextRaw(11, sqlSelect.ColumnTextRaw(5)); // from: size to: filesize",
        "context_after": "249: \n250: \t\t\t\t//"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 252,
        "text": "from: title",
        "context_before": "250: \t\t\t\t//\n251: ",
        "context_after": "253: \t\t\t\tconst char* album = sqlSelect.ColumnTextRaw(11); // from: album\n254: \t\t\t\tconst char* artist = sqlSelect.ColumnTextRaw(10); // from: artist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 253,
        "text": "from: album",
        "context_before": "251: \n252: \t\t\t\tconst char* title = sqlSelect.ColumnTextRaw(9); // from: title",
        "context_after": "254: \t\t\t\tconst char* artist = sqlSelect.ColumnTextRaw(10); // from: artist\n255: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 254,
        "text": "from: artist",
        "context_before": "252: \t\t\t\tconst char* title = sqlSelect.ColumnTextRaw(9); // from: title\n253: \t\t\t\tconst char* album = sqlSelect.ColumnTextRaw(11); // from: album",
        "context_after": "255: \n256: \t\t\t\tif (title && strcmp(title, \"\") != 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 257,
        "text": "to: trackhash",
        "context_before": "255: \n256: \t\t\t\tif (title && strcmp(title, \"\") != 0)",
        "context_after": "258: \t\t\t\telse\n259: \t\t\t\t\tsqlInsert.BindInt(14, StringEx::HashFNV1a32(PathEx::FileFromPath(file) + UTF::UTF16(album) + UTF::UTF16(artist))); // to: trackhash"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 259,
        "text": "to: trackhash",
        "context_before": "257: \t\t\t\t\tsqlInsert.BindInt(14, StringEx::HashFNV1a32(UTF::UTF16(title) + UTF::UTF16(album) + UTF::UTF16(artist))); // to: trackhash\n258: \t\t\t\telse",
        "context_after": "260: \n261: \t\t\t\tif (title && strcmp(title, \"\") != 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 262,
        "text": "to: title",
        "context_before": "260: \n261: \t\t\t\tif (title && strcmp(title, \"\") != 0)",
        "context_after": "263: \n264: \t\t\t\tif (album && strcmp(album, \"\") != 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 265,
        "text": "to: album",
        "context_before": "263: \n264: \t\t\t\tif (album && strcmp(album, \"\") != 0)",
        "context_after": "266: \n267: \t\t\t\tif (artist && strcmp(artist, \"\") != 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 268,
        "text": "to: artist",
        "context_before": "266: \n267: \t\t\t\tif (artist && strcmp(artist, \"\") != 0)",
        "context_after": "269: \n270: \t\t\t\tconst char* track = sqlSelect.ColumnTextRaw(8); // from: number"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 270,
        "text": "from: number",
        "context_before": "268: \t\t\t\t\tsqlInsert.BindTextRaw(21, artist); // to: artist\n269: ",
        "context_after": "271: \t\t\t\tif (track && strcmp(track, \"\") != 0)\n272: \t\t\t\t\tsqlInsert.BindTextRaw(15, track); // to: track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 272,
        "text": "to: track",
        "context_before": "270: \t\t\t\tconst char* track = sqlSelect.ColumnTextRaw(8); // from: number\n271: \t\t\t\tif (track && strcmp(track, \"\") != 0)",
        "context_after": "273: \n274: \t\t\t\tconst char* albumartist = sqlSelect.ColumnTextRaw(14); // from: albumartist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 274,
        "text": "from: albumartist",
        "context_before": "272: \t\t\t\t\tsqlInsert.BindTextRaw(15, track); // to: track\n273: ",
        "context_after": "275: \t\t\t\tif (albumartist && strcmp(albumartist, \"\") != 0)\n276: \t\t\t\t\tsqlInsert.BindTextRaw(22, albumartist); // to: albumartist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 276,
        "text": "to: albumartist",
        "context_before": "274: \t\t\t\tconst char* albumartist = sqlSelect.ColumnTextRaw(14); // from: albumartist\n275: \t\t\t\tif (albumartist && strcmp(albumartist, \"\") != 0)",
        "context_after": "277: \n278: \t\t\t\tconst char* composer = sqlSelect.ColumnTextRaw(15); // from: composer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 278,
        "text": "from: composer",
        "context_before": "276: \t\t\t\t\tsqlInsert.BindTextRaw(22, albumartist); // to: albumartist\n277: ",
        "context_after": "279: \t\t\t\tif (composer && strcmp(composer, \"\") != 0)\n280: \t\t\t\t\tsqlInsert.BindTextRaw(23, composer); // to: composer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 280,
        "text": "to: composer",
        "context_before": "278: \t\t\t\tconst char* composer = sqlSelect.ColumnTextRaw(15); // from: composer\n279: \t\t\t\tif (composer && strcmp(composer, \"\") != 0)",
        "context_after": "281: \n282: \t\t\t\tconst char* genre = sqlSelect.ColumnTextRaw(13); // from: genre"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 282,
        "text": "from: genre",
        "context_before": "280: \t\t\t\t\tsqlInsert.BindTextRaw(23, composer); // to: composer\n281: ",
        "context_after": "283: \t\t\t\tif (genre && strcmp(genre, \"\") != 0)\n284: \t\t\t\t\tsqlInsert.BindTextRaw(24, genre); // to: genre"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 284,
        "text": "to: genre",
        "context_before": "282: \t\t\t\tconst char* genre = sqlSelect.ColumnTextRaw(13); // from: genre\n283: \t\t\t\tif (genre && strcmp(genre, \"\") != 0)",
        "context_after": "285: \n286: \t\t\t\tconst char* year = sqlSelect.ColumnTextRaw(12); // from: year"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 286,
        "text": "from: year",
        "context_before": "284: \t\t\t\t\tsqlInsert.BindTextRaw(24, genre); // to: genre\n285: ",
        "context_after": "287: \t\t\t\tif (year && strcmp(year, \"\") != 0)\n288: \t\t\t\t\tsqlInsert.BindTextRaw(25, year); // to: year"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 288,
        "text": "to: year",
        "context_before": "286: \t\t\t\tconst char* year = sqlSelect.ColumnTextRaw(12); // from: year\n287: \t\t\t\tif (year && strcmp(year, \"\") != 0)",
        "context_after": "289: \n290: \t\t\t\t//"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 294,
        "text": "from: time",
        "context_before": "292: \t\t\t\tif (sqlSelect.ColumnTextRaw(17))\n293: \t\t\t\t{",
        "context_after": "295: \t\t\t\t\tsqlInsert.BindInt(37, duration); // to: duration\n296: \t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 295,
        "text": "to: duration",
        "context_before": "293: \t\t\t\t{\n294: \t\t\t\t\tint duration = sqlSelect.ColumnInt(17) * 1000; // from: time",
        "context_after": "296: \t\t\t\t}\n297: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 298,
        "text": "from: channel to: channels",
        "context_before": "296: \t\t\t\t}\n297: ",
        "context_after": "299: \n300: \t\t\t\tsqlInsert.BindTextRaw(39, sqlSelect.ColumnTextRaw(19)); // fromto: bitrate"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 300,
        "text": "fromto: bitrate",
        "context_before": "298: \t\t\t\tsqlInsert.BindTextRaw(38, sqlSelect.ColumnTextRaw(21)); // from: channel to: channels\n299: ",
        "context_after": "301: \n302: \t\t\t\tsqlInsert.BindTextRaw(40, sqlSelect.ColumnTextRaw(20)); // from: sample to: samplerate"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 302,
        "text": "from: sample to: samplerate",
        "context_before": "300: \t\t\t\tsqlInsert.BindTextRaw(39, sqlSelect.ColumnTextRaw(19)); // fromto: bitrate\n301: ",
        "context_after": "303: \n304: \t\t\t\t//"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 306,
        "text": "fromto: rating",
        "context_before": "304: \t\t\t\t//\n305: ",
        "context_after": "307: \n308: \t\t\t\tint playCount = sqlSelect.ColumnInt(24); // from: count"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 308,
        "text": "from: count",
        "context_before": "306: \t\t\t\tsqlInsert.BindTextRaw(41, sqlSelect.ColumnTextRaw(22)); // fromto: rating\n307: ",
        "context_after": "309: \t\t\t\tconst char* lastplayed = sqlSelect.ColumnTextRaw(25); // from: lastcount\n310: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 309,
        "text": "from: lastcount",
        "context_before": "307: \n308: \t\t\t\tint playCount = sqlSelect.ColumnInt(24); // from: count",
        "context_after": "310: \n311: \t\t\t\tif (playCount > 0 && lastplayed && strcmp(lastplayed, \"\") != 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 313,
        "text": "to: playcount",
        "context_before": "311: \t\t\t\tif (playCount > 0 && lastplayed && strcmp(lastplayed, \"\") != 0)\n312: \t\t\t\t{",
        "context_after": "314: \t\t\t\t\tsqlInsert.BindTextRaw(46, lastplayed); // to: lastplayed\n315: \t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 314,
        "text": "to: lastplayed",
        "context_before": "312: \t\t\t\t{\n313: \t\t\t\t\tsqlInsert.BindInt(45, playCount); // to: playcount",
        "context_after": "315: \t\t\t\t}\n316: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 317,
        "text": "from: skip",
        "context_before": "315: \t\t\t\t}\n316: ",
        "context_after": "318: \t\t\t\tconst char* lastskipped = sqlSelect.ColumnTextRaw(27); // from: lastskip\n319: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 318,
        "text": "from: lastskip",
        "context_before": "316: \n317: \t\t\t\tint skipCount = sqlSelect.ColumnInt(26); // from: skip",
        "context_after": "319: \n320: \t\t\t\tif (skipCount > 0 && lastskipped && strcmp(lastskipped, \"\") != 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 322,
        "text": "to: skipcount",
        "context_before": "320: \t\t\t\tif (skipCount > 0 && lastskipped && strcmp(lastskipped, \"\") != 0)\n321: \t\t\t\t{",
        "context_after": "323: \t\t\t\t\tsqlInsert.BindTextRaw(48, lastskipped); // to: lastskipped\n324: \t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 323,
        "text": "to: lastskipped",
        "context_before": "321: \t\t\t\t{\n322: \t\t\t\t\tsqlInsert.BindInt(47, skipCount); // to: skipcount",
        "context_after": "324: \t\t\t\t}\n325: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 359,
        "text": "file is 5th column = old format",
        "context_before": "357: \t\tfor (int i = 0; i < 5 && sqlSelect.StepRow(); ++i)\n358: \t\t{",
        "context_after": "360: \t\t\t\tresult = true;\n361: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 369,
        "text": "Create empty playlist if something wrong",
        "context_before": "367: \t}\n368: ",
        "context_after": "370: \t{\n371: \t\tstd::wstring filePlaylistNew = profilePath;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 426,
        "text": "fromto: id",
        "context_before": "424: \t\t\twhile (sqlSelect.StepRow())\n425: \t\t\t{",
        "context_after": "427: \n428: \t\t\t\tint type = sqlSelect.ColumnInt(18); // from: type"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 428,
        "text": "from: type",
        "context_before": "426: \t\t\t\tsqlInsert.BindInt64(1, sqlSelect.ColumnInt64(0)); // fromto: id\n427: ",
        "context_after": "429: \n430: \t\t\t\tint idlib = sqlSelect.ColumnInt(1); // from: idlib"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 430,
        "text": "from: idlib",
        "context_before": "428: \t\t\t\tint type = sqlSelect.ColumnInt(18); // from: type\n429: ",
        "context_after": "431: \n432: \t\t\t\tif (idlib > 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 433,
        "text": "to: idlib",
        "context_before": "431: \n432: \t\t\t\tif (idlib > 0)",
        "context_after": "434: \n435: \t\t\t\tsqlInsert.BindInt(3, sqlSelect.ColumnInt(2)); // fromto: idx"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 435,
        "text": "fromto: idx",
        "context_before": "433: \t\t\t\t\tsqlInsert.BindInt(2, idlib); // to: idlib\n434: ",
        "context_after": "436: \n437: \t\t\t\tsqlInsert.BindTextRaw(4, sqlSelect.ColumnTextRaw(7)); // fromto: added"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 437,
        "text": "fromto: added",
        "context_before": "435: \t\t\t\tsqlInsert.BindInt(3, sqlSelect.ColumnInt(2)); // fromto: idx\n436: ",
        "context_after": "438: \n439: \t\t\t\tif (idlib > 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 445,
        "text": "from: file",
        "context_before": "443: \t\t\t\t}\n444: ",
        "context_after": "446: \n447: \t\t\t\tif (type != 100 && type != 1000)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 449,
        "text": "to: filehash",
        "context_before": "447: \t\t\t\tif (type != 100 && type != 1000)\n448: \t\t\t\t{",
        "context_after": "450: \t\t\t\t\tsqlInsert.BindText16(9, PathEx::PathFromFile(file)); // to: path\n451: \t\t\t\t\tsqlInsert.BindText16(10, PathEx::FileFromPath(file)); // to: file"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 450,
        "text": "to: path",
        "context_before": "448: \t\t\t\t{\n449: \t\t\t\t\tsqlInsert.BindInt(8, StringEx::HashFNV1a32(StringEx::ToLowerUS(file))); // to: filehash",
        "context_after": "451: \t\t\t\t\tsqlInsert.BindText16(10, PathEx::FileFromPath(file)); // to: file\n452: \t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 451,
        "text": "to: file",
        "context_before": "449: \t\t\t\t\tsqlInsert.BindInt(8, StringEx::HashFNV1a32(StringEx::ToLowerUS(file))); // to: filehash\n450: \t\t\t\t\tsqlInsert.BindText16(9, PathEx::PathFromFile(file)); // to: path",
        "context_after": "452: \t\t\t\t}\n453: \t\t\t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 454,
        "text": "to: file",
        "context_before": "452: \t\t\t\t}\n453: \t\t\t\telse",
        "context_after": "455: \n456: \t\t\t\tsqlInsert.BindTextRaw(11, sqlSelect.ColumnTextRaw(5)); // from: size to: filesize"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 456,
        "text": "from: size to: filesize",
        "context_before": "454: \t\t\t\t\tsqlInsert.BindText16(10, file); // to: file\n455: ",
        "context_after": "457: \t\t\t\tsqlInsert.BindTextRaw(12, sqlSelect.ColumnTextRaw(6)); // fromto: modified\n458: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 457,
        "text": "fromto: modified",
        "context_before": "455: \n456: \t\t\t\tsqlInsert.BindTextRaw(11, sqlSelect.ColumnTextRaw(5)); // from: size to: filesize",
        "context_after": "458: \n459: \t\t\t\tif (type == 100)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 460,
        "text": "to: category",
        "context_before": "458: \n459: \t\t\t\tif (type == 100)",
        "context_after": "461: \t\t\t\telse if (type == 1000)\n462: \t\t\t\t\tsqlInsert.BindInt(13, 10); // to: category"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 462,
        "text": "to: category",
        "context_before": "460: \t\t\t\t\tsqlInsert.BindInt(13, 11); // to: category\n461: \t\t\t\telse if (type == 1000)",
        "context_after": "463: \t\t\t\telse\n464: \t\t\t\t\ttype = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 468,
        "text": "from: title",
        "context_before": "466: \t\t\t\t//\n467: ",
        "context_after": "469: \t\t\t\tconst char* album = sqlSelect.ColumnTextRaw(11); // from: album\n470: \t\t\t\tconst char* artist = sqlSelect.ColumnTextRaw(10); // from: artist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 469,
        "text": "from: album",
        "context_before": "467: \n468: \t\t\t\tconst char* title = sqlSelect.ColumnTextRaw(9); // from: title",
        "context_after": "470: \t\t\t\tconst char* artist = sqlSelect.ColumnTextRaw(10); // from: artist\n471: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 470,
        "text": "from: artist",
        "context_before": "468: \t\t\t\tconst char* title = sqlSelect.ColumnTextRaw(9); // from: title\n469: \t\t\t\tconst char* album = sqlSelect.ColumnTextRaw(11); // from: album",
        "context_after": "471: \n472: \t\t\t\tif (type == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 475,
        "text": "to: trackhash",
        "context_before": "473: \t\t\t\t{\n474: \t\t\t\tif (title && strcmp(title, \"\") != 0)",
        "context_after": "476: \t\t\t\telse\n477: \t\t\t\t\tsqlInsert.BindInt(14, StringEx::HashFNV1a32(PathEx::FileFromPath(file) + UTF::UTF16(album) + UTF::UTF16(artist))); // to: trackhash"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 477,
        "text": "to: trackhash",
        "context_before": "475: \t\t\t\t\tsqlInsert.BindInt(14, StringEx::HashFNV1a32(UTF::UTF16(title) + UTF::UTF16(album) + UTF::UTF16(artist))); // to: trackhash\n476: \t\t\t\telse",
        "context_after": "478: \t\t\t\t}\n479: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 481,
        "text": "to: title",
        "context_before": "479: \n480: \t\t\t\tif (title && strcmp(title, \"\") != 0)",
        "context_after": "482: \n483: \t\t\t\tif (album && strcmp(album, \"\") != 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 484,
        "text": "to: album",
        "context_before": "482: \n483: \t\t\t\tif (album && strcmp(album, \"\") != 0)",
        "context_after": "485: \n486: \t\t\t\tif (artist && strcmp(artist, \"\") != 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 487,
        "text": "to: artist",
        "context_before": "485: \n486: \t\t\t\tif (artist && strcmp(artist, \"\") != 0)",
        "context_after": "488: \n489: \t\t\t\tconst char* track = sqlSelect.ColumnTextRaw(8); // from: number"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 489,
        "text": "from: number",
        "context_before": "487: \t\t\t\t\tsqlInsert.BindTextRaw(21, artist); // to: artist\n488: ",
        "context_after": "490: \t\t\t\tif (track && strcmp(track, \"\") != 0)\n491: \t\t\t\t\tsqlInsert.BindTextRaw(15, track); // to: track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 491,
        "text": "to: track",
        "context_before": "489: \t\t\t\tconst char* track = sqlSelect.ColumnTextRaw(8); // from: number\n490: \t\t\t\tif (track && strcmp(track, \"\") != 0)",
        "context_after": "492: \n493: \t\t\t\tconst char* albumartist = sqlSelect.ColumnTextRaw(14); // from: albumartist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 493,
        "text": "from: albumartist",
        "context_before": "491: \t\t\t\t\tsqlInsert.BindTextRaw(15, track); // to: track\n492: ",
        "context_after": "494: \t\t\t\tif (albumartist && strcmp(albumartist, \"\") != 0)\n495: \t\t\t\t\tsqlInsert.BindTextRaw(22, albumartist); // to: albumartist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 495,
        "text": "to: albumartist",
        "context_before": "493: \t\t\t\tconst char* albumartist = sqlSelect.ColumnTextRaw(14); // from: albumartist\n494: \t\t\t\tif (albumartist && strcmp(albumartist, \"\") != 0)",
        "context_after": "496: \n497: \t\t\t\tconst char* composer = sqlSelect.ColumnTextRaw(15); // from: composer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 497,
        "text": "from: composer",
        "context_before": "495: \t\t\t\t\tsqlInsert.BindTextRaw(22, albumartist); // to: albumartist\n496: ",
        "context_after": "498: \t\t\t\tif (composer && strcmp(composer, \"\") != 0)\n499: \t\t\t\t\tsqlInsert.BindTextRaw(23, composer); // to: composer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 499,
        "text": "to: composer",
        "context_before": "497: \t\t\t\tconst char* composer = sqlSelect.ColumnTextRaw(15); // from: composer\n498: \t\t\t\tif (composer && strcmp(composer, \"\") != 0)",
        "context_after": "500: \n501: \t\t\t\tconst char* genre = sqlSelect.ColumnTextRaw(13); // from: genre"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 501,
        "text": "from: genre",
        "context_before": "499: \t\t\t\t\tsqlInsert.BindTextRaw(23, composer); // to: composer\n500: ",
        "context_after": "502: \t\t\t\tif (genre && strcmp(genre, \"\") != 0)\n503: \t\t\t\t\tsqlInsert.BindTextRaw(24, genre); // to: genre"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 503,
        "text": "to: genre",
        "context_before": "501: \t\t\t\tconst char* genre = sqlSelect.ColumnTextRaw(13); // from: genre\n502: \t\t\t\tif (genre && strcmp(genre, \"\") != 0)",
        "context_after": "504: \n505: \t\t\t\tconst char* year = sqlSelect.ColumnTextRaw(12); // from: year"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 505,
        "text": "from: year",
        "context_before": "503: \t\t\t\t\tsqlInsert.BindTextRaw(24, genre); // to: genre\n504: ",
        "context_after": "506: \t\t\t\tif (year && strcmp(year, \"\") != 0)\n507: \t\t\t\t\tsqlInsert.BindTextRaw(25, year); // to: year"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 507,
        "text": "to: year",
        "context_before": "505: \t\t\t\tconst char* year = sqlSelect.ColumnTextRaw(12); // from: year\n506: \t\t\t\tif (year && strcmp(year, \"\") != 0)",
        "context_after": "508: \n509: \t\t\t\t//"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 513,
        "text": "from: time",
        "context_before": "511: \t\t\t\tif (sqlSelect.ColumnTextRaw(17))\n512: \t\t\t\t{",
        "context_after": "514: \t\t\t\t\tsqlInsert.BindInt(37, duration); // to: duration\n515: \t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 514,
        "text": "to: duration",
        "context_before": "512: \t\t\t\t{\n513: \t\t\t\t\tint duration = sqlSelect.ColumnInt(17) * 1000; // from: time",
        "context_after": "515: \t\t\t\t}\n516: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 517,
        "text": "from: channel to: channels",
        "context_before": "515: \t\t\t\t}\n516: ",
        "context_after": "518: \n519: \t\t\t\tsqlInsert.BindTextRaw(39, sqlSelect.ColumnTextRaw(19)); // fromto: bitrate"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 519,
        "text": "fromto: bitrate",
        "context_before": "517: \t\t\t\tsqlInsert.BindTextRaw(38, sqlSelect.ColumnTextRaw(21)); // from: channel to: channels\n518: ",
        "context_after": "520: \n521: \t\t\t\tsqlInsert.BindTextRaw(40, sqlSelect.ColumnTextRaw(20)); // from: sample to: samplerate"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 521,
        "text": "from: sample to: samplerate",
        "context_before": "519: \t\t\t\tsqlInsert.BindTextRaw(39, sqlSelect.ColumnTextRaw(19)); // fromto: bitrate\n520: ",
        "context_after": "522: \n523: \t\t\t\t//"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 525,
        "text": "fromto: rating",
        "context_before": "523: \t\t\t\t//\n524: ",
        "context_after": "526: \n527: \t\t\t\tint playCount = sqlSelect.ColumnInt(24); // from: count"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 527,
        "text": "from: count",
        "context_before": "525: \t\t\t\tsqlInsert.BindTextRaw(41, sqlSelect.ColumnTextRaw(22)); // fromto: rating\n526: ",
        "context_after": "528: \t\t\t\tconst char* lastplayed = sqlSelect.ColumnTextRaw(25); // from: lastcount\n529: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 528,
        "text": "from: lastcount",
        "context_before": "526: \n527: \t\t\t\tint playCount = sqlSelect.ColumnInt(24); // from: count",
        "context_after": "529: \n530: \t\t\t\tif (playCount > 0 && lastplayed && strcmp(lastplayed, \"\") != 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 532,
        "text": "to: playcount",
        "context_before": "530: \t\t\t\tif (playCount > 0 && lastplayed && strcmp(lastplayed, \"\") != 0)\n531: \t\t\t\t{",
        "context_after": "533: \t\t\t\t\tsqlInsert.BindTextRaw(46, lastplayed); // to: lastplayed\n534: \t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 533,
        "text": "to: lastplayed",
        "context_before": "531: \t\t\t\t{\n532: \t\t\t\t\tsqlInsert.BindInt(45, playCount); // to: playcount",
        "context_after": "534: \t\t\t\t}\n535: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 536,
        "text": "from: skip",
        "context_before": "534: \t\t\t\t}\n535: ",
        "context_after": "537: \t\t\t\tconst char* lastskipped = sqlSelect.ColumnTextRaw(27); // from: lastskip\n538: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 537,
        "text": "from: lastskip",
        "context_before": "535: \n536: \t\t\t\tint skipCount = sqlSelect.ColumnInt(26); // from: skip",
        "context_after": "538: \n539: \t\t\t\tif (skipCount > 0 && lastskipped && strcmp(lastskipped, \"\") != 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 541,
        "text": "to: skipcount",
        "context_before": "539: \t\t\t\tif (skipCount > 0 && lastskipped && strcmp(lastskipped, \"\") != 0)\n540: \t\t\t\t{",
        "context_after": "542: \t\t\t\t\tsqlInsert.BindTextRaw(48, lastskipped); // to: lastskipped\n543: \t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 542,
        "text": "to: lastskipped",
        "context_before": "540: \t\t\t\t{\n541: \t\t\t\t\tsqlInsert.BindInt(47, skipCount); // to: skipcount",
        "context_after": "543: \t\t\t\t}\n544: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 571,
        "text": "If update from version before 2.4 need to do this",
        "context_before": "569: \t\tXmlNode xmlMain = xmlFile.RootNode().FirstChild(\"Playlists\");\n570: ",
        "context_after": "572: \t\tbool isOldVersion = false;\n573: \t\tif (!xmlMain)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 592,
        "text": "If update from version before 2.4 need to do this",
        "context_before": "590: \t\t\t\tif (!file.empty())\n591: \t\t\t\t{",
        "context_after": "593: \t\t\t\t\tif (isOldVersion)\n594: \t\t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 701,
        "text": "Use this instead of previous",
        "context_before": "699: void DlgNewVersion::CreateTableLibrary(const DBase::SQLFile& db)\n700: {",
        "context_after": "702: \n703: \tDBase::SQLRequest::Exec(db, \"PRAGMA foreign_keys = ON;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 709,
        "text": "Track ID (Primary key)",
        "context_before": "707: \tDBase::SQLRequest::Exec(db,\n708: \t\t\"CREATE TABLE IF NOT EXISTS library (\"",
        "context_after": "710: \t\t\"flag INTEGER,\"            // Update flag\n711: \t\t\"deleted INTEGER,\"         // Is track deleted?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 710,
        "text": "Update flag",
        "context_before": "708: \t\t\"CREATE TABLE IF NOT EXISTS library (\"\n709: \t\t\"id INTEGER PRIMARY KEY AUTOINCREMENT,\"  // Track ID (Primary key)",
        "context_after": "711: \t\t\"deleted INTEGER,\"         // Is track deleted?\n712: \t\t\"added INTEGER,\"           // Date time when added to the library"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 711,
        "text": "Is track deleted?",
        "context_before": "709: \t\t\"id INTEGER PRIMARY KEY AUTOINCREMENT,\"  // Track ID (Primary key)\n710: \t\t\"flag INTEGER,\"            // Update flag",
        "context_after": "712: \t\t\"added INTEGER,\"           // Date time when added to the library\n713: \t\t\"disabled INTEGER,\"        // Disabled state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 712,
        "text": "Date time when added to the library",
        "context_before": "710: \t\t\"flag INTEGER,\"            // Update flag\n711: \t\t\"deleted INTEGER,\"         // Is track deleted?",
        "context_after": "713: \t\t\"disabled INTEGER,\"        // Disabled state\n714: \t\t\"collapsed INTEGER,\"       // Collapsed state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 713,
        "text": "Disabled state",
        "context_before": "711: \t\t\"deleted INTEGER,\"         // Is track deleted?\n712: \t\t\"added INTEGER,\"           // Date time when added to the library",
        "context_after": "714: \t\t\"collapsed INTEGER,\"       // Collapsed state\n715: \t\t\"cue INTEGER,\"             // CUE"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 714,
        "text": "Collapsed state",
        "context_before": "712: \t\t\"added INTEGER,\"           // Date time when added to the library\n713: \t\t\"disabled INTEGER,\"        // Disabled state",
        "context_after": "715: \t\t\"cue INTEGER,\"             // CUE\n716: \t\t\"filehash INTEGER,\"        // File hash"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 716,
        "text": "File hash",
        "context_before": "714: \t\t\"collapsed INTEGER,\"       // Collapsed state\n715: \t\t\"cue INTEGER,\"             // CUE",
        "context_after": "717: \t\t\"path TEXT,\"               // File path\n718: \t\t\"file TEXT,\"               // File name"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 717,
        "text": "File path",
        "context_before": "715: \t\t\"cue INTEGER,\"             // CUE\n716: \t\t\"filehash INTEGER,\"        // File hash",
        "context_after": "718: \t\t\"file TEXT,\"               // File name\n719: \t\t\"filesize INTEGER,\"        // File size"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 718,
        "text": "File name",
        "context_before": "716: \t\t\"filehash INTEGER,\"        // File hash\n717: \t\t\"path TEXT,\"               // File path",
        "context_after": "719: \t\t\"filesize INTEGER,\"        // File size\n720: \t\t\"modified INTEGER,\"        // Date time when file last modified"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 719,
        "text": "File size",
        "context_before": "717: \t\t\"path TEXT,\"               // File path\n718: \t\t\"file TEXT,\"               // File name",
        "context_after": "720: \t\t\"modified INTEGER,\"        // Date time when file last modified\n721: \t\t\"category INTEGER,\"        // Track category"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 720,
        "text": "Date time when file last modified",
        "context_before": "718: \t\t\"file TEXT,\"               // File name\n719: \t\t\"filesize INTEGER,\"        // File size",
        "context_after": "721: \t\t\"category INTEGER,\"        // Track category\n722: \t\t\"trackhash INTEGER,\"       // Track hash"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 721,
        "text": "Track category",
        "context_before": "719: \t\t\"filesize INTEGER,\"        // File size\n720: \t\t\"modified INTEGER,\"        // Date time when file last modified",
        "context_after": "722: \t\t\"trackhash INTEGER,\"       // Track hash\n723: \t\t\"track TEXT,\"              // Track number in album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 722,
        "text": "Track hash",
        "context_before": "720: \t\t\"modified INTEGER,\"        // Date time when file last modified\n721: \t\t\"category INTEGER,\"        // Track category",
        "context_after": "723: \t\t\"track TEXT,\"              // Track number in album\n724: \t\t\"totaltracks TEXT,\"        // Total tracks in album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 723,
        "text": "Track number in album",
        "context_before": "721: \t\t\"category INTEGER,\"        // Track category\n722: \t\t\"trackhash INTEGER,\"       // Track hash",
        "context_after": "724: \t\t\"totaltracks TEXT,\"        // Total tracks in album\n725: \t\t\"disc TEXT,\"               // Disc number"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 724,
        "text": "Total tracks in album",
        "context_before": "722: \t\t\"trackhash INTEGER,\"       // Track hash\n723: \t\t\"track TEXT,\"              // Track number in album",
        "context_after": "725: \t\t\"disc TEXT,\"               // Disc number\n726: \t\t\"totaldiscs TEXT,\"         // Total discs"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 725,
        "text": "Disc number",
        "context_before": "723: \t\t\"track TEXT,\"              // Track number in album\n724: \t\t\"totaltracks TEXT,\"        // Total tracks in album",
        "context_after": "726: \t\t\"totaldiscs TEXT,\"         // Total discs\n727: \t\t\"title TEXT,\"              // Track title"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 726,
        "text": "Total discs",
        "context_before": "724: \t\t\"totaltracks TEXT,\"        // Total tracks in album\n725: \t\t\"disc TEXT,\"               // Disc number",
        "context_after": "727: \t\t\"title TEXT,\"              // Track title\n728: \t\t\"album TEXT,\"              // Track album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 727,
        "text": "Track title",
        "context_before": "725: \t\t\"disc TEXT,\"               // Disc number\n726: \t\t\"totaldiscs TEXT,\"         // Total discs",
        "context_after": "728: \t\t\"album TEXT,\"              // Track album\n729: \t\t\"artist TEXT,\"             // Track artist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 728,
        "text": "Track album",
        "context_before": "726: \t\t\"totaldiscs TEXT,\"         // Total discs\n727: \t\t\"title TEXT,\"              // Track title",
        "context_after": "729: \t\t\"artist TEXT,\"             // Track artist\n730: \t\t\"albumartist TEXT,\"        // Track album artist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 729,
        "text": "Track artist",
        "context_before": "727: \t\t\"title TEXT,\"              // Track title\n728: \t\t\"album TEXT,\"              // Track album",
        "context_after": "730: \t\t\"albumartist TEXT,\"        // Track album artist\n731: \t\t\"composer TEXT,\"           // Track composer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 730,
        "text": "Track album artist",
        "context_before": "728: \t\t\"album TEXT,\"              // Track album\n729: \t\t\"artist TEXT,\"             // Track artist",
        "context_after": "731: \t\t\"composer TEXT,\"           // Track composer\n732: \t\t\"genre TEXT,\"              // Track genre"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 731,
        "text": "Track composer",
        "context_before": "729: \t\t\"artist TEXT,\"             // Track artist\n730: \t\t\"albumartist TEXT,\"        // Track album artist",
        "context_after": "732: \t\t\"genre TEXT,\"              // Track genre\n733: \t\t\"year TEXT,\"               // Track release year"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 732,
        "text": "Track genre",
        "context_before": "730: \t\t\"albumartist TEXT,\"        // Track album artist\n731: \t\t\"composer TEXT,\"           // Track composer",
        "context_after": "733: \t\t\"year TEXT,\"               // Track release year\n734: \t\t\"bpm TEXT,\"                // Track BPM"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 733,
        "text": "Track release year",
        "context_before": "731: \t\t\"composer TEXT,\"           // Track composer\n732: \t\t\"genre TEXT,\"              // Track genre",
        "context_after": "734: \t\t\"bpm TEXT,\"                // Track BPM\n735: \t\t\"compilation TEXT,\"        // Track Part of Compilation"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 734,
        "text": "Track BPM",
        "context_before": "732: \t\t\"genre TEXT,\"              // Track genre\n733: \t\t\"year TEXT,\"               // Track release year",
        "context_after": "735: \t\t\"compilation TEXT,\"        // Track Part of Compilation\n736: \t\t\"publisher TEXT,\"          // Track publisher"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 735,
        "text": "Track Part of Compilation",
        "context_before": "733: \t\t\"year TEXT,\"               // Track release year\n734: \t\t\"bpm TEXT,\"                // Track BPM",
        "context_after": "736: \t\t\"publisher TEXT,\"          // Track publisher\n737: \t\t\"conductor TEXT,\"          // Track conductor"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 736,
        "text": "Track publisher",
        "context_before": "734: \t\t\"bpm TEXT,\"                // Track BPM\n735: \t\t\"compilation TEXT,\"        // Track Part of Compilation",
        "context_after": "737: \t\t\"conductor TEXT,\"          // Track conductor\n738: \t\t\"lyricist TEXT,\"           // Track lyricist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 737,
        "text": "Track conductor",
        "context_before": "735: \t\t\"compilation TEXT,\"        // Track Part of Compilation\n736: \t\t\"publisher TEXT,\"          // Track publisher",
        "context_after": "738: \t\t\"lyricist TEXT,\"           // Track lyricist\n739: \t\t\"remixer TEXT,\"            // Track remixer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 738,
        "text": "Track lyricist",
        "context_before": "736: \t\t\"publisher TEXT,\"          // Track publisher\n737: \t\t\"conductor TEXT,\"          // Track conductor",
        "context_after": "739: \t\t\"remixer TEXT,\"            // Track remixer\n740: \t\t\"grouping TEXT,\"           // Track grouping"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 739,
        "text": "Track remixer",
        "context_before": "737: \t\t\"conductor TEXT,\"          // Track conductor\n738: \t\t\"lyricist TEXT,\"           // Track lyricist",
        "context_after": "740: \t\t\"grouping TEXT,\"           // Track grouping\n741: \t\t\"subtitle TEXT,\"           // Track subtitle"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 740,
        "text": "Track grouping",
        "context_before": "738: \t\t\"lyricist TEXT,\"           // Track lyricist\n739: \t\t\"remixer TEXT,\"            // Track remixer",
        "context_after": "741: \t\t\"subtitle TEXT,\"           // Track subtitle\n742: \t\t\"copyright TEXT,\"          // Track copyright"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 741,
        "text": "Track subtitle",
        "context_before": "739: \t\t\"remixer TEXT,\"            // Track remixer\n740: \t\t\"grouping TEXT,\"           // Track grouping",
        "context_after": "742: \t\t\"copyright TEXT,\"          // Track copyright\n743: \t\t\"encodedby TEXT,\"          // Track encoded by"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 743,
        "text": "Track encoded by",
        "context_before": "741: \t\t\"subtitle TEXT,\"           // Track subtitle\n742: \t\t\"copyright TEXT,\"          // Track copyright",
        "context_after": "744: \t\t\"comment TEXT,\"            // Track comment\n745: \t\t\"duration INTEGER,\"        // Track time length"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 744,
        "text": "Track comment",
        "context_before": "742: \t\t\"copyright TEXT,\"          // Track copyright\n743: \t\t\"encodedby TEXT,\"          // Track encoded by",
        "context_after": "745: \t\t\"duration INTEGER,\"        // Track time length\n746: \t\t\"channels INTEGER,\"        // Track number of channels"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 745,
        "text": "Track time length",
        "context_before": "743: \t\t\"encodedby TEXT,\"          // Track encoded by\n744: \t\t\"comment TEXT,\"            // Track comment",
        "context_after": "746: \t\t\"channels INTEGER,\"        // Track number of channels\n747: \t\t\"bitrate INTEGER,\"         // Track bitrate"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 746,
        "text": "Track number of channels",
        "context_before": "744: \t\t\"comment TEXT,\"            // Track comment\n745: \t\t\"duration INTEGER,\"        // Track time length",
        "context_after": "747: \t\t\"bitrate INTEGER,\"         // Track bitrate\n748: \t\t\"samplerate INTEGER,\"      // Track sample rate"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 747,
        "text": "Track bitrate",
        "context_before": "745: \t\t\"duration INTEGER,\"        // Track time length\n746: \t\t\"channels INTEGER,\"        // Track number of channels",
        "context_after": "748: \t\t\"samplerate INTEGER,\"      // Track sample rate\n749: \t\t\"rating INTEGER,\"          // Track rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 748,
        "text": "Track sample rate",
        "context_before": "746: \t\t\"channels INTEGER,\"        // Track number of channels\n747: \t\t\"bitrate INTEGER,\"         // Track bitrate",
        "context_after": "749: \t\t\"rating INTEGER,\"          // Track rating\n750: \t\t\"loverating INTEGER,\"      // Track love rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 749,
        "text": "Track rating",
        "context_before": "747: \t\t\"bitrate INTEGER,\"         // Track bitrate\n748: \t\t\"samplerate INTEGER,\"      // Track sample rate",
        "context_after": "750: \t\t\"loverating INTEGER,\"      // Track love rating\n751: \t\t\"albumrating INTEGER,\"     // Album rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 750,
        "text": "Track love rating",
        "context_before": "748: \t\t\"samplerate INTEGER,\"      // Track sample rate\n749: \t\t\"rating INTEGER,\"          // Track rating",
        "context_after": "751: \t\t\"albumrating INTEGER,\"     // Album rating\n752: \t\t\"folderrating INTEGER,\"    // Folder rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 751,
        "text": "Album rating",
        "context_before": "749: \t\t\"rating INTEGER,\"          // Track rating\n750: \t\t\"loverating INTEGER,\"      // Track love rating",
        "context_after": "752: \t\t\"folderrating INTEGER,\"    // Folder rating\n753: \t\t\"playcount INTEGER,\"       // Track play count"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 752,
        "text": "Folder rating",
        "context_before": "750: \t\t\"loverating INTEGER,\"      // Track love rating\n751: \t\t\"albumrating INTEGER,\"     // Album rating",
        "context_after": "753: \t\t\"playcount INTEGER,\"       // Track play count\n754: \t\t\"lastplayed INTEGER,\"      // Track date time of last play"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 753,
        "text": "Track play count",
        "context_before": "751: \t\t\"albumrating INTEGER,\"     // Album rating\n752: \t\t\"folderrating INTEGER,\"    // Folder rating",
        "context_after": "754: \t\t\"lastplayed INTEGER,\"      // Track date time of last play\n755: \t\t\"skipcount INTEGER,\"       // Track skin count"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 754,
        "text": "Track date time of last play",
        "context_before": "752: \t\t\"folderrating INTEGER,\"    // Folder rating\n753: \t\t\"playcount INTEGER,\"       // Track play count",
        "context_after": "755: \t\t\"skipcount INTEGER,\"       // Track skin count\n756: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 755,
        "text": "Track skin count",
        "context_before": "753: \t\t\"playcount INTEGER,\"       // Track play count\n754: \t\t\"lastplayed INTEGER,\"      // Track date time of last play",
        "context_after": "756: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip\n757: \t\t\"bookmark INTEGER,\"        // Track bookmark"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 756,
        "text": "Track date time of last skip",
        "context_before": "754: \t\t\"lastplayed INTEGER,\"      // Track date time of last play\n755: \t\t\"skipcount INTEGER,\"       // Track skin count",
        "context_after": "757: \t\t\"bookmark INTEGER,\"        // Track bookmark\n758: \t\t\"replaygain TEXT,\"         // ReplayGain values"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 757,
        "text": "Track bookmark",
        "context_before": "755: \t\t\"skipcount INTEGER,\"       // Track skin count\n756: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip",
        "context_after": "758: \t\t\"replaygain TEXT,\"         // ReplayGain values\n759: \t\t\"equalizer TEXT,\"          // Track equalizer settings"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 758,
        "text": "ReplayGain values",
        "context_before": "756: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip\n757: \t\t\"bookmark INTEGER,\"        // Track bookmark",
        "context_after": "759: \t\t\"equalizer TEXT,\"          // Track equalizer settings\n760: \t\t\"keywords TEXT);\"          // Keywords/tags for track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 759,
        "text": "Track equalizer settings",
        "context_before": "757: \t\t\"bookmark INTEGER,\"        // Track bookmark\n758: \t\t\"replaygain TEXT,\"         // ReplayGain values",
        "context_after": "760: \t\t\"keywords TEXT);\"          // Keywords/tags for track\n761: \t);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 760,
        "text": "Keywords/tags for track",
        "context_before": "758: \t\t\"replaygain TEXT,\"         // ReplayGain values\n759: \t\t\"equalizer TEXT,\"          // Track equalizer settings",
        "context_after": "761: \t);\n762: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 790,
        "text": "Track ID (Primary key)",
        "context_before": "788: \tDBase::SQLRequest::Exec(db,\n789: \t\t\"CREATE TABLE IF NOT EXISTS playlist (\"",
        "context_after": "791: \t\t\"idlib INTEGER,\"           // Track ID in the library database\n792: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 791,
        "text": "Track ID in the library database",
        "context_before": "789: \t\t\"CREATE TABLE IF NOT EXISTS playlist (\"\n790: \t\t\"id INTEGER PRIMARY KEY AUTOINCREMENT,\"  // Track ID (Primary key)",
        "context_after": "792: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)\n793: \t\t\"added INTEGER,\"           // Date time when added to the playlist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 792,
        "text": "Track index (for order in the playlist)",
        "context_before": "790: \t\t\"id INTEGER PRIMARY KEY AUTOINCREMENT,\"  // Track ID (Primary key)\n791: \t\t\"idlib INTEGER,\"           // Track ID in the library database",
        "context_after": "793: \t\t\"added INTEGER,\"           // Date time when added to the playlist\n794: \t\t\"disabled INTEGER,\"        // Disabled state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 793,
        "text": "Date time when added to the playlist",
        "context_before": "791: \t\t\"idlib INTEGER,\"           // Track ID in the library database\n792: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)",
        "context_after": "794: \t\t\"disabled INTEGER,\"        // Disabled state\n795: \t\t\"collapsed INTEGER,\"       // Collapsed state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 794,
        "text": "Disabled state",
        "context_before": "792: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)\n793: \t\t\"added INTEGER,\"           // Date time when added to the playlist",
        "context_after": "795: \t\t\"collapsed INTEGER,\"       // Collapsed state\n796: \t\t\"cue INTEGER,\"             // CUE"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 795,
        "text": "Collapsed state",
        "context_before": "793: \t\t\"added INTEGER,\"           // Date time when added to the playlist\n794: \t\t\"disabled INTEGER,\"        // Disabled state",
        "context_after": "796: \t\t\"cue INTEGER,\"             // CUE\n797: \t\t\"filehash INTEGER,\"        // File hash"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 797,
        "text": "File hash",
        "context_before": "795: \t\t\"collapsed INTEGER,\"       // Collapsed state\n796: \t\t\"cue INTEGER,\"             // CUE",
        "context_after": "798: \t\t\"path TEXT,\"               // File path\n799: \t\t\"file TEXT,\"               // File name"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 798,
        "text": "File path",
        "context_before": "796: \t\t\"cue INTEGER,\"             // CUE\n797: \t\t\"filehash INTEGER,\"        // File hash",
        "context_after": "799: \t\t\"file TEXT,\"               // File name\n800: \t\t\"filesize INTEGER,\"        // File size"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 799,
        "text": "File name",
        "context_before": "797: \t\t\"filehash INTEGER,\"        // File hash\n798: \t\t\"path TEXT,\"               // File path",
        "context_after": "800: \t\t\"filesize INTEGER,\"        // File size\n801: \t\t\"modified INTEGER,\"        // Date time when file last modified"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 800,
        "text": "File size",
        "context_before": "798: \t\t\"path TEXT,\"               // File path\n799: \t\t\"file TEXT,\"               // File name",
        "context_after": "801: \t\t\"modified INTEGER,\"        // Date time when file last modified\n802: \t\t\"category INTEGER,\"        // Track category"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 801,
        "text": "Date time when file last modified",
        "context_before": "799: \t\t\"file TEXT,\"               // File name\n800: \t\t\"filesize INTEGER,\"        // File size",
        "context_after": "802: \t\t\"category INTEGER,\"        // Track category\n803: \t\t\"trackhash INTEGER,\"       // Track hash"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 802,
        "text": "Track category",
        "context_before": "800: \t\t\"filesize INTEGER,\"        // File size\n801: \t\t\"modified INTEGER,\"        // Date time when file last modified",
        "context_after": "803: \t\t\"trackhash INTEGER,\"       // Track hash\n804: \t\t\"track TEXT,\"              // Track number in album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 803,
        "text": "Track hash",
        "context_before": "801: \t\t\"modified INTEGER,\"        // Date time when file last modified\n802: \t\t\"category INTEGER,\"        // Track category",
        "context_after": "804: \t\t\"track TEXT,\"              // Track number in album\n805: \t\t\"totaltracks TEXT,\"        // Total tracks in album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 804,
        "text": "Track number in album",
        "context_before": "802: \t\t\"category INTEGER,\"        // Track category\n803: \t\t\"trackhash INTEGER,\"       // Track hash",
        "context_after": "805: \t\t\"totaltracks TEXT,\"        // Total tracks in album\n806: \t\t\"disc TEXT,\"               // Disc number"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 805,
        "text": "Total tracks in album",
        "context_before": "803: \t\t\"trackhash INTEGER,\"       // Track hash\n804: \t\t\"track TEXT,\"              // Track number in album",
        "context_after": "806: \t\t\"disc TEXT,\"               // Disc number\n807: \t\t\"totaldiscs TEXT,\"         // Total discs"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 806,
        "text": "Disc number",
        "context_before": "804: \t\t\"track TEXT,\"              // Track number in album\n805: \t\t\"totaltracks TEXT,\"        // Total tracks in album",
        "context_after": "807: \t\t\"totaldiscs TEXT,\"         // Total discs\n808: \t\t\"title TEXT,\"              // Track title"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 807,
        "text": "Total discs",
        "context_before": "805: \t\t\"totaltracks TEXT,\"        // Total tracks in album\n806: \t\t\"disc TEXT,\"               // Disc number",
        "context_after": "808: \t\t\"title TEXT,\"              // Track title\n809: \t\t\"album TEXT,\"              // Track album"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 808,
        "text": "Track title",
        "context_before": "806: \t\t\"disc TEXT,\"               // Disc number\n807: \t\t\"totaldiscs TEXT,\"         // Total discs",
        "context_after": "809: \t\t\"album TEXT,\"              // Track album\n810: \t\t\"artist TEXT,\"             // Track artist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 809,
        "text": "Track album",
        "context_before": "807: \t\t\"totaldiscs TEXT,\"         // Total discs\n808: \t\t\"title TEXT,\"              // Track title",
        "context_after": "810: \t\t\"artist TEXT,\"             // Track artist\n811: \t\t\"albumartist TEXT,\"        // Track album artist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 810,
        "text": "Track artist",
        "context_before": "808: \t\t\"title TEXT,\"              // Track title\n809: \t\t\"album TEXT,\"              // Track album",
        "context_after": "811: \t\t\"albumartist TEXT,\"        // Track album artist\n812: \t\t\"composer TEXT,\"           // Track composer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 811,
        "text": "Track album artist",
        "context_before": "809: \t\t\"album TEXT,\"              // Track album\n810: \t\t\"artist TEXT,\"             // Track artist",
        "context_after": "812: \t\t\"composer TEXT,\"           // Track composer\n813: \t\t\"genre TEXT,\"              // Track genre"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 812,
        "text": "Track composer",
        "context_before": "810: \t\t\"artist TEXT,\"             // Track artist\n811: \t\t\"albumartist TEXT,\"        // Track album artist",
        "context_after": "813: \t\t\"genre TEXT,\"              // Track genre\n814: \t\t\"year TEXT,\"               // Track release year"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 813,
        "text": "Track genre",
        "context_before": "811: \t\t\"albumartist TEXT,\"        // Track album artist\n812: \t\t\"composer TEXT,\"           // Track composer",
        "context_after": "814: \t\t\"year TEXT,\"               // Track release year\n815: \t\t\"bpm TEXT,\"                // Track BPM"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 814,
        "text": "Track release year",
        "context_before": "812: \t\t\"composer TEXT,\"           // Track composer\n813: \t\t\"genre TEXT,\"              // Track genre",
        "context_after": "815: \t\t\"bpm TEXT,\"                // Track BPM\n816: \t\t\"compilation TEXT,\"        // Track Part of Compilation"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 815,
        "text": "Track BPM",
        "context_before": "813: \t\t\"genre TEXT,\"              // Track genre\n814: \t\t\"year TEXT,\"               // Track release year",
        "context_after": "816: \t\t\"compilation TEXT,\"        // Track Part of Compilation\n817: \t\t\"publisher TEXT,\"          // Track publisher"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 816,
        "text": "Track Part of Compilation",
        "context_before": "814: \t\t\"year TEXT,\"               // Track release year\n815: \t\t\"bpm TEXT,\"                // Track BPM",
        "context_after": "817: \t\t\"publisher TEXT,\"          // Track publisher\n818: \t\t\"conductor TEXT,\"          // Track conductor"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 817,
        "text": "Track publisher",
        "context_before": "815: \t\t\"bpm TEXT,\"                // Track BPM\n816: \t\t\"compilation TEXT,\"        // Track Part of Compilation",
        "context_after": "818: \t\t\"conductor TEXT,\"          // Track conductor\n819: \t\t\"lyricist TEXT,\"           // Track lyricist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 818,
        "text": "Track conductor",
        "context_before": "816: \t\t\"compilation TEXT,\"        // Track Part of Compilation\n817: \t\t\"publisher TEXT,\"          // Track publisher",
        "context_after": "819: \t\t\"lyricist TEXT,\"           // Track lyricist\n820: \t\t\"remixer TEXT,\"            // Track remixer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 819,
        "text": "Track lyricist",
        "context_before": "817: \t\t\"publisher TEXT,\"          // Track publisher\n818: \t\t\"conductor TEXT,\"          // Track conductor",
        "context_after": "820: \t\t\"remixer TEXT,\"            // Track remixer\n821: \t\t\"grouping TEXT,\"           // Track grouping"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 820,
        "text": "Track remixer",
        "context_before": "818: \t\t\"conductor TEXT,\"          // Track conductor\n819: \t\t\"lyricist TEXT,\"           // Track lyricist",
        "context_after": "821: \t\t\"grouping TEXT,\"           // Track grouping\n822: \t\t\"subtitle TEXT,\"           // Track subtitle"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 821,
        "text": "Track grouping",
        "context_before": "819: \t\t\"lyricist TEXT,\"           // Track lyricist\n820: \t\t\"remixer TEXT,\"            // Track remixer",
        "context_after": "822: \t\t\"subtitle TEXT,\"           // Track subtitle\n823: \t\t\"copyright TEXT,\"          // Track copyright"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 822,
        "text": "Track subtitle",
        "context_before": "820: \t\t\"remixer TEXT,\"            // Track remixer\n821: \t\t\"grouping TEXT,\"           // Track grouping",
        "context_after": "823: \t\t\"copyright TEXT,\"          // Track copyright\n824: \t\t\"encodedby TEXT,\"          // Track encoded by"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 824,
        "text": "Track encoded by",
        "context_before": "822: \t\t\"subtitle TEXT,\"           // Track subtitle\n823: \t\t\"copyright TEXT,\"          // Track copyright",
        "context_after": "825: \t\t\"comment TEXT,\"            // Track comment\n826: \t\t\"duration INTEGER,\"        // Track time length"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 825,
        "text": "Track comment",
        "context_before": "823: \t\t\"copyright TEXT,\"          // Track copyright\n824: \t\t\"encodedby TEXT,\"          // Track encoded by",
        "context_after": "826: \t\t\"duration INTEGER,\"        // Track time length\n827: \t\t\"channels INTEGER,\"        // Track number of channels"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 826,
        "text": "Track time length",
        "context_before": "824: \t\t\"encodedby TEXT,\"          // Track encoded by\n825: \t\t\"comment TEXT,\"            // Track comment",
        "context_after": "827: \t\t\"channels INTEGER,\"        // Track number of channels\n828: \t\t\"bitrate INTEGER,\"         // Track bitrate"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 827,
        "text": "Track number of channels",
        "context_before": "825: \t\t\"comment TEXT,\"            // Track comment\n826: \t\t\"duration INTEGER,\"        // Track time length",
        "context_after": "828: \t\t\"bitrate INTEGER,\"         // Track bitrate\n829: \t\t\"samplerate INTEGER,\"      // Track sample rate"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 828,
        "text": "Track bitrate",
        "context_before": "826: \t\t\"duration INTEGER,\"        // Track time length\n827: \t\t\"channels INTEGER,\"        // Track number of channels",
        "context_after": "829: \t\t\"samplerate INTEGER,\"      // Track sample rate\n830: \t\t\"rating INTEGER,\"          // Track rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 829,
        "text": "Track sample rate",
        "context_before": "827: \t\t\"channels INTEGER,\"        // Track number of channels\n828: \t\t\"bitrate INTEGER,\"         // Track bitrate",
        "context_after": "830: \t\t\"rating INTEGER,\"          // Track rating\n831: \t\t\"loverating INTEGER,\"      // Track love rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 830,
        "text": "Track rating",
        "context_before": "828: \t\t\"bitrate INTEGER,\"         // Track bitrate\n829: \t\t\"samplerate INTEGER,\"      // Track sample rate",
        "context_after": "831: \t\t\"loverating INTEGER,\"      // Track love rating\n832: \t\t\"albumrating INTEGER,\"     // Album rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 831,
        "text": "Track love rating",
        "context_before": "829: \t\t\"samplerate INTEGER,\"      // Track sample rate\n830: \t\t\"rating INTEGER,\"          // Track rating",
        "context_after": "832: \t\t\"albumrating INTEGER,\"     // Album rating\n833: \t\t\"folderrating INTEGER,\"    // Folder rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 832,
        "text": "Album rating",
        "context_before": "830: \t\t\"rating INTEGER,\"          // Track rating\n831: \t\t\"loverating INTEGER,\"      // Track love rating",
        "context_after": "833: \t\t\"folderrating INTEGER,\"    // Folder rating\n834: \t\t\"playcount INTEGER,\"       // Track play count"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 833,
        "text": "Folder rating",
        "context_before": "831: \t\t\"loverating INTEGER,\"      // Track love rating\n832: \t\t\"albumrating INTEGER,\"     // Album rating",
        "context_after": "834: \t\t\"playcount INTEGER,\"       // Track play count\n835: \t\t\"lastplayed INTEGER,\"      // Track date time of last play"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 834,
        "text": "Track play count",
        "context_before": "832: \t\t\"albumrating INTEGER,\"     // Album rating\n833: \t\t\"folderrating INTEGER,\"    // Folder rating",
        "context_after": "835: \t\t\"lastplayed INTEGER,\"      // Track date time of last play\n836: \t\t\"skipcount INTEGER,\"       // Track skin count"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 835,
        "text": "Track date time of last play",
        "context_before": "833: \t\t\"folderrating INTEGER,\"    // Folder rating\n834: \t\t\"playcount INTEGER,\"       // Track play count",
        "context_after": "836: \t\t\"skipcount INTEGER,\"       // Track skin count\n837: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 836,
        "text": "Track skin count",
        "context_before": "834: \t\t\"playcount INTEGER,\"       // Track play count\n835: \t\t\"lastplayed INTEGER,\"      // Track date time of last play",
        "context_after": "837: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip\n838: \t\t\"bookmark INTEGER,\"        // Track bookmark"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 837,
        "text": "Track date time of last skip",
        "context_before": "835: \t\t\"lastplayed INTEGER,\"      // Track date time of last play\n836: \t\t\"skipcount INTEGER,\"       // Track skin count",
        "context_after": "838: \t\t\"bookmark INTEGER,\"        // Track bookmark\n839: \t\t\"replaygain TEXT,\"         // ReplayGain values"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 838,
        "text": "Track bookmark",
        "context_before": "836: \t\t\"skipcount INTEGER,\"       // Track skin count\n837: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip",
        "context_after": "839: \t\t\"replaygain TEXT,\"         // ReplayGain values\n840: \t\t\"equalizer TEXT,\"          // Track equalizer settings"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 839,
        "text": "ReplayGain values",
        "context_before": "837: \t\t\"lastskipped INTEGER,\"     // Track date time of last skip\n838: \t\t\"bookmark INTEGER,\"        // Track bookmark",
        "context_after": "840: \t\t\"equalizer TEXT,\"          // Track equalizer settings\n841: \t\t\"keywords TEXT);\"          // Keywords/tags for track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 840,
        "text": "Track equalizer settings",
        "context_before": "838: \t\t\"bookmark INTEGER,\"        // Track bookmark\n839: \t\t\"replaygain TEXT,\"         // ReplayGain values",
        "context_after": "841: \t\t\"keywords TEXT);\"          // Keywords/tags for track\n842: \t);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 841,
        "text": "Keywords/tags for track",
        "context_before": "839: \t\t\"replaygain TEXT,\"         // ReplayGain values\n840: \t\t\"equalizer TEXT,\"          // Track equalizer settings",
        "context_after": "842: \t);\n843: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 863,
        "text": "Track ID (Primary key)",
        "context_before": "861: \tDBase::SQLRequest::Exec(db,\n862: \t\t\"CREATE TABLE IF NOT EXISTS smartlist (\"",
        "context_after": "864: \t\t\"idlib INTEGER,\"           // Track ID in the library database\n865: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 864,
        "text": "Track ID in the library database",
        "context_before": "862: \t\t\"CREATE TABLE IF NOT EXISTS smartlist (\"\n863: \t\t\"id INTEGER PRIMARY KEY AUTOINCREMENT,\" // Track ID (Primary key)",
        "context_after": "865: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)\n866: \t\t\"added INTEGER,\"           // Date time when added to the smartlist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 865,
        "text": "Track index (for order in the playlist)",
        "context_before": "863: \t\t\"id INTEGER PRIMARY KEY AUTOINCREMENT,\" // Track ID (Primary key)\n864: \t\t\"idlib INTEGER,\"           // Track ID in the library database",
        "context_after": "866: \t\t\"added INTEGER,\"           // Date time when added to the smartlist\n867: \t\t\"disabled INTEGER,\"        // Disabled state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 866,
        "text": "Date time when added to the smartlist",
        "context_before": "864: \t\t\"idlib INTEGER,\"           // Track ID in the library database\n865: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)",
        "context_after": "867: \t\t\"disabled INTEGER,\"        // Disabled state\n868: \t\t\"collapsed INTEGER);\"      // Collapsed state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 867,
        "text": "Disabled state",
        "context_before": "865: \t\t\"idx INTEGER,\"             // Track index (for order in the playlist)\n866: \t\t\"added INTEGER,\"           // Date time when added to the smartlist",
        "context_after": "868: \t\t\"collapsed INTEGER);\"      // Collapsed state\n869: \t);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 868,
        "text": "Collapsed state",
        "context_before": "866: \t\t\"added INTEGER,\"           // Date time when added to the smartlist\n867: \t\t\"disabled INTEGER,\"        // Disabled state",
        "context_after": "869: \t);\n870: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 882,
        "text": "ConvertPortableSmartlists(convertPortableTo, drive);",
        "context_before": "880: \tConvertPortableLibraryDB(convertPortableTo, drive);\n881: \tConvertPortablePlaylists(convertPortableTo, drive);",
        "context_after": "883: }\n884: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 918,
        "text": "fromPortable",
        "context_before": "916: \t\t\t\t\t\t}\n917: \t\t\t\t\t}",
        "context_after": "919: \t\t\t\t\t{\n920: \t\t\t\t\t\tif (path[0] == '?')"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 944,
        "text": "\"UPDATE library SET path=?||substr(path,2) WHERE substr(path,1,1)==?;\"",
        "context_before": "942: \tif (dbLibrary.OpenWrite(fileLibrary))\n943: \t{",
        "context_after": "945: \t\tDBase::SQLRequest sqlSelect(dbLibrary, \"SELECT id,path,file FROM library;\");\n946: \t\tDBase::SQLRequest sqlUpdate(dbLibrary, \"UPDATE library SET filehash=?,path=? WHERE id=?;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 1086,
        "text": "fromPortable",
        "context_before": "1084: \t\t\t}\n1085: \t\t}",
        "context_after": "1087: \t\t{\n1088: \t\t\tif (path[0] == '?')"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageCover.cpp",
        "line": 222,
        "text": "www.google.com/search?q=\" + artist + L\"+\" + album + L\"+cover&tbs=imgo:1,isz:lt,islt:qsvga&tbm=isch\";",
        "context_before": "220: \t\tartist = properties->get()->fields.artist;\n221: ",
        "context_after": "223: \n224: \t::ShellExecute(NULL, L\"open\", url.c_str(), NULL, NULL, SW_SHOWNORMAL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageGeneral.cpp",
        "line": 59,
        "text": "::SetDlgItemText(thisWnd, IDC_STATIC_SERVICES, lang->GetLine(Lang::GeneralPage, 4));",
        "context_before": "57: \t::SetDlgItemText(thisWnd, IDC_CHECK_PLAY_FOCUS, lang->GetLine(Lang::GeneralPage, 2));\n58: \t::SetDlgItemText(thisWnd, IDC_STATIC_LIBRARY_VIEW, lang->GetLine(Lang::GeneralPage, 3));",
        "context_after": "60: \t::SetDlgItemText(thisWnd, IDC_STATIC_SERVICES, L\"Last.FM\");\n61: \t::SetDlgItemText(thisWnd, IDC_CHECK_LASTFM, lang->GetLine(Lang::GeneralPage, 5));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageGeneral.cpp",
        "line": 62,
        "text": "::SetDlgItemText(thisWnd, IDC_CHECK_MSN, lang->GetLine(Lang::GeneralPage, 6));",
        "context_before": "60: \t::SetDlgItemText(thisWnd, IDC_STATIC_SERVICES, L\"Last.FM\");\n61: \t::SetDlgItemText(thisWnd, IDC_CHECK_LASTFM, lang->GetLine(Lang::GeneralPage, 5));",
        "context_after": "63: \t::SetDlgItemText(thisWnd, IDC_STATIC_ASSOCIATIONS, lang->GetLine(Lang::GeneralPage, 7));\n64: \t::SetDlgItemText(thisWnd, IDC_CHECK_ASSOC, lang->GetLine(Lang::GeneralPage, 9));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageGeneral.cpp",
        "line": 84,
        "text": "::CheckDlgButton(thisWnd, IDC_CHECK_MSN, settings->IsMSN());",
        "context_before": "82: \n83: \t::CheckDlgButton(thisWnd, IDC_CHECK_LASTFM, settings->IsLastFM());",
        "context_after": "85: \n86: \t::CheckDlgButton(thisWnd, IDC_CHECK_ARTISTS, settings->IsLibraryArtists());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageGeneral.cpp",
        "line": 162,
        "text": "bool isCheckMSN = !!::IsDlgButtonChecked(thisWnd, IDC_CHECK_MSN);",
        "context_before": "160: \t}\n161: ",
        "context_after": "163: \t//if (isCheckMSN != settings->IsMSN())\n164: \t//{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageGeneral.cpp",
        "line": 163,
        "text": "if (isCheckMSN != settings->IsMSN())",
        "context_before": "161: \n162: \t//bool isCheckMSN = !!::IsDlgButtonChecked(thisWnd, IDC_CHECK_MSN);",
        "context_after": "164: \t//{\n165: \t//\tsettings->SetMSN(isCheckMSN);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageGeneral.cpp",
        "line": 165,
        "text": "settings->SetMSN(isCheckMSN);",
        "context_before": "163: \t//if (isCheckMSN != settings->IsMSN())\n164: \t//{",
        "context_after": "166: \t//}\n167: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageGeneral.cpp",
        "line": 187,
        "text": "!!! Also changed in WinylWnd::DialogLanguage()",
        "context_before": "185: \t\tAssociations assoc;\n186: \t\tassoc.SetProgramPath(programPath);",
        "context_after": "188: \t\tassoc.SetPlayInWinylString(lang->GetLineS(Lang::GeneralPage, 8));\n189: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageLibrary.cpp",
        "line": 82,
        "text": "Assign styles and the theme to ListView (Vista/7 selection style like in explorer)",
        "context_before": "80: \tlistFolders = ::GetDlgItem(thisWnd, IDC_LIST_FOLDERS);\n81: ",
        "context_after": "83: \tListView_SetExtendedListViewStyleEx(listFolders, 0, LVS_EX_FULLROWSELECT|LVS_EX_INFOTIP|LVS_EX_DOUBLEBUFFER);\n84: \t::SetWindowTheme(listFolders, L\"explorer\", NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageLibrary.cpp",
        "line": 86,
        "text": "Load icon",
        "context_before": "84: \t::SetWindowTheme(listFolders, L\"explorer\", NULL);\n85: ",
        "context_after": "87: \timListFolder = ::ImageList_Create(16, 16, ILC_COLOR32, 0, 0);\n88: \tif (imListFolder)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageLibrary.cpp",
        "line": 110,
        "text": "Remove slash for folders (not drives)",
        "context_before": "108: \tfor (std::size_t i = 0, size = paths.size(); i < size; ++i)\n109: \t{",
        "context_after": "111: \t\tstd::wstring path = paths[i];\n112: \t\tif (path.size() > 3 && path.back() == '\\\\')"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageLibrary.cpp",
        "line": 163,
        "text": "Add slash for folders (FileDialog returns without slash)",
        "context_before": "161: \t\tListView_InsertItem(listFolders, &item);\n162: ",
        "context_after": "164: \t\tstd::wstring path = fileDialog.GetFile();\n165: \t\tif (!path.empty() && path.back() != '\\\\')"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageMini.cpp",
        "line": 83,
        "text": "case TB_ENDTRACK:",
        "context_before": "81: \t\tcase TB_LINEUP:\n82: \t\tcase TB_LINEDOWN:",
        "context_after": "84: \t\t\tif (hScrollBar == sliderOpacity)\n85: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPagePopup.cpp",
        "line": 69,
        "text": "::CheckDlgButton(thisWnd, IDC_CHECK_POPUP, settings->IsPopup());",
        "context_before": "67: \tSetDlgItemText(thisWnd, IDC_STATIC_POPUP_EFFECT_HIDE, lang->GetLine(Lang::PopupPage, 13));\n68: ",
        "context_after": "70: \n71: \tsliderHold = ::GetDlgItem(thisWnd, IDC_SLIDER_POPUP_HOLD);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPagePopup.cpp",
        "line": 120,
        "text": "case TB_ENDTRACK:",
        "context_before": "118: \t\tcase TB_LINEUP:\n119: \t\tcase TB_LINEDOWN:",
        "context_after": "121: \t\t\tif (hScrollBar == sliderHold)\n122: \t\t\t\tShowDelayTime((int)::SendMessage(sliderHold, TBM_GETPOS, 0, 0), 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPagePopup.cpp",
        "line": 184,
        "text": "contextMenu->CheckPopup(!!::IsDlgButtonChecked(thisWnd, IDC_CHECK_POPUP));",
        "context_before": "182: \tsettings->SetPopupDelay(posHold*100, posShow*100, posHide*100);\n183: ",
        "context_after": "185: \tif (contextMenu != nullptr) {\n186: \t\tcontextMenu->CheckPopupPosition(selPos);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageSystem.cpp",
        "line": 107,
        "text": "DirectSound",
        "context_before": "105: \tcomboDevice = ::GetDlgItem(thisWnd, IDC_COMBO_DEVICE);\n106: ",
        "context_after": "108: \t{\n109: \t\toldDriver = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageSystem.cpp",
        "line": 114,
        "text": "WASAPI",
        "context_before": "112: \t\tAddDirectSoundDevices();\n113: \t}",
        "context_after": "115: \t{\n116: \t\toldDriver = 1;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageSystem.cpp",
        "line": 135,
        "text": "Select a chosen audio device",
        "context_before": "133: \t}\n134: ",
        "context_after": "136: \tfor (int i = 0, size = ComboBox_GetCount(comboDevice); i < size; ++i)\n137: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageSystem.cpp",
        "line": 177,
        "text": "we can't close it anymore with OK button so fix this strange behaviour.",
        "context_before": "175: {\n176: \t// When navigate from the keyboard if appear \"Not found ASIO devices.\" MessageBox,",
        "context_after": "178: \tif (!::IsDlgButtonChecked(thisWnd, IDC_RADIO_ASIO))\n179: \t\treturn;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageSystem.cpp",
        "line": 210,
        "text": "Add default audio device",
        "context_before": "208: void DlgPageSystem::AddDirectSoundDevices()\n209: {",
        "context_after": "211: \tComboBox_AddString(comboDevice, lang->GetLine(Lang::SystemPage, 1));\n212: \tComboBox_SetItemData(comboDevice, 0, (LPARAM)-1);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageSystem.cpp",
        "line": 213,
        "text": "ComboBox_AddString(comboDevice, L\"No Sound\");",
        "context_before": "211: \tComboBox_AddString(comboDevice, lang->GetLine(Lang::SystemPage, 1));\n212: \tComboBox_SetItemData(comboDevice, 0, (LPARAM)-1);",
        "context_after": "214: \t//ComboBox_SetItemData(comboDevice, 1, (LPARAM)0);\n215: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageSystem.cpp",
        "line": 214,
        "text": "ComboBox_SetItemData(comboDevice, 1, (LPARAM)0);",
        "context_before": "212: \tComboBox_SetItemData(comboDevice, 0, (LPARAM)-1);\n213: \t//ComboBox_AddString(comboDevice, L\"No Sound\");",
        "context_after": "215: \n216: \t// Add audio devices"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageSystem.cpp",
        "line": 216,
        "text": "Add audio devices",
        "context_before": "214: \t//ComboBox_SetItemData(comboDevice, 1, (LPARAM)0);\n215: ",
        "context_after": "217: \tstd::wstring device;\n218: \tfor (int i = 1; libAudio->GetDeviceName(i, device); ++i)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageSystem.cpp",
        "line": 230,
        "text": "Add default audio device",
        "context_before": "228: void DlgPageSystem::AddWasapiDevices()\n229: {",
        "context_after": "231: \tComboBox_AddString(comboDevice, lang->GetLine(Lang::SystemPage, 1));\n232: \tComboBox_SetItemData(comboDevice, 0, (LPARAM)-1);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageSystem.cpp",
        "line": 234,
        "text": "Add audio devices",
        "context_before": "232: \tComboBox_SetItemData(comboDevice, 0, (LPARAM)-1);\n233: ",
        "context_after": "235: \tstd::wstring device;\n236: \tfor (int i = 0; libAudio->GetDeviceNameWASAPI(i, device); ++i)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageSystem.cpp",
        "line": 248,
        "text": "Add audio devices",
        "context_before": "246: void DlgPageSystem::AddAsioDevices()\n247: {",
        "context_after": "249: \tstd::wstring device;\n250: \tfor (int i = 0; libAudio->GetDeviceNameASIO(i, device); ++i)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageTags.cpp",
        "line": 109,
        "text": "::EnableWindow(::GetDlgItem(thisWnd, IDC_EDIT_TITLE),       FALSE); ::EnableWindow(::GetDlgItem(thisWnd, IDC_EDIT_ARTIST),      FALSE); ::EnableWindow(::GetDlgItem(thisWnd, IDC_EDIT_ALBUM),       FALSE); ::EnableWindow(::GetDlgItem(thisWnd, IDC_EDIT_ALBUMARTIST), FALSE); ::EnableWindow(::GetDlgItem(thisWnd, IDC_EDIT_COMPOSER),    FALSE); ::EnableWindow(::GetDlgItem(thisWnd, IDC_EDIT_YEAR),        FALSE); ::EnableWindow(::GetDlgItem(thisWnd, IDC_EDIT_TRACK),       FALSE); ::EnableWindow(::GetDlgItem(thisWnd, IDC_EDIT_TRACKTOTAL),  FALSE); ::EnableWindow(::GetDlgItem(thisWnd, IDC_EDIT_DISC),        FALSE); ::EnableWindow(::GetDlgItem(thisWnd, IDC_EDIT_DISCTOTAL),   FALSE); ::EnableWindow(::GetDlgItem(thisWnd, IDC_EDIT_GENRE),       FALSE); ::EnableWindow(::GetDlgItem(thisWnd, IDC_EDIT_COMMENT),     FALSE);",
        "context_before": "107: void DlgPageTags::DisableTags(bool disable)\n108: {",
        "context_after": "124: \t::SendMessage(::GetDlgItem(thisWnd, IDC_EDIT_ARTIST),      EM_SETREADONLY, disable, 0);\n125: \t::SendMessage(::GetDlgItem(thisWnd, IDC_EDIT_ALBUM),       EM_SETREADONLY, disable, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageTags.cpp",
        "line": 152,
        "text": "Radio added from radio list or by user",
        "context_before": "150: \telse\n151: \t{",
        "context_after": "153: \t\tif (properties->get()->IsRadioDefault() || properties->get()->IsRadioCustom())\n154: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageTags.cpp",
        "line": 161,
        "text": "The file is part of cue",
        "context_before": "159: \t\t\treturn;\n160: \t\t}",
        "context_after": "162: \t\t\tDisableTags(true);\n163: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgProperties.cpp",
        "line": 38,
        "text": "Without WS_CLIPCHILDREN controls are blinking a bit when change a tab",
        "context_before": "36: \t{\n37: \tcase WM_INITDIALOG:",
        "context_after": "39: \t\tLONG_PTR style;\n40: \t\tstyle = ::GetWindowLongPtr(thisWnd, GWL_STYLE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgProperties.cpp",
        "line": 324,
        "text": "For radio",
        "context_before": "322: \t\t\tproperties->Init();\n323: ",
        "context_after": "325: \t\t\tisRadioOpen = properties->IsRadioDefault() || properties->IsRadioCustom() || properties->IsPartOfCue();\n326: \t\t\tif (isRadioOpen != isRadioOpenOld)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgProperties.cpp",
        "line": 374,
        "text": "Lyrics",
        "context_before": "372: \t\t\tif (tabCurSel == 1) // Cover\n373: \t\t\t\tpageCover.LoadCover();",
        "context_after": "375: \t\t\t\tpageLyrics.LoadLyrics();\n376: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgProperties.cpp",
        "line": 387,
        "text": "rcTool.left += (rcTool.Width() - 22) / 2; // For High DPI",
        "context_before": "385: \t::GetWindowRect(::GetDlgItem(thisWnd, IDC_STATIC_NEXT_PREV), rcTool);\n386: \t::MapWindowPoints(NULL, thisWnd, (LPPOINT)&rcTool, 2);",
        "context_after": "388: \t//rcTool.top += 1;\n389: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgProperties.cpp",
        "line": 388,
        "text": "rcTool.top += 1;",
        "context_before": "386: \t::MapWindowPoints(NULL, thisWnd, (LPPOINT)&rcTool, 2);\n387: \t//rcTool.left += (rcTool.Width() - 22) / 2; // For High DPI",
        "context_after": "389: \n390: \ttoolImageList = ::ImageList_Create(24, 24, ILC_COLOR32, 0, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgProperties.cpp",
        "line": 405,
        "text": "Tooltips for toolbar",
        "context_before": "403: \t::SendMessage(toolBar, TB_SETBUTTONSIZE, 0, MAKELPARAM(24, rcTool.Height() - 1));\n404: ",
        "context_after": "406: \ttoolTip = ::CreateWindowEx(WS_EX_TOPMOST, TOOLTIPS_CLASS, L\"\", WS_POPUP|TTS_ALWAYSTIP|TTS_NOPREFIX,\n407: \t\tCW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, toolBar, NULL, instance, NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgProperties.cpp",
        "line": 424,
        "text": "Buttons for toolbar",
        "context_before": "422: \t::SendMessage(toolBar, TB_SETTOOLTIPS, (WPARAM)toolTip, 0);\n423: ",
        "context_after": "425: \tTBBUTTON button = {};\n426: \tbutton.fsState = TBSTATE_ENABLED;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSkin.cpp",
        "line": 78,
        "text": "Assign styles and the theme to ListView (Vista/7 selection style like in explorer)",
        "context_before": "76: \tlistSkin = ::GetDlgItem(thisWnd, IDC_LIST_SKIN);\n77: ",
        "context_after": "79: \tListView_SetExtendedListViewStyleEx(listSkin, 0, LVS_EX_FULLROWSELECT|LVS_EX_INFOTIP|LVS_EX_DOUBLEBUFFER);\n80: \t::SetWindowTheme(listSkin, L\"explorer\", NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSkin.cpp",
        "line": 82,
        "text": "Load icon",
        "context_before": "80: \t::SetWindowTheme(listSkin, L\"explorer\", NULL);\n81: ",
        "context_after": "83: \timListSkin = ::ImageList_Create(16, 16, ILC_COLOR32, 0, 0);\n84: \tif (imListSkin)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSkin.cpp",
        "line": 102,
        "text": "Search for subfolders in Skin folder",
        "context_before": "100: \tListView_InsertColumn(listSkin, 0, &column);\n101: ",
        "context_after": "103: \tstd::wstring path = programPath;\n104: \tpath += L\"Skin\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSkin.cpp",
        "line": 152,
        "text": "Select the current skin",
        "context_before": "150: \tSetWindowRedraw(listSkin, TRUE);\n151: ",
        "context_after": "153: \n154: \tLVFINDINFO fi = {};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmart.cpp",
        "line": 111,
        "text": "//////////////////////////////////////////////////////////////////////////////",
        "context_before": "109: \t::SetDlgItemText(thisWnd, IDC_EDIT_NAME, smartName.c_str());\n110: ",
        "context_after": "112: \n113: \tHINSTANCE instance = ::GetModuleHandle(NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmart.cpp",
        "line": 125,
        "text": "|TTS_CLOSE",
        "context_before": "123: \t::MapWindowPoints(NULL, thisWnd, (LPPOINT)&rc, 2);\n124: ",
        "context_after": "126: \t\tCW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, thisWnd, NULL, instance, NULL);\n127: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmart.cpp",
        "line": 130,
        "text": "|TTF_TRACK|TTF_TRANSPARENT",
        "context_before": "128: \tTOOLINFO ti = {};\n129: \tti.cbSize = sizeof(TOOLINFO);",
        "context_after": "132:     ti.lpszText = (LPWSTR)tipString.c_str();\n133:     ti.uId = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmart.cpp",
        "line": 144,
        "text": "For High DPI",
        "context_before": "142: \t::GetWindowRect(::GetDlgItem(thisWnd, IDC_STATIC_TOOLTIP), rcInfo);\n143: \t::MapWindowPoints(NULL, thisWnd, (LPPOINT)&rcInfo, 2);",
        "context_after": "145: \trcInfo.top += 1;\n146: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmart.cpp",
        "line": 150,
        "text": "For High DPI",
        "context_before": "148: \t::GetWindowRect(::GetDlgItem(thisWnd, IDC_STATIC_PLUS), rcPlus);\n149: \t::MapWindowPoints(NULL, thisWnd, (LPPOINT)&rcPlus, 2);",
        "context_after": "151: \trcPlus.top += 1;\n152: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmart.cpp",
        "line": 176,
        "text": "Tooltips for toolbar",
        "context_before": "174: \t::SendMessage(toolBarPlus, TB_SETBUTTONSIZE, 0, MAKELPARAM(16, rcPlus.Height() - 1));\n175: ",
        "context_after": "177: \ttoolTipInfo = ::CreateWindowEx(WS_EX_TOPMOST, TOOLTIPS_CLASS, L\"\", WS_POPUP|TTS_ALWAYSTIP|TTS_NOPREFIX,\n178: \t\tCW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, toolBarInfo, NULL, instance, NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmart.cpp",
        "line": 201,
        "text": "Buttons for toolbar",
        "context_before": "199: \t::SendMessage(toolBarPlus, TB_SETTOOLTIPS, (WPARAM)toolTipPlus, 0);\n200: ",
        "context_after": "202: \tTBBUTTON button = {};\n203: \tbutton.fsState = TBSTATE_ENABLED;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmart.cpp",
        "line": 216,
        "text": "//////////////////////////////////////////////////////////////////////////////",
        "context_before": "214: \n215: ",
        "context_after": "217: \tif (smart.from)\n218: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmart.cpp",
        "line": 306,
        "text": "CRect rc;",
        "context_before": "304: \t\t\tti.hwnd = thisWnd;\n305: \t\t\tti.uId = 0;",
        "context_after": "307: \t\t\t//::GetWindowRect(::GetDlgItem(thisWnd, IDC_EDIT_FROM), rc);\n308: \t\t\t//::SendMessage(toolTip, TTM_TRACKPOSITION, 0, MAKELPARAM(rc.left+rc.Width()/2, rc.bottom));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmart.cpp",
        "line": 307,
        "text": "::GetWindowRect(::GetDlgItem(thisWnd, IDC_EDIT_FROM), rc);",
        "context_before": "305: \t\t\tti.uId = 0;\n306: \t\t\t//CRect rc;",
        "context_after": "308: \t\t\t//::SendMessage(toolTip, TTM_TRACKPOSITION, 0, MAKELPARAM(rc.left+rc.Width()/2, rc.bottom));\n309: \t\t\t::SendMessage(toolTip, TTM_TRACKACTIVATE, TRUE, (LPARAM)&ti);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 39,
        "text": "const wchar_t* className = L\"DragIconWnd\";",
        "context_before": "37: \tHINSTANCE instance = ::GetModuleHandle(NULL);\n38: ",
        "context_after": "40: \n41: \t//WNDCLASSEX wcex;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 41,
        "text": "WNDCLASSEX wcex;",
        "context_before": "39: \t//const wchar_t* className = L\"DragIconWnd\";\n40: ",
        "context_after": "42: \t//wcex.cbSize = sizeof(WNDCLASSEX);\n43: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 42,
        "text": "wcex.cbSize = sizeof(WNDCLASSEX);",
        "context_before": "40: \n41: \t//WNDCLASSEX wcex;",
        "context_after": "43: \n44: \t//if (!::GetClassInfoEx(appInstance, className, &wcex))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 44,
        "text": "if (!::GetClassInfoEx(appInstance, className, &wcex))",
        "context_before": "42: \t//wcex.cbSize = sizeof(WNDCLASSEX);\n43: ",
        "context_after": "45: \t//{\n46: \t//\twcex.style\t\t\t= CS_HREDRAW | CS_VREDRAW;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 46,
        "text": "wcex.style\t\t\t= CS_HREDRAW | CS_VREDRAW;",
        "context_before": "44: \t//if (!::GetClassInfoEx(appInstance, className, &wcex))\n45: \t//{",
        "context_after": "47: \t//\twcex.lpfnWndProc\t= ::DefWindowProc;\n48: \t//\twcex.cbClsExtra\t\t= 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 47,
        "text": "wcex.lpfnWndProc\t= ::DefWindowProc;",
        "context_before": "45: \t//{\n46: \t//\twcex.style\t\t\t= CS_HREDRAW | CS_VREDRAW;",
        "context_after": "48: \t//\twcex.cbClsExtra\t\t= 0;\n49: \t//\twcex.cbWndExtra\t\t= 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 48,
        "text": "wcex.cbClsExtra\t\t= 0;",
        "context_before": "46: \t//\twcex.style\t\t\t= CS_HREDRAW | CS_VREDRAW;\n47: \t//\twcex.lpfnWndProc\t= ::DefWindowProc;",
        "context_after": "49: \t//\twcex.cbWndExtra\t\t= 0;\n50: \t//\twcex.hInstance\t\t= instance;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 49,
        "text": "wcex.cbWndExtra\t\t= 0;",
        "context_before": "47: \t//\twcex.lpfnWndProc\t= ::DefWindowProc;\n48: \t//\twcex.cbClsExtra\t\t= 0;",
        "context_after": "50: \t//\twcex.hInstance\t\t= instance;\n51: \t//\twcex.hIcon\t\t\t= NULL;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 50,
        "text": "wcex.hInstance\t\t= instance;",
        "context_before": "48: \t//\twcex.cbClsExtra\t\t= 0;\n49: \t//\twcex.cbWndExtra\t\t= 0;",
        "context_after": "51: \t//\twcex.hIcon\t\t\t= NULL;\n52: \t//\twcex.hCursor\t\t= ::LoadCursorW(NULL, IDC_ARROW);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 51,
        "text": "wcex.hIcon\t\t\t= NULL;",
        "context_before": "49: \t//\twcex.cbWndExtra\t\t= 0;\n50: \t//\twcex.hInstance\t\t= instance;",
        "context_after": "52: \t//\twcex.hCursor\t\t= ::LoadCursorW(NULL, IDC_ARROW);\n53: \t//\twcex.hbrBackground\t= (HBRUSH)(COLOR_WINDOW+1);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 52,
        "text": "wcex.hCursor\t\t= ::LoadCursorW(NULL, IDC_ARROW);",
        "context_before": "50: \t//\twcex.hInstance\t\t= instance;\n51: \t//\twcex.hIcon\t\t\t= NULL;",
        "context_after": "53: \t//\twcex.hbrBackground\t= (HBRUSH)(COLOR_WINDOW+1);\n54: \t//\twcex.lpszMenuName\t= NULL;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 53,
        "text": "wcex.hbrBackground\t= (HBRUSH)(COLOR_WINDOW+1);",
        "context_before": "51: \t//\twcex.hIcon\t\t\t= NULL;\n52: \t//\twcex.hCursor\t\t= ::LoadCursorW(NULL, IDC_ARROW);",
        "context_after": "54: \t//\twcex.lpszMenuName\t= NULL;\n55: \t//\twcex.lpszClassName\t= className;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 54,
        "text": "wcex.lpszMenuName\t= NULL;",
        "context_before": "52: \t//\twcex.hCursor\t\t= ::LoadCursorW(NULL, IDC_ARROW);\n53: \t//\twcex.hbrBackground\t= (HBRUSH)(COLOR_WINDOW+1);",
        "context_after": "55: \t//\twcex.lpszClassName\t= className;\n56: \t//\twcex.hIconSm\t\t= NULL;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 55,
        "text": "wcex.lpszClassName\t= className;",
        "context_before": "53: \t//\twcex.hbrBackground\t= (HBRUSH)(COLOR_WINDOW+1);\n54: \t//\twcex.lpszMenuName\t= NULL;",
        "context_after": "56: \t//\twcex.hIconSm\t\t= NULL;\n57: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 56,
        "text": "wcex.hIconSm\t\t= NULL;",
        "context_before": "54: \t//\twcex.lpszMenuName\t= NULL;\n55: \t//\twcex.lpszClassName\t= className;",
        "context_after": "57: \n58: \t//\tRegisterClassEx(&wcex);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 58,
        "text": "RegisterClassEx(&wcex);",
        "context_before": "56: \t//\twcex.hIconSm\t\t= NULL;\n57: ",
        "context_after": "59: \t//}\n60: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.cpp",
        "line": 74,
        "text": "::DrawIcon(dcMemory, 0, 0, iconDrag);",
        "context_before": "72: \tHGDIOBJ oldMemory = ::SelectObject(dcMemory, bmMemory);\n73: ",
        "context_after": "75: \t::DrawIconEx(dcMemory, 0, 0, iconDrag, 0, 0, 0, NULL, DI_NORMAL | DI_COMPAT);\n76: \t::DestroyIcon(iconDrag);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DragIconWnd.h",
        "line": 37,
        "text": "Fix 33 - fix small bottom tail from icon on some PCs",
        "context_before": "35: \tHWND wndDragIcon = NULL;\n36: \tint iconSizeX = 32;",
        "context_after": "38: };\n39: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.cpp",
        "line": 62,
        "text": "CoInitialize(NULL);",
        "context_before": "60: \tpointerOpenFiles = &openFiles;\n61: ",
        "context_after": "63: \n64: \tSimpleClassFactory s_scf;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.cpp",
        "line": 113,
        "text": "CoUninitialize();",
        "context_before": "111: \t}\n112: ",
        "context_after": "114: \n115: \tif (SUCCEEDED(hrRegister))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 22,
        "text": "for new(nothrow)",
        "context_before": "20: #include <shlobj.h>\n21: #include <shellapi.h>",
        "context_after": "23: \n24: #include <string>"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 27,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2010/05/03/10006065.aspx",
        "context_before": "25: extern std::wstring globalOpenFiles;\n26: ",
        "context_after": "28: // http://blogs.msdn.com/b/oldnewthing/archive/2010/05/28/10016692.aspx\n29: // OLD MFC: http://www.ureader.com/msg/16601261.aspx"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 28,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2010/05/28/10016692.aspx",
        "context_before": "26: \n27: // http://blogs.msdn.com/b/oldnewthing/archive/2010/05/03/10006065.aspx",
        "context_after": "29: // OLD MFC: http://www.ureader.com/msg/16601261.aspx\n30: // Windows 7 SDK\\Samples\\winui\\shell\\appshellintegration\\DropTargetVerb\\"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 29,
        "text": "OLD MFC: http://www.ureader.com/msg/16601261.aspx",
        "context_before": "27: // http://blogs.msdn.com/b/oldnewthing/archive/2010/05/03/10006065.aspx\n28: // http://blogs.msdn.com/b/oldnewthing/archive/2010/05/28/10016692.aspx",
        "context_after": "30: // Windows 7 SDK\\Samples\\winui\\shell\\appshellintegration\\DropTargetVerb\\\n31: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 30,
        "text": "Windows 7 SDK\\Samples\\winui\\shell\\appshellintegration\\DropTargetVerb\\",
        "context_before": "28: // http://blogs.msdn.com/b/oldnewthing/archive/2010/05/28/10016692.aspx\n29: // OLD MFC: http://www.ureader.com/msg/16601261.aspx",
        "context_after": "31: \n32: class DropTargetOpen"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 82,
        "text": "MSG msg;",
        "context_before": "80: \t\tRelease();\n81: ",
        "context_after": "83: \t\t//while (m_cRef && GetMessage(&msg, NULL, 0, 0))\n84: \t\t//{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 104,
        "text": "*** IUnknown ***",
        "context_before": "102: \t~SimpleDropTarget() { g_ppr->Release(); }\n103: ",
        "context_after": "105: \tSTDMETHODIMP QueryInterface(REFIID riid, void** ppv)\n106: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 129,
        "text": "*** IDropTarget ***",
        "context_before": "127: \t}\n128: ",
        "context_after": "130: \tSTDMETHODIMP DragEnter(IDataObject* pdto,\n131: \t\tDWORD grfKeyState, POINTL ptl, DWORD* pdwEffect)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 164,
        "text": "*** IUnknown ***",
        "context_before": "162: {\n163: public:",
        "context_after": "165: \tSTDMETHODIMP QueryInterface(REFIID riid, void** ppv)\n166: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 188,
        "text": "*** IClassFactory ***",
        "context_before": "186: \t}\n187: ",
        "context_after": "189: \tSTDMETHODIMP CreateInstance(IUnknown* punkOuter, REFIID riid, void** ppv)\n190: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 202,
        "text": "server shutting down",
        "context_before": "200: \tSTDMETHODIMP LockServer(BOOL fLock)\n201: \t{",
        "context_after": "203: \t\tif (fLock) g_ppr->AddRef(); else g_ppr->Release();\n204: \t\treturn S_OK;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 208,
        "text": "SimpleClassFactory s_scf;",
        "context_before": "206: };\n207: ",
        "context_after": "209: \n210: };"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 163,
        "text": "::GdiAlphaBlend(dc, ix, iy, bitmapWidth, bitmapHeight, dcBitmap, 0, 0, bitmapWidth, bitmapHeight, bf);",
        "context_before": "161: \t\t\tfor (int ix = x; ix < x + cx; ix += bitmapWidth)\n162: \t\t\t{",
        "context_after": "164: \t\t\t\tint width = std::min(bitmapWidth, x + cx - ix);\n165: \t\t\t\tint height = std::min(bitmapHeight, y + cy - iy);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 342,
        "text": "+1 because i+1 below",
        "context_before": "340: \n341: \t\tint step = 255 / height;",
        "context_after": "343: \t\tfor (int i = 0; i < height; i++)\n344: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 361,
        "text": "Use this function instead of CreateCompatibleBitmap.",
        "context_before": "359: HBITMAP ExImage::Create32BppBitmap(int width, int height)\n360: {",
        "context_after": "362: \t// The function always use 32 bit color, CreateCompatibleBitmap does not!\n363: \t// Also we draw skin with AlphaBlend function, and it works good only with 32 bit DC"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 362,
        "text": "The function always use 32 bit color, CreateCompatibleBitmap does not!",
        "context_before": "360: {\n361: \t// Use this function instead of CreateCompatibleBitmap.",
        "context_after": "363: \t// Also we draw skin with AlphaBlend function, and it works good only with 32 bit DC\n364: \t// (otherwise there was a bug on my ATI videocard, sometimes the last pixel did not draw when stretching)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 363,
        "text": "Also we draw skin with AlphaBlend function, and it works good only with 32 bit DC",
        "context_before": "361: \t// Use this function instead of CreateCompatibleBitmap.\n362: \t// The function always use 32 bit color, CreateCompatibleBitmap does not!",
        "context_after": "364: \t// (otherwise there was a bug on my ATI videocard, sometimes the last pixel did not draw when stretching)\n365: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 364,
        "text": "(otherwise there was a bug on my ATI videocard, sometimes the last pixel did not draw when stretching)",
        "context_before": "362: \t// The function always use 32 bit color, CreateCompatibleBitmap does not!\n363: \t// Also we draw skin with AlphaBlend function, and it works good only with 32 bit DC",
        "context_after": "365: \n366: \tBITMAPINFO bi32 = {};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 459,
        "text": "WICDecodeMetadataCacheOnLoad = load at the current moment",
        "context_before": "457: \tIWICBitmapDecoder* wicDecoder = nullptr;\n458: ",
        "context_after": "460: \t// WICDecodeMetadataCacheOnDemand = load at the first access\n461: \t//HRESULT hr = ::CoCreateInstance(CLSID_WICPngDecoder, NULL, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&wicDecoder));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 460,
        "text": "WICDecodeMetadataCacheOnDemand = load at the first access",
        "context_before": "458: \n459: \t// WICDecodeMetadataCacheOnLoad = load at the current moment",
        "context_after": "461: \t//HRESULT hr = ::CoCreateInstance(CLSID_WICPngDecoder, NULL, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&wicDecoder));\n462: \tHRESULT hr = ImagingFactory::Instance().Get()->CreateDecoderFromStream(imageStream, NULL, WICDecodeMetadataCacheOnDemand, &wicDecoder);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 461,
        "text": "HRESULT hr = ::CoCreateInstance(CLSID_WICPngDecoder, NULL, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&wicDecoder));",
        "context_before": "459: \t// WICDecodeMetadataCacheOnLoad = load at the current moment\n460: \t// WICDecodeMetadataCacheOnDemand = load at the first access",
        "context_after": "462: \tHRESULT hr = ImagingFactory::Instance().Get()->CreateDecoderFromStream(imageStream, NULL, WICDecodeMetadataCacheOnDemand, &wicDecoder);\n463: \tif (SUCCEEDED(hr))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 465,
        "text": "wicDecoder->Initialize(wicImageStream, WICDecodeMetadataCacheOnLoad);",
        "context_before": "463: \tif (SUCCEEDED(hr))\n464: \t{",
        "context_after": "466: \t\twicBitmapSource = LoadBitmapFromDecoder(wicDecoder);\n467: \t\twicDecoder->Release();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 481,
        "text": "WICDecodeMetadataCacheOnLoad = load at the current moment",
        "context_before": "479: \tIWICBitmapDecoder* wicDecoder = nullptr;\n480: ",
        "context_after": "482: \t// WICDecodeMetadataCacheOnDemand = load at the first access\n483: \tHRESULT hr = ImagingFactory::Instance().Get()->CreateDecoderFromFilename(file.c_str(), NULL, GENERIC_READ, WICDecodeMetadataCacheOnDemand, &wicDecoder);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 482,
        "text": "WICDecodeMetadataCacheOnDemand = load at the first access",
        "context_before": "480: \n481: \t// WICDecodeMetadataCacheOnLoad = load at the current moment",
        "context_after": "483: \tHRESULT hr = ImagingFactory::Instance().Get()->CreateDecoderFromFilename(file.c_str(), NULL, GENERIC_READ, WICDecodeMetadataCacheOnDemand, &wicDecoder);\n484: \tif (SUCCEEDED(hr))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 507,
        "text": "if (outBitsPerPixel)",
        "context_before": "505: \t\tif (SUCCEEDED(hr))\n506: \t\t{",
        "context_after": "508: \t\t\t//\t*outBitsPerPixel = GetBitsPerPixel(wicFrame);\n509: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 508,
        "text": "*outBitsPerPixel = GetBitsPerPixel(wicFrame);",
        "context_before": "506: \t\t{\n507: \t\t\t//if (outBitsPerPixel)",
        "context_after": "509: \n510: \t\t\t//WICConvertBitmapSource(GUID_WICPixelFormat32bppPBGRA, wicFrame, &wicBitmapSource);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 510,
        "text": "WICConvertBitmapSource(GUID_WICPixelFormat32bppPBGRA, wicFrame, &wicBitmapSource);",
        "context_before": "508: \t\t\t//\t*outBitsPerPixel = GetBitsPerPixel(wicFrame);\n509: ",
        "context_after": "511: \t\t\tIWICFormatConverter* wicConverter = nullptr;\n512: \t\t\thr = ImagingFactory::Instance().Get()->CreateFormatConverter(&wicConverter);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 515,
        "text": "Use BGRA with premiltiplied alpha format here (PBGRA).",
        "context_before": "513: \t\t\tif (SUCCEEDED(hr))\n514: \t\t\t{",
        "context_after": "516: \t\t\t\thr = wicConverter->Initialize(wicFrame, GUID_WICPixelFormat32bppPBGRA, WICBitmapDitherTypeNone, NULL, 0.f, WICBitmapPaletteTypeCustom);\n517: \t\t\t\tif (SUCCEEDED(hr))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 526,
        "text": "Without converting",
        "context_before": "524: \t\t}\n525: ",
        "context_after": "527: \t\tif (SUCCEEDED(hr))\n528: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 536,
        "text": "int ExImage::Source::GetBitsPerPixel(IWICBitmapFrameDecode* wicFrame) const { UINT bpp = 0; WICPixelFormatGUID wicPixelFormatGUID; HRESULT hr = wicFrame->GetPixelFormat(&wicPixelFormatGUID); if (SUCCEEDED(hr)) { IWICComponentInfo* wicComponentInfo = nullptr; hr = ImagingFactory::Instance().Get()->CreateComponentInfo(wicPixelFormatGUID, &wicComponentInfo); if (SUCCEEDED(hr)) { IWICPixelFormatInfo* wicPixelFormatInfo = nullptr; hr = wicComponentInfo->QueryInterface(IID_PPV_ARGS(&wicPixelFormatInfo)); if (SUCCEEDED(hr)) { wicPixelFormatInfo->GetBitsPerPixel(&bpp); wicPixelFormatInfo->Release(); } wicComponentInfo->Release(); } } return (int)bpp; }",
        "context_before": "534: \treturn wicBitmapSource;\n535: }",
        "context_after": "564: {\n565: \tif (!bitmap)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 652,
        "text": "If diff less than 4 pixels, then draw fast",
        "context_before": "650: \t\tint newcy = (int)(fScale * imagecy + 0.5f);\n651: ",
        "context_after": "653: \t\tif (abs(cx - cy) < 4 && abs(newcx - newcy) < 4)\n654: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 819,
        "text": "Make sure you do not use it with GUID_WICPixelFormat32bppPBGRA pixel format",
        "context_before": "817: bool ExImage::Source::SaveBitmapToStream(IWICBitmapSource* wicBitmapSource, IWICStream* wicStream, bool jpeg)\n818: {",
        "context_after": "820: \n821: \tbool result = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 897,
        "text": "Get system font",
        "context_before": "895: HFONT ExImage::CreateElementFont(const char* name, int size, int bold, int italic, int clear)\n896: {",
        "context_after": "898: \tstatic bool isFontLoaded = false;\n899: \tstatic NONCLIENTMETRICS ncm = {};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 905,
        "text": "http://stackoverflow.com/questions/35288433/query-windows-color-and-appearance",
        "context_before": "903: \t\tncm.cbSize = sizeof(NONCLIENTMETRICS);\n904: \t\t::SystemParametersInfo(SPI_GETNONCLIENTMETRICS, sizeof(NONCLIENTMETRICS), &ncm, 0);",
        "context_after": "906: \t}\n907: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 919,
        "text": "else if (size == 9)",
        "context_before": "917: \t\tif (futureWin->IsVistaOrLater())\n918: \t\t\twcscpy_s(ncm.lfMessageFont.lfFaceName, L\"Segoe UI\");",
        "context_after": "920: \t\t//\twcscpy_s(ncm.lfMessageFont.lfFaceName, L\"Arial\");\n921: \t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 927,
        "text": "::GetDeviceCaps(::GetDC(0), LOGPIXELSY) = 96 (By Default)",
        "context_before": "925: \tncm.lfMessageFont.lfOrientation = 0;\n926: ",
        "context_after": "928: \tif (size > 0)\n929: \t\tncm.lfMessageFont.lfHeight = -MulDiv(size, 96, 72);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 973,
        "text": "GetAValue(clr)",
        "context_before": "971: \tif (bits)\n972: \t{",
        "context_after": "974: \n975: \t\t// Premultiple alpha: output = color * alpha / 255. To round to nearest integer use + 255 / 2. (PBGRA WIC format)."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 975,
        "text": "Premultiple alpha: output = color * alpha / 255. To round to nearest integer use + 255 / 2. (PBGRA WIC format).",
        "context_before": "973: \t\tBYTE alpha = HIBYTE(HIWORD(clr)); // GetAValue(clr)\n974: ",
        "context_after": "976: \t\tbits[0] = (GetBValue(clr) * alpha + 255 / 2) / 255;\n977: \t\tbits[1] = (GetGValue(clr) * alpha + 255 / 2) / 255;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 1009,
        "text": "GetAValue(clr)",
        "context_before": "1007: \tif (bits)\n1008: \t{",
        "context_after": "1010: \n1011: \t\t// Premultiple alpha: output = color * alpha / 255. To round to nearest integer use + 255 / 2. (PBGRA WIC format)."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 1011,
        "text": "Premultiple alpha: output = color * alpha / 255. To round to nearest integer use + 255 / 2. (PBGRA WIC format).",
        "context_before": "1009: \t\tBYTE alpha = HIBYTE(HIWORD(clr)); // GetAValue(clr)\n1010: ",
        "context_after": "1012: \t\tbits[0] = (GetBValue(clr) * alpha + 255 / 2) / 255;\n1013: \t\tbits[1] = (GetGValue(clr) * alpha + 255 / 2) / 255;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.h",
        "line": 112,
        "text": "Singleton",
        "context_before": "110: \n111: \tpublic:",
        "context_after": "113: \t\t{\n114: \t\tprivate:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.h",
        "line": 126,
        "text": "::CoInitializeEx(NULL, COINIT_APARTMENTTHREADED|COINIT_DISABLE_OLE1DDE);",
        "context_before": "124: \t\t\tvoid Init()\n125: \t\t\t{",
        "context_after": "127: \t\t\t\t::CoCreateInstance(CLSID_WICImagingFactory, NULL, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&wicFactory));\n128: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 71,
        "text": "ofn.lpstrFile[0] = '\\0';",
        "context_before": "69: \tofn.lStructSize = sizeof(OPENFILENAME);\n70: \tofn.lpstrFile = fileName;",
        "context_after": "72: \tofn.nMaxFile = sizeof(fileName) / sizeof(wchar_t);\n73: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 82,
        "text": "Fill filter",
        "context_before": "80: \t\tofn.Flags |= OFN_ALLOWMULTISELECT;\n81: ",
        "context_after": "83: \tsize_t bufSize = sizeof(wchar_t);\n84: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 99,
        "text": "memcpy(bufCursor, extTypes[i].pszName, sizeName);",
        "context_before": "97: \t\tsize_t sizeSpec = wcslen(extTypes[i].pszSpec) * sizeof(wchar_t) + sizeof(wchar_t);\n98: ",
        "context_after": "100: \t\tmemcpy_s(bufCursor, sizeName, extTypes[i].pszName, sizeName);\n101: \t\tbufCursor += sizeName;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 103,
        "text": "memcpy(bufCursor, extTypes[i].pszSpec, sizeSpec);",
        "context_before": "101: \t\tbufCursor += sizeName;\n102: ",
        "context_after": "104: \t\tmemcpy_s(bufCursor, sizeSpec, extTypes[i].pszSpec, sizeSpec);\n105: \t\tbufCursor += sizeSpec;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 110,
        "text": "End fill filter",
        "context_before": "108: \n109: \tofn.lpstrFilter = (wchar_t*)bufFilter;",
        "context_after": "111: \n112: \t// Show dialog"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 112,
        "text": "Show dialog",
        "context_before": "110: \t// End fill filter\n111: ",
        "context_after": "113: \tBOOL result = FALSE;\n114: \tif (!isSave)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 119,
        "text": "Free filter",
        "context_before": "117: \t\tresult = ::GetSaveFileName(&ofn);\n118: ",
        "context_after": "120: \tdelete[] bufFilter;\n121: \tbufFilter = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 124,
        "text": "Parse result",
        "context_before": "122: \n123: ",
        "context_after": "125: \tif (result)\n126: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 141,
        "text": "Only one file selected",
        "context_before": "139: \t\t\tbufCursor += sizeof(wchar_t);\n140: ",
        "context_after": "142: \t\t\t{\n143: \t\t\t\toutFiles.push_back(path);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 145,
        "text": "Multiple files selected",
        "context_before": "143: \t\t\t\toutFiles.push_back(path);\n144: \t\t\t}",
        "context_after": "146: \t\t\t{\n147: \t\t\t\tif (path.size() > 0 && path[path.size() - 1] != '\\\\')"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 178,
        "text": "HRESULT hr = ::CoCreateInstance(__uuidof(FileOpenDialog), NULL, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&dlg));",
        "context_before": "176: \t\tIFileOpenDialog* dlg = nullptr;\n177: \t\tHRESULT hr = ::CoCreateInstance(CLSID_FileOpenDialog, NULL, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&dlg));",
        "context_after": "179: \n180: \t\tif (FAILED(hr))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 190,
        "text": "dlg->SetTitle(L\"A Single-Selection Dialog\");",
        "context_before": "188: \t\t\tdlg->GetOptions(&fos);\n189: \t\t\tdlg->SetOptions(fos|FOS_PICKFOLDERS);",
        "context_after": "191: \t\t}\n192: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 281,
        "text": "HRESULT hr = ::CoCreateInstance(__uuidof(FileSaveDialog), NULL, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&dlg));",
        "context_before": "279: \t\tIFileSaveDialog* dlg = nullptr;\n280: \t\tHRESULT hr = ::CoCreateInstance(CLSID_FileSaveDialog, NULL, CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&dlg));",
        "context_after": "282: \n283: \t\tif (FAILED(hr))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 336,
        "text": "Get path from ID",
        "context_before": "334: \tLPITEMIDLIST pidl = SHBrowseForFolderW(&bi);\n335: ",
        "context_after": "337: \t{\n338: \t\tdispname[0] = '\\0';"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileDialogEx.cpp",
        "line": 340,
        "text": "::ILFree(pidl);",
        "context_before": "338: \t\tdispname[0] = '\\0';\n339: \t\t::SHGetPathFromIDListW(pidl, dispname);",
        "context_after": "341: \t\toutFile = dispname;\n342: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 127,
        "text": "CSIDL_COMMON_APPDATA",
        "context_before": "125: \twchar_t profile[MAX_PATH];\n126: \tprofile[0] = '\\0';",
        "context_after": "128: \n129: \tstd::wstring profilePath = profile;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 163,
        "text": "return std::chrono::duration_cast<std::chrono::milliseconds>(",
        "context_before": "161: long long GetTimeNowMs()\n162: {",
        "context_after": "164: //\t\tstd::chrono::system_clock::now().time_since_epoch()).count();\n165: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 164,
        "text": "std::chrono::system_clock::now().time_since_epoch()).count();",
        "context_before": "162: {\n163: //\treturn std::chrono::duration_cast<std::chrono::milliseconds>(",
        "context_after": "165: \n166: \tSYSTEMTIME st = {};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 178,
        "text": "Class Find",
        "context_before": "176: }\n177: ",
        "context_after": "179: \n180: Find::Find(const std::wstring& path)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 217,
        "text": "Skip \".\" and \"..\"",
        "context_before": "215: \t\tif (findHandle != INVALID_HANDLE_VALUE)\n216: \t\t{",
        "context_after": "218: \t\t\t\treturn FindNext();\n219: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 234,
        "text": "Skip \".\" and \"..\"",
        "context_before": "232: \twhile (::FindNextFileW(findHandle, fd.get()))\n233: \t{",
        "context_after": "235: \t\t\tcontinue;\n236: \t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 248,
        "text": "if (fd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)",
        "context_before": "246: bool Find::IsDots()\n247: {",
        "context_after": "249: \t{\n250: \t\tif (fd->cFileName[0] == '.' &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 310,
        "text": "SYSTEMTIME st;",
        "context_before": "308: \tif (findHandle != INVALID_HANDLE_VALUE)\n309: \t{",
        "context_after": "311: \t\t//if (::FileTimeToSystemTime(&fd->ftLastWriteTime, &st))\n312: \t\t//\treturn PathEx::DateTimeString(st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 311,
        "text": "if (::FileTimeToSystemTime(&fd->ftLastWriteTime, &st))",
        "context_before": "309: \t{\n310: \t\t//SYSTEMTIME st;",
        "context_after": "312: \t\t//\treturn PathEx::DateTimeString(st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond);\n313: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 312,
        "text": "return PathEx::DateTimeString(st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond);",
        "context_before": "310: \t\t//SYSTEMTIME st;\n311: \t\t//if (::FileTimeToSystemTime(&fd->ftLastWriteTime, &st))",
        "context_after": "313: \n314: \t\tULARGE_INTEGER ull;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 323,
        "text": "Class FindFile",
        "context_before": "321: }\n322: ",
        "context_after": "324: \n325: FindFile::FindFile(const std::wstring& file)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 350,
        "text": "if (fd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)",
        "context_before": "348: bool FindFile::IsDots()\n349: {",
        "context_after": "351: \t{\n352: \t\tif (fd.cFileName[0] == '.' &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 400,
        "text": "SYSTEMTIME st;",
        "context_before": "398: \tif (findHandle != INVALID_HANDLE_VALUE)\n399: \t{",
        "context_after": "401: \t\t//if (::FileTimeToSystemTime(&fd.ftLastWriteTime, &st))\n402: \t\t//\treturn PathEx::DateTimeString(st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 401,
        "text": "if (::FileTimeToSystemTime(&fd.ftLastWriteTime, &st))",
        "context_before": "399: \t{\n400: \t\t//SYSTEMTIME st;",
        "context_after": "402: \t\t//\treturn PathEx::DateTimeString(st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond);\n403: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 402,
        "text": "return PathEx::DateTimeString(st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond);",
        "context_before": "400: \t\t//SYSTEMTIME st;\n401: \t\t//if (::FileTimeToSystemTime(&fd.ftLastWriteTime, &st))",
        "context_after": "403: \n404: \t\tULARGE_INTEGER ull;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.cpp",
        "line": 413,
        "text": "namespace FileSystem",
        "context_before": "411: }\n412: ",
        "context_after": ""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FileSystem.h",
        "line": 87,
        "text": "namespace FileSystem",
        "context_before": "85: };\n86: ",
        "context_after": "88: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 44,
        "text": "libShell32 = ::LoadLibraryW(L\"shell32.dll\");",
        "context_before": "42: \t\tlibUser32 = ::LoadLibraryW(L\"user32.dll\");\n43: \t\tlibComctl32 = ::LoadLibraryW(L\"comctl32.dll\");",
        "context_after": "45: \t\tlibDwmApi = ::LoadLibraryW(L\"dwmapi.dll\");\n46: \t\tlibUxTheme = ::LoadLibraryW(L\"uxtheme.dll\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 203,
        "text": "if (!funcInitializeConditionVariable)",
        "context_before": "201: VOID FutureWin::InitializeConditionVariable(PCONDITION_VARIABLE ConditionVariable)\n202: {",
        "context_after": "204: \t//\treturn;\n205: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 204,
        "text": "return;",
        "context_before": "202: {\n203: \t//if (!funcInitializeConditionVariable)",
        "context_after": "205: \n206: \tfuncInitializeConditionVariable(ConditionVariable);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 211,
        "text": "if (!funcSleepConditionVariableCS)",
        "context_before": "209: BOOL FutureWin::SleepConditionVariableCS(PCONDITION_VARIABLE ConditionVariable, PCRITICAL_SECTION CriticalSection, DWORD dwMilliseconds)\n210: {",
        "context_after": "212: \t//\treturn FALSE;\n213: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 212,
        "text": "return FALSE;",
        "context_before": "210: {\n211: \t//if (!funcSleepConditionVariableCS)",
        "context_after": "213: \n214: \treturn funcSleepConditionVariableCS(ConditionVariable, CriticalSection, dwMilliseconds);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 219,
        "text": "if (!funcSleepConditionVariableSRW)",
        "context_before": "217: BOOL FutureWin::SleepConditionVariableSRW(PCONDITION_VARIABLE ConditionVariable, PSRWLOCK SRWLock, DWORD dwMilliseconds, ULONG Flags)\n218: {",
        "context_after": "220: \t//\treturn FALSE;\n221: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 220,
        "text": "return FALSE;",
        "context_before": "218: {\n219: \t//if (!funcSleepConditionVariableSRW)",
        "context_after": "221: \n222: \treturn funcSleepConditionVariableSRW(ConditionVariable, SRWLock, dwMilliseconds, Flags);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 227,
        "text": "if (!funcWakeAllConditionVariable)",
        "context_before": "225: VOID FutureWin::WakeAllConditionVariable(PCONDITION_VARIABLE ConditionVariable)\n226: {",
        "context_after": "228: \t//\treturn;\n229: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 228,
        "text": "return;",
        "context_before": "226: {\n227: \t//if (!funcWakeAllConditionVariable)",
        "context_after": "229: \n230: \tfuncWakeAllConditionVariable(ConditionVariable);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 235,
        "text": "if (!funcWakeConditionVariable)",
        "context_before": "233: VOID FutureWin::WakeConditionVariable(PCONDITION_VARIABLE ConditionVariable)\n234: {",
        "context_after": "236: \t//\treturn;\n237: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 236,
        "text": "return;",
        "context_before": "234: {\n235: \t//if (!funcWakeConditionVariable)",
        "context_after": "237: \n238: \tfuncWakeConditionVariable(ConditionVariable);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 243,
        "text": "if (!funcInitializeCriticalSectionEx)",
        "context_before": "241: BOOL FutureWin::InitializeCriticalSectionEx(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount, DWORD Flags)\n242: {",
        "context_after": "244: \t//\treturn FALSE;\n245: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 244,
        "text": "return FALSE;",
        "context_before": "242: {\n243: \t//if (!funcInitializeCriticalSectionEx)",
        "context_after": "245: \n246: \treturn funcInitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 251,
        "text": "if (!funcInitializeSRWLock)",
        "context_before": "249: VOID FutureWin::InitializeSRWLock(PSRWLOCK SRWLock)\n250: {",
        "context_after": "252: \t//\treturn;\n253: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 252,
        "text": "return;",
        "context_before": "250: {\n251: \t//if (!funcInitializeSRWLock)",
        "context_after": "253: \n254: \tfuncInitializeSRWLock(SRWLock);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 259,
        "text": "if (!funcAcquireSRWLockExclusive)",
        "context_before": "257: VOID FutureWin::AcquireSRWLockExclusive(PSRWLOCK SRWLock)\n258: {",
        "context_after": "260: \t//\treturn;\n261: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 260,
        "text": "return;",
        "context_before": "258: {\n259: \t//if (!funcAcquireSRWLockExclusive)",
        "context_after": "261: \n262: \tfuncAcquireSRWLockExclusive(SRWLock);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 267,
        "text": "if (!funcReleaseSRWLockExclusive)",
        "context_before": "265: VOID FutureWin::ReleaseSRWLockExclusive(PSRWLOCK SRWLock)\n266: {",
        "context_after": "268: \t//\treturn;\n269: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 268,
        "text": "return;",
        "context_before": "266: {\n267: \t//if (!funcReleaseSRWLockExclusive)",
        "context_after": "269: \n270: \tfuncReleaseSRWLockExclusive(SRWLock);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 275,
        "text": "if (!funcTryAcquireSRWLockExclusive)",
        "context_before": "273: BOOL FutureWin::TryAcquireSRWLockExclusive(PSRWLOCK SRWLock)\n274: {",
        "context_after": "276: \t//\treturn FALSE;\n277: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.cpp",
        "line": 276,
        "text": "return FALSE;",
        "context_before": "274: {\n275: \t//if (!funcTryAcquireSRWLockExclusive)",
        "context_after": "277: \n278: \treturn funcTryAcquireSRWLockExclusive(SRWLock);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 27,
        "text": "Window attributes",
        "context_before": "25: } DWM_BLURBEHIND, *PDWM_BLURBEHIND;\n26: ",
        "context_after": "28: enum DWMWINDOWATTRIBUTE\n29: {"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 30,
        "text": "[get] Is non-client rendering enabled/disabled",
        "context_before": "28: enum DWMWINDOWATTRIBUTE\n29: {",
        "context_after": "31:     DWMWA_NCRENDERING_POLICY,           // [set] Non-client rendering policy\n32:     DWMWA_TRANSITIONS_FORCEDISABLED,    // [set] Potentially enable/forcibly disable transitions"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 31,
        "text": "[set] Non-client rendering policy",
        "context_before": "29: {\n30:     DWMWA_NCRENDERING_ENABLED = 1,      // [get] Is non-client rendering enabled/disabled",
        "context_after": "32:     DWMWA_TRANSITIONS_FORCEDISABLED,    // [set] Potentially enable/forcibly disable transitions\n33:     DWMWA_ALLOW_NCPAINT,                // [set] Allow contents rendered in the non-client area to be visible on the DWM-drawn frame."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 32,
        "text": "[set] Potentially enable/forcibly disable transitions",
        "context_before": "30:     DWMWA_NCRENDERING_ENABLED = 1,      // [get] Is non-client rendering enabled/disabled\n31:     DWMWA_NCRENDERING_POLICY,           // [set] Non-client rendering policy",
        "context_after": "33:     DWMWA_ALLOW_NCPAINT,                // [set] Allow contents rendered in the non-client area to be visible on the DWM-drawn frame.\n34:     DWMWA_CAPTION_BUTTON_BOUNDS,        // [get] Bounds of the caption button area in window-relative space."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 33,
        "text": "[set] Allow contents rendered in the non-client area to be visible on the DWM-drawn frame.",
        "context_before": "31:     DWMWA_NCRENDERING_POLICY,           // [set] Non-client rendering policy\n32:     DWMWA_TRANSITIONS_FORCEDISABLED,    // [set] Potentially enable/forcibly disable transitions",
        "context_after": "34:     DWMWA_CAPTION_BUTTON_BOUNDS,        // [get] Bounds of the caption button area in window-relative space.\n35:     DWMWA_NONCLIENT_RTL_LAYOUT,         // [set] Is non-client content RTL mirrored"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 34,
        "text": "[get] Bounds of the caption button area in window-relative space.",
        "context_before": "32:     DWMWA_TRANSITIONS_FORCEDISABLED,    // [set] Potentially enable/forcibly disable transitions\n33:     DWMWA_ALLOW_NCPAINT,                // [set] Allow contents rendered in the non-client area to be visible on the DWM-drawn frame.",
        "context_after": "35:     DWMWA_NONCLIENT_RTL_LAYOUT,         // [set] Is non-client content RTL mirrored\n36:     DWMWA_FORCE_ICONIC_REPRESENTATION,  // [set] Force this window to display iconic thumbnails."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 35,
        "text": "[set] Is non-client content RTL mirrored",
        "context_before": "33:     DWMWA_ALLOW_NCPAINT,                // [set] Allow contents rendered in the non-client area to be visible on the DWM-drawn frame.\n34:     DWMWA_CAPTION_BUTTON_BOUNDS,        // [get] Bounds of the caption button area in window-relative space.",
        "context_after": "36:     DWMWA_FORCE_ICONIC_REPRESENTATION,  // [set] Force this window to display iconic thumbnails.\n37:     DWMWA_FLIP3D_POLICY,                // [set] Designates how Flip3D will treat the window."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 36,
        "text": "[set] Force this window to display iconic thumbnails.",
        "context_before": "34:     DWMWA_CAPTION_BUTTON_BOUNDS,        // [get] Bounds of the caption button area in window-relative space.\n35:     DWMWA_NONCLIENT_RTL_LAYOUT,         // [set] Is non-client content RTL mirrored",
        "context_after": "37:     DWMWA_FLIP3D_POLICY,                // [set] Designates how Flip3D will treat the window.\n38:     DWMWA_EXTENDED_FRAME_BOUNDS,        // [get] Gets the extended frame bounds rectangle in screen space"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 37,
        "text": "[set] Designates how Flip3D will treat the window.",
        "context_before": "35:     DWMWA_NONCLIENT_RTL_LAYOUT,         // [set] Is non-client content RTL mirrored\n36:     DWMWA_FORCE_ICONIC_REPRESENTATION,  // [set] Force this window to display iconic thumbnails.",
        "context_after": "38:     DWMWA_EXTENDED_FRAME_BOUNDS,        // [get] Gets the extended frame bounds rectangle in screen space\n39:     DWMWA_HAS_ICONIC_BITMAP,            // [set] Indicates an available bitmap when there is no better thumbnail representation."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 38,
        "text": "[get] Gets the extended frame bounds rectangle in screen space",
        "context_before": "36:     DWMWA_FORCE_ICONIC_REPRESENTATION,  // [set] Force this window to display iconic thumbnails.\n37:     DWMWA_FLIP3D_POLICY,                // [set] Designates how Flip3D will treat the window.",
        "context_after": "39:     DWMWA_HAS_ICONIC_BITMAP,            // [set] Indicates an available bitmap when there is no better thumbnail representation.\n40:     DWMWA_DISALLOW_PEEK,                // [set] Don't invoke Peek on the window."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 39,
        "text": "[set] Indicates an available bitmap when there is no better thumbnail representation.",
        "context_before": "37:     DWMWA_FLIP3D_POLICY,                // [set] Designates how Flip3D will treat the window.\n38:     DWMWA_EXTENDED_FRAME_BOUNDS,        // [get] Gets the extended frame bounds rectangle in screen space",
        "context_after": "40:     DWMWA_DISALLOW_PEEK,                // [set] Don't invoke Peek on the window.\n41:     DWMWA_EXCLUDED_FROM_PEEK,           // [set] LivePreview exclusion information"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 40,
        "text": "[set] Don't invoke Peek on the window.",
        "context_before": "38:     DWMWA_EXTENDED_FRAME_BOUNDS,        // [get] Gets the extended frame bounds rectangle in screen space\n39:     DWMWA_HAS_ICONIC_BITMAP,            // [set] Indicates an available bitmap when there is no better thumbnail representation.",
        "context_after": "41:     DWMWA_EXCLUDED_FROM_PEEK,           // [set] LivePreview exclusion information\n42:     DWMWA_LAST"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 41,
        "text": "[set] LivePreview exclusion information",
        "context_before": "39:     DWMWA_HAS_ICONIC_BITMAP,            // [set] Indicates an available bitmap when there is no better thumbnail representation.\n40:     DWMWA_DISALLOW_PEEK,                // [set] Don't invoke Peek on the window.",
        "context_after": "42:     DWMWA_LAST\n43: };"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 45,
        "text": "Non-client rendering policy attribute values",
        "context_before": "43: };\n44: ",
        "context_after": "46: enum DWMNCRENDERINGPOLICY\n47: {"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 48,
        "text": "Enable/disable non-client rendering based on window style",
        "context_before": "46: enum DWMNCRENDERINGPOLICY\n47: {",
        "context_after": "49: \tDWMNCRP_DISABLED,       // Disabled non-client rendering; window style is ignored\n50: \tDWMNCRP_ENABLED,        // Enabled non-client rendering; window style is ignored"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 49,
        "text": "Disabled non-client rendering; window style is ignored",
        "context_before": "47: {\n48: \tDWMNCRP_USEWINDOWSTYLE, // Enable/disable non-client rendering based on window style",
        "context_after": "50: \tDWMNCRP_ENABLED,        // Enabled non-client rendering; window style is ignored\n51: \tDWMNCRP_LAST"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 50,
        "text": "Enabled non-client rendering; window style is ignored",
        "context_before": "48: \tDWMNCRP_USEWINDOWSTYLE, // Enable/disable non-client rendering based on window style\n49: \tDWMNCRP_DISABLED,       // Disabled non-client rendering; window style is ignored",
        "context_after": "51: \tDWMNCRP_LAST\n52: };"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 54,
        "text": "Display a window frame around the provided bitmap",
        "context_before": "52: };\n53: ",
        "context_after": "55: \n56: #define LOCALE_NAME_USER_DEFAULT            NULL"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 92,
        "text": "kernel32.dll",
        "context_before": "90: \t\tvoid LoadUxThemeFunctions();\n91: ",
        "context_after": "93: \t\tint CompareStringEx(LPCWSTR lpLocaleName, DWORD dwCmpFlags, LPCWSTR lpString1, int cchCount1, LPCWSTR lpString2, int cchCount2, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM lParam);\n94: \t\tint LCMapStringEx(LPCWSTR lpLocaleName, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM sortHandle);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 97,
        "text": "Windows 7",
        "context_before": "95: \t\tint FindNLSStringEx(LPCWSTR lpLocaleName, DWORD dwFindNLSStringFlags, LPCWSTR lpStringSource, int cchSource, LPCWSTR lpStringValue, int cchValue, LPINT pcchFound, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM sortHandle);\n96: \t\tint CompareStringOrdinal(LPCWSTR lpString1, int cchCount1, LPCWSTR lpString2, int cchCount2, BOOL bIgnoreCase);",
        "context_after": "98: \n99: \t\tVOID InitializeConditionVariable(PCONDITION_VARIABLE ConditionVariable);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 109,
        "text": "Windows 7",
        "context_before": "107: \t\tVOID AcquireSRWLockExclusive(PSRWLOCK SRWLock);\n108: \t\tVOID ReleaseSRWLockExclusive(PSRWLOCK SRWLock);",
        "context_after": "110: \n111: \t\t// user32.dll"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 111,
        "text": "user32.dll",
        "context_before": "109: \t\tBOOL TryAcquireSRWLockExclusive(PSRWLOCK SRWLock); // Windows 7\n110: ",
        "context_after": "112: \t\tBOOL UpdateLayeredWindowIndirect(HWND hwnd, const UPDATELAYEREDWINDOWINFO* pULWInfo);\n113: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 114,
        "text": "comctl32.dll",
        "context_before": "112: \t\tBOOL UpdateLayeredWindowIndirect(HWND hwnd, const UPDATELAYEREDWINDOWINFO* pULWInfo);\n113: ",
        "context_after": "115: \t\tHRESULT TaskDialog(HWND hWndParent, HINSTANCE hInstance, PCWSTR pszWindowTitle, PCWSTR pszMainInstruction, PCWSTR pszContent, TASKDIALOG_COMMON_BUTTON_FLAGS dwCommonButtons, PCWSTR pszIcon, int* pnButton);\n116: \t\tHRESULT TaskDialogIndirect(const TASKDIALOGCONFIG* pTaskConfig, int* pnButton, int* pnRadioButton, BOOL* pfVerificationFlagChecked);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 119,
        "text": "shell32.dll",
        "context_before": "117: \t\tHRESULT LoadIconMetric(HINSTANCE hinst, PCWSTR pszName, int lims, HICON *phico);\n118: ",
        "context_after": "120: \t\tHRESULT SetCurrentProcessExplicitAppUserModelID(__in  PCWSTR AppID);\n121: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 122,
        "text": "dwmapi.dll",
        "context_before": "120: \t\tHRESULT SetCurrentProcessExplicitAppUserModelID(__in  PCWSTR AppID);\n121: ",
        "context_after": "123: \t\tHRESULT DwmIsCompositionEnabled(BOOL* pfEnabled);\n124: \t\tHRESULT DwmEnableComposition(UINT uCompositionAction);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 133,
        "text": "uxtheme.dll",
        "context_before": "131: \t\tHRESULT DwmInvalidateIconicBitmaps(HWND hwnd);\n132: ",
        "context_after": "134: \t\tHRESULT DrawThemeTextEx(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCWSTR pszText, int iCharCount, DWORD dwFlags, LPRECT pRect, const DTTOPTS* pOptions);\n135: \t\tHRESULT BufferedPaintInit(VOID);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 142,
        "text": "kernel32.dll",
        "context_before": "140: \n141: private:",
        "context_after": "143: \t\ttypedef int (__stdcall* COMPARE_STRING_EX)(LPCWSTR lpLocaleName, DWORD dwCmpFlags, LPCWSTR lpString1, int cchCount1, LPCWSTR lpString2, int cchCount2, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM lParam);\n144: \t\ttypedef int (__stdcall* LC_MAP_STRING_EX)(LPCWSTR lpLocaleName, DWORD dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest, LPNLSVERSIONINFO lpVersionInformation, LPVOID lpReserved, LPARAM sortHandle);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 161,
        "text": "user32.dll",
        "context_before": "159: \t\ttypedef BOOL (__stdcall* TRY_ACQUIRE_SRW_LOCK_EXCLUSIVE)(PSRWLOCK SRWLock);\n160: ",
        "context_after": "162: \t\ttypedef BOOL (__stdcall* UPDATE_LAYERED_WINDOW_INDIRECT)(HWND hwnd, const UPDATELAYEREDWINDOWINFO* pULWInfo);\n163: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 164,
        "text": "comctl32.dll",
        "context_before": "162: \t\ttypedef BOOL (__stdcall* UPDATE_LAYERED_WINDOW_INDIRECT)(HWND hwnd, const UPDATELAYEREDWINDOWINFO* pULWInfo);\n163: ",
        "context_after": "165: \t\ttypedef HRESULT (__stdcall* TASK_DIALOG)(HWND hWndParent, HINSTANCE hInstance, PCWSTR pszWindowTitle, PCWSTR pszMainInstruction, PCWSTR pszContent, TASKDIALOG_COMMON_BUTTON_FLAGS dwCommonButtons, PCWSTR pszIcon, int* pnButton);\n166: \t\ttypedef HRESULT (__stdcall* TASK_DIALOG_INDIRECT)(const TASKDIALOGCONFIG* pTaskConfig, int* pnButton, int* pnRadioButton, BOOL* pfVerificationFlagChecked);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 169,
        "text": "shell32.dll",
        "context_before": "167: \t\ttypedef HRESULT (__stdcall* LOAD_ICON_METRIC)(HINSTANCE hinst, PCWSTR pszName, int lims, HICON *phico);\n168: ",
        "context_after": "170: \t\ttypedef HRESULT (__stdcall* SET_CURRENT_PROCCES_APPID) (__in  PCWSTR AppID);\n171: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 172,
        "text": "dwmapi.dll",
        "context_before": "170: \t\ttypedef HRESULT (__stdcall* SET_CURRENT_PROCCES_APPID) (__in  PCWSTR AppID);\n171: ",
        "context_after": "173: \t\ttypedef HRESULT (__stdcall* DWM_IS_COMPOSITION_ENABLED)(BOOL* pfEnabled);\n174: \t\ttypedef HRESULT (__stdcall* DWM_ENABLE_COMPOSITION)(UINT uCompositionAction);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 183,
        "text": "uxtheme.dll",
        "context_before": "181: \t\ttypedef HRESULT (__stdcall* DWM_INVALIDATE_ICONIC_BITMAPS)(HWND hwnd);\n182: ",
        "context_after": "184: \t\ttypedef HRESULT (__stdcall* DRAW_THEME_TEXT_EX)(HTHEME hTheme, HDC hdc, int iPartId, int iStateId, LPCWSTR pszText, int iCharCount, DWORD dwFlags, LPRECT pRect, const DTTOPTS* pOptions);\n185: \t\ttypedef HRESULT (__stdcall* BUFFERED_PAINT_INIT)(VOID);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 191,
        "text": "//////////////",
        "context_before": "189: \t\ttypedef HRESULT (__stdcall* BUFFERED_PAINT_SET_ALPHA)(HPAINTBUFFER hBufferedPaint, const RECT* prc, BYTE alpha);\n190: ",
        "context_after": "192: \n193: \t\t// kernel32.dll"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 193,
        "text": "kernel32.dll",
        "context_before": "191: \t\t////////////////\n192: ",
        "context_after": "194: \t\tCOMPARE_STRING_EX funcCompareStringEx = nullptr;\n195: \t\tLC_MAP_STRING_EX funcLCMapStringEx = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 212,
        "text": "user32.dll",
        "context_before": "210: \t\tTRY_ACQUIRE_SRW_LOCK_EXCLUSIVE funcTryAcquireSRWLockExclusive = nullptr;\n211: ",
        "context_after": "213: \t\tUPDATE_LAYERED_WINDOW_INDIRECT funcUpdateLayeredWindowIndirect = nullptr;\n214: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 215,
        "text": "comctl32.dll",
        "context_before": "213: \t\tUPDATE_LAYERED_WINDOW_INDIRECT funcUpdateLayeredWindowIndirect = nullptr;\n214: ",
        "context_after": "216: \t\tTASK_DIALOG funcTaskDialog = nullptr;\n217: \t\tTASK_DIALOG_INDIRECT funcTaskDialogIndirect = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 220,
        "text": "shell32.dll",
        "context_before": "218: \t\tLOAD_ICON_METRIC funcLoadIconMetric;\n219: ",
        "context_after": "221: \t\tSET_CURRENT_PROCCES_APPID funcSetCurrentProccesAppID = nullptr;\n222: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 223,
        "text": "dwmapi.dll",
        "context_before": "221: \t\tSET_CURRENT_PROCCES_APPID funcSetCurrentProccesAppID = nullptr;\n222: ",
        "context_after": "224: \t\tDWM_IS_COMPOSITION_ENABLED funcDwmIsCompositionEnabled = nullptr;\n225: \t\tDWM_ENABLE_COMPOSITION funcDwmEnableComposition = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\FutureWin.h",
        "line": 234,
        "text": "uxtheme.dll",
        "context_before": "232: \t\tDWM_INVALIDATE_ICONIC_BITMAPS funcDwmInvalidateIconicBitmaps = nullptr;\n233: ",
        "context_after": "235: \t\tDRAW_THEME_TEXT_EX funcDrawThemeTextEx = nullptr;\n236: \t\tBUFFERED_PAINT_INIT funcBufferedPaintInit = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HotKeys.cpp",
        "line": 41,
        "text": "Old version",
        "context_before": "39: \t\tXmlNode xmlMain = xmlFile.RootNode().FirstChild(\"HotKeys\");\n40: ",
        "context_after": "42: \t\tif (!xmlMain)\n43: \t\t\txmlMain = xmlFile.RootNode().FirstChild(\"HotKey\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HotKeys.cpp",
        "line": 133,
        "text": "AddKey(KeyType::Play, '1', true, true, false);",
        "context_before": "131: void HotKeys::AddDefault()\n132: {",
        "context_after": "134: \tAddKey(KeyType::Pause, VK_MEDIA_PLAY_PAUSE, false, false, false, false);\n135: \tAddKey(KeyType::Stop, VK_MEDIA_STOP, false, false, false, false);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HotKeys.cpp",
        "line": 138,
        "text": "AddKey(KeyType::Mute, VK_VOLUME_MUTE, false, false, false);",
        "context_before": "136: \tAddKey(KeyType::Next, VK_MEDIA_NEXT_TRACK, false, false, false, false);\n137: \tAddKey(KeyType::Prev, VK_MEDIA_PREV_TRACK, false, false, false, false);",
        "context_after": "139: //\tAddKey(KeyType::VolumeUp, VK_VOLUME_UP, false, false, false);\n140: //\tAddKey(KeyType::VolumeDown, VK_VOLUME_DOWN, false, false, false);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HotKeys.cpp",
        "line": 139,
        "text": "AddKey(KeyType::VolumeUp, VK_VOLUME_UP, false, false, false);",
        "context_before": "137: \tAddKey(KeyType::Prev, VK_MEDIA_PREV_TRACK, false, false, false, false);\n138: //\tAddKey(KeyType::Mute, VK_VOLUME_MUTE, false, false, false);",
        "context_after": "140: //\tAddKey(KeyType::VolumeDown, VK_VOLUME_DOWN, false, false, false);\n141: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HotKeys.cpp",
        "line": 140,
        "text": "AddKey(KeyType::VolumeDown, VK_VOLUME_DOWN, false, false, false);",
        "context_before": "138: //\tAddKey(KeyType::Mute, VK_VOLUME_MUTE, false, false, false);\n139: //\tAddKey(KeyType::VolumeUp, VK_VOLUME_UP, false, false, false);",
        "context_after": "141: }\n142: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HttpClient.cpp",
        "line": 78,
        "text": "const std::wstring userAgent = L\"Mozilla/5.0 (Windows NT 6.1; rv:28.0) Gecko/20100101 Firefox/28.0\";",
        "context_before": "76: \t\treturn false;\n77: ",
        "context_after": "79: \tconst std::wstring userAgent = L\"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko\";\n80: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HttpClient.cpp",
        "line": 98,
        "text": "By default only SSL3 and TLS1 are enabled in Windows 7 so enable TLS1.1 and TLS1.2 too",
        "context_before": "96: \t\t}\n97: ",
        "context_after": "99: \t\tif (https)\n100: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HttpClient.cpp",
        "line": 122,
        "text": "if (https)",
        "context_before": "120: \n121: \t\t// Test",
        "context_after": "123: \t\t//{\n124: \t\t//\tDWORD flags = SECURITY_FLAG_IGNORE_CERT_CN_INVALID|SECURITY_FLAG_IGNORE_CERT_DATE_INVALID|SECURITY_FLAG_IGNORE_UNKNOWN_CA|SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HttpClient.cpp",
        "line": 124,
        "text": "DWORD flags = SECURITY_FLAG_IGNORE_CERT_CN_INVALID|SECURITY_FLAG_IGNORE_CERT_DATE_INVALID|SECURITY_FLAG_IGNORE_UNKNOWN_CA|SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE;",
        "context_before": "122: \t\t//if (https)\n123: \t\t//{",
        "context_after": "125: \t\t//\tWinHttpSetOption(requestHandle, WINHTTP_OPTION_SECURITY_FLAGS, &flags, sizeof(flags));\n126: \t\t//\t////void CALLBACK callback(HINTERNET hInternet, DWORD_PTR dwContext, DWORD dwInternetStatus, LPVOID lpvStatusInformation, DWORD dwStatusInformationLength)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HttpClient.cpp",
        "line": 125,
        "text": "WinHttpSetOption(requestHandle, WINHTTP_OPTION_SECURITY_FLAGS, &flags, sizeof(flags));",
        "context_before": "123: \t\t//{\n124: \t\t//\tDWORD flags = SECURITY_FLAG_IGNORE_CERT_CN_INVALID|SECURITY_FLAG_IGNORE_CERT_DATE_INVALID|SECURITY_FLAG_IGNORE_UNKNOWN_CA|SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE;",
        "context_after": "126: \t\t//\t////void CALLBACK callback(HINTERNET hInternet, DWORD_PTR dwContext, DWORD dwInternetStatus, LPVOID lpvStatusInformation, DWORD dwStatusInformationLength)\n127: \t\t//\t//WinHttpSetStatusCallback(requestHandle, callback, WINHTTP_CALLBACK_FLAG_SECURE_FAILURE, NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HttpClient.cpp",
        "line": 126,
        "text": "////void CALLBACK callback(HINTERNET hInternet, DWORD_PTR dwContext, DWORD dwInternetStatus, LPVOID lpvStatusInformation, DWORD dwStatusInformationLength)",
        "context_before": "124: \t\t//\tDWORD flags = SECURITY_FLAG_IGNORE_CERT_CN_INVALID|SECURITY_FLAG_IGNORE_CERT_DATE_INVALID|SECURITY_FLAG_IGNORE_UNKNOWN_CA|SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE;\n125: \t\t//\tWinHttpSetOption(requestHandle, WINHTTP_OPTION_SECURITY_FLAGS, &flags, sizeof(flags));",
        "context_after": "127: \t\t//\t//WinHttpSetStatusCallback(requestHandle, callback, WINHTTP_CALLBACK_FLAG_SECURE_FAILURE, NULL);\n128: \t\t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HttpClient.cpp",
        "line": 127,
        "text": "//WinHttpSetStatusCallback(requestHandle, callback, WINHTTP_CALLBACK_FLAG_SECURE_FAILURE, NULL);",
        "context_before": "125: \t\t//\tWinHttpSetOption(requestHandle, WINHTTP_OPTION_SECURITY_FLAGS, &flags, sizeof(flags));\n126: \t\t//\t////void CALLBACK callback(HINTERNET hInternet, DWORD_PTR dwContext, DWORD dwInternetStatus, LPVOID lpvStatusInformation, DWORD dwStatusInformationLength)",
        "context_after": "128: \t\t//}\n129: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HttpClient.cpp",
        "line": 164,
        "text": "buffer[0] = '\\0';",
        "context_before": "162: \n163: \t\t\t\t\t\tchar *buffer = new char[size + 1];",
        "context_after": "165: \t\t\t\t\t\tZeroMemory(buffer, size + 1);\n166: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HttpClient.cpp",
        "line": 174,
        "text": "This condition should never be reached since WinHttpQueryDataAvailable",
        "context_before": "172: \t\t\t\t\t\t}\n173: ",
        "context_after": "175: \t\t\t\t\t\t// reported that there are bits to read.\n176: \t\t\t\t\t\tif (read == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HttpClient.cpp",
        "line": 175,
        "text": "reported that there are bits to read.",
        "context_before": "173: \n174: \t\t\t\t\t\t// This condition should never be reached since WinHttpQueryDataAvailable",
        "context_after": "176: \t\t\t\t\t\tif (read == 0)\n177: \t\t\t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\HttpClient.h",
        "line": 28,
        "text": "Global set proxy for this class",
        "context_before": "26: \tvirtual ~HttpClient(void);\n27: ",
        "context_after": "29: \tstatic void SetProxy(int proxy, const std::wstring& host, const std::wstring& port, const std::wstring& login, const std::wstring& pass);\n30: \tstatic bool GetHttpPage(const std::wstring& url, std::string& outPage);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Language.cpp",
        "line": 46,
        "text": "Check language version",
        "context_before": "44: \t\tXmlNode xmlMain = xmlFile.RootNode().FirstChild(\"Language\");\n45: ",
        "context_after": "47: \t\tstd::string version = xmlMain.Attribute8(\"Version\");\n48: \t\tif (version != \"3.3.0\")"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Language.cpp",
        "line": 188,
        "text": "Return empty string if index is out of bounds or language not loaded",
        "context_before": "186: \tif (typeIndex >= (std::size_t)Lang::EnumCount || index < 0 || (std::size_t)index >= lines[typeIndex].size())\n187: \t{",
        "context_after": "189: \t\tstatic std::wstring empty = L\"\";\n190: \t\treturn empty.c_str();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Language.cpp",
        "line": 200,
        "text": "Return empty string if index is out of bounds or language not loaded",
        "context_before": "198: \tif (typeIndex >= (std::size_t)Lang::EnumCount || index < 0 || (std::size_t)index >= lines[typeIndex].size())\n199: \t{",
        "context_after": "201: \t\tstatic std::wstring empty = L\"\";\n202: \t\treturn empty;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Language.cpp",
        "line": 222,
        "text": "http://msdn.microsoft.com/en-us/library/windows/desktop/dd318693(v=vs.85).aspx",
        "context_before": "220: \tWORD id = PRIMARYLANGID(GetUserDefaultUILanguage());\n221: ",
        "context_after": "223: \n224: \tswitch (id)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Language.cpp",
        "line": 228,
        "text": "LANG_CHINESE_SIMPLIFIED",
        "context_before": "226: \tcase LANG_BELARUSIAN:\n227: \t\treturn L\"Belarusian\";",
        "context_after": "229: \t\treturn L\"Chinese (Simple)\";\n230: \tcase LANG_CHINESE_TRADITIONAL:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Language.cpp",
        "line": 232,
        "text": "case LANG_CROATIAN: // LANG_BOSNIAN LANG_SERBIAN",
        "context_before": "230: \tcase LANG_CHINESE_TRADITIONAL:\n231: \t\treturn L\"Chinese (Traditional)\";",
        "context_after": "233: //\t\treturn L\"Serbian\";\n234: \tcase LANG_CZECH:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Language.cpp",
        "line": 233,
        "text": "return L\"Serbian\";",
        "context_before": "231: \t\treturn L\"Chinese (Traditional)\";\n232: //\tcase LANG_CROATIAN: // LANG_BOSNIAN LANG_SERBIAN",
        "context_after": "234: \tcase LANG_CZECH:\n235: \t\treturn L\"Czech\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Language.cpp",
        "line": 258,
        "text": "case LANG_LITHUANIAN:",
        "context_before": "256: \tcase LANG_LATVIAN:\n257: \t\treturn L\"Latvian\";",
        "context_after": "259: //\t\treturn L\"Lithuanian\";\n260: //\tcase LANG_NORWEGIAN:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Language.cpp",
        "line": 259,
        "text": "return L\"Lithuanian\";",
        "context_before": "257: \t\treturn L\"Latvian\";\n258: //\tcase LANG_LITHUANIAN:",
        "context_after": "260: //\tcase LANG_NORWEGIAN:\n261: //\t\treturn L\"Norwegian\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Language.cpp",
        "line": 260,
        "text": "case LANG_NORWEGIAN:",
        "context_before": "258: //\tcase LANG_LITHUANIAN:\n259: //\t\treturn L\"Lithuanian\";",
        "context_after": "261: //\t\treturn L\"Norwegian\";\n262: \tcase LANG_POLISH:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Language.cpp",
        "line": 261,
        "text": "return L\"Norwegian\";",
        "context_before": "259: //\t\treturn L\"Lithuanian\";\n260: //\tcase LANG_NORWEGIAN:",
        "context_after": "262: \tcase LANG_POLISH:\n263: \t\treturn L\"Polish\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Language.h",
        "line": 61,
        "text": "Count of all items",
        "context_before": "59: \tLyricsMenu       = 34,\n60: \tNewVersionDialog = 35,",
        "context_after": "62: };\n63: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LastFM.cpp",
        "line": 32,
        "text": "LastFM member functions",
        "context_before": "30: \n31: ",
        "context_after": "33: \n34: bool LastFM::Init()"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LastFM.cpp",
        "line": 39,
        "text": "Check that Last.fm is installed",
        "context_before": "37: \tbool isKeyFound = false;\n38: ",
        "context_after": "40: \tif (::RegOpenKeyEx(HKEY_CURRENT_USER, L\"Software\\\\Last.fm\\\\Client\",\n41: \t\t0, KEY_READ, &keyPath) == ERROR_SUCCESS)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LastFM.cpp",
        "line": 51,
        "text": "It is installed",
        "context_before": "49: \t}\n50: ",
        "context_after": "52:     {\n53: \t\tDWORD maxPath = MAX_PATH;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LastFM.cpp",
        "line": 56,
        "text": "Get Last.fm exe file",
        "context_before": "54: \t\twchar_t fileReg[MAX_PATH];\n55: ",
        "context_after": "57:         int result = RegQueryValueEx(keyPath, L\"Path\", NULL, NULL, (LPBYTE)fileReg, &maxPath);\n58: \t\tRegCloseKey(keyPath);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LastFM.cpp",
        "line": 70,
        "text": "Start Last.fm",
        "context_before": "68: \t\t\telse\n69: \t\t\t{",
        "context_after": "71: \t\t\t\tHINSTANCE h = ::ShellExecute(NULL, L\"open\", file.c_str(), L\"--tray\", path.c_str(), SW_SHOWNORMAL);\n72: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LastFM.cpp",
        "line": 73,
        "text": "Startup error",
        "context_before": "71: \t\t\t\tHINSTANCE h = ::ShellExecute(NULL, L\"open\", file.c_str(), L\"--tray\", path.c_str(), SW_SHOWNORMAL);\n72: ",
        "context_after": "74: \t\t\t\t\treturn false;\n75: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LastFM.cpp",
        "line": 89,
        "text": "== NO_ERROR",
        "context_before": "87: \tWSADATA wsaData;\n88: \tWORD versionRequested = MAKEWORD(2, 2);",
        "context_after": "90: \n91: \tif (!threadSocket)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LastFM.cpp",
        "line": 168,
        "text": "Replace & to &&",
        "context_before": "166: \t\treturn;\n167: ",
        "context_after": "169: \tStringEx::ReplaceString(artist, L\"&\", L\"&&\");\n170: \tStringEx::ReplaceString(title, L\"&\", L\"&&\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LastFM.cpp",
        "line": 175,
        "text": "Compose the command",
        "context_before": "173: \tstd::wstring stime = std::to_wstring(time);\n174: ",
        "context_after": "176: \tstd::string command = \"START c=\";\n177: \tcommand += clientID;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LastFM.h",
        "line": 39,
        "text": "\"localhost\";",
        "context_before": "37: \n38: private:",
        "context_after": "40: \tint clientPort = 33367;\n41: \tstd::string clientID = \"wnl\"; // ClientID (I got it from Last.FM support special for Winyl)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LastFM.h",
        "line": 41,
        "text": "ClientID (I got it from Last.FM support special for Winyl)",
        "context_before": "39: \tstd::string clientHost = \"127.0.0.1\"; // \"localhost\";\n40: \tint clientPort = 33367;",
        "context_after": "42: \n43: \tvoid SendToLastFM(const std::string& command);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 23,
        "text": "#include <regex>",
        "context_before": "21: #include \"WinylWnd.h\"\n22: #include \"FileSystem.h\"",
        "context_after": "24: \n25: // Enable detailed WASAPI logging in debug builds"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 25,
        "text": "Enable detailed WASAPI logging in debug builds",
        "context_before": "23: //#include <regex>\n24: ",
        "context_after": "26: #ifdef _DEBUG\n27: #define WINYL_WASAPI_DEBUG"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 35,
        "text": "BASS uses api similar to WinAPI and sometimes it's a bit hard to notice",
        "context_before": "33: // every change should be as careful as possible or it can just break things.\n34: ",
        "context_after": "36: // if something is wrong, so just use this verify define everywhere and we are fine.\n37: #ifdef _DEBUG"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 36,
        "text": "if something is wrong, so just use this verify define everywhere and we are fine.",
        "context_before": "34: \n35: // BASS uses api similar to WinAPI and sometimes it's a bit hard to notice",
        "context_after": "37: #ifdef _DEBUG\n38: #define verify(f)    assert(f)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 43,
        "text": "Buffer size for DirectSound in ms",
        "context_before": "41: #endif\n42: ",
        "context_after": "44: double LibAudio::Buffer::WasapiAsio = 1.0; // Reading buffer size for WASAPI/ASIO in sec\n45: int LibAudio::Buffer::BassRead      = 1024 * 256; // BASS reading buffer in bytes, default is 65536"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 44,
        "text": "Reading buffer size for WASAPI/ASIO in sec",
        "context_before": "42: \n43: int LibAudio::Buffer::DirectSound   = 1000; // Buffer size for DirectSound in ms",
        "context_after": "45: int LibAudio::Buffer::BassRead      = 1024 * 256; // BASS reading buffer in bytes, default is 65536\n46: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 45,
        "text": "BASS reading buffer in bytes, default is 65536",
        "context_before": "43: int LibAudio::Buffer::DirectSound   = 1000; // Buffer size for DirectSound in ms\n44: double LibAudio::Buffer::WasapiAsio = 1.0; // Reading buffer size for WASAPI/ASIO in sec",
        "context_after": "46: \n47: int LibAudio::FadeTime::Pause = 500;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 52,
        "text": "Original Winyl 10-band equalizer frequencies (Hz) - ISO standard octave-based spacing",
        "context_before": "50: int LibAudio::FadeTime::Mute  = 100;\n51: ",
        "context_after": "53: // Technical approach: 31.5, 63, 125, 250, 500, 1k, 2k, 4k, 8k, 16k Hz\n54: const float LibAudio::eqFrequencies[10] = {"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 53,
        "text": "Technical approach: 31.5, 63, 125, 250, 500, 1k, 2k, 4k, 8k, 16k Hz",
        "context_before": "51: \n52: // Original Winyl 10-band equalizer frequencies (Hz) - ISO standard octave-based spacing",
        "context_after": "54: const float LibAudio::eqFrequencies[10] = {\n55: \t31.5f,   // Band 0: 31.5 Hz (Original octave-based spacing)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 55,
        "text": "Band 0: 31.5 Hz (Original octave-based spacing)",
        "context_before": "53: // Technical approach: 31.5, 63, 125, 250, 500, 1k, 2k, 4k, 8k, 16k Hz\n54: const float LibAudio::eqFrequencies[10] = {",
        "context_after": "56: \t63.0f,   // Band 1: 63 Hz\n57: \t125.0f,  // Band 2: 125 Hz"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 56,
        "text": "Band 1: 63 Hz",
        "context_before": "54: const float LibAudio::eqFrequencies[10] = {\n55: \t31.5f,   // Band 0: 31.5 Hz (Original octave-based spacing)",
        "context_after": "57: \t125.0f,  // Band 2: 125 Hz\n58: \t250.0f,  // Band 3: 250 Hz"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 57,
        "text": "Band 2: 125 Hz",
        "context_before": "55: \t31.5f,   // Band 0: 31.5 Hz (Original octave-based spacing)\n56: \t63.0f,   // Band 1: 63 Hz",
        "context_after": "58: \t250.0f,  // Band 3: 250 Hz\n59: \t500.0f,  // Band 4: 500 Hz"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 58,
        "text": "Band 3: 250 Hz",
        "context_before": "56: \t63.0f,   // Band 1: 63 Hz\n57: \t125.0f,  // Band 2: 125 Hz",
        "context_after": "59: \t500.0f,  // Band 4: 500 Hz\n60: \t1000.0f, // Band 5: 1 kHz"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 59,
        "text": "Band 4: 500 Hz",
        "context_before": "57: \t125.0f,  // Band 2: 125 Hz\n58: \t250.0f,  // Band 3: 250 Hz",
        "context_after": "60: \t1000.0f, // Band 5: 1 kHz\n61: \t2000.0f, // Band 6: 2 kHz"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 60,
        "text": "Band 5: 1 kHz",
        "context_before": "58: \t250.0f,  // Band 3: 250 Hz\n59: \t500.0f,  // Band 4: 500 Hz",
        "context_after": "61: \t2000.0f, // Band 6: 2 kHz\n62: \t4000.0f, // Band 7: 4 kHz"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 61,
        "text": "Band 6: 2 kHz",
        "context_before": "59: \t500.0f,  // Band 4: 500 Hz\n60: \t1000.0f, // Band 5: 1 kHz",
        "context_after": "62: \t4000.0f, // Band 7: 4 kHz\n63: \t8000.0f, // Band 8: 8 kHz"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 62,
        "text": "Band 7: 4 kHz",
        "context_before": "60: \t1000.0f, // Band 5: 1 kHz\n61: \t2000.0f, // Band 6: 2 kHz",
        "context_after": "63: \t8000.0f, // Band 8: 8 kHz\n64: \t16000.0f // Band 9: 16 kHz"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 63,
        "text": "Band 8: 8 kHz",
        "context_before": "61: \t2000.0f, // Band 6: 2 kHz\n62: \t4000.0f, // Band 7: 4 kHz",
        "context_after": "64: \t16000.0f // Band 9: 16 kHz\n65: };"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 64,
        "text": "Band 9: 16 kHz",
        "context_before": "62: \t4000.0f, // Band 7: 4 kHz\n63: \t8000.0f, // Band 8: 8 kHz",
        "context_after": "65: };\n66: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 72,
        "text": "Initialize equalizer effect handles to NULL",
        "context_before": "70: \tBASS_ASIO_SetUnicode(TRUE);\n71: ",
        "context_after": "73: \tInitializeEqHandles();\n74: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 81,
        "text": "Fade out the volume when close the program",
        "context_before": "79: \n80: \tif (isMediaPlay && !isMediaPause)",
        "context_after": "82: \t\tStop();\n83: \t//\tif (bassDriver > 0) // Hack"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 85,
        "text": "isMediaPlay = true;",
        "context_before": "83: \t//\tif (bassDriver > 0) // Hack\n84: \t//\t{",
        "context_after": "86: \t//\t\tisMediaPause = false;\n87: \t//\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 86,
        "text": "isMediaPause = false;",
        "context_before": "84: \t//\t{\n85: \t//\t\tisMediaPlay = true;",
        "context_after": "87: \t//\t}\n88: \t\tSleep(500);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 134,
        "text": "BASS_SetConfig(29, 1); // BASS_CONFIG_NOTIMERES disable timeBeginPeriod(1)",
        "context_before": "132: \n133: \tBASS_SetConfig(BASS_CONFIG_DEV_DEFAULT, TRUE);",
        "context_after": "135: \n136: \tif (bassDriver == 0) // DirectSound"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 136,
        "text": "DirectSound",
        "context_before": "134: \t//BASS_SetConfig(29, 1); // BASS_CONFIG_NOTIMERES disable timeBeginPeriod(1)\n135: ",
        "context_after": "137: \t{\n138: \t\tDEBUG_LOG(\"Initializing DirectSound driver...\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 142,
        "text": "Audio device should not be \"No Sound\"",
        "context_before": "140: \t\tDEBUG_LOG(\"DirectSound update period set to 100ms\");\n141: ",
        "context_after": "143: \t\t{\n144: \t\t\tDEBUG_LOG(\"ERROR: DirectSound device 0 (No Sound) is not valid\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 148,
        "text": "There was a strange bug:",
        "context_before": "146: \t\t}\n147: ",
        "context_after": "149: \t\t// If in Win7 pin Winyl to the taskbar then BASS_Init often returns BASS_ERROR_UNKNOWN\n150: \t\t// To fix this always set win parameter of BASS_Init because quote from BASS forum:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 149,
        "text": "If in Win7 pin Winyl to the taskbar then BASS_Init often returns BASS_ERROR_UNKNOWN",
        "context_before": "147: \n148: \t\t// There was a strange bug:",
        "context_after": "150: \t\t// To fix this always set win parameter of BASS_Init because quote from BASS forum:\n151: \t\t// The only time BASS_Init can result in BASS_ERROR_UNKNOWN is when"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 150,
        "text": "To fix this always set win parameter of BASS_Init because quote from BASS forum:",
        "context_before": "148: \t\t// There was a strange bug:\n149: \t\t// If in Win7 pin Winyl to the taskbar then BASS_Init often returns BASS_ERROR_UNKNOWN",
        "context_after": "151: \t\t// The only time BASS_Init can result in BASS_ERROR_UNKNOWN is when\n152: \t\t// it fails to set the DirectSound \"cooperative level\" or create the primary buffer."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 151,
        "text": "The only time BASS_Init can result in BASS_ERROR_UNKNOWN is when",
        "context_before": "149: \t\t// If in Win7 pin Winyl to the taskbar then BASS_Init often returns BASS_ERROR_UNKNOWN\n150: \t\t// To fix this always set win parameter of BASS_Init because quote from BASS forum:",
        "context_after": "152: \t\t// it fails to set the DirectSound \"cooperative level\" or create the primary buffer.\n153: \t\t// Setting the cooperative level is what requires the window handle, hence the suspicion that's what's wrong"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 152,
        "text": "it fails to set the DirectSound \"cooperative level\" or create the primary buffer.",
        "context_before": "150: \t\t// To fix this always set win parameter of BASS_Init because quote from BASS forum:\n151: \t\t// The only time BASS_Init can result in BASS_ERROR_UNKNOWN is when",
        "context_after": "153: \t\t// Setting the cooperative level is what requires the window handle, hence the suspicion that's what's wrong\n154: \t\tHWND wndHandle = (wndWinyl && wndWinyl->IsWnd()) ? wndWinyl->Wnd() : NULL;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 153,
        "text": "Setting the cooperative level is what requires the window handle, hence the suspicion that's what's wrong",
        "context_before": "151: \t\t// The only time BASS_Init can result in BASS_ERROR_UNKNOWN is when\n152: \t\t// it fails to set the DirectSound \"cooperative level\" or create the primary buffer.",
        "context_after": "154: \t\tHWND wndHandle = (wndWinyl && wndWinyl->IsWnd()) ? wndWinyl->Wnd() : NULL;\n155: \t\tDEBUG_LOGF(\"Attempting BASS_Init with device=%d, window=0x%p\", bassDevice, wndHandle);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 166,
        "text": "32 bit audio",
        "context_before": "164: \t\tdwSampleEx = 0;\n165: ",
        "context_after": "167: \t\t{\n168: \t\t\tDEBUG_LOG(\"Testing 32-bit float audio support...\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 169,
        "text": "Check that the sound card supports 32 bit",
        "context_before": "167: \t\t{\n168: \t\t\tDEBUG_LOG(\"Testing 32-bit float audio support...\");",
        "context_after": "170: \t\t\tHSTREAM streamFloat = BASS_StreamCreate(44100, 2, BASS_SAMPLE_FLOAT, NULL, 0);\n171: \t\t\tif (streamFloat) // If yes use it"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 171,
        "text": "If yes use it",
        "context_before": "169: \t\t\t// Check that the sound card supports 32 bit\n170: \t\t\tHSTREAM streamFloat = BASS_StreamCreate(44100, 2, BASS_SAMPLE_FLOAT, NULL, 0);",
        "context_after": "172: \t\t\t{\n173: \t\t\t\tdwSampleEx |= BASS_SAMPLE_FLOAT;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 183,
        "text": "Software audio mixing",
        "context_before": "181: \t\t}\n182: ",
        "context_after": "184: \t\t{\n185: \t\t\tdwSampleEx |= BASS_SAMPLE_SOFTWARE;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 189,
        "text": "WASAPI",
        "context_before": "187: \t\t}\n188: \t}",
        "context_after": "190: \t{\n191: \t\tDEBUG_LOG(\"Initializing WASAPI driver...\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 215,
        "text": "if (!BASS_ASIO_Init(bassDevice, 0))",
        "context_before": "213: \t\tDEBUG_LOG(\"BASS dummy initialization complete\");\n214: ",
        "context_after": "216: //\t\t\treturn false;\n217: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 216,
        "text": "return false;",
        "context_before": "214: \n215: //\t\tif (!BASS_ASIO_Init(bassDevice, 0))",
        "context_after": "217: \t}\n218: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 233,
        "text": "DirectSound buffer size (1000 ms should be enought to preload track)",
        "context_before": "231: \n232: \tDEBUG_LOG(\"Configuring BASS audio settings...\");",
        "context_after": "234: \tDEBUG_LOGF(\"DirectSound buffer: %d ms\", Buffer::DirectSound);\n235: \tBASS_SetConfig(BASS_CONFIG_NET_PLAYLIST, 1);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 236,
        "text": "default is 65536",
        "context_before": "234: \tDEBUG_LOGF(\"DirectSound buffer: %d ms\", Buffer::DirectSound);\n235: \tBASS_SetConfig(BASS_CONFIG_NET_PLAYLIST, 1);",
        "context_after": "237: \tDEBUG_LOGF(\"Async file buffer: %d bytes\", Buffer::BassRead);\n238: \tBASS_SetConfig(BASS_CONFIG_SRC, 2); // for WASAPI mixer if freq is not supported, default is 1"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 238,
        "text": "for WASAPI mixer if freq is not supported, default is 1",
        "context_before": "236: \tBASS_SetConfig(BASS_CONFIG_ASYNCFILE_BUFFER, Buffer::BassRead); // default is 65536\n237: \tDEBUG_LOGF(\"Async file buffer: %d bytes\", Buffer::BassRead);",
        "context_after": "239: \tDEBUG_LOG(\"Sample rate conversion: High quality (2)\");\n240: \t//if (!isBassFX) BASS_SetConfig(BASS_CONFIG_FLOATDSP, TRUE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 240,
        "text": "if (!isBassFX) BASS_SetConfig(BASS_CONFIG_FLOATDSP, TRUE);",
        "context_before": "238: \tBASS_SetConfig(BASS_CONFIG_SRC, 2); // for WASAPI mixer if freq is not supported, default is 1\n239: \tDEBUG_LOG(\"Sample rate conversion: High quality (2)\");",
        "context_after": "241: \n242: \tif (wnd) // if wnd == nullptr then ReInit and we don't need to load plugins again"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 242,
        "text": "if wnd == nullptr then ReInit and we don't need to load plugins again",
        "context_before": "240: \t//if (!isBassFX) BASS_SetConfig(BASS_CONFIG_FLOATDSP, TRUE);\n241: ",
        "context_after": "243: \t{\n244: #ifndef NDEBUG"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 249,
        "text": "_WIN64",
        "context_before": "247: #else\n248: \t\tprogramPath.append(L\"x64\\\\\");",
        "context_after": "250: #endif // NDEBUG\n251: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 250,
        "text": "NDEBUG",
        "context_before": "248: \t\tprogramPath.append(L\"x64\\\\\");\n249: #endif // _WIN64",
        "context_after": "251: \n252: \t\t// Load BASS format plugins (WAV, MP3, OGG, AIFF included in BASS)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 252,
        "text": "Load BASS format plugins (WAV, MP3, OGG, AIFF included in BASS)",
        "context_before": "250: #endif // NDEBUG\n251: ",
        "context_after": "253: \t\t// TODO: Re-enable FLAC plugin when verified working:\n254: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassflac.dll\").c_str(), BASS_UNICODE));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 253,
        "text": "TODO: Re-enable FLAC plugin when verified working:",
        "context_before": "251: \n252: \t\t// Load BASS format plugins (WAV, MP3, OGG, AIFF included in BASS)",
        "context_after": "254: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassflac.dll\").c_str(), BASS_UNICODE));\n255: \t\t// TODO: Download and add remaining plugins:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 254,
        "text": "verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassflac.dll\").c_str(), BASS_UNICODE));",
        "context_before": "252: \t\t// Load BASS format plugins (WAV, MP3, OGG, AIFF included in BASS)\n253: \t\t// TODO: Re-enable FLAC plugin when verified working:",
        "context_after": "255: \t\t// TODO: Download and add remaining plugins:\n256: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_ape.dll\").c_str(), BASS_UNICODE));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 255,
        "text": "TODO: Download and add remaining plugins:",
        "context_before": "253: \t\t// TODO: Re-enable FLAC plugin when verified working:\n254: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassflac.dll\").c_str(), BASS_UNICODE));",
        "context_after": "256: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_ape.dll\").c_str(), BASS_UNICODE));\n257: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\basswma.dll\").c_str(), BASS_UNICODE));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 256,
        "text": "verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_ape.dll\").c_str(), BASS_UNICODE));",
        "context_before": "254: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassflac.dll\").c_str(), BASS_UNICODE));\n255: \t\t// TODO: Download and add remaining plugins:",
        "context_after": "257: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\basswma.dll\").c_str(), BASS_UNICODE));\n258: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_aac.dll\").c_str(), BASS_UNICODE));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 257,
        "text": "verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\basswma.dll\").c_str(), BASS_UNICODE));",
        "context_before": "255: \t\t// TODO: Download and add remaining plugins:\n256: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_ape.dll\").c_str(), BASS_UNICODE));",
        "context_after": "258: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_aac.dll\").c_str(), BASS_UNICODE));\n259: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassalac.dll\").c_str(), BASS_UNICODE));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 258,
        "text": "verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_aac.dll\").c_str(), BASS_UNICODE));",
        "context_before": "256: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_ape.dll\").c_str(), BASS_UNICODE));\n257: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\basswma.dll\").c_str(), BASS_UNICODE));",
        "context_after": "259: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassalac.dll\").c_str(), BASS_UNICODE));\n260: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_spx.dll\").c_str(), BASS_UNICODE));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 259,
        "text": "verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassalac.dll\").c_str(), BASS_UNICODE));",
        "context_before": "257: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\basswma.dll\").c_str(), BASS_UNICODE));\n258: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_aac.dll\").c_str(), BASS_UNICODE));",
        "context_after": "260: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_spx.dll\").c_str(), BASS_UNICODE));\n261: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassopus.dll\").c_str(), BASS_UNICODE));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 260,
        "text": "verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_spx.dll\").c_str(), BASS_UNICODE));",
        "context_before": "258: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_aac.dll\").c_str(), BASS_UNICODE));\n259: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassalac.dll\").c_str(), BASS_UNICODE));",
        "context_after": "261: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassopus.dll\").c_str(), BASS_UNICODE));\n262: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\basswv.dll\").c_str(), BASS_UNICODE));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 261,
        "text": "verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassopus.dll\").c_str(), BASS_UNICODE));",
        "context_before": "259: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassalac.dll\").c_str(), BASS_UNICODE));\n260: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_spx.dll\").c_str(), BASS_UNICODE));",
        "context_after": "262: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\basswv.dll\").c_str(), BASS_UNICODE));\n263: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_mpc.dll\").c_str(), BASS_UNICODE));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 262,
        "text": "verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\basswv.dll\").c_str(), BASS_UNICODE));",
        "context_before": "260: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_spx.dll\").c_str(), BASS_UNICODE));\n261: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassopus.dll\").c_str(), BASS_UNICODE));",
        "context_after": "263: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_mpc.dll\").c_str(), BASS_UNICODE));\n264: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_tta.dll\").c_str(), BASS_UNICODE));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 263,
        "text": "verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_mpc.dll\").c_str(), BASS_UNICODE));",
        "context_before": "261: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bassopus.dll\").c_str(), BASS_UNICODE));\n262: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\basswv.dll\").c_str(), BASS_UNICODE));",
        "context_after": "264: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_tta.dll\").c_str(), BASS_UNICODE));\n265: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 264,
        "text": "verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_tta.dll\").c_str(), BASS_UNICODE));",
        "context_before": "262: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\basswv.dll\").c_str(), BASS_UNICODE));\n263: \t\t// verify(BASS_PluginLoad((const char*)(programPath + L\"Bass\\\\bass_mpc.dll\").c_str(), BASS_UNICODE));",
        "context_after": "265: \t}\n266: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 267,
        "text": "Test BASS_FX library availability",
        "context_before": "265: \t}\n266: ",
        "context_after": "268: \tDEBUG_LOG(\"Checking BASS_FX availability...\");\n269: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 351,
        "text": "Free buffer stream",
        "context_before": "349: \t\tfor (std::size_t i = 0; i < bufferStreams.size(); ++i)\n350: \t\t{",
        "context_after": "352: \t\t\tverify(BASS_StreamFree(bufferStreams[i]->streamFile));\n353: \t\t\tdelete[] bufferStreams[i]->buffer;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 362,
        "text": "//////",
        "context_before": "360: \tmutexBuffer.reset();\n361: ",
        "context_after": "363: \n364: \tif (bassDriver == 1)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 392,
        "text": "Example: \"StreamTitle='Morning Show: BEFORE - Quixote (Album)';StreamUrl='';\"",
        "context_before": "390: \t\treturn false;\n391: ",
        "context_after": "393: \n394: \tstd::size_t find1 = text.find(L\"='\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 410,
        "text": "std::wsmatch result; if (std::regex_match(text, result, std::wregex(L\"^.*StreamTitle='(.*?)';.*$\"))) { text = result[1]; if (std::regex_match(text, result, std::wregex(L\"^(.*)-(.*)$\"))) { artist = result[1]; title = result[2]; //\t\t\ttext = title; //\t\t\tif (std::regex_match(text, result, std::wregex(L\"^(.*)\\\\((.*?)\\\\)$\"))) //\t\t\t{ //\t\t\t\ttitle = result[1]; //\t\t\t\talbum = result[2]; //\t\t\t} } }",
        "context_before": "408: \t\t}\n409: \t}",
        "context_after": "430: \tStringEx::Trim(artist);\n431: \tStringEx::Trim(album);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 453,
        "text": "BASS_CTYPE_STREAM_WMA",
        "context_before": "451: \t\tcase BASS_CTYPE_STREAM_MP3: type = 1; break;\n452: \t\tcase BASS_CTYPE_STREAM_OGG: type = 2; break;",
        "context_after": "454: \t\tcase 0x10301: type = 1; break; // BASS_CTYPE_STREAM_WMA_MP3\n455: \t\tcase 0x10b00: type = 4; break; // BASS_CTYPE_STREAM_AAC"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 454,
        "text": "BASS_CTYPE_STREAM_WMA_MP3",
        "context_before": "452: \t\tcase BASS_CTYPE_STREAM_OGG: type = 2; break;\n453: \t\tcase 0x10300: type = 3; break; // BASS_CTYPE_STREAM_WMA",
        "context_after": "455: \t\tcase 0x10b00: type = 4; break; // BASS_CTYPE_STREAM_AAC\n456: \t\tcase 0x10b01: type = 5; break; // BASS_CTYPE_STREAM_MP4"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 455,
        "text": "BASS_CTYPE_STREAM_AAC",
        "context_before": "453: \t\tcase 0x10300: type = 3; break; // BASS_CTYPE_STREAM_WMA\n454: \t\tcase 0x10301: type = 1; break; // BASS_CTYPE_STREAM_WMA_MP3",
        "context_after": "456: \t\tcase 0x10b01: type = 5; break; // BASS_CTYPE_STREAM_MP4\n457: \t\tdefault: type = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 456,
        "text": "BASS_CTYPE_STREAM_MP4",
        "context_before": "454: \t\tcase 0x10301: type = 1; break; // BASS_CTYPE_STREAM_WMA_MP3\n455: \t\tcase 0x10b00: type = 4; break; // BASS_CTYPE_STREAM_AAC",
        "context_after": "457: \t\tdefault: type = 0;\n458: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 460,
        "text": "WMA Bitrate (From BASS forum)",
        "context_before": "458: \t}\n459: ",
        "context_after": "461: \tif (kbps == 0 && (info.ctype == 0x10300 || info.ctype == 0x10301))\n462: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 470,
        "text": "should be 1024 but 1000 more accurate, don't know why",
        "context_before": "468: \t\t\t\tif (!strncmp(wma, \"Bitrate=\", 8))\n469: \t\t\t\t{",
        "context_after": "471: \t\t\t\t\tbreak;\n472: \t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 478,
        "text": "/////////////////////",
        "context_before": "476: \t}\n477: ",
        "context_after": "479: \tconst char* tags = BASS_ChannelGetTags(streamPlay, BASS_TAG_META);\n480: \tstd::wstring text = UTF::IsUTF8(tags) ? UTF::UTF16(tags) : UTF::UTF16A(tags);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 485,
        "text": "Example: \"StreamTitle='Morning Show: BEFORE - Quixote (Album)';StreamUrl='';\"",
        "context_before": "483: \t\treturn true;\n484: ",
        "context_after": "486: \n487: \tstd::size_t find1 = text.find(L\"='\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 497,
        "text": "std::wsmatch result; if (std::regex_match(text, result, std::wregex(L\"^.*StreamTitle='(.*?)';.*$\"))) { meta = result[1]; }",
        "context_before": "495: \t\t}\n496: \t}",
        "context_after": "505: }\n506: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 516,
        "text": "Previous or current file is part of cue need to reset syncs",
        "context_before": "514: \tassert(libAudio->bassDriver == 0);\n515: ",
        "context_after": "517: \tif ((libAudio->cuePreload || libAudio->cueThis) && libAudio->isPreloadRate)\n518: \t\tlibAudio->ResetCueSync(libAudio->cuePreload, libAudio->timeSecondPreload);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 520,
        "text": "libAudio->SyncProcEndImpl();",
        "context_before": "518: \t\tlibAudio->ResetCueSync(libAudio->cuePreload, libAudio->timeSecondPreload);\n519: ",
        "context_after": "521: \t::PostMessage(libAudio->wndWinyl->Wnd(), UWM_BASSNEXT, 0, 0);\n522: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 539,
        "text": "Previous or current file is part of cue need to reset syncs",
        "context_before": "537: \t}\n538: ",
        "context_after": "540: \tif ((libAudio->cuePreload || libAudio->cueThis) && libAudio->isPreloadRate)\n541: \t\tlibAudio->ResetCueSync(libAudio->cuePreload, libAudio->timeSecondPreload);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 543,
        "text": "It fixes bug: pause at the end of the track with big fading",
        "context_before": "541: \t\tlibAudio->ResetCueSync(libAudio->cuePreload, libAudio->timeSecondPreload);\n542: ",
        "context_after": "544: \t\t::PostMessage(libAudio->wndWinyl->Wnd(), UWM_BASSWASTOP, 0, 0);\n545: \t::PostMessage(libAudio->wndWinyl->Wnd(), UWM_BASSNEXT, 0, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 560,
        "text": "Need to stop channel when changes from cue to file or end of cue mixed with new file",
        "context_before": "558: \tif (libAudio->streamPreload && libAudio->isPreloadRate)\n559: \t{",
        "context_after": "561: \t\t// WASAPI and ASIO seems to work fine without this, use WASAPI buffer size to test\n562: \t\tif (libAudio->cueThis && CueFile::IsLenght(libAudio->cueThis))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 561,
        "text": "WASAPI and ASIO seems to work fine without this, use WASAPI buffer size to test",
        "context_before": "559: \t{\n560: \t\t// Need to stop channel when changes from cue to file or end of cue mixed with new file",
        "context_after": "562: \t\tif (libAudio->cueThis && CueFile::IsLenght(libAudio->cueThis))\n563: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 565,
        "text": "Without this the func calls twice when changes from cue to file (to reproduce move position to the end)",
        "context_before": "563: \t\t{\n564: \t\t\tBASS_ChannelStop(libAudio->streamPlay);",
        "context_after": "566: \t\t\tverify(BASS_ChannelRemoveSync(libAudio->streamMixer, libAudio->syncEndMixCue));\n567: \t\t\tlibAudio->syncEndMixCue = NULL;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 589,
        "text": "Already preloaded",
        "context_before": "587: \tif (!isMediaPlay)\n588: \t\treturn;",
        "context_after": "590: \t\treturn;\n591: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 594,
        "text": "Sleep(3000);",
        "context_before": "592: \tstd::wstring file;\n593: ",
        "context_after": "595: \n596: \t// Get the next track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 596,
        "text": "Get the next track",
        "context_before": "594: \t//Sleep(3000);\n595: ",
        "context_after": "597: \t//::SendMessage(hParent, UWM_NEXTFILE, (LPARAM)&csFile, 0);\n598: \tfile = wndWinyl->ChangeFile(cuePreload);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 602,
        "text": "Sleep(2000); // Test slow file load",
        "context_before": "600: \tif (!file.empty())\n601: \t{",
        "context_after": "603: \n604: \t\tif (!cuePreload)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 610,
        "text": "Next track from same CUE",
        "context_before": "608: \t\t\tdouble offset = CueFile::GetOffset(cuePreload);\n609: ",
        "context_after": "611: \t\t\tif (cueThis && file == fileThis && CueFile::IsNextCue(cueThis, cuePreload))\n612: \t\t\t\tcueOffsetPreload = BASS_ChannelSeconds2Bytes(streamPlay, offset);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 613,
        "text": "New CUE file",
        "context_before": "611: \t\t\tif (cueThis && file == fileThis && CueFile::IsNextCue(cueThis, cuePreload))\n612: \t\t\t\tcueOffsetPreload = BASS_ChannelSeconds2Bytes(streamPlay, offset);",
        "context_after": "614: \t\t\t\tstreamPreload = OpenMediaFile(file, &byteLengthCue, &timeSecondCue, &offset, &cueOffsetPreload);\n615: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 628,
        "text": "If next track from same CUE exit here",
        "context_before": "626: \t\t\t}\n627: ",
        "context_after": "629: \t\t\tif (!streamPreload)\n630: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 662,
        "text": "If it wasn't radio (just stop if it was radio)",
        "context_before": "660: \t\treturn;\n661: ",
        "context_after": "663: \t{\n664: \t\tif (!filePreload.empty()) // If there is a next file"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 664,
        "text": "If there is a next file",
        "context_before": "662: \tif (!isMediaRadio) \t// If it wasn't radio (just stop if it was radio)\n663: \t{",
        "context_after": "665: \t\t{\n666: \t\t\tif (streamPreload) // File is preloaded"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 666,
        "text": "File is preloaded",
        "context_before": "664: \t\tif (!filePreload.empty()) // If there is a next file\n665: \t\t{",
        "context_after": "667: \t\t\t{\n668: \t\t\t\tBASS_StreamFree(streamPlay);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 676,
        "text": "BASS_ChannelGetLength(streamPlay, BASS_POS_BYTE);",
        "context_before": "674: \t\t\t\tfilePreload.clear();\n675: ",
        "context_after": "677: \t\t\t\ttimeSecond = timeSecondPreload;//BASS_ChannelBytes2Seconds(streamPlay, byteLength);\n678: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 677,
        "text": "BASS_ChannelBytes2Seconds(streamPlay, byteLength);",
        "context_before": "675: \n676: \t\t\t\tbyteLength = byteLengthPreload;//BASS_ChannelGetLength(streamPlay, BASS_POS_BYTE);",
        "context_after": "678: \n679: \t\t\t\tcueThis = cuePreload;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 687,
        "text": "Sample rates are different, need to restart the device with new sample rate",
        "context_before": "685: \t\t\t\tposPlus = cueOffset;\n686: ",
        "context_after": "688: \t\t\t\tif (!isPreloadRate)\n689: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 705,
        "text": "File is not preloaded",
        "context_before": "703: \t\t\t\treturn;\n704: \t\t\t}",
        "context_after": "706: \t\t\t{\n707: \t\t\t\t// Maybe it is URL"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 721,
        "text": "Next track from same CUE",
        "context_before": "719: \t\t\t}\n720: \t\t}",
        "context_after": "722: \t\t{\n723: \t\t\tcueThis = cuePreload;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 776,
        "text": "DirectSound",
        "context_before": "774: \tResetCueSync();\n775: ",
        "context_after": "777: \t{\n778: \t\tif (needFade && isMediaPlay && !isMediaPause && !bassNoEffect) // Fade out mixer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 778,
        "text": "Fade out mixer",
        "context_before": "776: \tif (bassDriver == 0) // DirectSound\n777: \t{",
        "context_after": "779: \t\t{\n780: \t\t\t// Need to remove syncs here or the mixer that fade out can call them."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 780,
        "text": "Need to remove syncs here or the mixer that fade out can call them.",
        "context_before": "778: \t\tif (needFade && isMediaPlay && !isMediaPause && !bassNoEffect) // Fade out mixer\n779: \t\t{",
        "context_after": "781: \t\t\t// Below in WASAPI & ASIO it's not needed because a new mixer isn't created.\n782: \t\t\tverify(BASS_ChannelRemoveSync(streamMixer, syncEnd) == TRUE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 781,
        "text": "Below in WASAPI & ASIO it's not needed because a new mixer isn't created.",
        "context_before": "779: \t\t{\n780: \t\t\t// Need to remove syncs here or the mixer that fade out can call them.",
        "context_after": "782: \t\t\tverify(BASS_ChannelRemoveSync(streamMixer, syncEnd) == TRUE);\n783: \t\t\tverify(BASS_ChannelRemoveSync(streamMixer, syncEndMix) == TRUE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 784,
        "text": "Use BASS_STREAM_AUTOFREE without sync.",
        "context_before": "782: \t\t\tverify(BASS_ChannelRemoveSync(streamMixer, syncEnd) == TRUE);\n783: \t\t\tverify(BASS_ChannelRemoveSync(streamMixer, syncEndMix) == TRUE);",
        "context_after": "785: \t\t\tassert(!(BASS_ChannelFlags(streamMixer, 0, 0) & BASS_STREAM_DECODE));\n786: \t\t\tverify(BASS_Mixer_ChannelFlags(streamPlay, BASS_STREAM_AUTOFREE, BASS_STREAM_AUTOFREE) != -1); // Important!"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 788,
        "text": "BASS_ChannelSetSync(streamMixer, BASS_SYNC_MIXTIME|BASS_SYNC_SLIDE, 0, SyncFreeMixer, this);",
        "context_before": "786: \t\t\tverify(BASS_Mixer_ChannelFlags(streamPlay, BASS_STREAM_AUTOFREE, BASS_STREAM_AUTOFREE) != -1); // Important!\n787: \t\t\tverify(BASS_ChannelFlags(streamMixer, BASS_STREAM_AUTOFREE, BASS_STREAM_AUTOFREE) != -1); // Important!",
        "context_after": "789: \t\t\tBASS_ChannelSlideAttribute(streamMixer, BASS_ATTRIB_VOL, -1, FadeTime::Pos);\n790: \t\t\tstreamPlay = NULL; streamMixer = NULL;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 804,
        "text": "WASAPI & ASIO",
        "context_before": "802: \t\t}\n803: \t}",
        "context_after": "805: \t{\n806: \t\tif (streamPlay)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 812,
        "text": "Fade out stream",
        "context_before": "810: \t\t\tverify(BASS_ChannelRemoveSync(streamMixer, syncEndMix) == TRUE);\n811: ",
        "context_after": "813: \t\t{\n814: \t\t\t// We cannot use BASS_STREAM_AUTOFREE because streamPlay is BASS_STREAM_DECODE in this case, so use sync."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 814,
        "text": "We cannot use BASS_STREAM_AUTOFREE because streamPlay is BASS_STREAM_DECODE in this case, so use sync.",
        "context_before": "812: \t\tif (needFade && isMediaPlay && !isMediaPause && !bassNoEffect) // Fade out stream\n813: \t\t{",
        "context_after": "815: \t\t\t//verify(BASS_ChannelFlags(streamPlay, BASS_STREAM_AUTOFREE, BASS_STREAM_AUTOFREE) != -1);\n816: \t\t\tBASS_ChannelSetSync(streamPlay, BASS_SYNC_MIXTIME|BASS_SYNC_SLIDE, 0, SyncFreePlay, this);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 815,
        "text": "verify(BASS_ChannelFlags(streamPlay, BASS_STREAM_AUTOFREE, BASS_STREAM_AUTOFREE) != -1);",
        "context_before": "813: \t\t{\n814: \t\t\t// We cannot use BASS_STREAM_AUTOFREE because streamPlay is BASS_STREAM_DECODE in this case, so use sync.",
        "context_after": "816: \t\t\tBASS_ChannelSetSync(streamPlay, BASS_SYNC_MIXTIME|BASS_SYNC_SLIDE, 0, SyncFreePlay, this);\n817: \t\t\tBASS_ChannelSlideAttribute(streamPlay, BASS_ATTRIB_VOL, 0.0f, FadeTime::Pos);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 839,
        "text": "Check how much data is currently buffered",
        "context_before": "837: \t\t\tmutexBuffer->Unlock();\n838: ",
        "context_after": "840: \t\t\tint c = (int)BASS_StreamPutData(buf->streamBuffer, 0, 0);\n841: \t\t\tif (c == -1) //"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 843,
        "text": "Free buffer stream",
        "context_before": "841: \t\t\tif (c == -1) //\n842: \t\t\t{",
        "context_after": "844: \t\t\t\tverify(BASS_StreamFree(buf->streamFile));\n845: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 850,
        "text": "printf(\"FREE1\\n\");",
        "context_before": "848: \t\t\t\tdelete buf;\n849: \t\t\t\tbufferStreams.erase(bufferStreams.begin() + i);",
        "context_after": "851: \t\t\t\tcontinue;\n852: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 855,
        "text": "AllocConsole();",
        "context_before": "853: \t\t\telse\n854: \t\t\t{",
        "context_after": "856: \t\t\t\t//freopen (\"CONOUT$\", \"w\", stdout);\n857: \t\t\t\t//printf(\"LEN: %u,        %i,%i\\n\", buf->streamBuffer, c, buf->bytes);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 856,
        "text": "freopen (\"CONOUT$\", \"w\", stdout);",
        "context_before": "854: \t\t\t{\n855: \t\t\t\t//AllocConsole();",
        "context_after": "857: \t\t\t\t//printf(\"LEN: %u,        %i,%i\\n\", buf->streamBuffer, c, buf->bytes);\n858: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 857,
        "text": "printf(\"LEN: %u,        %i,%i\\n\", buf->streamBuffer, c, buf->bytes);",
        "context_before": "855: \t\t\t\t//AllocConsole();\n856: \t\t\t\t//freopen (\"CONOUT$\", \"w\", stdout);",
        "context_after": "858: \n859: \t\t\t\tif (buf->bytes > c) // Less data than wanted"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 859,
        "text": "Less data than wanted",
        "context_before": "857: \t\t\t\t//printf(\"LEN: %u,        %i,%i\\n\", buf->streamBuffer, c, buf->bytes);\n858: ",
        "context_after": "860: \t\t\t\t{\n861: \t\t\t\t\t// Get more data from the file"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 861,
        "text": "Get more data from the file",
        "context_before": "859: \t\t\t\tif (buf->bytes > c) // Less data than wanted\n860: \t\t\t\t{",
        "context_after": "862: \t\t\t\t\tc = BASS_ChannelGetData(buf->streamFile, buf->buffer, buf->bytes - c);\n863: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 864,
        "text": "File end",
        "context_before": "862: \t\t\t\t\tc = BASS_ChannelGetData(buf->streamFile, buf->buffer, buf->bytes - c);\n863: ",
        "context_after": "865: \t\t\t\t\t{\n866: \t\t\t\t\t\tverify(BASS_StreamFree(buf->streamFile));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 868,
        "text": "Preload next file",
        "context_before": "866: \t\t\t\t\t\tverify(BASS_StreamFree(buf->streamFile));\n867: ",
        "context_after": "869: \t\t\t\t\t\t//::PostMessage(libAudio->hParent, UWM_BASSPRELOAD, 0, 0);\n870: \t\t\t\t\t\tSyncProcPreloadImpl();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 872,
        "text": "Signal to end stream",
        "context_before": "870: \t\t\t\t\t\tSyncProcPreloadImpl();\n871: ",
        "context_after": "873: \t\t\t\t\t\tBASS_StreamPutData(buf->streamBuffer, buf->buffer, BASS_STREAMPROC_END);\n874: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 875,
        "text": "Free buffer stream",
        "context_before": "873: \t\t\t\t\t\tBASS_StreamPutData(buf->streamBuffer, buf->buffer, BASS_STREAMPROC_END);\n874: ",
        "context_after": "876: \t\t\t\t\t\tmutexBuffer->Lock();\n877: \t\t\t\t\t\tdelete[] buf->buffer;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 880,
        "text": "printf(\"FREE2\\n\");",
        "context_before": "878: \t\t\t\t\t\tdelete buf;\n879: \t\t\t\t\t\tbufferStreams.erase(bufferStreams.begin() + i);",
        "context_after": "881: \t\t\t\t\t\tcontinue;\n882: \t\t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 883,
        "text": "Pass data to the buffer stream",
        "context_before": "881: \t\t\t\t\t\tcontinue;\n882: \t\t\t\t\t}",
        "context_after": "884: \t\t\t\t\t\tBASS_StreamPutData(buf->streamBuffer, buf->buffer, c);\n885: \t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 926,
        "text": "Get length of the stream in bytes and seconds",
        "context_before": "924: \t}\n925: ",
        "context_after": "927: \t*outByteLength = BASS_ChannelGetLength(streamFile, BASS_POS_BYTE);\n928: \t*outTimeSecond = BASS_ChannelBytes2Seconds(streamFile, *outByteLength);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 930,
        "text": "Set start pos and return the pos in bytes",
        "context_before": "928: \t*outTimeSecond = BASS_ChannelBytes2Seconds(streamFile, *outByteLength);\n929: ",
        "context_after": "931: \tif (position)\n932: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 942,
        "text": "That is all for DirectSound",
        "context_before": "940: \t\t*outBytePosition = 0;\n941: ",
        "context_after": "943: \n944: \t// Reminder: If need to enable double reading buffer for DirectSound (like WASAPI/ASIO):"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 944,
        "text": "Reminder: If need to enable double reading buffer for DirectSound (like WASAPI/ASIO):",
        "context_before": "942: \t// That is all for DirectSound\n943: ",
        "context_after": "945: \t// 1. comment next line 2. set DirectSound buffer = 500 3. In Init enable thread  4. in SyncGaplessDS uncomment preload line\n946: \t// 5. in GetPosition and GetTimePosition add posPlus 6. Below in hBuffer create stream with dwSampleEx"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 945,
        "text": "1. comment next line 2. set DirectSound buffer = 500 3. In Init enable thread  4. in SyncGaplessDS uncomment preload line",
        "context_before": "943: \n944: \t// Reminder: If need to enable double reading buffer for DirectSound (like WASAPI/ASIO):",
        "context_after": "946: \t// 5. in GetPosition and GetTimePosition add posPlus 6. Below in hBuffer create stream with dwSampleEx\n947: \t// !7. In StartPlayDS add ::SetEvent(hBufferEvent);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 946,
        "text": "5. in GetPosition and GetTimePosition add posPlus 6. Below in hBuffer create stream with dwSampleEx",
        "context_before": "944: \t// Reminder: If need to enable double reading buffer for DirectSound (like WASAPI/ASIO):\n945: \t// 1. comment next line 2. set DirectSound buffer = 500 3. In Init enable thread  4. in SyncGaplessDS uncomment preload line",
        "context_after": "947: \t// !7. In StartPlayDS add ::SetEvent(hBufferEvent);\n948: \t// ^ This comment is old btw some things are changed"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 947,
        "text": "!7. In StartPlayDS add ::SetEvent(hBufferEvent);",
        "context_before": "945: \t// 1. comment next line 2. set DirectSound buffer = 500 3. In Init enable thread  4. in SyncGaplessDS uncomment preload line\n946: \t// 5. in GetPosition and GetTimePosition add posPlus 6. Below in hBuffer create stream with dwSampleEx",
        "context_after": "948: \t// ^ This comment is old btw some things are changed\n949: \tif (bassDriver == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 948,
        "text": "^ This comment is old btw some things are changed",
        "context_before": "946: \t// 5. in GetPosition and GetTimePosition add posPlus 6. Below in hBuffer create stream with dwSampleEx\n947: \t// !7. In StartPlayDS add ::SetEvent(hBufferEvent);",
        "context_after": "949: \tif (bassDriver == 0)\n950: \t\treturn streamFile;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 952,
        "text": "For WASAPI/ASIO create buffer stream that above file stream",
        "context_before": "950: \t\treturn streamFile;\n951: ",
        "context_after": "953: \tBASS_CHANNELINFO ci;\n954: \tBASS_ChannelGetInfo(streamFile, &ci);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 966,
        "text": "Add buffer stream to buffer streams queue (RunThreadBuffer does everything else)",
        "context_before": "964: \tbuf->buffer = new char[buf->bytes];\n965: ",
        "context_after": "967: \tmutexBuffer->Lock();\n968: \tbufferStreams.push_back(buf);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 971,
        "text": "Add first portion of the data to buffer here (to fill buffer faster)",
        "context_before": "969: \tmutexBuffer->Unlock();\n970: ",
        "context_after": "972: \tDWORD c = BASS_ChannelGetData(buf->streamFile, buf->buffer, buf->bytes);\n973: \tBASS_StreamPutData(buf->streamBuffer, buf->buffer, c);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1010,
        "text": "When Gapless Playback if a new file is already preloaded then free it",
        "context_before": "1008: LibAudio::Error LibAudio::PlayFile(const std::wstring& file, long long cue)\n1009: {",
        "context_after": "1011: \tFreePreload();\n1012: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1102,
        "text": "Start buffer thread to remove all buffers",
        "context_before": "1100: \t\t\tstreamPlay = NULL;\n1101: \t\t}",
        "context_after": "1103: \t\tif (eventBuffer)\n1104: \t\t\teventBuffer->Set();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1141,
        "text": "Fade in volume",
        "context_before": "1139: \t\t\telse\n1140: \t\t\t{",
        "context_after": "1142: \t\t\t\tBASS_ChannelSetAttribute(streamMixer, BASS_ATTRIB_VOL, 0.0f);\n1143: \t\t\t\tBASS_ChannelSlideAttribute(streamMixer, BASS_ATTRIB_VOL, realVolume, FadeTime::Pos);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1168,
        "text": "Fade in volume",
        "context_before": "1166: \t\telse\n1167: \t\t{",
        "context_after": "1169: \t\t\tBASS_ChannelSetAttribute(streamPlay, BASS_ATTRIB_VOL, 0.0f);\n1170: \t\t\tBASS_ChannelSlideAttribute(streamPlay, BASS_ATTRIB_VOL, realVolume, FadeTime::Pos);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1173,
        "text": "If the mixer and the new stream sample rate are equal then just add the new stream to the mixer",
        "context_before": "1171: \t\t}\n1172: ",
        "context_after": "1174: \t\tif (streamMixer)\n1175: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1176,
        "text": "BASS_CHANNELINFO mi;",
        "context_before": "1174: \t\tif (streamMixer)\n1175: \t\t{",
        "context_after": "1177: \t\t\t//BASS_ChannelGetInfo(streamMixer, &mi);\n1178: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1177,
        "text": "BASS_ChannelGetInfo(streamMixer, &mi);",
        "context_before": "1175: \t\t{\n1176: \t\t\t//BASS_CHANNELINFO mi;",
        "context_after": "1178: \n1179: \t\t\tif (oldci.freq == ci.freq && oldci.chans == ci.chans)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1185,
        "text": "If paused",
        "context_before": "1183: \t\t\t\tBASS_ChannelSetPosition(streamMixer, 0, BASS_POS_BYTE);\n1184: \t\t\t\tResetCueSync(cueThis, timeSecond, posPlus, cueOffset);",
        "context_after": "1186: \t\t\t\t\tBASS_WASAPI_Start();\n1187: \t\t\t\teventBuffer->Set();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1206,
        "text": "Restart WASAPI with new parameters",
        "context_before": "1204: \t}\n1205: ",
        "context_after": "1207: \n1208: \tBASS_WASAPI_Free();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1210,
        "text": "We need streamMixerCopyWASAPI because we will get the mixer only after BASS_WASAPI_Init",
        "context_before": "1208: \tBASS_WASAPI_Free();\n1209: ",
        "context_after": "1211: \t// but we need to send independent mixer not a pointer to WasapiProc (so it will be the same as AsioProc) (?)\n1212: \t// otherwise when stop for example the mixer resets immediately but fading is still going it will cause a bug."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1211,
        "text": "but we need to send independent mixer not a pointer to WasapiProc (so it will be the same as AsioProc) (?)",
        "context_before": "1209: \n1210: \t// We need streamMixerCopyWASAPI because we will get the mixer only after BASS_WASAPI_Init",
        "context_after": "1212: \t// otherwise when stop for example the mixer resets immediately but fading is still going it will cause a bug.\n1213: \tstreamMixerCopyWASAPI = NULL;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1212,
        "text": "otherwise when stop for example the mixer resets immediately but fading is still going it will cause a bug.",
        "context_before": "1210: \t// We need streamMixerCopyWASAPI because we will get the mixer only after BASS_WASAPI_Init\n1211: \t// but we need to send independent mixer not a pointer to WasapiProc (so it will be the same as AsioProc) (?)",
        "context_after": "1213: \tstreamMixerCopyWASAPI = NULL;\n1214: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1215,
        "text": "Convert bassDevice=-1 to actual device ID for WASAPI exclusive mode",
        "context_before": "1213: \tstreamMixerCopyWASAPI = NULL;\n1214: ",
        "context_after": "1216: \tint actualDevice = bassDevice;\n1217: \tif (bassDevice == -1) {"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1219,
        "text": "Find the default WASAPI device",
        "context_before": "1217: \tif (bassDevice == -1) {\n1218: \t\tWASAPI_DEBUG_LOG(\"Converting default device (-1) to actual device ID\");",
        "context_after": "1220: \t\tBASS_WASAPI_DEVICEINFO deviceInfo;\n1221: \t\tfor (int i = 0; i < 20; i++) { // Check first 20 devices"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1221,
        "text": "Check first 20 devices",
        "context_before": "1219: \t\t// Find the default WASAPI device\n1220: \t\tBASS_WASAPI_DEVICEINFO deviceInfo;",
        "context_after": "1222: \t\t\tif (BASS_WASAPI_GetDeviceInfo(i, &deviceInfo)) {\n1223: \t\t\t\tif (deviceInfo.flags & BASS_DEVICE_DEFAULT) {"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1232,
        "text": "Fallback to device 0",
        "context_before": "1230: \n1231: \t\tif (actualDevice == -1) {",
        "context_after": "1233: \t\t\tWASAPI_DEBUG_LOG(\"No default device found, using device 0\");\n1234: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1237,
        "text": "https://msdn.microsoft.com/en-us/library/windows/desktop/dd370875%28v=vs.85%29.aspx",
        "context_before": "1235: \t}\n1236: ",
        "context_after": "1238: \tWASAPI_DEBUG_LOGF(\"Initializing WASAPI with device %d (original: %d)\", actualDevice, bassDevice);\n1239: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1295,
        "text": "Fade in volume",
        "context_before": "1293: \t\telse\n1294: \t\t{",
        "context_after": "1296: \t\t\tBASS_ChannelSetAttribute(streamPlay, BASS_ATTRIB_VOL, 0.0f);\n1297: \t\t\tBASS_ChannelSlideAttribute(streamPlay, BASS_ATTRIB_VOL, realVolume, FadeTime::Pos);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1300,
        "text": "If the mixer and the new stream sample rate are equal then just add the new stream to the mixer",
        "context_before": "1298: \t\t}\n1299: ",
        "context_after": "1301: \t\tif (streamMixer)\n1302: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1303,
        "text": "BASS_CHANNELINFO mi;",
        "context_before": "1301: \t\tif (streamMixer)\n1302: \t\t{",
        "context_after": "1304: \t\t\t//BASS_ChannelGetInfo(streamMixer, &mi);\n1305: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1304,
        "text": "BASS_ChannelGetInfo(streamMixer, &mi);",
        "context_before": "1302: \t\t{\n1303: \t\t\t//BASS_CHANNELINFO mi;",
        "context_after": "1305: \n1306: \t\t\tif (oldci.freq == ci.freq && oldci.chans == ci.chans)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1312,
        "text": "If paused",
        "context_before": "1310: \t\t\t\tBASS_ChannelSetPosition(streamMixer, 0, BASS_POS_BYTE);\n1311: \t\t\t\tResetCueSync(cueThis, timeSecond, posPlus, cueOffset);",
        "context_after": "1313: \t\t\t\t\tBASS_ASIO_Start(0, 0);\n1314: \t\t\t\teventBuffer->Set();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1333,
        "text": "////////////////////////////////////////////////////////////",
        "context_before": "1331: \t}\n1332: ",
        "context_after": "1334: \n1335: //\t\tAllocConsole();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1335,
        "text": "AllocConsole();",
        "context_before": "1333: \t//////////////////////////////////////////////////////////////\n1334: ",
        "context_after": "1336: //\t\tfreopen (\"CONOUT$\", \"w\", stdout);\n1337: //\t\tprintf(\"%i,%i\\n\", ci.freq, ci.chans);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1336,
        "text": "freopen (\"CONOUT$\", \"w\", stdout);",
        "context_before": "1334: \n1335: //\t\tAllocConsole();",
        "context_after": "1337: //\t\tprintf(\"%i,%i\\n\", ci.freq, ci.chans);\n1338: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1337,
        "text": "printf(\"%i,%i\\n\", ci.freq, ci.chans);",
        "context_before": "1335: //\t\tAllocConsole();\n1336: //\t\tfreopen (\"CONOUT$\", \"w\", stdout);",
        "context_after": "1338: \n1339: \tstreamMixer = BASS_Mixer_StreamCreate(ci.freq, ci.chans, BASS_SAMPLE_FLOAT|BASS_STREAM_DECODE|BASS_MIXER_POSEX|BASS_MIXER_END);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1348,
        "text": "Reset all channels",
        "context_before": "1346: \tBASS_Mixer_StreamAddChannel(streamMixer, streamPlay, BASS_MIXER_BUFFER);\n1347: ",
        "context_after": "1349: \tif (!BASS_ASIO_Stop())\n1350: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1352,
        "text": "The audio output device encountered an error.",
        "context_before": "1350: \t{\n1351: \t\tif (BASS_ASIO_ErrorGetCode() == BASS_ERROR_INIT &&",
        "context_after": "1353: \t\t\treturn false;\n1354: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1357,
        "text": "enable 1st output channel...",
        "context_before": "1355: \tBASS_ASIO_ChannelReset(FALSE, -1, BASS_ASIO_RESET_ENABLE|BASS_ASIO_RESET_JOIN);\n1356: ",
        "context_after": "1358: \tif (ci.chans == 1) // Enable mirror for mono to make it stereo (I'm not sure that it's right way to do this)\n1359: \t\tBASS_ASIO_ChannelEnableMirror(asioChannel + 1, FALSE, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1363,
        "text": "and join the next channels to it",
        "context_before": "1361: \t{\n1362: \t\tfor (int i = asioChannel + 1; i < (int)ci.chans + asioChannel; ++i)",
        "context_after": "1364: \t}\n1365: \tBASS_ASIO_ChannelSetFormat(FALSE, asioChannel, BASS_ASIO_FORMAT_FLOAT); // set the source format (float)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1365,
        "text": "set the source format (float)",
        "context_before": "1363: \t\t\tBASS_ASIO_ChannelJoin(FALSE, i, asioChannel); // and join the next channels to it\n1364: \t}",
        "context_after": "1366: \tBASS_ASIO_ChannelSetRate(FALSE, asioChannel, ci.freq); // set the source rate\n1367: \tif (!BASS_ASIO_SetRate(ci.freq)) // try to set the device rate too (saves resampling)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1366,
        "text": "set the source rate",
        "context_before": "1364: \t}\n1365: \tBASS_ASIO_ChannelSetFormat(FALSE, asioChannel, BASS_ASIO_FORMAT_FLOAT); // set the source format (float)",
        "context_after": "1367: \tif (!BASS_ASIO_SetRate(ci.freq)) // try to set the device rate too (saves resampling)\n1368: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1367,
        "text": "try to set the device rate too (saves resampling)",
        "context_before": "1365: \tBASS_ASIO_ChannelSetFormat(FALSE, asioChannel, BASS_ASIO_FORMAT_FLOAT); // set the source format (float)\n1366: \tBASS_ASIO_ChannelSetRate(FALSE, asioChannel, ci.freq); // set the source rate",
        "context_after": "1368: \t{\n1369: \t\tif (!BASS_ASIO_SetRate(48000))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1396,
        "text": "If part of cue and not a latest track in cue",
        "context_before": "1394: \t}\n1395: ",
        "context_after": "1397: \tif (cue && CueFile::IsLenght(cue))\n1398: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1427,
        "text": "When Gapless Playback if a new file is already preloaded then free it",
        "context_before": "1425: void LibAudio::PlayURL(const std::wstring& url, bool isReconnect)\n1426: {",
        "context_after": "1428: \tFreePreload();\n1429: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1464,
        "text": "Stop pressed while loading, exit",
        "context_before": "1462: \t\ttimeSecond = 0;\n1463: ",
        "context_after": "1465: \t\t{\n1466: \t\t\tBASS_StreamFree(streamRadio);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1469,
        "text": "URL changed while loading, reload",
        "context_before": "1467: \t\t\tbreak;\n1468: \t\t}",
        "context_after": "1470: \t\t{\n1471: \t\t\tBASS_StreamFree(streamRadio);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1478,
        "text": "Return to GUI thread",
        "context_before": "1476: \t\t\tstreamPlay = streamRadio;\n1477: ",
        "context_after": "1479: \t\t\t::PostMessage(wndWinyl->Wnd(), UWM_RADIOSTART, error, isRadioReconnect);\n1480: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1525,
        "text": "http://www.un4seen.com/forum/?topic=12314.0;hl=get+bitrate",
        "context_before": "1523: \t}\n1524: ",
        "context_after": "1526: \tQWORD bufLen = BASS_StreamGetFilePosition(streamPlay, BASS_FILEPOS_END);\n1527: \tif (bufLen != -1)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1540,
        "text": "Test code to open url with offset",
        "context_before": "1538: \t\tisRadioStream = false;\n1539: ",
        "context_after": "1541: \t//radioLength = BASS_StreamGetFilePosition(streamPlay, BASS_FILEPOS_SIZE);\n1542: \t//if (radioOffset == 0 && radioLength != -1)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1541,
        "text": "radioLength = BASS_StreamGetFilePosition(streamPlay, BASS_FILEPOS_SIZE);",
        "context_before": "1539: \n1540: \t// Test code to open url with offset",
        "context_after": "1542: \t//if (radioOffset == 0 && radioLength != -1)\n1543: \t//{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1542,
        "text": "if (radioOffset == 0 && radioLength != -1)",
        "context_before": "1540: \t// Test code to open url with offset\n1541: \t//radioLength = BASS_StreamGetFilePosition(streamPlay, BASS_FILEPOS_SIZE);",
        "context_after": "1543: \t//{\n1544: \t//\tradioLength -= BASS_StreamGetFilePosition(streamPlay, BASS_FILEPOS_START);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1544,
        "text": "radioLength -= BASS_StreamGetFilePosition(streamPlay, BASS_FILEPOS_START);",
        "context_before": "1542: \t//if (radioOffset == 0 && radioLength != -1)\n1543: \t//{",
        "context_after": "1545: \t//\tbyteLength = BASS_ChannelGetLength(streamPlay, BASS_POS_BYTE);\n1546: \t//\ttimeSecond = BASS_ChannelBytes2Seconds(streamPlay, byteLength);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1545,
        "text": "byteLength = BASS_ChannelGetLength(streamPlay, BASS_POS_BYTE);",
        "context_before": "1543: \t//{\n1544: \t//\tradioLength -= BASS_StreamGetFilePosition(streamPlay, BASS_FILEPOS_START);",
        "context_after": "1546: \t//\ttimeSecond = BASS_ChannelBytes2Seconds(streamPlay, byteLength);\n1547: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1546,
        "text": "timeSecond = BASS_ChannelBytes2Seconds(streamPlay, byteLength);",
        "context_before": "1544: \t//\tradioLength -= BASS_StreamGetFilePosition(streamPlay, BASS_FILEPOS_START);\n1545: \t//\tbyteLength = BASS_ChannelGetLength(streamPlay, BASS_POS_BYTE);",
        "context_after": "1547: \t//}\n1548: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1549,
        "text": "/////////////////////////////////////",
        "context_before": "1547: \t//}\n1548: ",
        "context_after": "1550: \n1551: \tisMediaPlay = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1599,
        "text": "QWORD qSize = BASS_ChannelGetLength(mainChan, BASS_POS_BYTE);",
        "context_before": "1597: \t\treturn 0;\n1598: ",
        "context_after": "1600: \tQWORD pos = 0;\n1601: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1603,
        "text": "+ posPlus;",
        "context_before": "1601: \n1602: \tif (bassDriver == 0)",
        "context_after": "1604: \t\t//pos = BASS_ChannelGetPosition(streamMixer, BASS_POS_BYTE);\n1605: \telse if (bassDriver == 1 || bassDriver == 2)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1604,
        "text": "pos = BASS_ChannelGetPosition(streamMixer, BASS_POS_BYTE);",
        "context_before": "1602: \tif (bassDriver == 0)\n1603: \t\tpos = BASS_Mixer_ChannelGetPosition(streamPlay, BASS_POS_BYTE);// + posPlus;",
        "context_after": "1605: \telse if (bassDriver == 1 || bassDriver == 2)\n1606: \t\tpos = BASS_Mixer_ChannelGetPosition(streamPlay, BASS_POS_BYTE) + posPlus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1622,
        "text": "+ posPlus;",
        "context_before": "1620: \n1621: \tif (bassDriver == 0)",
        "context_after": "1623: \t\t//qPos = BASS_ChannelGetPosition(streamMixer, BASS_POS_BYTE);\n1624: \telse if (bassDriver == 1 || bassDriver == 2)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1623,
        "text": "qPos = BASS_ChannelGetPosition(streamMixer, BASS_POS_BYTE);",
        "context_before": "1621: \tif (bassDriver == 0)\n1622: \t\tpos = BASS_Mixer_ChannelGetPosition(streamPlay, BASS_POS_BYTE);// + posPlus;",
        "context_after": "1624: \telse if (bassDriver == 1 || bassDriver == 2)\n1625: \t\tpos = BASS_Mixer_ChannelGetPosition(streamPlay, BASS_POS_BYTE) + posPlus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1635,
        "text": "mm:ss:ff (minute-second-frame) format - http://www.un4seen.com/forum/?topic=15777.0",
        "context_before": "1633: \t\treturn;\n1634: ",
        "context_after": "1636: \t//bytepos=BASS_ChannelSeconds2Bytes(stream, minutes*60.0+seconds+frames/75.0);\n1637: \t//BASS_ChannelSetPosition(stream, bytepos, BASS_POS_BYTE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1636,
        "text": "bytepos=BASS_ChannelSeconds2Bytes(stream, minutes*60.0+seconds+frames/75.0);",
        "context_before": "1634: \n1635: \t// mm:ss:ff (minute-second-frame) format - http://www.un4seen.com/forum/?topic=15777.0",
        "context_after": "1637: \t//BASS_ChannelSetPosition(stream, bytepos, BASS_POS_BYTE);\n1638: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1637,
        "text": "BASS_ChannelSetPosition(stream, bytepos, BASS_POS_BYTE);",
        "context_before": "1635: \t// mm:ss:ff (minute-second-frame) format - http://www.un4seen.com/forum/?topic=15777.0\n1636: \t//bytepos=BASS_ChannelSeconds2Bytes(stream, minutes*60.0+seconds+frames/75.0);",
        "context_after": "1638: \n1639: \t// Preloaded stream can be already added into the mixer, this is more likely for DirectSound because"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1640,
        "text": "the stream added to the mixer a second before a new track starts but it possible for WASAPI/ASIO too",
        "context_before": "1638: \n1639: \t// Preloaded stream can be already added into the mixer, this is more likely for DirectSound because",
        "context_after": "1641: \t// so remove the stream from the mixer or it will cause a problem when a new stream will be added to the mixer.\n1642: \t// Reminder: How to reproduce the bug: move a track slider back when the stream is already added to the mixer."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1641,
        "text": "so remove the stream from the mixer or it will cause a problem when a new stream will be added to the mixer.",
        "context_before": "1639: \t// Preloaded stream can be already added into the mixer, this is more likely for DirectSound because\n1640: \t// the stream added to the mixer a second before a new track starts but it possible for WASAPI/ASIO too",
        "context_after": "1642: \t// Reminder: How to reproduce the bug: move a track slider back when the stream is already added to the mixer.\n1643: \tif (streamPreload && BASS_Mixer_ChannelGetMixer(streamPreload))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1642,
        "text": "Reminder: How to reproduce the bug: move a track slider back when the stream is already added to the mixer.",
        "context_before": "1640: \t// the stream added to the mixer a second before a new track starts but it possible for WASAPI/ASIO too\n1641: \t// so remove the stream from the mixer or it will cause a problem when a new stream will be added to the mixer.",
        "context_after": "1643: \tif (streamPreload && BASS_Mixer_ChannelGetMixer(streamPreload))\n1644: \t\tBASS_Mixer_ChannelRemove(streamPreload);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1683,
        "text": "Reminder: How to directly set mixer pos",
        "context_before": "1681: \t\tStartPlayASIO(true, true);\n1682: ",
        "context_after": "1684: //\tBASS_ChannelStop(streamMixer);\n1685: //\tBASS_Mixer_ChannelSetPosition(streamPlay, (QWORD)iPosition * byteLength / 100000, BASS_POS_BYTE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1684,
        "text": "BASS_ChannelStop(streamMixer);",
        "context_before": "1682: \n1683: \t// Reminder: How to directly set mixer pos",
        "context_after": "1685: //\tBASS_Mixer_ChannelSetPosition(streamPlay, (QWORD)iPosition * byteLength / 100000, BASS_POS_BYTE);\n1686: //\tBASS_ChannelPlay(streamMixer, TRUE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1685,
        "text": "BASS_Mixer_ChannelSetPosition(streamPlay, (QWORD)iPosition * byteLength / 100000, BASS_POS_BYTE);",
        "context_before": "1683: \t// Reminder: How to directly set mixer pos\n1684: //\tBASS_ChannelStop(streamMixer);",
        "context_after": "1686: //\tBASS_ChannelPlay(streamMixer, TRUE);\n1687: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1686,
        "text": "BASS_ChannelPlay(streamMixer, TRUE);",
        "context_before": "1684: //\tBASS_ChannelStop(streamMixer);\n1685: //\tBASS_Mixer_ChannelSetPosition(streamPlay, (QWORD)iPosition * byteLength / 100000, BASS_POS_BYTE);",
        "context_after": "1687: }\n1688: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1713,
        "text": "When Gapless Playback if a new file is already preloaded then free it",
        "context_before": "1711: void LibAudio::Stop()\n1712: {",
        "context_after": "1714: \tFreePreload();\n1715: \tResetCueSync();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1733,
        "text": "Use BASS_STREAM_AUTOFREE without sync.",
        "context_before": "1731: \t\telse\n1732: \t\t{",
        "context_after": "1734: \t\t\tassert(!(BASS_ChannelFlags(streamMixer, 0, 0) & BASS_STREAM_DECODE));\n1735: \t\t\tverify(BASS_Mixer_ChannelFlags(streamPlay, BASS_STREAM_AUTOFREE, BASS_STREAM_AUTOFREE) != -1); // Important!"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1737,
        "text": "BASS_ChannelSetSync(streamMixer, BASS_SYNC_SLIDE|BASS_SYNC_ONETIME, 0, SyncFreeMixer, this);",
        "context_before": "1735: \t\t\tverify(BASS_Mixer_ChannelFlags(streamPlay, BASS_STREAM_AUTOFREE, BASS_STREAM_AUTOFREE) != -1); // Important!\n1736: \t\t\tverify(BASS_ChannelFlags(streamMixer, BASS_STREAM_AUTOFREE, BASS_STREAM_AUTOFREE) != -1); // Important!",
        "context_after": "1738: \t\t\tBASS_ChannelSlideAttribute(streamMixer, BASS_ATTRIB_VOL, -1, FadeTime::Stop);\n1739: \t\t\tstreamPlay = NULL; streamMixer = NULL;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1846,
        "text": "If press pause at the end of a track with big fading then will be a bug (won't play next track).",
        "context_before": "1844: \t\telse\n1845: \t\t{",
        "context_after": "1847: \t\t\t// It fixes this bug (I do not know how it works).\n1848: \t\t\t// Now it fixed other way, see SyncProcGaplessWA function."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1847,
        "text": "It fixes this bug (I do not know how it works).",
        "context_before": "1845: \t\t{\n1846: \t\t\t// If press pause at the end of a track with big fading then will be a bug (won't play next track).",
        "context_after": "1848: \t\t\t// Now it fixed other way, see SyncProcGaplessWA function.\n1849: \t\t\t//if (BASS_ChannelIsActive(streamMixer) == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1848,
        "text": "Now it fixed other way, see SyncProcGaplessWA function.",
        "context_before": "1846: \t\t\t// If press pause at the end of a track with big fading then will be a bug (won't play next track).\n1847: \t\t\t// It fixes this bug (I do not know how it works).",
        "context_after": "1849: \t\t\t//if (BASS_ChannelIsActive(streamMixer) == 0)\n1850: \t\t\t//\tBASS_ChannelSetPosition(streamMixer, 0, BASS_POS_BYTE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1849,
        "text": "if (BASS_ChannelIsActive(streamMixer) == 0)",
        "context_before": "1847: \t\t\t// It fixes this bug (I do not know how it works).\n1848: \t\t\t// Now it fixed other way, see SyncProcGaplessWA function.",
        "context_after": "1850: \t\t\t//\tBASS_ChannelSetPosition(streamMixer, 0, BASS_POS_BYTE);\n1851: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1850,
        "text": "BASS_ChannelSetPosition(streamMixer, 0, BASS_POS_BYTE);",
        "context_before": "1848: \t\t\t// Now it fixed other way, see SyncProcGaplessWA function.\n1849: \t\t\t//if (BASS_ChannelIsActive(streamMixer) == 0)",
        "context_after": "1851: \n1852: \t\t\tBASS_ChannelSlideAttribute(streamPlay, BASS_ATTRIB_VOL, realVolume, FadeTime::Pause);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1863,
        "text": "If press pause at the end of a track with big fading then will be a bug (won't play next track).",
        "context_before": "1861: \t\telse\n1862: \t\t{",
        "context_after": "1864: \t\t\t// It fixes this bug (I do not know how it works).\n1865: \t\t\t// Now it fixed other way, see SyncProcGaplessWA function."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1864,
        "text": "It fixes this bug (I do not know how it works).",
        "context_before": "1862: \t\t{\n1863: \t\t\t// If press pause at the end of a track with big fading then will be a bug (won't play next track).",
        "context_after": "1865: \t\t\t// Now it fixed other way, see SyncProcGaplessWA function.\n1866: \t\t\t//if (BASS_ChannelIsActive(streamMixer) == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1865,
        "text": "Now it fixed other way, see SyncProcGaplessWA function.",
        "context_before": "1863: \t\t\t// If press pause at the end of a track with big fading then will be a bug (won't play next track).\n1864: \t\t\t// It fixes this bug (I do not know how it works).",
        "context_after": "1866: \t\t\t//if (BASS_ChannelIsActive(streamMixer) == 0)\n1867: \t\t\t//\tBASS_ChannelSetPosition(streamMixer, 0, BASS_POS_BYTE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1866,
        "text": "if (BASS_ChannelIsActive(streamMixer) == 0)",
        "context_before": "1864: \t\t\t// It fixes this bug (I do not know how it works).\n1865: \t\t\t// Now it fixed other way, see SyncProcGaplessWA function.",
        "context_after": "1867: \t\t\t//\tBASS_ChannelSetPosition(streamMixer, 0, BASS_POS_BYTE);\n1868: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1867,
        "text": "BASS_ChannelSetPosition(streamMixer, 0, BASS_POS_BYTE);",
        "context_before": "1865: \t\t\t// Now it fixed other way, see SyncProcGaplessWA function.\n1866: \t\t\t//if (BASS_ChannelIsActive(streamMixer) == 0)",
        "context_after": "1868: \n1869: \t\t\tBASS_ChannelSlideAttribute(streamPlay, BASS_ATTRIB_VOL, realVolume, FadeTime::Pause);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1877,
        "text": "assert(user == NULL);",
        "context_before": "1875: void LibAudio::SyncFreePlay(HSYNC handle, DWORD channel, DWORD data, void* user)\n1876: {",
        "context_after": "1878: \t//verify(BASS_StreamFree(channel) == TRUE); // streamPlay\n1879: \tLibAudio* libAudio = static_cast<LibAudio*>(user);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1878,
        "text": "verify(BASS_StreamFree(channel) == TRUE); // streamPlay",
        "context_before": "1876: {\n1877: \t//assert(user == NULL);",
        "context_after": "1879: \tLibAudio* libAudio = static_cast<LibAudio*>(user);\n1880: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1885,
        "text": "void LibAudio::SyncFreeMixer(HSYNC handle, DWORD channel, DWORD data, void* user)",
        "context_before": "1883: }\n1884: ",
        "context_after": "1886: //{\n1887: //\t//assert(user != NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1887,
        "text": "//assert(user != NULL);",
        "context_before": "1885: //void LibAudio::SyncFreeMixer(HSYNC handle, DWORD channel, DWORD data, void* user)\n1886: //{",
        "context_after": "1888: //\t//verify(BASS_StreamFree(channel) == TRUE); // streamMixer\n1889: //\t//verify(BASS_StreamFree((HSTREAM)(DWORD_PTR)user) == TRUE); // streamPlay"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1888,
        "text": "//verify(BASS_StreamFree(channel) == TRUE); // streamMixer",
        "context_before": "1886: //{\n1887: //\t//assert(user != NULL);",
        "context_after": "1889: //\t//verify(BASS_StreamFree((HSTREAM)(DWORD_PTR)user) == TRUE); // streamPlay\n1890: //\tLibAudio* libAudio = static_cast<LibAudio*>(user);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1889,
        "text": "//verify(BASS_StreamFree((HSTREAM)(DWORD_PTR)user) == TRUE); // streamPlay",
        "context_before": "1887: //\t//assert(user != NULL);\n1888: //\t//verify(BASS_StreamFree(channel) == TRUE); // streamMixer",
        "context_after": "1890: //\tLibAudio* libAudio = static_cast<LibAudio*>(user);\n1891: //"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1890,
        "text": "LibAudio* libAudio = static_cast<LibAudio*>(user);",
        "context_before": "1888: //\t//verify(BASS_StreamFree(channel) == TRUE); // streamMixer\n1889: //\t//verify(BASS_StreamFree((HSTREAM)(DWORD_PTR)user) == TRUE); // streamPlay",
        "context_after": "1891: //\n1892: //\tif (libAudio->wndWinyl->IsWnd())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1892,
        "text": "if (libAudio->wndWinyl->IsWnd())",
        "context_before": "1890: //\tLibAudio* libAudio = static_cast<LibAudio*>(user);\n1891: //",
        "context_after": "1893: //\t\t::PostMessage(libAudio->wndWinyl->Wnd(), UWM_BASSCHFREE, 0, (LPARAM)channel);\n1894: //}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1982,
        "text": "BASS_ChannelSetAttribute(streamPlay, BASS_ATTRIB_VOL, 0);",
        "context_before": "1980: \t{\n1981: \t\trealVolume = 0.0f;",
        "context_after": "1983: \t\tif (bassDriver == 0)\n1984: \t\t\tBASS_ChannelSlideAttribute(streamMixer, BASS_ATTRIB_VOL, 0.0f, FadeTime::Mute);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1991,
        "text": "BASS_ChannelSetAttribute(streamPlay, BASS_ATTRIB_VOL, realVolume);",
        "context_before": "1989: \t{\n1990: \t\trealVolume = soundVolume;",
        "context_after": "1992: \t\tif (bassDriver == 0)\n1993: \t\t\tBASS_ChannelSlideAttribute(streamMixer, BASS_ATTRIB_VOL, realVolume, FadeTime::Mute);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2013,
        "text": "Validate band range",
        "context_before": "2011: \tEQ_DEBUG_LOGF(\"SetEq called: band=%d, gain=%.2f\", band, gain);\n2012: ",
        "context_after": "2014: \tif (band < 0 || band >= 10) {\n2015: \t\tEQ_DEBUG_LOGF(\"ERROR: Invalid band %d (must be 0-9)\", band);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2026,
        "text": "Check if the effect handle for this band is valid",
        "context_before": "2024: \t}\n2025: ",
        "context_after": "2027: \tif (fxEqualizer[band] == 0) {\n2028: \t\tEQ_DEBUG_LOGF(\"ERROR: fxEqualizer[%d] is 0 - EQ effect not initialized!\", band);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2032,
        "text": "Use BASS_DX8_PARAMEQ structure for built-in BASS effect",
        "context_before": "2030: \t}\n2031: ",
        "context_after": "2033: \tBASS_DX8_PARAMEQ eq;\n2034: \teq.fCenter = eqFrequencies[band];  // Use frequency from our array"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2034,
        "text": "Use frequency from our array",
        "context_before": "2032: \t// Use BASS_DX8_PARAMEQ structure for built-in BASS effect\n2033: \tBASS_DX8_PARAMEQ eq;",
        "context_after": "2035: \teq.fGain = gain;                  // Gain in dB\n2036: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2035,
        "text": "Gain in dB",
        "context_before": "2033: \tBASS_DX8_PARAMEQ eq;\n2034: \teq.fCenter = eqFrequencies[band];  // Use frequency from our array",
        "context_after": "2036: \n2037: \t// CRITICAL FIX: Use valid DirectX 8 bandwidth value (1.0-36.0 semitones)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2037,
        "text": "CRITICAL FIX: Use valid DirectX 8 bandwidth value (1.0-36.0 semitones)",
        "context_before": "2035: \teq.fGain = gain;                  // Gain in dB\n2036: ",
        "context_after": "2038: \t// Bandwidth options: 6.0f (narrow/surgical), 12.0f (default/balanced), 18.0f (wide/musical)\n2039: \teq.fBandwidth = 18.0f;  // Wide bandwidth for musical EQ character (original Winyl approach)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2038,
        "text": "Bandwidth options: 6.0f (narrow/surgical), 12.0f (default/balanced), 18.0f (wide/musical)",
        "context_before": "2036: \n2037: \t// CRITICAL FIX: Use valid DirectX 8 bandwidth value (1.0-36.0 semitones)",
        "context_after": "2039: \teq.fBandwidth = 18.0f;  // Wide bandwidth for musical EQ character (original Winyl approach)\n2040: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2039,
        "text": "Wide bandwidth for musical EQ character (original Winyl approach)",
        "context_before": "2037: \t// CRITICAL FIX: Use valid DirectX 8 bandwidth value (1.0-36.0 semitones)\n2038: \t// Bandwidth options: 6.0f (narrow/surgical), 12.0f (default/balanced), 18.0f (wide/musical)",
        "context_after": "2040: \n2041: \t// Apply the parameters to the specific band effect"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2041,
        "text": "Apply the parameters to the specific band effect",
        "context_before": "2039: \teq.fBandwidth = 18.0f;  // Wide bandwidth for musical EQ character (original Winyl approach)\n2040: ",
        "context_after": "2042: \tif (!BASS_FXSetParameters(fxEqualizer[band], (void*)&eq)) {\n2043: \t\tint error = BASS_ErrorGetCode();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2061,
        "text": "Set current to target (no fade)",
        "context_before": "2059: \tBASS_FX_VOLUME_PARAM fv;\n2060: \tfv.fTarget = (float)pow(10, (preamp / 20));",
        "context_after": "2062: \tfv.fTime = 0;              // No fade time\n2063: \tfv.lCurve = 0;             // Linear curve"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2062,
        "text": "No fade time",
        "context_before": "2060: \tfv.fTarget = (float)pow(10, (preamp / 20));\n2061: \tfv.fCurrent = fv.fTarget;  // Set current to target (no fade)",
        "context_after": "2063: \tfv.lCurve = 0;             // Linear curve\n2064: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2063,
        "text": "Linear curve",
        "context_before": "2061: \tfv.fCurrent = fv.fTarget;  // Set current to target (no fade)\n2062: \tfv.fTime = 0;              // No fade time",
        "context_after": "2064: \n2065: \tEQ_DEBUG_LOGF(\"Calling BASS_FXSetParameters with fxPreamp=%d, volume=%.3f\", fxPreamp, fv.fTarget);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2082,
        "text": "For WASAPI/ASIO, effects must be applied to mixer stream, not decoded source stream",
        "context_before": "2080: \t}\n2081: ",
        "context_after": "2083: \tHSTREAM hChannel;\n2084: \tif (bassDriver == 1 || bassDriver == 2) {"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2085,
        "text": "WASAPI/ASIO: Apply effects to mixer stream (where audio is actually processed)",
        "context_before": "2083: \tHSTREAM hChannel;\n2084: \tif (bassDriver == 1 || bassDriver == 2) {",
        "context_after": "2086: \t\thChannel = streamMixer;\n2087: \t\tEQ_DEBUG_LOGF(\"WASAPI/ASIO: Applying equalizer to MIXER stream %d (not source %d)\", hChannel, streamPlay);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2089,
        "text": "CRITICAL CHECK: Verify mixer stream is valid",
        "context_before": "2087: \t\tEQ_DEBUG_LOGF(\"WASAPI/ASIO: Applying equalizer to MIXER stream %d (not source %d)\", hChannel, streamPlay);\n2088: ",
        "context_after": "2090: \t\tif (hChannel == 0 || hChannel == NULL) {\n2091: \t\t\tEQ_DEBUG_LOG(\"CRITICAL ERROR: streamMixer is NULL/0 - effects will fail!\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2096,
        "text": "DirectSound: Apply effects to source stream (traditional approach)",
        "context_before": "2094: \t\t}\n2095: \t} else {",
        "context_after": "2097: \t\thChannel = streamPlay;\n2098: \t\tEQ_DEBUG_LOGF(\"DirectSound: Applying equalizer to SOURCE stream %d (mixer %d)\", hChannel, streamMixer);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2101,
        "text": "Verify final target stream is valid",
        "context_before": "2099: \t}\n2100: ",
        "context_after": "2102: \tEQ_DEBUG_LOGF(\"Final target stream: %d (bassDriver=%d)\", hChannel, bassDriver);\n2103: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2108,
        "text": "Check if channel is valid first",
        "context_before": "2106: \t\tEQ_DEBUG_LOG(\"Attempting to create BASS_FX equalizer effects...\");\n2107: ",
        "context_after": "2109: \t\tBASS_CHANNELINFO ci;\n2110: \t\tif (BASS_ChannelGetInfo(hChannel, &ci)) {"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2118,
        "text": "Try built-in BASS effects instead of BASS_FX library",
        "context_before": "2116: \t\t}\n2117: ",
        "context_after": "2119: \t\tEQ_DEBUG_LOG(\"Creating built-in BASS effects...\");\n2120: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2127,
        "text": "Create 10 separate BASS_FX_DX8_PARAMEQ effects for 10-band equalizer",
        "context_before": "2125: \t\t}\n2126: ",
        "context_after": "2128: \t\tint failedBands = 0;\n2129: \t\tfor (int i = 0; i < 10; i++) {"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2130,
        "text": "Priority 2-11",
        "context_before": "2128: \t\tint failedBands = 0;\n2129: \t\tfor (int i = 0; i < 10; i++) {",
        "context_after": "2131: \t\t\tif (fxEqualizer[i] == 0) {\n2132: \t\t\t\tint error = BASS_ErrorGetCode();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2229,
        "text": "1 decimal place // swprintf 1024",
        "context_before": "2227: \t{\n2228: \t\tchar gain[10] = {};",
        "context_after": "2230: \n2231: \t\txmlGain.AddAttributeRaw(\"Gain\", gain);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2371,
        "text": "if (c == -1) c = 0; // an error, no data",
        "context_before": "2369: {\n2370: \tDWORD c = BASS_ChannelGetData((DWORD)(DWORD_PTR)user, buffer, length);",
        "context_after": "2372: \tif (c == -1) // an error, produce silence\n2373: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2372,
        "text": "an error, produce silence",
        "context_before": "2370: \tDWORD c = BASS_ChannelGetData((DWORD)(DWORD_PTR)user, buffer, length);\n2371: //\tif (c == -1) c = 0; // an error, no data",
        "context_after": "2373: \t{\n2374: \t\tc = length;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2383,
        "text": "if (c == -1) c = 0; // an error, no data",
        "context_before": "2381: {\n2382: \tDWORD c = BASS_ChannelGetData(*(DWORD*)(user), buffer, length);",
        "context_after": "2384: \tif (c == -1) // an error, produce silence\n2385: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2384,
        "text": "an error, produce silence",
        "context_before": "2382: \tDWORD c = BASS_ChannelGetData(*(DWORD*)(user), buffer, length);\n2383: //\tif (c == -1) c = 0; // an error, no data",
        "context_after": "2385: \t{\n2386: \t\tc = length;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 24,
        "text": "#include \"bass/tags.h\"",
        "context_before": "22: #include \"Threading.h\"\n23: #include \"bass/bass.h\"",
        "context_after": "25: #include \"bass/bass_fx.h\"\n26: #include \"bass/bassmix.h\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 30,
        "text": "Forward declaration",
        "context_before": "28: #include \"bass/bassasio.h\"\n29: ",
        "context_after": "31: class WinylWnd;\n32: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 50,
        "text": "Buffer size for DirectSound in ms",
        "context_before": "48: \tstruct Buffer\n49: \t{",
        "context_after": "51: \t\tstatic double WasapiAsio; // Reading buffer size for WASAPI/ASIO in sec\n52: \t\tstatic int BassRead; // Bass reading buffer in bytes, default is 65536"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 51,
        "text": "Reading buffer size for WASAPI/ASIO in sec",
        "context_before": "49: \t{\n50: \t\tstatic int DirectSound; // Buffer size for DirectSound in ms",
        "context_after": "52: \t\tstatic int BassRead; // Bass reading buffer in bytes, default is 65536\n53: \t};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 52,
        "text": "Bass reading buffer in bytes, default is 65536",
        "context_before": "50: \t\tstatic int DirectSound; // Buffer size for DirectSound in ms\n51: \t\tstatic double WasapiAsio; // Reading buffer size for WASAPI/ASIO in sec",
        "context_after": "53: \t};\n54: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 75,
        "text": "Stop playback",
        "context_before": "73: \tvoid SetUserAgent(const std::string& agent);\n74: ",
        "context_after": "76: \tvoid Pause(); // Pause playback\n77: \tvoid Play(); // Resume playback"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 76,
        "text": "Pause playback",
        "context_before": "74: \n75: \tvoid Stop(); // Stop playback",
        "context_after": "77: \tvoid Play(); // Resume playback\n78: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 77,
        "text": "Resume playback",
        "context_before": "75: \tvoid Stop(); // Stop playback\n76: \tvoid Pause(); // Pause playback",
        "context_after": "78: \n79: \tError PlayFile(const std::wstring& file, long long cue);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 98,
        "text": "Not used",
        "context_before": "96: \tinline bool GetMute() {return isSoundMute;}\n97: \tvoid GetFFT(float* fft);",
        "context_after": "99: \n100: \tvoid SetPosition(int position);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 132,
        "text": "Playing stream",
        "context_before": "130: \n131: private:",
        "context_after": "133: \tHSTREAM streamMixer = NULL; // Mixer stream\n134: \tHSTREAM streamPreload = NULL; // Preloaded stream"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 133,
        "text": "Mixer stream",
        "context_before": "131: private:\n132: \tHSTREAM streamPlay = NULL; // Playing stream",
        "context_after": "134: \tHSTREAM streamPreload = NULL; // Preloaded stream\n135: \tstd::wstring filePreload; // Preloaded file"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 134,
        "text": "Preloaded stream",
        "context_before": "132: \tHSTREAM streamPlay = NULL; // Playing stream\n133: \tHSTREAM streamMixer = NULL; // Mixer stream",
        "context_after": "135: \tstd::wstring filePreload; // Preloaded file\n136: \tbool isPreloadRate = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 135,
        "text": "Preloaded file",
        "context_before": "133: \tHSTREAM streamMixer = NULL; // Mixer stream\n134: \tHSTREAM streamPreload = NULL; // Preloaded stream",
        "context_after": "136: \tbool isPreloadRate = false;\n137: \tHSTREAM streamMixerCopyWASAPI = NULL;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 161,
        "text": "Disable volume control",
        "context_before": "159: \tint radioBitrate = 0;\n160: ",
        "context_after": "162: \tbool bassNoEffect = false; // Disable all sound effects\n163: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 162,
        "text": "Disable all sound effects",
        "context_before": "160: \n161: \tbool bassNoVolume = false; // Disable volume control",
        "context_after": "163: \n164: \tBASS_CHANNELINFO oldci;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 166,
        "text": "std::vector<int> channelsASIO;",
        "context_before": "164: \tBASS_CHANNELINFO oldci;\n165: ",
        "context_after": "167: \n168: \tint bassDriver = 0; // 0 - DirecSound, 1 - WASAPI, 2 - ASIO"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 168,
        "text": "0 - DirecSound, 1 - WASAPI, 2 - ASIO",
        "context_before": "166: \t//std::vector<int> channelsASIO;\n167: ",
        "context_after": "169: \tint bassDevice = 0; // BASS device number\n170: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 169,
        "text": "BASS device number",
        "context_before": "167: \n168: \tint bassDriver = 0; // 0 - DirecSound, 1 - WASAPI, 2 - ASIO",
        "context_after": "170: \n171: \tstd::wstring programPath;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 174,
        "text": "Playing file",
        "context_before": "172: \tstd::wstring profilePath;\n173: ",
        "context_after": "175: \tstd::wstring urlThis; // Playing URL address\n176: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 175,
        "text": "Playing URL address",
        "context_before": "173: \n174: \tstd::wstring fileThis; // Playing file",
        "context_after": "176: \n177: \tQWORD byteLength = 0; // Playing file size in bytes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 177,
        "text": "Playing file size in bytes",
        "context_before": "175: \tstd::wstring urlThis; // Playing URL address\n176: ",
        "context_after": "178: \tdouble timeSecond = 0.0; // Playing file length in seconds\n179: \tQWORD byteLengthPreload = 0; // Preloaded file size in bytes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 178,
        "text": "Playing file length in seconds",
        "context_before": "176: \n177: \tQWORD byteLength = 0; // Playing file size in bytes",
        "context_after": "179: \tQWORD byteLengthPreload = 0; // Preloaded file size in bytes\n180: \tdouble timeSecondPreload = 0.0; // Preloaded file length in bytes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 179,
        "text": "Preloaded file size in bytes",
        "context_before": "177: \tQWORD byteLength = 0; // Playing file size in bytes\n178: \tdouble timeSecond = 0.0; // Playing file length in seconds",
        "context_after": "180: \tdouble timeSecondPreload = 0.0; // Preloaded file length in bytes\n181: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 180,
        "text": "Preloaded file length in bytes",
        "context_before": "178: \tdouble timeSecond = 0.0; // Playing file length in seconds\n179: \tQWORD byteLengthPreload = 0; // Preloaded file size in bytes",
        "context_after": "181: \n182: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 183,
        "text": "Thread for radio",
        "context_before": "181: \n182: ",
        "context_after": "184: \n185: \tbool isMediaPlay = false; // Play state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 185,
        "text": "Play state",
        "context_before": "183: \tThreading::Thread threadRadio; // Thread for radio\n184: ",
        "context_after": "186: \tbool isMediaPause = false; // Pause state\n187: \tbool isMediaRadio = false; // Radio state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 186,
        "text": "Pause state",
        "context_before": "184: \n185: \tbool isMediaPlay = false; // Play state",
        "context_after": "187: \tbool isMediaRadio = false; // Radio state\n188: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 187,
        "text": "Radio state",
        "context_before": "185: \tbool isMediaPlay = false; // Play state\n186: \tbool isMediaPause = false; // Pause state",
        "context_after": "188: \n189: \tbool isEqEnable = false; // Equalizer state (on/off)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 189,
        "text": "Equalizer state (on/off)",
        "context_before": "187: \tbool isMediaRadio = false; // Radio state\n188: ",
        "context_after": "190: \n191: \tHFX fxPreamp = NULL; // Preamp Bass_FX"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 191,
        "text": "Preamp Bass_FX",
        "context_before": "189: \tbool isEqEnable = false; // Equalizer state (on/off)\n190: ",
        "context_after": "192: \tHFX fxEqualizer[10]; // 10-band Equalizer Bass_FX (each band is separate BASS_FX_DX8_PARAMEQ)\n193: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 192,
        "text": "10-band Equalizer Bass_FX (each band is separate BASS_FX_DX8_PARAMEQ)",
        "context_before": "190: \n191: \tHFX fxPreamp = NULL; // Preamp Bass_FX",
        "context_after": "193: \n194: \tfloat eqPreamp = 0.0f; // Preamp setting in db"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 194,
        "text": "Preamp setting in db",
        "context_before": "192: \tHFX fxEqualizer[10]; // 10-band Equalizer Bass_FX (each band is separate BASS_FX_DX8_PARAMEQ)\n193: ",
        "context_after": "195: \tfloat eqValues[10] = {0.0f}; // Equalizer settings in db\n196: \t// Standard 10-band equalizer frequencies (Hz)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 195,
        "text": "Equalizer settings in db",
        "context_before": "193: \n194: \tfloat eqPreamp = 0.0f; // Preamp setting in db",
        "context_after": "196: \t// Standard 10-band equalizer frequencies (Hz)\n197: \tstatic const float eqFrequencies[10];"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 196,
        "text": "Standard 10-band equalizer frequencies (Hz)",
        "context_before": "194: \tfloat eqPreamp = 0.0f; // Preamp setting in db\n195: \tfloat eqValues[10] = {0.0f}; // Equalizer settings in db",
        "context_after": "197: \tstatic const float eqFrequencies[10];\n198: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 199,
        "text": "Initialize equalizer effect handles to NULL",
        "context_before": "197: \tstatic const float eqFrequencies[10];\n198: ",
        "context_after": "200: \tvoid InitializeEqHandles() {\n201: \t\tfor (int i = 0; i < 10; i++) {"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 205,
        "text": "Name of the equalizer preset",
        "context_before": "203: \t\t}\n204: \t}",
        "context_after": "206: \n207: \tWinylWnd* wndWinyl = nullptr; // Main window (to send messages)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 209,
        "text": "Sound volume",
        "context_before": "207: \tWinylWnd* wndWinyl = nullptr; // Main window (to send messages)\n208: ",
        "context_after": "210: \tfloat realVolume = 1.0f; // Real sound volume (depending on Mute state)\n211: \tbool isSoundMute = false; // Mute state (on/off)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 210,
        "text": "Real sound volume (depending on Mute state)",
        "context_before": "208: \n209: \tfloat soundVolume = 1.0f; // Sound volume",
        "context_after": "211: \tbool isSoundMute = false; // Mute state (on/off)\n212: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 211,
        "text": "Mute state (on/off)",
        "context_before": "209: \tfloat soundVolume = 1.0f; // Sound volume\n210: \tfloat realVolume = 1.0f; // Real sound volume (depending on Mute state)",
        "context_after": "212: \n213: \tDWORD dwSampleEx = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 215,
        "text": "Proxy text line (ANSI)",
        "context_before": "213: \tDWORD dwSampleEx = 0;\n214: ",
        "context_after": "216: \n217: \tvoid ApplyEqualizer();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 228,
        "text": "WASAPI/ASIO proc functions",
        "context_before": "226: \tvoid RunThreadRadio();\n227: ",
        "context_after": "229: \tstatic DWORD CALLBACK AsioProc(BOOL input, DWORD channel, void* buffer, DWORD length, void* user);\n230: \tstatic DWORD CALLBACK WasapiProc(void* buffer, DWORD length, void* user);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 232,
        "text": "Sync functions",
        "context_before": "230: \tstatic DWORD CALLBACK WasapiProc(void* buffer, DWORD length, void* user);\n231: ",
        "context_after": "233: \tstatic void CALLBACK SyncFreePlay(HSYNC handle, DWORD channel, DWORD data, void* user);\n234: \t//static void CALLBACK SyncFreeMixer(HSYNC handle, DWORD channel, DWORD data, void* user);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 234,
        "text": "static void CALLBACK SyncFreeMixer(HSYNC handle, DWORD channel, DWORD data, void* user);",
        "context_before": "232: \t// Sync functions\n233: \tstatic void CALLBACK SyncFreePlay(HSYNC handle, DWORD channel, DWORD data, void* user);",
        "context_after": "235: \tstatic void CALLBACK SyncWASAPIPause(HSYNC handle, DWORD channel, DWORD data, void* user);\n236: \tstatic void CALLBACK SyncASIOPause(HSYNC handle, DWORD channel, DWORD data, void* user);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 240,
        "text": "Gapless Playback functions",
        "context_before": "238: \tstatic void CALLBACK SyncASIOStop(HSYNC handle, DWORD channel, DWORD data, void* user);\n239: ",
        "context_after": "241: \tstatic void CALLBACK SyncProcGaplessWA(HSYNC handle, DWORD channel, DWORD data, void* user);\n242: \tstatic void CALLBACK SyncProcGaplessDS(HSYNC handle, DWORD channel, DWORD data, void* user);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 47,
        "text": "L\"metrolyrics.com\",",
        "context_before": "45: \tL\"letras.mus.br\",\n46: \tL\"lyricsmania.com\",",
        "context_after": "48: \tL\"songlyrics.com\",\n49: \tL\"genius.com\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 238,
        "text": "const char chars[] = \"()[]{}~@#$%^*+=;:_\\\"\\\\\";",
        "context_before": "236: bool LyricsLoader::FilterInputIsValid(const std::string& str)\n237: {",
        "context_after": "239: \tconst char chars[] = \"[]{}~@#$%^*=;:_\\\"\\\\\";\n240: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 291,
        "text": "http://en.wikipedia.org/wiki/Percent-encoding",
        "context_before": "289: std::string LyricsLoader::FilterInputUriEncode(const std::string &str, bool escapeUnsafe)\n290: {",
        "context_after": "292: \n293: \tconst char dexchar[] = \"0123456789ABCDEF\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 300,
        "text": "unreserved",
        "context_before": "298: \tfor (std::size_t i = 0, size = str.size(); i < size; ++i)\n299: \t{",
        "context_after": "301: \t\t\t(str[i] >= 'a' && str[i] <= 'z') || // unreserved\n302: \t\t\t(str[i] >= 'A' && str[i] <= 'Z') || // unreserved"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 301,
        "text": "unreserved",
        "context_before": "299: \t{\n300: \t\tif ((str[i] >= '0' && str[i] <= '9') || // unreserved",
        "context_after": "302: \t\t\t(str[i] >= 'A' && str[i] <= 'Z') || // unreserved\n303: \t\t\tstr[i] == '-' || str[i] == '_' || // unreserved"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 302,
        "text": "unreserved",
        "context_before": "300: \t\tif ((str[i] >= '0' && str[i] <= '9') || // unreserved\n301: \t\t\t(str[i] >= 'a' && str[i] <= 'z') || // unreserved",
        "context_after": "303: \t\t\tstr[i] == '-' || str[i] == '_' || // unreserved\n304: \t\t\tstr[i] == '.' || str[i] == '~' || // unreserved"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 303,
        "text": "unreserved",
        "context_before": "301: \t\t\t(str[i] >= 'a' && str[i] <= 'z') || // unreserved\n302: \t\t\t(str[i] >= 'A' && str[i] <= 'Z') || // unreserved",
        "context_after": "304: \t\t\tstr[i] == '.' || str[i] == '~' || // unreserved\n305: \t\t\t(!escapeUnsafe && strchr(reserved, str[i]) != nullptr)) // reserved"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 304,
        "text": "unreserved",
        "context_before": "302: \t\t\t(str[i] >= 'A' && str[i] <= 'Z') || // unreserved\n303: \t\t\tstr[i] == '-' || str[i] == '_' || // unreserved",
        "context_after": "305: \t\t\t(!escapeUnsafe && strchr(reserved, str[i]) != nullptr)) // reserved\n306: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 305,
        "text": "reserved",
        "context_before": "303: \t\t\tstr[i] == '-' || str[i] == '_' || // unreserved\n304: \t\t\tstr[i] == '.' || str[i] == '~' || // unreserved",
        "context_after": "306: \t\t{\n307: \t\t\tresult.push_back(str[i]);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 375,
        "text": "Remove all \\r\\n",
        "context_before": "373: std::string LyricsLoader::FilterOutputHtmlTags(const std::string &str, bool encode, bool prn, bool p2rn, bool plain)\n374: {",
        "context_after": "376: \t// <br/> tag = \\r\\n\n377: \t// <p> tag = \\r\\n\\r\\n"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 376,
        "text": "<br/> tag = \\r\\n",
        "context_before": "374: {\n375: \t// Remove all \\r\\n",
        "context_after": "377: \t// <p> tag = \\r\\n\\r\\n\n378: \t// Remove all HTML tags"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 377,
        "text": "<p> tag = \\r\\n\\r\\n",
        "context_before": "375: \t// Remove all \\r\\n\n376: \t// <br/> tag = \\r\\n",
        "context_after": "378: \t// Remove all HTML tags\n379: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 378,
        "text": "Remove all HTML tags",
        "context_before": "376: \t// <br/> tag = \\r\\n\n377: \t// <p> tag = \\r\\n\\r\\n",
        "context_after": "379: \n380: \tstd::string result;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 416,
        "text": "skip everything if inside tag",
        "context_before": "414: \t\t\tstart = find + 1;\n415: \t\t}",
        "context_after": "417: \t\t{\n418: \t\t\tif (str[find] == '\\0') // except null char"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 418,
        "text": "except null char",
        "context_before": "416: \t\telse if (intag) // skip everything if inside tag\n417: \t\t{",
        "context_after": "419: \t\t\t\tbreak;\n420: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 421,
        "text": "\\r\\n - Windows new line",
        "context_before": "419: \t\t\t\tbreak;\n420: \t\t}",
        "context_after": "422: \t\t{\n423: \t\t\tif (encode)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 436,
        "text": "\\n - Unix new line",
        "context_before": "434: \t\t\t\tresult.append(\"\\r\\n\");\n435: \t\t}",
        "context_after": "437: \t\t{\n438: \t\t\tif (encode)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 457,
        "text": "ignore tabs inside lyrics",
        "context_before": "455: \t\t\tbreak;\n456: \t\t}",
        "context_after": "458: \t\t{\n459: \t\t\tstart = find + 1;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 468,
        "text": "Encode HTML in format &#123;&#234; to UTF8 text",
        "context_before": "466: void LyricsLoader::FilterOutputHtmlEncode(const std::string &src, std::size_t start, std::size_t end, std::string &dst)\n467: {",
        "context_after": "469: \t// http://en.wikipedia.org/wiki/Character_encodings_in_HTML\n470: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 469,
        "text": "http://en.wikipedia.org/wiki/Character_encodings_in_HTML",
        "context_before": "467: {\n468: \t// Encode HTML in format &#123;&#234; to UTF8 text",
        "context_after": "470: \n471: \tif (start >= end || end > src.size())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 487,
        "text": "To UTF8",
        "context_before": "485: \t\t\tif (num > 0)\n486: \t\t\t{",
        "context_after": "488: \t\t\t\tif (num <= 0x7F)\n489: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 500,
        "text": "Surrogate pairs are illegal in UTF-8",
        "context_before": "498: \t\t\t\telse if (num <= 0xFFFF)\n499: \t\t\t\t{",
        "context_after": "501: \t\t\t\t\tif (num < 0xD800 || num > 0xDFFF)\n502: \t\t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 542,
        "text": "lyrics.wikia.com/wiki/\" + artist + \":\" + title;",
        "context_before": "540: \ttitle = FilterInputUriEncode(title, true);\n541: ",
        "context_after": "543: \n544: \tif (HttpClient::GetHttpPage(url, lyrics))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 557,
        "text": "std::string url = \"http://lyrics.wikia.com/\" + artist + \":\" + title + \"?action=edit\"; if (HttpClient::GetHttpPage(url, lyrics)) { if (!lyrics.empty()) { lyrics = FilterOutputFromTo(lyrics, \"&lt;lyrics>\", \"&lt;/lyrics>\"); if (!lyrics.empty()) FilterOutputTrim(lyrics); } }",
        "context_before": "555: \t\t}\n556: \t}",
        "context_after": "572: }\n573: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 576,
        "text": "plyrics.com",
        "context_before": "574: std::string LyricsLoader::ProviderAZLyricsCom(const std::string& urlArtist, const std::string& urlTitle)\n575: {",
        "context_after": "577: \t// urbanlyrics.com\n578: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 577,
        "text": "urbanlyrics.com",
        "context_before": "575: {\n576: \t// plyrics.com",
        "context_after": "578: \n579: \tstd::string lyrics;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 586,
        "text": "www.azlyrics.com/lyrics/\" + artist + \"/\" + title + \".html\";",
        "context_before": "584: \tFilterInputLowerAscii(title);\n585: ",
        "context_after": "587: \n588: \tif (HttpClient::GetHttpPage(url, lyrics))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 614,
        "text": "www.metrolyrics.com/\" + title + \"-lyrics-\" + artist + \".html\";",
        "context_before": "612: \tFilterInputLowerAscii(title);\n613: ",
        "context_after": "615: \n616: \tif (HttpClient::GetHttpPage(url, lyrics))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 642,
        "text": "www.songlyrics.com/\" + artist + \"/\" + title + \"-lyrics\" + \"/\";",
        "context_before": "640: \tFilterInputLowerAscii(title);\n641: ",
        "context_after": "643: \n644: \tif (HttpClient::GetHttpPage(url, lyrics))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 670,
        "text": "www.oldielyrics.com/lyrics/\" + artist + \"/\" + title + \".html\";",
        "context_before": "668: \tFilterInputLowerAscii(title);\n669: ",
        "context_after": "671: \n672: \tif (HttpClient::GetHttpPage(url, lyrics))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 696,
        "text": "api.chartlyrics.com/apiv1.asmx/SearchLyricDirect?artist=\" + artist + \"&song=\" + title;",
        "context_before": "694: \tstd::string title = FilterInputUriEncode(urlTitle, true);\n695: ",
        "context_after": "697: \n698: \tstd::string apixml;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 730,
        "text": "www.lyricsmania.com/\" + title + \"_lyrics_\" + artist + \".html\";",
        "context_before": "728: \tFilterInputLowerAscii(title);\n729: ",
        "context_after": "731: \n732: \tif (HttpClient::GetHttpPage(url, lyrics))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 758,
        "text": "genius.com/\" + artist + \"-\" + title + \"-lyrics\";",
        "context_before": "756: \tFilterInputLowerAscii(title);\n757: ",
        "context_after": "759: \n760: \tif (HttpClient::GetHttpPage(url, lyrics))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 786,
        "text": "www.letras.mus.br/winamp.php?musica=\" + title + \"&artista=\" + artist;",
        "context_before": "784: \tFilterInputLowerAscii(title);\n785: ",
        "context_after": "787: \n788: \tif (HttpClient::GetHttpPage(url, lyrics))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 814,
        "text": "www.musixmatch.com/lyrics/\" + artist + \"/\" + title;",
        "context_before": "812: \tFilterInputLowerAscii(title);\n813: ",
        "context_after": "815: \n816: \tif (HttpClient::GetHttpPage(url, lyrics))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 822,
        "text": "Remove script part",
        "context_before": "820: \t\t\tlyrics = FilterOutputFromTo(lyrics, \"<p class=\\\"mxm-lyrics__content \\\">\", \"</span></p></div></span>\");\n821: ",
        "context_after": "823: \t\t\tif (!lyrics.empty())\n824: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LyricsLoader.cpp",
        "line": 825,
        "text": "\"googletag.cmd.push\";",
        "context_before": "823: \t\t\tif (!lyrics.empty())\n824: \t\t\t{",
        "context_after": "826: \t\t\t\tstd::string to = \"});\";\n827: \t\t\t\tstd::size_t findFrom = lyrics.find(from);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MessageBox.cpp",
        "line": 97,
        "text": "| 0x10000000; // 0x10000000 = TDF_SIZE_TO_CONTENT",
        "context_before": "95: \tconfig.hwndParent = parent;\n96: \tconfig.hInstance = NULL;",
        "context_after": "98: \tconfig.cxWidth = 0;\n99: \tconfig.pszWindowTitle = title;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MessageBox.cpp",
        "line": 121,
        "text": "Similar to: MFC -> wincore.cpp -> void CWnd::CenterWindow(CWnd* pAlternateOwner)",
        "context_before": "119: \tif (nCode == HCBT_ACTIVATE)\n120: \t{",
        "context_after": "122: \n123: \t\tHWND hDlg = (HWND)wParam;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Messengers.cpp",
        "line": 35,
        "text": "if (csArtist.IsEmpty()) csSend = L\"\\\\0Music\\\\01\\\\0{0}\\\\0\" + csTitle + L\"\\\\0WMContentID\\\\0\"; else if (!csTitle.IsEmpty()) csSend = L\"\\\\0Music\\\\01\\\\0{0} - {1}\\\\0\" + csTitle + L\"\\\\0\" + csArtist  + L\"\\\\0WMContentID\\\\0\"; else csSend = L\"\\\\0Music\\\\01\\\\0\\\\0WMContentID\\\\0\"; // Stop",
        "context_before": "33: \tstd::wstring send;\n34: ",
        "context_after": "42: \tif (artist.empty())\n43: \t\tsend = L\"\\\\0Music\\\\01\\\\0{0}\\\\0\" + title + L\"\\\\0\\\\0\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Messengers.cpp",
        "line": 50,
        "text": "MSN_MAGIC_NUMBER;",
        "context_before": "48: \n49: \tCOPYDATASTRUCT cd;",
        "context_after": "51: \tcd.cbData = ((int)send.size() + 1) * sizeof(wchar_t);\n52: \tcd.lpData = (PVOID)send.c_str();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Messengers.cpp",
        "line": 63,
        "text": "CString csSend = L\"\\\\0Music\\\\01\\\\0\\\\0WMContentID\\\\0\";",
        "context_before": "61: void Messengers::MSNStop()\n62: {",
        "context_after": "64: \tstd::wstring send = L\"\\\\0Music\\\\00\\\\0\\\\0\";\n65: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Messengers.cpp",
        "line": 67,
        "text": "MSN_MAGIC_NUMBER;",
        "context_before": "65: \n66: \tCOPYDATASTRUCT cd;",
        "context_after": "68: \tcd.cbData = ((int)send.size() + 1) * sizeof(wchar_t);\n69: \tcd.lpData = (PVOID)send.c_str();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MoveResize.cpp",
        "line": 113,
        "text": "The following code uses some undocumented features",
        "context_before": "111: \t\tmouseType = GetMouseType(point);\n112: ",
        "context_after": "114: \t// SC_MOVE part is used by many programs like: WMP, iTunes, .NET (DragMove) so it should be fine\n115: \t// SC_SIZE part is pure magic (I just don't remember where I found it maybe I just used Spy++ to get it)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MoveResize.cpp",
        "line": 114,
        "text": "SC_MOVE part is used by many programs like: WMP, iTunes, .NET (DragMove) so it should be fine",
        "context_before": "112: \n113: \t// The following code uses some undocumented features",
        "context_after": "115: \t// SC_SIZE part is pure magic (I just don't remember where I found it maybe I just used Spy++ to get it)\n116: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MoveResize.cpp",
        "line": 117,
        "text": "Some magic stuff",
        "context_before": "115: \t// SC_SIZE part is pure magic (I just don't remember where I found it maybe I just used Spy++ to get it)\n116: ",
        "context_after": "118: \tswitch (mouseType)\n119: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MoveResize.cpp",
        "line": 149,
        "text": "Don't forget to release the button",
        "context_before": "147: \t}\n148: ",
        "context_after": "150: \t::SendMessage(wnd, WM_LBUTTONUP, NULL, MAKELPARAM(point.x, point.y));\n151: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MoveResize.cpp",
        "line": 152,
        "text": "End of the magic",
        "context_before": "150: \t::SendMessage(wnd, WM_LBUTTONUP, NULL, MAKELPARAM(point.x, point.y));\n151: ",
        "context_after": "153: }\n154: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MoveResize.h",
        "line": 54,
        "text": "CRect rcAlpha;",
        "context_before": "52: \n53: \tCRect rcResize = {0, 0, 0, 0};",
        "context_after": "55: \n56: \tMouseType GetMouseType(const CPoint& point);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 3,
        "text": "///////////////////////////////////////////////////////////////////////////",
        "context_before": "1: #pragma once\n2: ",
        "context_after": "4: // Classes declared in this file\n5: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 4,
        "text": "Classes declared in this file",
        "context_before": "2: \n3: /////////////////////////////////////////////////////////////////////////////",
        "context_after": "5: \n6: class CSize;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 10,
        "text": "///////////////////////////////////////////////////////////////////////////",
        "context_before": "8: class CRect;\n9: ",
        "context_after": "11: // CSize - An extent, similar to Windows SIZE structure.\n12: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 11,
        "text": "CSize - An extent, similar to Windows SIZE structure.",
        "context_before": "9: \n10: /////////////////////////////////////////////////////////////////////////////",
        "context_after": "12: \n13: class CSize : public tagSIZE"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 17,
        "text": "Constructors",
        "context_before": "15: public:\n16: ",
        "context_after": "18: \t// construct an uninitialized size\n19: \tCSize() throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 18,
        "text": "construct an uninitialized size",
        "context_before": "16: \n17: // Constructors",
        "context_after": "19: \tCSize() throw();\n20: \t// create from two integers"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 20,
        "text": "create from two integers",
        "context_before": "18: \t// construct an uninitialized size\n19: \tCSize() throw();",
        "context_after": "21: \tCSize(int initCX, int initCY) throw();\n22: \t// create from another size"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 22,
        "text": "create from another size",
        "context_before": "20: \t// create from two integers\n21: \tCSize(int initCX, int initCY) throw();",
        "context_after": "23: \tCSize(SIZE initSize) throw();\n24: \t// create from a point"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 24,
        "text": "create from a point",
        "context_before": "22: \t// create from another size\n23: \tCSize(SIZE initSize) throw();",
        "context_after": "25: \tCSize(POINT initPt) throw();\n26: \t// create from a DWORD: cx = LOWORD(dw) cy = HIWORD(dw)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 26,
        "text": "create from a DWORD: cx = LOWORD(dw) cy = HIWORD(dw)",
        "context_before": "24: \t// create from a point\n25: \tCSize(POINT initPt) throw();",
        "context_after": "27: \tCSize(DWORD dwSize) throw();\n28: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 29,
        "text": "Operations",
        "context_before": "27: \tCSize(DWORD dwSize) throw();\n28: ",
        "context_after": "30: \tBOOL operator==(SIZE size) const throw();\n31: \tBOOL operator!=(SIZE size) const throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 36,
        "text": "Operators returning CSize values",
        "context_before": "34: \tvoid SetSize(int CX, int CY) throw();\n35: ",
        "context_after": "37: \tCSize operator+(SIZE size) const throw();\n38: \tCSize operator-(SIZE size) const throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 41,
        "text": "Operators returning CPoint values",
        "context_before": "39: \tCSize operator-() const throw();\n40: ",
        "context_after": "42: \tCPoint operator+(POINT point) const throw();\n43: \tCPoint operator-(POINT point) const throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 45,
        "text": "Operators returning CRect values",
        "context_before": "43: \tCPoint operator-(POINT point) const throw();\n44: ",
        "context_after": "46: \tCRect operator+(const RECT* lpRect) const throw();\n47: \tCRect operator-(const RECT* lpRect) const throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 50,
        "text": "///////////////////////////////////////////////////////////////////////////",
        "context_before": "48: };\n49: ",
        "context_after": "51: // CPoint - A 2-D point, similar to Windows POINT structure.\n52: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 51,
        "text": "CPoint - A 2-D point, similar to Windows POINT structure.",
        "context_before": "49: \n50: /////////////////////////////////////////////////////////////////////////////",
        "context_after": "52: \n53: class CPoint : public tagPOINT"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 56,
        "text": "Constructors",
        "context_before": "54: {\n55: public:",
        "context_after": "57: \n58: \t// create an uninitialized point"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 58,
        "text": "create an uninitialized point",
        "context_before": "56: // Constructors\n57: ",
        "context_after": "59: \tCPoint() throw();\n60: \t// create from two integers"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 60,
        "text": "create from two integers",
        "context_before": "58: \t// create an uninitialized point\n59: \tCPoint() throw();",
        "context_after": "61: \tCPoint(int initX, int initY) throw();\n62: \t// create from another point"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 62,
        "text": "create from another point",
        "context_before": "60: \t// create from two integers\n61: \tCPoint(int initX, int initY) throw();",
        "context_after": "63: \tCPoint(POINT initPt) throw();\n64: \t// create from a size"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 64,
        "text": "create from a size",
        "context_before": "62: \t// create from another point\n63: \tCPoint(POINT initPt) throw();",
        "context_after": "65: \tCPoint(SIZE initSize) throw();\n66: \t// create from an LPARAM: x = LOWORD(dw) y = HIWORD(dw)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 66,
        "text": "create from an LPARAM: x = LOWORD(dw) y = HIWORD(dw)",
        "context_before": "64: \t// create from a size\n65: \tCPoint(SIZE initSize) throw();",
        "context_after": "67: \tCPoint(LPARAM dwPoint) throw();\n68: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 70,
        "text": "Operations",
        "context_before": "68: \n69: ",
        "context_after": "71: \n72: // translate the point"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 72,
        "text": "translate the point",
        "context_before": "70: // Operations\n71: ",
        "context_after": "73: \tvoid Offset(int xOffset, int yOffset) throw();\n74: \tvoid Offset(POINT point) throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 85,
        "text": "Operators returning CPoint values",
        "context_before": "83: \tvoid operator-=(POINT point) throw();\n84: ",
        "context_after": "86: \tCPoint operator+(SIZE size) const throw();\n87: \tCPoint operator-(SIZE size) const throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 91,
        "text": "Operators returning CSize values",
        "context_before": "89: \tCPoint operator+(POINT point) const throw();\n90: ",
        "context_after": "92: \tCSize operator-(POINT point) const throw();\n93: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 94,
        "text": "Operators returning CRect values",
        "context_before": "92: \tCSize operator-(POINT point) const throw();\n93: ",
        "context_after": "95: \tCRect operator+(const RECT* lpRect) const throw();\n96: \tCRect operator-(const RECT* lpRect) const throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 99,
        "text": "///////////////////////////////////////////////////////////////////////////",
        "context_before": "97: };\n98: ",
        "context_after": "100: // CRect - A 2-D rectangle, similar to Windows RECT structure.\n101: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 100,
        "text": "CRect - A 2-D rectangle, similar to Windows RECT structure.",
        "context_before": "98: \n99: /////////////////////////////////////////////////////////////////////////////",
        "context_after": "101: \n102: class CRect : public tagRECT"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 104,
        "text": "Constructors",
        "context_before": "102: class CRect : public tagRECT\n103: {",
        "context_after": "105: public:\n106: \t// uninitialized rectangle"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 106,
        "text": "uninitialized rectangle",
        "context_before": "104: // Constructors\n105: public:",
        "context_after": "107: \tCRect() throw();\n108: \t// from left, top, right, and bottom"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 108,
        "text": "from left, top, right, and bottom",
        "context_before": "106: \t// uninitialized rectangle\n107: \tCRect() throw();",
        "context_after": "109: \tCRect(int l, int t, int r, int b) throw();\n110: \t// copy constructor"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 110,
        "text": "copy constructor",
        "context_before": "108: \t// from left, top, right, and bottom\n109: \tCRect(int l, int t, int r, int b) throw();",
        "context_after": "111: \tCRect(const RECT& srcRect) throw();\n112: \t// from a pointer to another rect"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 112,
        "text": "from a pointer to another rect",
        "context_before": "110: \t// copy constructor\n111: \tCRect(const RECT& srcRect) throw();",
        "context_after": "113: \tCRect(LPCRECT lpSrcRect) throw();\n114: \t// from a point and size"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 114,
        "text": "from a point and size",
        "context_before": "112: \t// from a pointer to another rect\n113: \tCRect(LPCRECT lpSrcRect) throw();",
        "context_after": "115: \tCRect(POINT point, SIZE size) throw();\n116: \t// from two points"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 116,
        "text": "from two points",
        "context_before": "114: \t// from a point and size\n115: \tCRect(POINT point, SIZE size) throw();",
        "context_after": "117: \tCRect(POINT topLeft, POINT bottomRight) throw();\n118: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 119,
        "text": "Attributes (in addition to RECT members)",
        "context_before": "117: \tCRect(POINT topLeft, POINT bottomRight) throw();\n118: ",
        "context_after": "120: \n121: \t// retrieves the width"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 121,
        "text": "retrieves the width",
        "context_before": "119: // Attributes (in addition to RECT members)\n120: ",
        "context_after": "122: \tint Width() const throw();\n123: \t// returns the height"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 123,
        "text": "returns the height",
        "context_before": "121: \t// retrieves the width\n122: \tint Width() const throw();",
        "context_after": "124: \tint Height() const throw();\n125: \t// returns the size"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 125,
        "text": "returns the size",
        "context_before": "123: \t// returns the height\n124: \tint Height() const throw();",
        "context_after": "126: \tCSize Size() const throw();\n127: \t// reference to the top-left point"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 127,
        "text": "reference to the top-left point",
        "context_before": "125: \t// returns the size\n126: \tCSize Size() const throw();",
        "context_after": "128: \tCPoint& TopLeft() throw();\n129: \t// reference to the bottom-right point"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 129,
        "text": "reference to the bottom-right point",
        "context_before": "127: \t// reference to the top-left point\n128: \tCPoint& TopLeft() throw();",
        "context_after": "130: \tCPoint& BottomRight() throw();\n131: \t// const reference to the top-left point"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 131,
        "text": "const reference to the top-left point",
        "context_before": "129: \t// reference to the bottom-right point\n130: \tCPoint& BottomRight() throw();",
        "context_after": "132: \tconst CPoint& TopLeft() const throw();\n133: \t// const reference to the bottom-right point"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 133,
        "text": "const reference to the bottom-right point",
        "context_before": "131: \t// const reference to the top-left point\n132: \tconst CPoint& TopLeft() const throw();",
        "context_after": "134: \tconst CPoint& BottomRight() const throw();\n135: \t// the geometric center point of the rectangle"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 135,
        "text": "the geometric center point of the rectangle",
        "context_before": "133: \t// const reference to the bottom-right point\n134: \tconst CPoint& BottomRight() const throw();",
        "context_after": "136: \tCPoint CenterPoint() const throw();\n137: \t// swap the left and right"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 137,
        "text": "swap the left and right",
        "context_before": "135: \t// the geometric center point of the rectangle\n136: \tCPoint CenterPoint() const throw();",
        "context_after": "138: \tvoid SwapLeftRight() throw();\n139: \tstatic void WINAPI SwapLeftRight(LPRECT lpRect) throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 141,
        "text": "convert between CRect and LPRECT/LPCRECT (no need for &)",
        "context_before": "139: \tstatic void WINAPI SwapLeftRight(LPRECT lpRect) throw();\n140: ",
        "context_after": "142: \toperator LPRECT() throw();\n143: \toperator LPCRECT() const throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 145,
        "text": "returns TRUE if rectangle has no area",
        "context_before": "143: \toperator LPCRECT() const throw();\n144: ",
        "context_after": "146: \tBOOL IsRectEmpty() const throw();\n147: \t// returns TRUE if rectangle is at (0,0) and has no area"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 147,
        "text": "returns TRUE if rectangle is at (0,0) and has no area",
        "context_before": "145: \t// returns TRUE if rectangle has no area\n146: \tBOOL IsRectEmpty() const throw();",
        "context_after": "148: \tBOOL IsRectNull() const throw();\n149: \t// returns TRUE if point is within rectangle"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 149,
        "text": "returns TRUE if point is within rectangle",
        "context_before": "147: \t// returns TRUE if rectangle is at (0,0) and has no area\n148: \tBOOL IsRectNull() const throw();",
        "context_after": "150: \tBOOL PtInRect(POINT point) const throw();\n151: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 152,
        "text": "Operations",
        "context_before": "150: \tBOOL PtInRect(POINT point) const throw();\n151: ",
        "context_after": "153: \n154: \t// set rectangle from left, top, right, and bottom"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 154,
        "text": "set rectangle from left, top, right, and bottom",
        "context_before": "152: // Operations\n153: ",
        "context_after": "155: \tvoid SetRect(int x1, int y1, int x2, int y2) throw();\n156: \tvoid SetRect(POINT topLeft, POINT bottomRight) throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 157,
        "text": "empty the rectangle",
        "context_before": "155: \tvoid SetRect(int x1, int y1, int x2, int y2) throw();\n156: \tvoid SetRect(POINT topLeft, POINT bottomRight) throw();",
        "context_after": "158: \tvoid SetRectEmpty() throw();\n159: \t// copy from another rectangle"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 159,
        "text": "copy from another rectangle",
        "context_before": "157: \t// empty the rectangle\n158: \tvoid SetRectEmpty() throw();",
        "context_after": "160: \tvoid CopyRect(LPCRECT lpSrcRect) throw();\n161: \t// TRUE if exactly the same as another rectangle"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 161,
        "text": "TRUE if exactly the same as another rectangle",
        "context_before": "159: \t// copy from another rectangle\n160: \tvoid CopyRect(LPCRECT lpSrcRect) throw();",
        "context_after": "162: \tBOOL EqualRect(LPCRECT lpRect) const throw();\n163: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 164,
        "text": "Inflate rectangle's width and height by",
        "context_before": "162: \tBOOL EqualRect(LPCRECT lpRect) const throw();\n163: ",
        "context_after": "165: \t// x units to the left and right ends of the rectangle\n166: \t// and y units to the top and bottom."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 165,
        "text": "x units to the left and right ends of the rectangle",
        "context_before": "163: \n164: \t// Inflate rectangle's width and height by",
        "context_after": "166: \t// and y units to the top and bottom.\n167: \tvoid InflateRect(int x, int y) throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 166,
        "text": "and y units to the top and bottom.",
        "context_before": "164: \t// Inflate rectangle's width and height by\n165: \t// x units to the left and right ends of the rectangle",
        "context_after": "167: \tvoid InflateRect(int x, int y) throw();\n168: \t// Inflate rectangle's width and height by"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 168,
        "text": "Inflate rectangle's width and height by",
        "context_before": "166: \t// and y units to the top and bottom.\n167: \tvoid InflateRect(int x, int y) throw();",
        "context_after": "169: \t// size.cx units to the left and right ends of the rectangle\n170: \t// and size.cy units to the top and bottom."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 169,
        "text": "size.cx units to the left and right ends of the rectangle",
        "context_before": "167: \tvoid InflateRect(int x, int y) throw();\n168: \t// Inflate rectangle's width and height by",
        "context_after": "170: \t// and size.cy units to the top and bottom.\n171: \tvoid InflateRect(SIZE size) throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 170,
        "text": "and size.cy units to the top and bottom.",
        "context_before": "168: \t// Inflate rectangle's width and height by\n169: \t// size.cx units to the left and right ends of the rectangle",
        "context_after": "171: \tvoid InflateRect(SIZE size) throw();\n172: \t// Inflate rectangle's width and height by moving individual sides."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 172,
        "text": "Inflate rectangle's width and height by moving individual sides.",
        "context_before": "170: \t// and size.cy units to the top and bottom.\n171: \tvoid InflateRect(SIZE size) throw();",
        "context_after": "173: \t// Left side is moved to the left, right side is moved to the right,\n174: \t// top is moved up and bottom is moved down."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 173,
        "text": "Left side is moved to the left, right side is moved to the right,",
        "context_before": "171: \tvoid InflateRect(SIZE size) throw();\n172: \t// Inflate rectangle's width and height by moving individual sides.",
        "context_after": "174: \t// top is moved up and bottom is moved down.\n175: \tvoid InflateRect(LPCRECT lpRect) throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 174,
        "text": "top is moved up and bottom is moved down.",
        "context_before": "172: \t// Inflate rectangle's width and height by moving individual sides.\n173: \t// Left side is moved to the left, right side is moved to the right,",
        "context_after": "175: \tvoid InflateRect(LPCRECT lpRect) throw();\n176: \tvoid InflateRect(int l, int t, int r, int b) throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 178,
        "text": "deflate the rectangle's width and height without",
        "context_before": "176: \tvoid InflateRect(int l, int t, int r, int b) throw();\n177: ",
        "context_after": "179: \t// moving its top or left\n180: \tvoid DeflateRect(int x, int y) throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 179,
        "text": "moving its top or left",
        "context_before": "177: \n178: \t// deflate the rectangle's width and height without",
        "context_after": "180: \tvoid DeflateRect(int x, int y) throw();\n181: \tvoid DeflateRect(SIZE size) throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 185,
        "text": "translate the rectangle by moving its top and left",
        "context_before": "183: \tvoid DeflateRect(int l, int t, int r, int b) throw();\n184: ",
        "context_after": "186: \tvoid OffsetRect(int x, int y) throw();\n187: \tvoid OffsetRect(SIZE size) throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 191,
        "text": "absolute position of rectangle",
        "context_before": "189: \tvoid NormalizeRect() throw();\n190: ",
        "context_after": "192: \tvoid MoveToY(int y) throw();\n193: \tvoid MoveToX(int x) throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 197,
        "text": "set this rectangle to intersection of two others",
        "context_before": "195: \tvoid MoveToXY(POINT point) throw();\n196: ",
        "context_after": "198: \tBOOL IntersectRect(LPCRECT lpRect1, LPCRECT lpRect2) throw();\n199: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 200,
        "text": "set this rectangle to bounding union of two others",
        "context_before": "198: \tBOOL IntersectRect(LPCRECT lpRect1, LPCRECT lpRect2) throw();\n199: ",
        "context_after": "201: \tBOOL UnionRect(LPCRECT lpRect1, LPCRECT lpRect2) throw();\n202: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 203,
        "text": "set this rectangle to minimum of two others",
        "context_before": "201: \tBOOL UnionRect(LPCRECT lpRect1, LPCRECT lpRect2) throw();\n202: ",
        "context_after": "204: \tBOOL SubtractRect(LPCRECT lpRectSrc1, LPCRECT lpRectSrc2) throw();\n205: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 206,
        "text": "Additional Operations",
        "context_before": "204: \tBOOL SubtractRect(LPCRECT lpRectSrc1, LPCRECT lpRectSrc2) throw();\n205: ",
        "context_after": "207: \tvoid operator=(const RECT& srcRect) throw();\n208: \tBOOL operator==(const RECT& rect) const throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 219,
        "text": "Operators returning CRect values",
        "context_before": "217: \tvoid operator|=(const RECT& rect) throw();\n218: ",
        "context_after": "220: \tCRect operator+(POINT point) const throw();\n221: \tCRect operator-(POINT point) const throw();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 231,
        "text": "////////////////////////////",
        "context_before": "229: };\n230: ",
        "context_after": "232: \n233: // CSize"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 235,
        "text": "random filled",
        "context_before": "233: // CSize\n234: inline CSize::CSize() throw()",
        "context_after": "237: \t{ cx = initCX; cy = initCY; }\n238: inline CSize::CSize(SIZE initSize) throw()"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 272,
        "text": "CPoint",
        "context_before": "270: \t{ return CRect(lpRect) - *this; }\n271: ",
        "context_after": "273: inline CPoint::CPoint() throw()\n274: \t{ /* random filled */ }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 274,
        "text": "random filled",
        "context_before": "272: // CPoint\n273: inline CPoint::CPoint() throw()",
        "context_after": "276: \t{ x = initX; y = initY; }\n277: inline CPoint::CPoint(POINT initPt) throw()"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\mtypes.h",
        "line": 323,
        "text": "random filled",
        "context_before": "321: // CRect\n322: inline CRect::CRect() throw()",
        "context_after": "325: \t{ left = l; top = t; right = r; bottom = b; }\n326: inline CRect::CRect(const RECT& srcRect) throw()"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDataObject.cpp",
        "line": 95,
        "text": "Copy Global Memory",
        "context_before": "93: \t\t\tpmed->tymed = TYMED_HGLOBAL;\n94: ",
        "context_after": "96: \t\t\tSIZE_T bufSize = ::GlobalSize(hGlobal);\n97: \t\t\tpmed->hGlobal  = ::GlobalAlloc(GMEM_ZEROINIT|GMEM_MOVEABLE, bufSize);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDataObject.h",
        "line": 20,
        "text": "#include <strsafe.h> // for StringCchCopy",
        "context_before": "18: #pragma once\n19: ",
        "context_after": "21: //#include <shlobj.h> // (will be needed in future articles)\n22: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDataObject.h",
        "line": 23,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2014/06/09/10532207.aspx (Vista+)",
        "context_before": "21: //#include <shlobj.h> // (will be needed in future articles)\n22: ",
        "context_after": "24: // http://blogs.msdn.com/b/oldnewthing/archive/2008/03/11/8080077.aspx\n25: // http://blogs.msdn.com/b/oldnewthing/archive/2004/12/06/275659.aspx"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDataObject.h",
        "line": 24,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2008/03/11/8080077.aspx",
        "context_before": "22: \n23: // http://blogs.msdn.com/b/oldnewthing/archive/2014/06/09/10532207.aspx (Vista+)",
        "context_after": "25: // http://blogs.msdn.com/b/oldnewthing/archive/2004/12/06/275659.aspx\n26: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDataObject.h",
        "line": 25,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2004/12/06/275659.aspx",
        "context_before": "23: // http://blogs.msdn.com/b/oldnewthing/archive/2014/06/09/10532207.aspx (Vista+)\n24: // http://blogs.msdn.com/b/oldnewthing/archive/2008/03/11/8080077.aspx",
        "context_after": "26: \n27: class MyDataObject : public IDataObject"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDataObject.h",
        "line": 30,
        "text": "IUnknown",
        "context_before": "28: {\n29: public:",
        "context_after": "31: \tSTDMETHODIMP QueryInterface(REFIID riid, void** ppvObj);\n32: \tSTDMETHODIMP_(ULONG) AddRef();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDataObject.h",
        "line": 35,
        "text": "IDataObject",
        "context_before": "33: \tSTDMETHODIMP_(ULONG) Release();\n34: ",
        "context_after": "36: \tSTDMETHODIMP GetData(FORMATETC* pfe, STGMEDIUM* pmed);\n37: \tSTDMETHODIMP GetDataHere(FORMATETC* pfe, STGMEDIUM* pmed);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropSource.cpp",
        "line": 22,
        "text": "MyDropSource::MyDropSource()",
        "context_before": "20: #include \"MyDropSource.h\"\n21: ",
        "context_after": "23: //{\n24: //\tbStopDrag = FALSE;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropSource.cpp",
        "line": 24,
        "text": "bStopDrag = FALSE;",
        "context_before": "22: //MyDropSource::MyDropSource()\n23: //{",
        "context_after": "25: //}\n26: //"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropSource.cpp",
        "line": 27,
        "text": "MyDropSource::~MyDropSource()",
        "context_before": "25: //}\n26: //",
        "context_after": "28: //{\n29: //}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropSource.cpp",
        "line": 78,
        "text": "[Update: missing paren repaired, 7 Dec]",
        "context_before": "76: \t\treturn DRAGDROP_S_CANCEL;\n77: ",
        "context_after": "79: \tif (!(grfKeyState & (MK_LBUTTON | MK_RBUTTON)))\n80: \t\treturn DRAGDROP_S_DROP;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropSource.h",
        "line": 20,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2014/06/09/10532207.aspx (Vista+)",
        "context_before": "18: #pragma once\n19: ",
        "context_after": "21: // http://blogs.msdn.com/b/oldnewthing/archive/2008/03/11/8080077.aspx\n22: // http://blogs.msdn.com/b/oldnewthing/archive/2004/12/06/275659.aspx"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropSource.h",
        "line": 21,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2008/03/11/8080077.aspx",
        "context_before": "19: \n20: // http://blogs.msdn.com/b/oldnewthing/archive/2014/06/09/10532207.aspx (Vista+)",
        "context_after": "22: // http://blogs.msdn.com/b/oldnewthing/archive/2004/12/06/275659.aspx\n23: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropSource.h",
        "line": 22,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2004/12/06/275659.aspx",
        "context_before": "20: // http://blogs.msdn.com/b/oldnewthing/archive/2014/06/09/10532207.aspx (Vista+)\n21: // http://blogs.msdn.com/b/oldnewthing/archive/2008/03/11/8080077.aspx",
        "context_after": "23: \n24: class MyDropSource : public IDropSource"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropSource.h",
        "line": 28,
        "text": "MyDropSource();",
        "context_before": "26: \n27: public:",
        "context_after": "29: \t//virtual ~MyDropSource();\n30: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropSource.h",
        "line": 29,
        "text": "virtual ~MyDropSource();",
        "context_before": "27: public:\n28: \t//MyDropSource();",
        "context_after": "30: \n31: \tvoid StopDrag() {isStopDrag = true;}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropTarget.cpp",
        "line": 22,
        "text": "MyDropTarget::MyDropTarget()",
        "context_before": "20: #include \"MyDropTarget.h\"\n21: ",
        "context_after": "23: //{\n24: //\tmyDropSource = NULL;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropTarget.cpp",
        "line": 24,
        "text": "myDropSource = NULL;",
        "context_before": "22: //MyDropTarget::MyDropTarget()\n23: //{",
        "context_after": "25: //}\n26: //"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropTarget.cpp",
        "line": 27,
        "text": "MyDropTarget::~MyDropTarget()",
        "context_before": "25: //}\n26: //",
        "context_after": "28: //{\n29: //}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropTarget.h",
        "line": 22,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2014/06/09/10532207.aspx (Vista+)",
        "context_before": "20: #include \"MyDropSource.h\"\n21: ",
        "context_after": "23: // http://blogs.msdn.com/b/oldnewthing/archive/2008/03/11/8080077.aspx\n24: // http://blogs.msdn.com/b/oldnewthing/archive/2004/12/06/275659.aspx"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropTarget.h",
        "line": 23,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2008/03/11/8080077.aspx",
        "context_before": "21: \n22: // http://blogs.msdn.com/b/oldnewthing/archive/2014/06/09/10532207.aspx (Vista+)",
        "context_after": "24: // http://blogs.msdn.com/b/oldnewthing/archive/2004/12/06/275659.aspx\n25: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropTarget.h",
        "line": 24,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2004/12/06/275659.aspx",
        "context_before": "22: // http://blogs.msdn.com/b/oldnewthing/archive/2014/06/09/10532207.aspx (Vista+)\n23: // http://blogs.msdn.com/b/oldnewthing/archive/2008/03/11/8080077.aspx",
        "context_after": "25: \n26: class MyDropTarget : public IDropTarget"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropTarget.h",
        "line": 29,
        "text": "MyDropTarget();",
        "context_before": "27: {\n28: public:",
        "context_after": "30: //\tvirtual ~MyDropTarget();\n31: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDropTarget.h",
        "line": 30,
        "text": "virtual ~MyDropTarget();",
        "context_before": "28: public:\n29: //\tMyDropTarget();",
        "context_after": "31: \n32: \tvoid SetDropSource(MyDropSource* mySource) {myDropSource = mySource;}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PlsFile.cpp",
        "line": 66,
        "text": "UTF8 BOM",
        "context_before": "64: \t\tfor (int i = 0; std::getline(stream, line); ++i)\n65: \t\t{",
        "context_after": "67: \t\t\tif (i == 0 && line.size() >= 3 &&\n68: \t\t\t\tline[0] == '\\xEF' && line[1] == '\\xBB' && line[2] == '\\xBF')"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PlsFile.cpp",
        "line": 133,
        "text": "UTF8 BOM",
        "context_before": "131: \t\tfor (int i = 0; std::getline(stream, line); ++i)\n132: \t\t{",
        "context_after": "134: \t\t\tif (i == 0 && line.size() >= 3 &&\n135: \t\t\t\tline[0] == '\\xEF' && line[1] == '\\xBB' && line[2] == '\\xBF')"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PlsFile.cpp",
        "line": 224,
        "text": "First, check that the file doesn't start with backslash, Winamp saves in this format",
        "context_before": "222: \tStringEx::Replace(track.file, '/', '\\\\');\n223: ",
        "context_after": "225: \tif (checkNoDrive && currentPath.size() > 2 && track.file.size() > 2 &&\n226: \t\ttrack.file[0] == '\\\\' && track.file[1] != '\\\\')"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PlsFile.cpp",
        "line": 228,
        "text": "Relative path",
        "context_before": "226: \t\ttrack.file[0] == '\\\\' && track.file[1] != '\\\\')\n227: \t\ttrack.file = currentPath.substr(0, 2) + track.file;",
        "context_after": "229: \t\ttrack.file = currentPath + track.file;\n230: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PlsFile.h",
        "line": 40,
        "text": "M3U Playlist",
        "context_before": "38: \n39: private:",
        "context_after": "41: \tbool LoadPLS(const std::wstring& file); // PLS Playlist\n42: \tbool LoadASX(const std::wstring& file); // Advanced Stream Redirector"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PlsFile.h",
        "line": 41,
        "text": "PLS Playlist",
        "context_before": "39: private:\n40: \tbool LoadM3U(const std::wstring& file, bool isUTF8); // M3U Playlist",
        "context_after": "42: \tbool LoadASX(const std::wstring& file); // Advanced Stream Redirector\n43: \tbool LoadXSPF(const std::wstring& file); // XML Shareable Playlist Format"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PlsFile.h",
        "line": 42,
        "text": "Advanced Stream Redirector",
        "context_before": "40: \tbool LoadM3U(const std::wstring& file, bool isUTF8); // M3U Playlist\n41: \tbool LoadPLS(const std::wstring& file); // PLS Playlist",
        "context_after": "43: \tbool LoadXSPF(const std::wstring& file); // XML Shareable Playlist Format\n44: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PlsFile.h",
        "line": 43,
        "text": "XML Shareable Playlist Format",
        "context_before": "41: \tbool LoadPLS(const std::wstring& file); // PLS Playlist\n42: \tbool LoadASX(const std::wstring& file); // Advanced Stream Redirector",
        "context_after": "44: \n45: \tstd::wstring currentPath;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 31,
        "text": "Get current drive for portable version",
        "context_before": "29: void Progress::Init()\n30: {",
        "context_after": "32: \tif (isPortableVersion)\n33: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 34,
        "text": "Only for drives",
        "context_before": "32: \tif (isPortableVersion)\n33: \t{",
        "context_after": "35: \t\t{\n36: \t\t\tprogramDrive = programPath[0];"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 41,
        "text": "Get current time",
        "context_before": "39: \t}\n40: ",
        "context_after": "42: \taddedTime = FileSystem::GetTimeNow();\n43: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 56,
        "text": "threadWorker.StartBackground(std::bind(&DlgProgress::RunThread, this));",
        "context_before": "54: \t}\n55: ",
        "context_after": "57: \tthreadWorker.Start(std::bind(&Progress::RunThread, this));\n58: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 134,
        "text": "else if (ext == L\"m4p\")",
        "context_before": "132: \telse if (ext == L\"m4r\")\n133: \t\treturn true;",
        "context_after": "135: \t//\treturn true;\n136: \telse if (ext == L\"wav\")"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 135,
        "text": "return true;",
        "context_before": "133: \t\treturn true;\n134: \t//else if (ext == L\"m4p\")",
        "context_after": "136: \telse if (ext == L\"wav\")\n137: \t\treturn true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 172,
        "text": "Do not add hidden folders to the library but add to playlists",
        "context_before": "170: \t\tif (find.IsDirectory())\n171: \t\t{",
        "context_after": "173: \t\t\tif (find.IsHidden() && !isPlaylist && !isNewPlaylist)\n174: \t\t\t\tcontinue;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 357,
        "text": "Already added",
        "context_before": "355: \tbool cue = false;\n356: ",
        "context_after": "358: \t{\n359: \t\tif (cue) return; // Do not add if the file is part of cue"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 359,
        "text": "Do not add if the file is part of cue",
        "context_before": "357: \tif (dBase->CheckFile(noDrive, path, file, fileHash, 0, id, modified, size, cue, true)) // Already added\n358: \t{",
        "context_after": "360: \n361: \t\tif (!isRescanAll && fileSize == size && fileTime == modified) // File isn't changed"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 361,
        "text": "File isn't changed",
        "context_before": "359: \t\tif (cue) return; // Do not add if the file is part of cue\n360: ",
        "context_after": "362: \t\t{\n363: \t\t\tUpdateProgressTextEmpty();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 367,
        "text": "File is added but tags are changed, need to update",
        "context_before": "365: \t\t\tdBase->SetUpdateOK(id);\n366: \t\t}",
        "context_after": "368: \t\t{\n369: \t\t\tUpdateProgressText(file);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 378,
        "text": "File isn't added, need to add",
        "context_before": "376: \t\t}\n377: \t}",
        "context_after": "379: \t{\n380: \t\tUpdateProgressText(file);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 392,
        "text": "Add new file",
        "context_before": "390: \t\t\tdBase->SetUpdateOK(idTags);\n391: \t\t}",
        "context_after": "393: \t\t\tdBase->AddFileToLibrary(&dataSongInfo);\n394: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 407,
        "text": "Already added",
        "context_before": "405: \tbool cue = false;\n406: ",
        "context_after": "408: \t{\n409: \t\tif (!fast && cue) return; // Do not add if the file is part of cue"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 409,
        "text": "Do not add if the file is part of cue",
        "context_before": "407: \tif (dBase->CheckFile(noDrive, path, file, fileHash, 0, id, modified, size, cue) && (!fast || !cue)) // Already added\n408: \t{",
        "context_after": "410: \n411: \t\tif (fileSize == size && fileTime == modified) // File isn't changed"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 411,
        "text": "File isn't changed",
        "context_before": "409: \t\tif (!fast && cue) return; // Do not add if the file is part of cue\n410: ",
        "context_after": "412: \t\t{\n413: \t\t\tdBase->AddFileToPlaylistFrom(id, ++numberOffset, addedTime, isTempPlaylist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 415,
        "text": "File is added but tags are changed, need to update",
        "context_before": "413: \t\t\tdBase->AddFileToPlaylistFrom(id, ++numberOffset, addedTime, isTempPlaylist);\n414: \t\t}",
        "context_after": "416: \t\t{\n417: \t\t\tDBase::DATABASE_SONGINFO dataSongInfo;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 424,
        "text": "Add new file",
        "context_before": "422: \t\t}\n423: \t}",
        "context_after": "425: \t{\n426: \t\tDBase::DATABASE_SONGINFO dataSongInfo;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 470,
        "text": "Try to find music file with same name as cue",
        "context_before": "468: \t\t\trefTime = findRef.GetModified();\n469: \t\t}",
        "context_after": "471: \t\t{\n472: \t\t\tFileSystem::Find findRefFile(path, PathEx::NameFromFile(reffile) + L\".*\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 513,
        "text": "but right now I don't want to break something that already tested and working",
        "context_before": "511: \n512: \t\t// The following part is similar to AddToLibrary function we can refactor it later",
        "context_after": "514: \n515: \t\tif (dBase->CheckFile(noDrive, path, reffile, refHash, cueValue, id, modified, size, cue, true)) // Already added"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 515,
        "text": "Already added",
        "context_before": "513: \t\t// but right now I don't want to break something that already tested and working\n514: ",
        "context_after": "516: \t\t{\n517: \t\t\tif (!isRescanAll && cueID == 0 && refTime == modified) // File isn't changed"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 517,
        "text": "File isn't changed",
        "context_before": "515: \t\tif (dBase->CheckFile(noDrive, path, reffile, refHash, cueValue, id, modified, size, cue, true)) // Already added\n516: \t\t{",
        "context_after": "518: \t\t\t{\n519: \t\t\t\tdBase->SetUpdateOK(id);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 521,
        "text": "File is added but tags are changed, need to update",
        "context_before": "519: \t\t\t\tdBase->SetUpdateOK(id);\n520: \t\t\t}",
        "context_after": "522: \t\t\t{\n523: \t\t\t\tDBase::DATABASE_SONGINFO dataSongInfo;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 530,
        "text": "File isn't added, need to add",
        "context_before": "528: \t\t\t}\n529: \t\t}",
        "context_after": "531: \t\t{\n532: \t\t\tDBase::DATABASE_SONGINFO dataSongInfo;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 542,
        "text": "Add new file",
        "context_before": "540: \t\t\t\tdBase->SetUpdateOK(idTags);\n541: \t\t\t}",
        "context_after": "543: \t\t\t\tdBase->AddFileToLibrary(&dataSongInfo);\n544: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 567,
        "text": "Try to find music file with same name as cue",
        "context_before": "565: \t\t\trefTime = findRef.GetModified();\n566: \t\t}",
        "context_after": "568: \t\t{\n569: \t\t\tFileSystem::Find findRefFile(path, PathEx::NameFromFile(reffile) + L\".*\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 616,
        "text": "but right now I don't want to break something that already tested and working",
        "context_before": "614: \n615: \t\t// The following part is similar to AddToPlaylist function we can refactor it later",
        "context_after": "617: \n618: \t\tif (dBase->CheckFile(noDrive, path, reffile, refHash, cueValue, id, modified, size, cue)) // Already added"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 618,
        "text": "Already added",
        "context_before": "616: \t\t// but right now I don't want to break something that already tested and working\n617: ",
        "context_after": "619: \t\t{\n620: \t\t\tif (cueID == 0 && refTime == modified) // File isn't changed"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 620,
        "text": "File isn't changed",
        "context_before": "618: \t\tif (dBase->CheckFile(noDrive, path, reffile, refHash, cueValue, id, modified, size, cue)) // Already added\n619: \t\t{",
        "context_after": "621: \t\t\t{\n622: \t\t\t\tdBase->AddFileToPlaylistFrom(id, ++numberOffset, addedTime, isTempPlaylist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 624,
        "text": "File is added but tags are changed, need to update",
        "context_before": "622: \t\t\t\tdBase->AddFileToPlaylistFrom(id, ++numberOffset, addedTime, isTempPlaylist);\n623: \t\t\t}",
        "context_after": "625: \t\t\t{\n626: \t\t\t\tDBase::DATABASE_SONGINFO dataSongInfo;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 633,
        "text": "File isn't added, need to add",
        "context_before": "631: \t\t\t}\n632: \t\t}",
        "context_after": "634: \t\t{\n635: \t\t\tDBase::DATABASE_SONGINFO dataSongInfo;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 643,
        "text": "Add new file",
        "context_before": "641: \t\t\t\tdBase->AddFileToPlaylistFrom(dBase->GetLastAddedToLib(), ++numberOffset, addedTime, isTempPlaylist);\n642: \t\t\t}",
        "context_after": "644: \t\t\t\tdBase->AddFileToPlaylist(++numberOffset, &dataSongInfo, isTempPlaylist);\n645: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 703,
        "text": "Merge tags from cue and file tags",
        "context_before": "701: \t\t}\n702: ",
        "context_after": "704: \t\tconst CueFile::CueHeader& cueHeader = cue->GetCue();\n705: \t\tconst CueFile::CueTrack& cueTrack = cueHeader.tracks[i];"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 749,
        "text": "Fill file hash",
        "context_before": "747: \t}\n748: ",
        "context_after": "750: \tdataSongInfo->fileHash = fileHash;\n751: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 752,
        "text": "Fill track hash",
        "context_before": "750: \tdataSongInfo->fileHash = fileHash;\n751: ",
        "context_after": "753: \tstd::wstring titleAlbumArtist;\n754: \tif (!dataSongInfo->title.empty())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 762,
        "text": "dataSongInfo->size = fileSize;",
        "context_before": "760: \tdataSongInfo->trackHash = StringEx::HashFNV1a32(titleAlbumArtist);\n761: ",
        "context_after": "763: \n764: \tdataSongInfo->modified = fileTime;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 788,
        "text": "Cue files first",
        "context_before": "786: \tfuncUpdateProgressRange(progressPos, numberFiles);\n787: ",
        "context_after": "789: \tif (numberCues) CheckCueLibraryFiles();\n790: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 806,
        "text": "Just skip all cue for now",
        "context_before": "804: \t\t\treturn;\n805: ",
        "context_after": "807: \t\t{\n808: \t\t\tfuncUpdateProgressPos(++progressPos, numberFiles);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 890,
        "text": "Leave cue only if the library does have files from this cue",
        "context_before": "888: \t\t\t\tUpdateProgressTextEmpty();\n889: ",
        "context_after": "891: \t\t\t\tif (dBase->UpdateCueLibrary(noDrive, path, reffile, refhash))\n892: \t\t\t\t\tdBase->SetUpdateCueOK(id);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 894,
        "text": "Just use AddCueToLibrary here, it's not effective but it works",
        "context_before": "892: \t\t\t\t\tdBase->SetUpdateCueOK(id);\n893: \t\t\t}",
        "context_after": "895: \t\t\t\tAddCueToLibrary(false, path, file, fileSize, fileTime);\n896: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 916,
        "text": "Calculate the number of files",
        "context_before": "914: void Progress::ThreadLibrary()\n915: {",
        "context_after": "917: \tfor (std::size_t i = 0, size = libraryFolders.size(); i < size; ++i)\n918: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 923,
        "text": "Exit if press stop",
        "context_before": "921: \t}\n922: ",
        "context_after": "924: \t\treturn;\n925: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 926,
        "text": "Check if the database is empty",
        "context_before": "924: \t\treturn;\n925: ",
        "context_after": "927: \tbool isLibraryEmpty = dBase->IsLibraryEmpty();\n928: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 933,
        "text": "if (!isLibraryEmpty)",
        "context_before": "931: \tdBase->CueBegin();\n932: ",
        "context_after": "934: \tdBase->SetUpdateAll();\n935: \tdBase->SetUpdateAllCue();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 938,
        "text": "Prepare the progress bar",
        "context_before": "936: \n937: ",
        "context_after": "939: \tfuncUpdateProgressMarquee(false);\n940: \tfuncUpdateProgressRange(0, numberFiles);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 942,
        "text": "LARGE_INTEGER freq; QueryPerformanceFrequency(&freq);",
        "context_before": "940: \tfuncUpdateProgressRange(0, numberFiles);\n941: ",
        "context_after": "943: \t//LARGE_INTEGER counter1; QueryPerformanceCounter(&counter1);\n944: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 943,
        "text": "LARGE_INTEGER counter1; QueryPerformanceCounter(&counter1);",
        "context_before": "941: \n942: \t//LARGE_INTEGER freq; QueryPerformanceFrequency(&freq);",
        "context_after": "944: \n945: \tfor (std::size_t i = 0, size = cueFiles.size(); i < size; ++i)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 959,
        "text": "LARGE_INTEGER counter2; QueryPerformanceCounter(&counter2);",
        "context_before": "957: \t}\n958: ",
        "context_after": "960: \t//double perfDiffMs = (counter2.QuadPart - counter1.QuadPart) *1000.0 / freq.QuadPart;\n961: \t//int i = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 960,
        "text": "double perfDiffMs = (counter2.QuadPart - counter1.QuadPart) *1000.0 / freq.QuadPart;",
        "context_before": "958: \n959: \t//LARGE_INTEGER counter2; QueryPerformanceCounter(&counter2);",
        "context_after": "961: \t//int i = 0;\n962: \t//::MessageBoxW(NULL, std::to_wstring(perfDiffMs).c_str(), L\"\", 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 961,
        "text": "int i = 0;",
        "context_before": "959: \t//LARGE_INTEGER counter2; QueryPerformanceCounter(&counter2);\n960: \t//double perfDiffMs = (counter2.QuadPart - counter1.QuadPart) *1000.0 / freq.QuadPart;",
        "context_after": "962: \t//::MessageBoxW(NULL, std::to_wstring(perfDiffMs).c_str(), L\"\", 0);\n963: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 969,
        "text": "Because Vacuum can be slow",
        "context_before": "967: \t}\n968: ",
        "context_after": "970: \tUpdateProgressTextEmpty(isStopThread);\n971: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 990,
        "text": "VACUUM causes UI thread to hang when access to db, need to do someting with this",
        "context_before": "988: \tdBase->CueCommit();\n989: \tdBase->MemFlagDetach();",
        "context_after": "991: \t//dBase->Vacuum(); // Don't use VACUUM it's very slow and lock the database\n992: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 991,
        "text": "dBase->Vacuum(); // Don't use VACUUM it's very slow and lock the database",
        "context_before": "989: \tdBase->MemFlagDetach();\n990: \t// VACUUM causes UI thread to hang when access to db, need to do someting with this",
        "context_after": "992: }\n993: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 996,
        "text": "Calculate the number of files",
        "context_before": "994: void Progress::ThreadPlaylist()\n995: {",
        "context_after": "997: \tfor (std::size_t i = 0, size = libraryFolders.size(); i < size; ++i)\n998: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1009,
        "text": "Exit if press stop",
        "context_before": "1007: \t}\n1008: ",
        "context_after": "1010: \t\treturn;\n1011: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1021,
        "text": "Prepare the progress bar",
        "context_before": "1019: \t}\n1020: ",
        "context_after": "1022: \tfuncUpdateProgressMarquee(false);\n1023: \tfuncUpdateProgressRange(0, numberFiles);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1047,
        "text": "Because Vacuum can be slow",
        "context_before": "1045: \t}\n1046: ",
        "context_after": "1048: \tUpdateProgressTextEmpty(isStopThread);\n1049: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1056,
        "text": "Sort the playlist before add",
        "context_before": "1054: \t}\n1055: ",
        "context_after": "1057: \tdBase->SortPlaylist(numberStart, namePlaylist);\n1058: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1063,
        "text": "dBase->PlayVacuum(); // Don't use VACUUM it's very slow and lock the database",
        "context_before": "1061: \tdBase->SortHelperDetach();\n1062: ",
        "context_after": "1064: }\n1065: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1068,
        "text": "Load playlist",
        "context_before": "1066: void Progress::ThreadNewPlaylist()\n1067: {",
        "context_after": "1069: \tPlsFile plsFile;\n1070: \tplsFile.LoadPlaylist(filePlaylist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1072,
        "text": "Exit if press stop",
        "context_before": "1070: \tplsFile.LoadPlaylist(filePlaylist);\n1071: ",
        "context_after": "1073: \t\treturn;\n1074: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1075,
        "text": "Calculate the number of files",
        "context_before": "1073: \t\treturn;\n1074: ",
        "context_after": "1076: \tfor (int i = 0, size = plsFile.GetPlsSize(); i < size; ++i)\n1077: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1086,
        "text": "Exit if press stop",
        "context_before": "1084: \t}\n1085: ",
        "context_after": "1087: \t\treturn;\n1088: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1089,
        "text": "Open temp playlist and use it further",
        "context_before": "1087: \t\treturn;\n1088: ",
        "context_after": "1090: \tdBase->OpenTemp(fileDatabase);\n1091: \tdBase->TempBegin();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1098,
        "text": "Prepare the progress bar",
        "context_before": "1096: \t}\n1097: ",
        "context_after": "1099: \tfuncUpdateProgressRange(0, numberFiles);\n1100: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1121,
        "text": "Because Vacuum can be slow",
        "context_before": "1119: \t}\n1120: ",
        "context_after": "1122: \tUpdateProgressTextEmpty(isStopThread);\n1123: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1131,
        "text": "dBase->TempVacuum(); // Don't use VACUUM it's very slow and lock the database",
        "context_before": "1129: \t}\n1130: ",
        "context_after": "1132: \tdBase->CloseTemp();\n1133: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1137,
        "text": "Get current drive for portable version",
        "context_before": "1135: bool Progress::FastAddFileToPlaylist(const std::wstring& musicfile, int start, bool& isFolder)\n1136: {",
        "context_after": "1138: \tif (isPortableVersion)\n1139: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1140,
        "text": "Only for drives",
        "context_before": "1138: \tif (isPortableVersion)\n1139: \t{",
        "context_after": "1141: \t\t{\n1142: \t\t\tprogramDrive = programPath[0];"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 1149,
        "text": "Get current time",
        "context_before": "1147: \tnumberOffset = start;\n1148: ",
        "context_after": "1150: \taddedTime = FileSystem::GetTimeNow();\n1151: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.h",
        "line": 105,
        "text": "Do not duplicate callbacks with \"Processing...\" text",
        "context_before": "103: \tstd::function<void(bool)> funcUpdateProgressTextEmpty;\n104: ",
        "context_after": "106: \tvoid Progress::UpdateProgressText(const std::wstring& text);\n107: \tvoid Progress::UpdateProgressTextEmpty(bool cancel = false);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Properties.cpp",
        "line": 246,
        "text": "if (isPlayNode) libAudio->TempStop();",
        "context_before": "244: \t\t\tisPlayNode = true;\n245: ",
        "context_after": "247: \t\tbool result = WriteTags(selectedNodes[0].get());\n248: \t\t//if (isPlayNode) libAudio->TempPlay();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Properties.cpp",
        "line": 248,
        "text": "if (isPlayNode) libAudio->TempPlay();",
        "context_before": "246: \t\t//if (isPlayNode) libAudio->TempStop();\n247: \t\tbool result = WriteTags(selectedNodes[0].get());",
        "context_after": "249: \n250: \t\tif (result)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Properties.cpp",
        "line": 276,
        "text": "if (isPlayNode) libAudio->TempStop();",
        "context_before": "274: \t\t\tisPlayNode = true;\n275: ",
        "context_after": "277: \t\tbool result = WriteTags(selectedNodes[i].get());\n278: \t\t//if (isPlayNode) libAudio->TempPlay();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Properties.cpp",
        "line": 278,
        "text": "if (isPlayNode) libAudio->TempPlay();",
        "context_before": "276: \t\t//if (isPlayNode) libAudio->TempStop();\n277: \t\tbool result = WriteTags(selectedNodes[i].get());",
        "context_after": "279: \n280: \t\tif (result)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Properties.cpp",
        "line": 283,
        "text": "break;",
        "context_before": "281: \t\t\tUpdateTags(selectedNodes[i].get());\n282: \t\t//else",
        "context_after": "284: \n285: \t\tfuncProgress((int)i + 1);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Properties.cpp",
        "line": 294,
        "text": "Skip CUE",
        "context_before": "292: bool Properties::WriteTags(ListNodeUnsafe node)\n293: {",
        "context_after": "295: \tif (node->GetCueValue())\n296: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Properties.cpp",
        "line": 297,
        "text": "When CUE and multiple files are selected it's possibly to SaveCoverToFile",
        "context_before": "295: \tif (node->GetCueValue())\n296: \t{",
        "context_after": "298: \t\tif (needSaveCover && saveCoverToFile)\n299: \t\t\tSaveCoverToFile(node->GetFile());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Properties.cpp",
        "line": 380,
        "text": "Fill track hash",
        "context_before": "378: \tdataSongInfo.file        = UTF::UTF8S(PathEx::FileFromPath(node->GetFile()));\n379: ",
        "context_after": "381: \tstd::wstring titleAlbumArtist;\n382: \tif (!dataSongInfo.title.empty())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Properties.cpp",
        "line": 421,
        "text": "http://stackoverflow.com/questions/4761529/efficient-way-of-reading-a-file-into-an-stdvectorchar/4761779#4761779",
        "context_before": "419: \tnewCover.clear();\n420: ",
        "context_after": "422: \n423: \tstd::ifstream stream;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Properties.cpp",
        "line": 432,
        "text": "newCover.reserve(fileSize);",
        "context_before": "430: \t\tstream.seekg(0, std::ios::beg);\n431: ",
        "context_after": "433: \t\t//newCover.assign(std::istreambuf_iterator<char>(stream), std::istreambuf_iterator<char>());\n434: \t\tnewCover.resize(fileSize);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Properties.cpp",
        "line": 433,
        "text": "newCover.assign(std::istreambuf_iterator<char>(stream), std::istreambuf_iterator<char>());",
        "context_before": "431: \n432: \t\t//newCover.reserve(fileSize);",
        "context_after": "434: \t\tnewCover.resize(fileSize);\n435: \t\tstream.read(&newCover[0], fileSize);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Properties.cpp",
        "line": 462,
        "text": "Already written",
        "context_before": "460: \n461: \tif (coverFolders.insert(path).second == false)",
        "context_after": "463: \n464: \tstd::wstring file = path + L\"Front\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Properties.cpp",
        "line": 570,
        "text": "if (start == 0)",
        "context_before": "568: \t\tif (!str.empty())\n569: \t\t{",
        "context_after": "571: \t\t\t\toutText = str;\n572: \t\t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Radio.cpp",
        "line": 34,
        "text": "http://www.181.fm - http://www.181.fm/index.php?p=mp3links",
        "context_before": "32: bool Radio::LoadTree(SkinTree* skinTree, TreeNodeUnsafe node)\n33: {",
        "context_after": "35: \t// http://somafm.com\n36: \t// http://977music.com/index.php?p=custom_page&page_name=SHOUTcast"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Radio.cpp",
        "line": 35,
        "text": "http://somafm.com",
        "context_before": "33: {\n34: \t// http://www.181.fm - http://www.181.fm/index.php?p=mp3links",
        "context_after": "36: \t// http://977music.com/index.php?p=custom_page&page_name=SHOUTcast\n37: \t// http://www.di-radio.com"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Radio.cpp",
        "line": 36,
        "text": "http://977music.com/index.php?p=custom_page&page_name=SHOUTcast",
        "context_before": "34: \t// http://www.181.fm - http://www.181.fm/index.php?p=mp3links\n35: \t// http://somafm.com",
        "context_after": "37: \t// http://www.di-radio.com\n38: \t// http://www.radioparadise.com - http://www.radioparadise.com/rp_2.php?#name=Listen&file=links"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Radio.cpp",
        "line": 37,
        "text": "http://www.di-radio.com",
        "context_before": "35: \t// http://somafm.com\n36: \t// http://977music.com/index.php?p=custom_page&page_name=SHOUTcast",
        "context_after": "38: \t// http://www.radioparadise.com - http://www.radioparadise.com/rp_2.php?#name=Listen&file=links\n39: \t// http://megarockradio.net - http://www.megarockradio.net/player - http://megarockradio.net/asx/radio.pls"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Radio.cpp",
        "line": 38,
        "text": "http://www.radioparadise.com - http://www.radioparadise.com/rp_2.php?#name=Listen&file=links",
        "context_before": "36: \t// http://977music.com/index.php?p=custom_page&page_name=SHOUTcast\n37: \t// http://www.di-radio.com",
        "context_after": "39: \t// http://megarockradio.net - http://www.megarockradio.net/player - http://megarockradio.net/asx/radio.pls\n40: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Radio.cpp",
        "line": 39,
        "text": "http://megarockradio.net - http://www.megarockradio.net/player - http://megarockradio.net/asx/radio.pls",
        "context_before": "37: \t// http://www.di-radio.com\n38: \t// http://www.radioparadise.com - http://www.radioparadise.com/rp_2.php?#name=Listen&file=links",
        "context_after": "40: \n41: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Radio.cpp",
        "line": 138,
        "text": "count++;",
        "context_before": "136: \t\tfor (std::size_t i = 0; i < size; i += 2)\n137: \t\t{",
        "context_after": "139: \t\t\tListNodeUnsafe node = skinList->InsertTrack(nullptr, radio_DI[i + 1], 0, 0, 0, 0, 0, 0);\n140: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Radio.cpp",
        "line": 156,
        "text": "www.radioparadise.com/m3u/aac-320.m3u\", 0, 0, 0, 0, 0, 0);",
        "context_before": "154: \t\tskinList->SetViewPlaylist(true);\n155: ",
        "context_after": "157: \n158: \t\tskinList->SetNodeString(node, SkinListElement::Type::Artist, L\"RadioParadise.com\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Radio.cpp",
        "line": 162,
        "text": "www.radioparadise.com/m3u/aac-128.m3u\", 0, 0, 0, 0, 0, 0);",
        "context_before": "160: \t\tskinList->SetNodeString(node, SkinListElement::Type::Time, L\"8:88\");\n161: ",
        "context_after": "163: \n164: \t\tskinList->SetNodeString(node, SkinListElement::Type::Artist, L\"RadioParadise.com\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Radio.cpp",
        "line": 168,
        "text": "www.radioparadise.com/m3u/mp3-192.m3u\", 0, 0, 0, 0, 0, 0);",
        "context_before": "166: \t\tskinList->SetNodeString(node, SkinListElement::Type::Time, L\"8:88\");\n167: ",
        "context_after": "169: \n170: \t\tskinList->SetNodeString(node, SkinListElement::Type::Artist, L\"RadioParadise.com\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Radio.cpp",
        "line": 174,
        "text": "stream-dc1.radioparadise.com/rp_192m.ogg\", 0, 0, 0, 0, 0, 0);",
        "context_before": "172: \t\tskinList->SetNodeString(node, SkinListElement::Type::Time, L\"8:88\");\n173: ",
        "context_after": "175: \n176: \t\tskinList->SetNodeString(node, SkinListElement::Type::Artist, L\"RadioParadise.com\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Radio.cpp",
        "line": 190,
        "text": "megarockradio.net/asx/radio.pls\", 0, 0, 0, 0, 0, 0);",
        "context_before": "188: \t\tskinList->SetViewPlaylist(true);\n189: ",
        "context_after": "191: \n192: \t\tskinList->SetNodeString(node, SkinListElement::Type::Artist, L\"MegarockRadio.net\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 24,
        "text": "www.181.fm/winamp.pls?station=181-power&file=181-power.pls\",",
        "context_before": "22: L\"Pop\",\n23: L\"Power 181 (Top 40)\",",
        "context_after": "25: L\"Pop\",\n26: L\"Old School HipHop/RnB\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 27,
        "text": "www.181.fm/winamp.pls?station=181-oldschool&file=181-oldschool.pls\",",
        "context_before": "25: L\"Pop\",\n26: L\"Old School HipHop/RnB\",",
        "context_after": "28: L\"Pop\",\n29: L\"UK top 40\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 30,
        "text": "www.181.fm/winamp.pls?station=181-uktop40&file=181-uktop40.pls\",",
        "context_before": "28: L\"Pop\",\n29: L\"UK top 40\",",
        "context_after": "31: L\"Pop\",\n32: L\"The Vibe of Vegas\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 33,
        "text": "www.181.fm/winamp.pls?station=181-vibe&file=181-vibe.pls\",",
        "context_before": "31: L\"Pop\",\n32: L\"The Vibe of Vegas\",",
        "context_after": "34: L\"Pop\",\n35: L\"The Heart (Love Songs)\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 36,
        "text": "www.181.fm/winamp.pls?station=181-heart&file=181-heart.pls\",",
        "context_before": "34: L\"Pop\",\n35: L\"The Heart (Love Songs)\",",
        "context_after": "37: L\"Pop\",\n38: L\"Smooth AC\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 39,
        "text": "www.181.fm/winamp.pls?station=181-smoothac&file=181-smoothac.pls\",",
        "context_before": "37: L\"Pop\",\n38: L\"Smooth AC\",",
        "context_after": "40: L\"Pop\",\n41: L\"The Office\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 42,
        "text": "www.181.fm/winamp.pls?station=181-office&file=181-office.pls\",",
        "context_before": "40: L\"Pop\",\n41: L\"The Office\",",
        "context_after": "43: L\"Pop\",\n44: L\"The Mix\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 45,
        "text": "www.181.fm/winamp.pls?station=181-themix&file=181-themix.pls\",",
        "context_before": "43: L\"Pop\",\n44: L\"The Mix\",",
        "context_after": "46: L\"Pop\",\n47: L\"The Point\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 48,
        "text": "www.181.fm/winamp.pls?station=181-thepoint&file=181-thepoint.pls\",",
        "context_before": "46: L\"Pop\",\n47: L\"The Point\",",
        "context_after": "49: L\"Pop\",\n50: L\"Party 181\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 51,
        "text": "www.181.fm/winamp.pls?station=181-party&file=181-party.pls\",",
        "context_before": "49: L\"Pop\",\n50: L\"Party 181\",",
        "context_after": "52: // Rock\n53: L\"Rock\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 55,
        "text": "www.181.fm/winamp.pls?station=181-buzz&file=181-buzz.pls\",",
        "context_before": "53: L\"Rock\",\n54: L\"The Buzz (Alt. Rock)\",",
        "context_after": "56: L\"Rock\",\n57: L\"Classic Buzz (Alt)\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 58,
        "text": "www.181.fm/winamp.pls?station=181-classicbuzz&file=181-classicbuzz.pls\",",
        "context_before": "56: L\"Rock\",\n57: L\"Classic Buzz (Alt)\",",
        "context_after": "59: L\"Rock\",\n60: L\"The Rock! (Hard Rock)\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 61,
        "text": "www.181.fm/winamp.pls?station=181-hardrock&file=181-hardrock.pls\",",
        "context_before": "59: L\"Rock\",\n60: L\"The Rock! (Hard Rock)\",",
        "context_after": "62: L\"Rock\",\n63: L\"Rock 181\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 64,
        "text": "www.181.fm/winamp.pls?station=181-rock&file=181-rock.pls\",",
        "context_before": "62: L\"Rock\",\n63: L\"Rock 181\",",
        "context_after": "65: L\"Rock\",\n66: L\"Chloe @181.FM\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 67,
        "text": "www.181.fm/winamp.pls?station=181-chloe&file=181-chloe.pls\",",
        "context_before": "65: L\"Rock\",\n66: L\"Chloe @181.FM\",",
        "context_after": "68: L\"Rock\",\n69: L\"The Eagle (Classic)\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 70,
        "text": "www.181.fm/winamp.pls?station=181-eagle&file=181-eagle.pls\",",
        "context_before": "68: L\"Rock\",\n69: L\"The Eagle (Classic)\",",
        "context_after": "71: L\"Rock\",\n72: L\"Rock 40 (Rock & Roll)\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 73,
        "text": "www.181.fm/winamp.pls?station=181-rock40&file=181-rock40.pls\",",
        "context_before": "71: L\"Rock\",\n72: L\"Rock 40 (Rock & Roll)\",",
        "context_after": "74: L\"Rock\",\n75: L\"The Point\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 76,
        "text": "www.181.fm/winamp.pls?station=181-thepoint&file=181-thepoint.pls\",",
        "context_before": "74: L\"Rock\",\n75: L\"The Point\",",
        "context_after": "77: L\"Rock\",\n78: L\"80's Hairband\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 79,
        "text": "www.181.fm/winamp.pls?station=181-hairband&file=181-hairband.pls\",",
        "context_before": "77: L\"Rock\",\n78: L\"80's Hairband\",",
        "context_after": "80: //L\"Rock\",\n81: //L\"Punk | Hardcore\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 80,
        "text": "L\"Rock\",",
        "context_before": "78: L\"80's Hairband\",\n79: L\"http://www.181.fm/winamp.pls?station=181-hairband&file=181-hairband.pls\",",
        "context_after": "81: //L\"Punk | Hardcore\",\n82: //L\"http://www.181.fm/winamp.pls?station=181-punk&file=181-punk.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 81,
        "text": "L\"Punk | Hardcore\",",
        "context_before": "79: L\"http://www.181.fm/winamp.pls?station=181-hairband&file=181-hairband.pls\",\n80: //L\"Rock\",",
        "context_after": "82: //L\"http://www.181.fm/winamp.pls?station=181-punk&file=181-punk.pls\",\n83: // Urban"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 82,
        "text": "L\"http://www.181.fm/winamp.pls?station=181-punk&file=181-punk.pls\",",
        "context_before": "80: //L\"Rock\",\n81: //L\"Punk | Hardcore\",",
        "context_after": "83: // Urban\n84: L\"Urban\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 86,
        "text": "www.181.fm/winamp.pls?station=181-beat&file=181-beat.pls\",",
        "context_before": "84: L\"Urban\",\n85: L\"The Beat (HipHop/R&B)\",",
        "context_after": "87: L\"Urban\",\n88: L\"Old School HipHop/RnB\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 89,
        "text": "www.181.fm/winamp.pls?station=181-oldschool&file=181-oldschool.pls\",",
        "context_before": "87: L\"Urban\",\n88: L\"Old School HipHop/RnB\",",
        "context_after": "90: L\"Urban\",\n91: L\"True R&B\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 92,
        "text": "www.181.fm/winamp.pls?station=181-rnb&file=181-rnb.pls\",",
        "context_before": "90: L\"Urban\",\n91: L\"True R&B\",",
        "context_after": "93: L\"Urban\",\n94: L\"The Box (Urban)\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 95,
        "text": "www.181.fm/winamp.pls?station=181-thebox&file=181-thebox.pls\",",
        "context_before": "93: L\"Urban\",\n94: L\"The Box (Urban)\",",
        "context_after": "96: //L\"Urban\",\n97: //L\"Trinity HipHop\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 96,
        "text": "L\"Urban\",",
        "context_before": "94: L\"The Box (Urban)\",\n95: L\"http://www.181.fm/winamp.pls?station=181-thebox&file=181-thebox.pls\",",
        "context_after": "97: //L\"Trinity HipHop\",\n98: //L\"http://www.181.fm/winamp.pls?station=181-trinity&file=181-trinity.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 97,
        "text": "L\"Trinity HipHop\",",
        "context_before": "95: L\"http://www.181.fm/winamp.pls?station=181-thebox&file=181-thebox.pls\",\n96: //L\"Urban\",",
        "context_after": "98: //L\"http://www.181.fm/winamp.pls?station=181-trinity&file=181-trinity.pls\",\n99: L\"Urban\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 98,
        "text": "L\"http://www.181.fm/winamp.pls?station=181-trinity&file=181-trinity.pls\",",
        "context_before": "96: //L\"Urban\",\n97: //L\"Trinity HipHop\",",
        "context_after": "99: L\"Urban\",\n100: L\"Jammin 181\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 101,
        "text": "www.181.fm/winamp.pls?station=181-jammin&file=181-jammin.pls\",",
        "context_before": "99: L\"Urban\",\n100: L\"Jammin 181\",",
        "context_after": "102: L\"Urban\",\n103: L\"Soul\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 104,
        "text": "www.181.fm/winamp.pls?station=181-soul&file=181-soul.pls\",",
        "context_before": "102: L\"Urban\",\n103: L\"Soul\",",
        "context_after": "105: // Dance\n106: L\"Dance\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 108,
        "text": "www.181.fm/winamp.pls?station=181-energy98&file=181-energy98.pls\",",
        "context_before": "106: L\"Dance\",\n107: L\"Energy 98\",",
        "context_after": "109: L\"Dance\",\n110: L\"Techno Club\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 111,
        "text": "www.181.fm/winamp.pls?station=181-technoclub&file=181-technoclub.pls\",",
        "context_before": "109: L\"Dance\",\n110: L\"Techno Club\",",
        "context_after": "112: L\"Dance\",\n113: L\"Energy 93 (Euro EDM)\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 114,
        "text": "www.181.fm/winamp.pls?station=181-energy93&file=181-energy93.pls\",",
        "context_before": "112: L\"Dance\",\n113: L\"Energy 93 (Euro EDM)\",",
        "context_after": "115: L\"Dance\",\n116: L\"Studio 181\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 117,
        "text": "www.181.fm/winamp.pls?station=181-ball&file=181-ball.pls\",",
        "context_before": "115: L\"Dance\",\n116: L\"Studio 181\",",
        "context_after": "118: L\"Dance\",\n119: L\"90's Dance\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 120,
        "text": "www.181.fm/winamp.pls?station=181-90sdance&file=181-90sdance.pls\",",
        "context_before": "118: L\"Dance\",\n119: L\"90's Dance\",",
        "context_after": "121: L\"Dance\",\n122: L\"Chilled Out\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 123,
        "text": "www.181.fm/winamp.pls?station=181-chilled&file=181-chilled.pls\",",
        "context_before": "121: L\"Dance\",\n122: L\"Chilled Out\",",
        "context_after": "124: L\"Dance\",\n125: L\"The Vibe of Vegas\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 126,
        "text": "www.181.fm/winamp.pls?station=181-vibe&file=181-vibe.pls\",",
        "context_before": "124: L\"Dance\",\n125: L\"The Vibe of Vegas\",",
        "context_after": "127: // Country\n128: L\"Country\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 127,
        "text": "Country",
        "context_before": "125: L\"The Vibe of Vegas\",\n126: L\"http://www.181.fm/winamp.pls?station=181-vibe&file=181-vibe.pls\",",
        "context_after": "128: L\"Country\",\n129: L\"Kickin' Country\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 130,
        "text": "www.181.fm/winamp.pls?station=181-kickincountry&file=181-kickincountry.pls\",",
        "context_before": "128: L\"Country\",\n129: L\"Kickin' Country\",",
        "context_after": "131: L\"Country\",\n132: L\"Real Country\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 133,
        "text": "www.181.fm/winamp.pls?station=181-realcountry&file=181-realcountry.pls\",",
        "context_before": "131: L\"Country\",\n132: L\"Real Country\",",
        "context_after": "134: L\"Country\",\n135: L\"90's Country\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 136,
        "text": "www.181.fm/winamp.pls?station=181-90scountry&file=181-90scountry.pls\",",
        "context_before": "134: L\"Country\",\n135: L\"90's Country\",",
        "context_after": "137: L\"Country\",\n138: L\"US 181\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 139,
        "text": "www.181.fm/winamp.pls?station=181-us181&file=181-us181.pls\",",
        "context_before": "137: L\"Country\",\n138: L\"US 181\",",
        "context_after": "140: L\"Country\",\n141: L\"80's Country\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 142,
        "text": "www.181.fm/winamp.pls?station=181-80scountry&file=181-80scountry.pls\",",
        "context_before": "140: L\"Country\",\n141: L\"80's Country\",",
        "context_after": "143: L\"Country\",\n144: L\"Highway 181\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 145,
        "text": "www.181.fm/winamp.pls?station=181-highway&file=181-highway.pls\",",
        "context_before": "143: L\"Country\",\n144: L\"Highway 181\",",
        "context_after": "146: L\"Country\",\n147: L\"Front Porch (Bluegrass)\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 148,
        "text": "www.181.fm/winamp.pls?station=181-frontporch&file=181-frontporch.pls\",",
        "context_before": "146: L\"Country\",\n147: L\"Front Porch (Bluegrass)\",",
        "context_after": "149: // Easy Listening\n150: L\"Easy Listening\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 149,
        "text": "Easy Listening",
        "context_before": "147: L\"Front Porch (Bluegrass)\",\n148: L\"http://www.181.fm/winamp.pls?station=181-frontporch&file=181-frontporch.pls\",",
        "context_after": "150: L\"Easy Listening\",\n151: L\"The Breeze\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 152,
        "text": "www.181.fm/winamp.pls?station=181-breeze&file=181-breeze.pls\",",
        "context_before": "150: L\"Easy Listening\",\n151: L\"The Breeze\",",
        "context_after": "153: L\"Easy Listening\",\n154: L\"Classical Guitar\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 155,
        "text": "www.181.fm/winamp.pls?station=181-classicalguitar&file=181-classicalguitar.pls\",",
        "context_before": "153: L\"Easy Listening\",\n154: L\"Classical Guitar\",",
        "context_after": "156: L\"Easy Listening\",\n157: L\"Classical Jazz\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 158,
        "text": "www.181.fm/winamp.pls?station=181-classicaljazz&file=181-classicaljazz.pls\",",
        "context_before": "156: L\"Easy Listening\",\n157: L\"Classical Jazz\",",
        "context_after": "159: L\"Easy Listening\",\n160: L\"Vocal Jazz\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 161,
        "text": "www.181.fm/winamp.pls?station=181-vocals&file=181-vocals.pls\",",
        "context_before": "159: L\"Easy Listening\",\n160: L\"Vocal Jazz\",",
        "context_after": "162: L\"Easy Listening\",\n163: L\"BeBop Jazz\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 164,
        "text": "www.181.fm/winamp.pls?station=181-bebop&file=181-bebop.pls\",",
        "context_before": "162: L\"Easy Listening\",\n163: L\"BeBop Jazz\",",
        "context_after": "165: L\"Easy Listening\",\n166: L\"Sensual World\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 167,
        "text": "www.181.fm/winamp.pls?station=181-sensual&file=181-sensual.pls\",",
        "context_before": "165: L\"Easy Listening\",\n166: L\"Sensual World\",",
        "context_after": "168: L\"Easy Listening\",\n169: L\"Fusion Jazz\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 170,
        "text": "www.181.fm/winamp.pls?station=181-fusionjazz&file=181-fusionjazz.pls\",",
        "context_before": "168: L\"Easy Listening\",\n169: L\"Fusion Jazz\",",
        "context_after": "171: L\"Easy Listening\",\n172: L\"Trance Jazz\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 173,
        "text": "www.181.fm/winamp.pls?station=181-trancejazz&file=181-trancejazz.pls\",",
        "context_before": "171: L\"Easy Listening\",\n172: L\"Trance Jazz\",",
        "context_after": "174: L\"Easy Listening\",\n175: L\"True Blues\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 176,
        "text": "www.181.fm/winamp.pls?station=181-blues&file=181-blues.pls\",",
        "context_before": "174: L\"Easy Listening\",\n175: L\"True Blues\",",
        "context_after": "177: L\"Easy Listening\",\n178: L\"Classical Music\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 179,
        "text": "www.181.fm/winamp.pls?station=181-classical&file=181-classical.pls\",",
        "context_before": "177: L\"Easy Listening\",\n178: L\"Classical Music\",",
        "context_after": "180: L\"Easy Listening\",\n181: L\"Acid Jazz\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 182,
        "text": "www.181.fm/winamp.pls?station=181-acidjazz&file=181-acidjazz.pls\",",
        "context_before": "180: L\"Easy Listening\",\n181: L\"Acid Jazz\",",
        "context_after": "183: // Latin\n184: L\"Latin\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 186,
        "text": "www.181.fm/winamp.pls?station=181-reggae&file=181-reggae.pls\",",
        "context_before": "184: L\"Latin\",\n185: L\"Reggae Roots\",",
        "context_after": "187: L\"Latin\",\n188: L\"Salsa\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 189,
        "text": "www.181.fm/winamp.pls?station=181-salsa&file=181-salsa.pls\",",
        "context_before": "187: L\"Latin\",\n188: L\"Salsa\",",
        "context_after": "190: // Talk Radio\n191: L\"Talk Radio\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 190,
        "text": "Talk Radio",
        "context_before": "188: L\"Salsa\",\n189: L\"http://www.181.fm/winamp.pls?station=181-salsa&file=181-salsa.pls\",",
        "context_after": "191: L\"Talk Radio\",\n192: L\"Comedy Club\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 193,
        "text": "www.181.fm/winamp.pls?station=181-comedy&file=181-comedy.pls\",",
        "context_before": "191: L\"Talk Radio\",\n192: L\"Comedy Club\",",
        "context_after": "194: // Oldies\n195: L\"Oldies\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 194,
        "text": "Oldies",
        "context_before": "192: L\"Comedy Club\",\n193: L\"http://www.181.fm/winamp.pls?station=181-comedy&file=181-comedy.pls\",",
        "context_after": "195: L\"Oldies\",\n196: L\"Beatles\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 197,
        "text": "www.181.fm/winamp.pls?station=181-beatles&file=181-beatles.pls\",",
        "context_before": "195: L\"Oldies\",\n196: L\"Beatles\",",
        "context_after": "198: L\"Oldies\",\n199: L\"Soul\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 200,
        "text": "www.181.fm/winamp.pls?station=181-soul&file=181-soul.pls\",",
        "context_before": "198: L\"Oldies\",\n199: L\"Soul\",",
        "context_after": "201: L\"Oldies\",\n202: L\"Mellow Gold\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 203,
        "text": "www.181.fm/winamp.pls?station=181-mellow&file=181-mellow.pls\",",
        "context_before": "201: L\"Oldies\",\n202: L\"Mellow Gold\",",
        "context_after": "204: L\"Oldies\",\n205: L\"Classic Hits 181\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 206,
        "text": "www.181.fm/winamp.pls?station=181-greatoldies&file=181-greatoldies.pls\",",
        "context_before": "204: L\"Oldies\",\n205: L\"Classic Hits 181\",",
        "context_after": "207: L\"Oldies\",\n208: L\"Good Time Oldies\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 209,
        "text": "www.181.fm/winamp.pls?station=181-goodtime&file=181-goodtime.pls\",",
        "context_before": "207: L\"Oldies\",\n208: L\"Good Time Oldies\",",
        "context_after": "210: L\"Oldies\",\n211: L\"Super 70s\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 212,
        "text": "www.181.fm/winamp.pls?station=181-70s&file=181-70s.pls\",",
        "context_before": "210: L\"Oldies\",\n211: L\"Super 70s\",",
        "context_after": "213: // 80's Decade\n214: L\"80's Decade\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 213,
        "text": "80's Decade",
        "context_before": "211: L\"Super 70s\",\n212: L\"http://www.181.fm/winamp.pls?station=181-70s&file=181-70s.pls\",",
        "context_after": "214: L\"80's Decade\",\n215: L\"80's Country\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 216,
        "text": "www.181.fm/winamp.pls?station=181-80scountry&file=181-80scountry.pls\",",
        "context_before": "214: L\"80's Decade\",\n215: L\"80's Country\",",
        "context_after": "217: L\"80's Decade\",\n218: L\"Awesome 80's\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 219,
        "text": "www.181.fm/winamp.pls?station=181-awesome80s&file=181-awesome80s.pls\",",
        "context_before": "217: L\"80's Decade\",\n218: L\"Awesome 80's\",",
        "context_after": "220: L\"80's Decade\",\n221: L\"Lite 80's\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 222,
        "text": "www.181.fm/winamp.pls?station=181-lite80s&file=181-lite80s.pls\",",
        "context_before": "220: L\"80's Decade\",\n221: L\"Lite 80's\",",
        "context_after": "223: // 90's Decade\n224: L\"90's Decade\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 223,
        "text": "90's Decade",
        "context_before": "221: L\"Lite 80's\",\n222: L\"http://www.181.fm/winamp.pls?station=181-lite80s&file=181-lite80s.pls\",",
        "context_after": "224: L\"90's Decade\",\n225: L\"Star 90's\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 226,
        "text": "www.181.fm/winamp.pls?station=181-star90s&file=181-star90s.pls\",",
        "context_before": "224: L\"90's Decade\",\n225: L\"Star 90's\",",
        "context_after": "227: L\"90's Decade\",\n228: L\"90's Country\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 229,
        "text": "www.181.fm/winamp.pls?station=181-90scountry&file=181-90scountry.pls\",",
        "context_before": "227: L\"90's Decade\",\n228: L\"90's Country\",",
        "context_after": "230: L\"90's Decade\",\n231: L\"Lite 90's\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 232,
        "text": "www.181.fm/winamp.pls?station=181-lite90s&file=181-lite90s.pls\",",
        "context_before": "230: L\"90's Decade\",\n231: L\"Lite 90's\",",
        "context_after": "233: L\"90's Decade\",\n234: L\"90's Alternative\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 235,
        "text": "www.181.fm/winamp.pls?station=181-90salt&file=181-90salt.pls\",",
        "context_before": "233: L\"90's Decade\",\n234: L\"90's Alternative\",",
        "context_after": "236: L\"90's Decade\",\n237: L\"90's Dance\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 238,
        "text": "www.181.fm/winamp.pls?station=181-90sdance&file=181-90sdance.pls\",",
        "context_before": "236: L\"90's Decade\",\n237: L\"90's Dance\",",
        "context_after": "239: // Christmas\n240: L\"Christmas\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 239,
        "text": "Christmas",
        "context_before": "237: L\"90's Dance\",\n238: L\"http://www.181.fm/winamp.pls?station=181-90sdance&file=181-90sdance.pls\",",
        "context_after": "240: L\"Christmas\",\n241: L\"Kountry\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 242,
        "text": "www.181.fm/winamp.pls?station=181-xkkountry&file=181-xkkountry.pls\",",
        "context_before": "240: L\"Christmas\",\n241: L\"Kountry\",",
        "context_after": "243: L\"Christmas\",\n244: L\"Classics\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 245,
        "text": "www.181.fm/winamp.pls?station=181-xtraditional&file=181-xtraditional.pls\",",
        "context_before": "243: L\"Christmas\",\n244: L\"Classics\",",
        "context_after": "246: L\"Christmas\",\n247: L\"Oldies\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 248,
        "text": "www.181.fm/winamp.pls?station=181-xoldies&file=181-xoldies.pls\",",
        "context_before": "246: L\"Christmas\",\n247: L\"Oldies\",",
        "context_after": "249: L\"Christmas\",\n250: L\"Country\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 251,
        "text": "www.181.fm/winamp.pls?station=181-xcountry&file=181-xcountry.pls\",",
        "context_before": "249: L\"Christmas\",\n250: L\"Country\",",
        "context_after": "252: L\"Christmas\",\n253: L\"Power\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 254,
        "text": "www.181.fm/winamp.pls?station=181-xpower&file=181-xpower.pls\",",
        "context_before": "252: L\"Christmas\",\n253: L\"Power\",",
        "context_after": "255: L\"Christmas\",\n256: L\"Highway\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 257,
        "text": "www.181.fm/winamp.pls?station=181-xhighway&file=181-xhighway.pls\",",
        "context_before": "255: L\"Christmas\",\n256: L\"Highway\",",
        "context_after": "258: L\"Christmas\",\n259: L\"Soundtracks\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 260,
        "text": "www.181.fm/winamp.pls?station=181-xsoundtrax&file=181-xsoundtrax.pls\",",
        "context_before": "258: L\"Christmas\",\n259: L\"Soundtracks\",",
        "context_after": "261: L\"Christmas\",\n262: L\"R&B\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 263,
        "text": "www.181.fm/winamp.pls?station=181-xtrue&file=181-xtrue.pls\",",
        "context_before": "261: L\"Christmas\",\n262: L\"R&B\",",
        "context_after": "264: L\"Christmas\",\n265: L\"Rock\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 266,
        "text": "www.181.fm/winamp.pls?station=181-xrock&file=181-xrock.pls\",",
        "context_before": "264: L\"Christmas\",\n265: L\"Rock\",",
        "context_after": "267: L\"Christmas\",\n268: L\"Mix\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 269,
        "text": "www.181.fm/winamp.pls?station=181-xmix&file=181-xmix.pls\",",
        "context_before": "267: L\"Christmas\",\n268: L\"Mix\",",
        "context_after": "270: L\"Christmas\",\n271: L\"Fun\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 272,
        "text": "www.181.fm/winamp.pls?station=181-xfun&file=181-xfun.pls\",",
        "context_before": "270: L\"Christmas\",\n271: L\"Fun\",",
        "context_after": "273: L\"Christmas\",\n274: L\"Kids\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 275,
        "text": "www.181.fm/winamp.pls?station=181-xkids&file=181-xkids.pls\",",
        "context_before": "273: L\"Christmas\",\n274: L\"Kids\",",
        "context_after": "276: L\"Christmas\",\n277: L\"Blender\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 278,
        "text": "www.181.fm/winamp.pls?station=181-xblender&file=181-xblender.pls\",",
        "context_before": "276: L\"Christmas\",\n277: L\"Blender\",",
        "context_after": "279: L\"Christmas\",\n280: L\"Standards\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 281,
        "text": "www.181.fm/winamp.pls?station=181-xstandards&file=181-xstandards.pls\",",
        "context_before": "279: L\"Christmas\",\n280: L\"Standards\",",
        "context_after": "282: L\"Christmas\",\n283: L\"Spirit\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 284,
        "text": "www.181.fm/winamp.pls?station=181-xspirit&file=181-xspirit.pls\",",
        "context_before": "282: L\"Christmas\",\n283: L\"Spirit\",",
        "context_after": "285: L\"Christmas\",\n286: L\"Smooth Jazz\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 287,
        "text": "www.181.fm/winamp.pls?station=181-xsmooth&file=181-xsmooth.pls\",",
        "context_before": "285: L\"Christmas\",\n286: L\"Smooth Jazz\",",
        "context_after": "288: L\"Christmas\",\n289: L\"Gospel\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 290,
        "text": "www.181.fm/winamp.pls?station=181-xgospel&file=181-xgospel.pls\",",
        "context_before": "288: L\"Christmas\",\n289: L\"Gospel\",",
        "context_after": "291: L\"Christmas\",\n292: L\"Swing\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 293,
        "text": "www.181.fm/winamp.pls?station=181-xswing&file=181-xswing.pls\",",
        "context_before": "291: L\"Christmas\",\n292: L\"Swing\",",
        "context_after": "294: };\n295: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 298,
        "text": "977music.com/itunes/80s.pls\",",
        "context_before": "296: static const WCHAR* radio_977[] = {\n297: L\"80s\",",
        "context_after": "299: L\"90s\",\n300: L\"http://www.977music.com/itunes/90s.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 300,
        "text": "www.977music.com/itunes/90s.pls\",",
        "context_before": "298: L\"http://977music.com/itunes/80s.pls\",\n299: L\"90s\",",
        "context_after": "301: L\"Alternative\",\n302: L\"http://www.977music.com/itunes/alternative.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 302,
        "text": "www.977music.com/itunes/alternative.pls\",",
        "context_before": "300: L\"http://www.977music.com/itunes/90s.pls\",\n301: L\"Alternative\",",
        "context_after": "303: L\"Classic Rock\",\n304: L\"http://www.977music.com/itunes/classicrock.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 304,
        "text": "www.977music.com/itunes/classicrock.pls\",",
        "context_before": "302: L\"http://www.977music.com/itunes/alternative.pls\",\n303: L\"Classic Rock\",",
        "context_after": "305: L\"Comedy\",\n306: L\"http://www.977music.com/itunes/comedy.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 306,
        "text": "www.977music.com/itunes/comedy.pls\",",
        "context_before": "304: L\"http://www.977music.com/itunes/classicrock.pls\",\n305: L\"Comedy\",",
        "context_after": "307: L\"Country\",\n308: L\"http://www.977music.com/977hicountry.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 308,
        "text": "www.977music.com/977hicountry.pls\",",
        "context_before": "306: L\"http://www.977music.com/itunes/comedy.pls\",\n307: L\"Country\",",
        "context_after": "309: L\"Hitz\",\n310: L\"http://977music.com/itunes/hitz.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 310,
        "text": "977music.com/itunes/hitz.pls\",",
        "context_before": "308: L\"http://www.977music.com/977hicountry.pls\",\n309: L\"Hitz\",",
        "context_after": "311: L\"Jams\",\n312: L\"http://www.977music.com/itunes/jamz.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 312,
        "text": "www.977music.com/itunes/jamz.pls\",",
        "context_before": "310: L\"http://977music.com/itunes/hitz.pls\",\n311: L\"Jams\",",
        "context_after": "313: L\"Mix\",\n314: L\"http://www.977music.com/itunes/mix.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 314,
        "text": "www.977music.com/itunes/mix.pls\",",
        "context_before": "312: L\"http://www.977music.com/itunes/jamz.pls\",\n313: L\"Mix\",",
        "context_after": "315: L\"Oldies\",\n316: L\"http://www.977music.com/itunes/oldies.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 316,
        "text": "www.977music.com/itunes/oldies.pls\",",
        "context_before": "314: L\"http://www.977music.com/itunes/mix.pls\",\n315: L\"Oldies\",",
        "context_after": "317: L\"Smooth Jazz\",\n318: L\"http://www.977music.com/itunes/jazz.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 318,
        "text": "www.977music.com/itunes/jazz.pls\",",
        "context_before": "316: L\"http://www.977music.com/itunes/oldies.pls\",\n317: L\"Smooth Jazz\",",
        "context_after": "319: };\n320: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 322,
        "text": "OLD 480 Minutes",
        "context_before": "320: \n321: static const WCHAR* radio_Soma[] = {",
        "context_after": "323: L\"https://somafm.com/bagel130.pls\",\n324: L\"Beat Blender\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 323,
        "text": "somafm.com/bagel130.pls\",",
        "context_before": "321: static const WCHAR* radio_Soma[] = {\n322: L\"BAGeL Radio\", // OLD 480 Minutes",
        "context_after": "324: L\"Beat Blender\",\n325: L\"https://somafm.com/beatblender130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 325,
        "text": "somafm.com/beatblender130.pls\",",
        "context_before": "323: L\"https://somafm.com/bagel130.pls\",\n324: L\"Beat Blender\",",
        "context_after": "326: L\"Black Rock FM\",\n327: L\"https://somafm.com/brfm130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 327,
        "text": "somafm.com/brfm130.pls\",",
        "context_before": "325: L\"https://somafm.com/beatblender130.pls\",\n326: L\"Black Rock FM\",",
        "context_after": "328: L\"Boot Liquor\",\n329: L\"https://somafm.com/bootliquor320.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 329,
        "text": "somafm.com/bootliquor320.pls\",",
        "context_before": "327: L\"https://somafm.com/brfm130.pls\",\n328: L\"Boot Liquor\",",
        "context_after": "330: //L\"Christmas Lounge\",\n331: //L\"http://somafm.com/christmas.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 330,
        "text": "L\"Christmas Lounge\",",
        "context_before": "328: L\"Boot Liquor\",\n329: L\"https://somafm.com/bootliquor320.pls\",",
        "context_after": "331: //L\"http://somafm.com/christmas.pls\",\n332: //L\"Christmas Rocks!\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 331,
        "text": "L\"http://somafm.com/christmas.pls\",",
        "context_before": "329: L\"https://somafm.com/bootliquor320.pls\",\n330: //L\"Christmas Lounge\",",
        "context_after": "332: //L\"Christmas Rocks!\",\n333: //L\"http://somafm.com/xmasrocks130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 332,
        "text": "L\"Christmas Rocks!\",",
        "context_before": "330: //L\"Christmas Lounge\",\n331: //L\"http://somafm.com/christmas.pls\",",
        "context_after": "333: //L\"http://somafm.com/xmasrocks130.pls\",\n334: L\"cliqhop idm\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 333,
        "text": "L\"http://somafm.com/xmasrocks130.pls\",",
        "context_before": "331: //L\"http://somafm.com/christmas.pls\",\n332: //L\"Christmas Rocks!\",",
        "context_after": "334: L\"cliqhop idm\",\n335: L\"https://somafm.com/cliqhop256.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 335,
        "text": "somafm.com/cliqhop256.pls\",",
        "context_before": "333: //L\"http://somafm.com/xmasrocks130.pls\",\n334: L\"cliqhop idm\",",
        "context_after": "336: L\"Covers\",\n337: L\"https://somafm.com/covers130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 337,
        "text": "somafm.com/covers130.pls\",",
        "context_before": "335: L\"https://somafm.com/cliqhop256.pls\",\n336: L\"Covers\",",
        "context_after": "338: L\"Deep Space One\",\n339: L\"https://somafm.com/deepspaceone130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 339,
        "text": "somafm.com/deepspaceone130.pls\",",
        "context_before": "337: L\"https://somafm.com/covers130.pls\",\n338: L\"Deep Space One\",",
        "context_after": "340: L\"DEF CON Radio\",\n341: L\"https://somafm.com/defcon256.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 341,
        "text": "somafm.com/defcon256.pls\",",
        "context_before": "339: L\"https://somafm.com/deepspaceone130.pls\",\n340: L\"DEF CON Radio\",",
        "context_after": "342: L\"Digitalis\",\n343: L\"https://somafm.com/digitalis130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 343,
        "text": "somafm.com/digitalis130.pls\",",
        "context_before": "341: L\"https://somafm.com/defcon256.pls\",\n342: L\"Digitalis\",",
        "context_after": "344: //L\"Doomed\",\n345: //L\"http://somafm.com/doomed130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 344,
        "text": "L\"Doomed\",",
        "context_before": "342: L\"Digitalis\",\n343: L\"https://somafm.com/digitalis130.pls\",",
        "context_after": "345: //L\"http://somafm.com/doomed130.pls\",\n346: L\"Drone Zone\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 345,
        "text": "L\"http://somafm.com/doomed130.pls\",",
        "context_before": "343: L\"https://somafm.com/digitalis130.pls\",\n344: //L\"Doomed\",",
        "context_after": "346: L\"Drone Zone\",\n347: L\"https://somafm.com/dronezone256.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 347,
        "text": "somafm.com/dronezone256.pls\",",
        "context_before": "345: //L\"http://somafm.com/doomed130.pls\",\n346: L\"Drone Zone\",",
        "context_after": "348: L\"Dub Step Beyond\",\n349: L\"https://somafm.com/dubstep256.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 349,
        "text": "somafm.com/dubstep256.pls\",",
        "context_before": "347: L\"https://somafm.com/dronezone256.pls\",\n348: L\"Dub Step Beyond\",",
        "context_after": "350: //L\"Earwaves\",\n351: //L\"http://somafm.com/earwaves130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 350,
        "text": "L\"Earwaves\",",
        "context_before": "348: L\"Dub Step Beyond\",\n349: L\"https://somafm.com/dubstep256.pls\",",
        "context_after": "351: //L\"http://somafm.com/earwaves130.pls\",\n352: L\"Fluid\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 351,
        "text": "L\"http://somafm.com/earwaves130.pls\",",
        "context_before": "349: L\"https://somafm.com/dubstep256.pls\",\n350: //L\"Earwaves\",",
        "context_after": "352: L\"Fluid\",\n353: L\"https://somafm.com/fluid130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 353,
        "text": "somafm.com/fluid130.pls\",",
        "context_before": "351: //L\"http://somafm.com/earwaves130.pls\",\n352: L\"Fluid\",",
        "context_after": "354: L\"Folk Forward\",\n355: L\"https://somafm.com/folkfwd130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 355,
        "text": "somafm.com/folkfwd130.pls\",",
        "context_before": "353: L\"https://somafm.com/fluid130.pls\",\n354: L\"Folk Forward\",",
        "context_after": "356: L\"Groove Salad\",\n357: L\"https://somafm.com/groovesalad256.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 357,
        "text": "somafm.com/groovesalad256.pls\",",
        "context_before": "355: L\"https://somafm.com/folkfwd130.pls\",\n356: L\"Groove Salad\",",
        "context_after": "358: //L\"Iceland Airwaves\",\n359: //L\"http://somafm.com/wma128/airwaves.asx\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 358,
        "text": "L\"Iceland Airwaves\",",
        "context_before": "356: L\"Groove Salad\",\n357: L\"https://somafm.com/groovesalad256.pls\",",
        "context_after": "359: //L\"http://somafm.com/wma128/airwaves.asx\",\n360: L\"Illinois Street Lounge\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 359,
        "text": "L\"http://somafm.com/wma128/airwaves.asx\",",
        "context_before": "357: L\"https://somafm.com/groovesalad256.pls\",\n358: //L\"Iceland Airwaves\",",
        "context_after": "360: L\"Illinois Street Lounge\",\n361: L\"https://somafm.com/illstreet130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 361,
        "text": "somafm.com/illstreet130.pls\",",
        "context_before": "359: //L\"http://somafm.com/wma128/airwaves.asx\",\n360: L\"Illinois Street Lounge\",",
        "context_after": "362: L\"Indie Pop Rocks!\",\n363: L\"https://somafm.com/indiepop130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 363,
        "text": "somafm.com/indiepop130.pls\",",
        "context_before": "361: L\"https://somafm.com/illstreet130.pls\",\n362: L\"Indie Pop Rocks!\",",
        "context_after": "364: L\"Left Coast 70s\",\n365: L\"https://somafm.com/seventies320.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 365,
        "text": "somafm.com/seventies320.pls\",",
        "context_before": "363: L\"https://somafm.com/indiepop130.pls\",\n364: L\"Left Coast 70s\",",
        "context_after": "366: L\"Lush\",\n367: L\"https://somafm.com/lush130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 367,
        "text": "somafm.com/lush130.pls\",",
        "context_before": "365: L\"https://somafm.com/seventies320.pls\",\n366: L\"Lush\",",
        "context_after": "368: L\"Metal Detector\",\n369: L\"https://somafm.com/metal130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 369,
        "text": "somafm.com/metal130.pls\",",
        "context_before": "367: L\"https://somafm.com/lush130.pls\",\n368: L\"Metal Detector\",",
        "context_after": "370: L\"Mission Control\",\n371: L\"https://somafm.com/missioncontrol130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 371,
        "text": "somafm.com/missioncontrol130.pls\",",
        "context_before": "369: L\"https://somafm.com/metal130.pls\",\n370: L\"Mission Control\",",
        "context_after": "372: L\"PopTron\",\n373: L\"https://somafm.com/poptron130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 373,
        "text": "somafm.com/poptron130.pls\",",
        "context_before": "371: L\"https://somafm.com/missioncontrol130.pls\",\n372: L\"PopTron\",",
        "context_after": "374: L\"Secret Agent\",\n375: L\"https://somafm.com/secretagent130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 375,
        "text": "somafm.com/secretagent130.pls\",",
        "context_before": "373: L\"https://somafm.com/poptron130.pls\",\n374: L\"Secret Agent\",",
        "context_after": "376: L\"Seven Inch Soul\",\n377: L\"https://somafm.com/7soul130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 377,
        "text": "somafm.com/7soul130.pls\",",
        "context_before": "375: L\"https://somafm.com/secretagent130.pls\",\n376: L\"Seven Inch Soul\",",
        "context_after": "378: L\"SF 10-33\",\n379: L\"https://somafm.com/sf1033130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 379,
        "text": "somafm.com/sf1033130.pls\",",
        "context_before": "377: L\"https://somafm.com/7soul130.pls\",\n378: L\"SF 10-33\",",
        "context_after": "380: L\"Sonic Universe\",\n381: L\"https://somafm.com/sonicuniverse192.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 381,
        "text": "somafm.com/sonicuniverse192.pls\",",
        "context_before": "379: L\"https://somafm.com/sf1033130.pls\",\n380: L\"Sonic Universe\",",
        "context_after": "382: //L\"South by Soma\",\n383: //L\"http://somafm.com/wma128/sxfm.asx\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 382,
        "text": "L\"South by Soma\",",
        "context_before": "380: L\"Sonic Universe\",\n381: L\"https://somafm.com/sonicuniverse192.pls\",",
        "context_after": "383: //L\"http://somafm.com/wma128/sxfm.asx\",\n384: L\"Space Station Soma\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 383,
        "text": "L\"http://somafm.com/wma128/sxfm.asx\",",
        "context_before": "381: L\"https://somafm.com/sonicuniverse192.pls\",\n382: //L\"South by Soma\",",
        "context_after": "384: L\"Space Station Soma\",\n385: L\"https://somafm.com/spacestation130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 385,
        "text": "somafm.com/spacestation130.pls\",",
        "context_before": "383: //L\"http://somafm.com/wma128/sxfm.asx\",\n384: L\"Space Station Soma\",",
        "context_after": "386: L\"Suburbs of Goa\",\n387: L\"https://somafm.com/suburbsofgoa130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 387,
        "text": "somafm.com/suburbsofgoa130.pls\",",
        "context_before": "385: L\"https://somafm.com/spacestation130.pls\",\n386: L\"Suburbs of Goa\",",
        "context_after": "388: //L\"The Silent Channel\",\n389: //L\"http://somafm.com/silent130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 388,
        "text": "L\"The Silent Channel\",",
        "context_before": "386: L\"Suburbs of Goa\",\n387: L\"https://somafm.com/suburbsofgoa130.pls\",",
        "context_after": "389: //L\"http://somafm.com/silent130.pls\",\n390: L\"The Trip\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 389,
        "text": "L\"http://somafm.com/silent130.pls\",",
        "context_before": "387: L\"https://somafm.com/suburbsofgoa130.pls\",\n388: //L\"The Silent Channel\",",
        "context_after": "390: L\"The Trip\",\n391: L\"https://somafm.com/thetrip130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 391,
        "text": "somafm.com/thetrip130.pls\",",
        "context_before": "389: //L\"http://somafm.com/silent130.pls\",\n390: L\"The Trip\",",
        "context_after": "392: L\"ThistleRadio\",\n393: L\"https://somafm.com/thistle130.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 393,
        "text": "somafm.com/thistle130.pls\",",
        "context_before": "391: L\"https://somafm.com/thetrip130.pls\",\n392: L\"ThistleRadio\",",
        "context_after": "394: L\"Underground 80s\",\n395: L\"https://somafm.com/u80s256.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 395,
        "text": "somafm.com/u80s256.pls\",",
        "context_before": "393: L\"https://somafm.com/thistle130.pls\",\n394: L\"Underground 80s\",",
        "context_after": "396: //L\"Xmas in Frisko\",\n397: //L\"http://somafm.com/xmasinfrisko.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 396,
        "text": "L\"Xmas in Frisko\",",
        "context_before": "394: L\"Underground 80s\",\n395: L\"https://somafm.com/u80s256.pls\",",
        "context_after": "397: //L\"http://somafm.com/xmasinfrisko.pls\",\n398: };"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 397,
        "text": "L\"http://somafm.com/xmasinfrisko.pls\",",
        "context_before": "395: L\"https://somafm.com/u80s256.pls\",\n396: //L\"Xmas in Frisko\",",
        "context_after": "398: };\n399: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 402,
        "text": "orion.shoutca.st/tunein/asx9axis.pls\",",
        "context_before": "400: static const WCHAR* radio_DI[] = {\n401: L\"9Axis Trance\",",
        "context_after": "403: L\"ALYF Recordings\",\n404: L\"https://orion.shoutca.st/tunein/asxaiyf.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 404,
        "text": "orion.shoutca.st/tunein/asxaiyf.pls\",",
        "context_before": "402: L\"https://orion.shoutca.st/tunein/asx9axis.pls\",\n403: L\"ALYF Recordings\",",
        "context_after": "405: L\"ATG Trance\",\n406: L\"https://orion.shoutca.st/tunein/asxcobley.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 406,
        "text": "orion.shoutca.st/tunein/asxcobley.pls\",",
        "context_before": "404: L\"https://orion.shoutca.st/tunein/asxaiyf.pls\",\n405: L\"ATG Trance\",",
        "context_after": "407: L\"Ahmed Romel Trance\",\n408: L\"https://orion.shoutca.st/tunein/asxromel.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 408,
        "text": "orion.shoutca.st/tunein/asxromel.pls\",",
        "context_before": "406: L\"https://orion.shoutca.st/tunein/asxcobley.pls\",\n407: L\"Ahmed Romel Trance\",",
        "context_after": "409: L\"Ambient & Lounge\",\n410: L\"https://orion.shoutca.st/tunein/asxambient.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 410,
        "text": "orion.shoutca.st/tunein/asxambient.pls\",",
        "context_before": "408: L\"https://orion.shoutca.st/tunein/asxromel.pls\",\n409: L\"Ambient & Lounge\",",
        "context_after": "411: L\"Ambient Fantasy\",\n412: L\"https://orion.shoutca.st/tunein/asxfantasy.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 412,
        "text": "orion.shoutca.st/tunein/asxfantasy.pls\",",
        "context_before": "410: L\"https://orion.shoutca.st/tunein/asxambient.pls\",\n411: L\"Ambient Fantasy\",",
        "context_after": "413: L\"Ambient Nature Sounds\",\n414: L\"https://orion.shoutca.st/tunein/asxnature.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 414,
        "text": "orion.shoutca.st/tunein/asxnature.pls\",",
        "context_before": "412: L\"https://orion.shoutca.st/tunein/asxfantasy.pls\",\n413: L\"Ambient Nature Sounds\",",
        "context_after": "415: L\"Astra Trance\",\n416: L\"https://orion.shoutca.st/tunein/astratrance.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 416,
        "text": "orion.shoutca.st/tunein/astratrance.pls\",",
        "context_before": "414: L\"https://orion.shoutca.st/tunein/asxnature.pls\",\n415: L\"Astra Trance\",",
        "context_after": "417: L\"Atlas Corporation Trance\",\n418: L\"https://orion.shoutca.st/tunein/asxatlas.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 418,
        "text": "orion.shoutca.st/tunein/asxatlas.pls\",",
        "context_before": "416: L\"https://orion.shoutca.st/tunein/astratrance.pls\",\n417: L\"Atlas Corporation Trance\",",
        "context_after": "419: L\"Blues Channel\",\n420: L\"https://orion.shoutca.st/tunein/asxblues.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 420,
        "text": "orion.shoutca.st/tunein/asxblues.pls\",",
        "context_before": "418: L\"https://orion.shoutca.st/tunein/asxatlas.pls\",\n419: L\"Blues Channel\",",
        "context_after": "421: L\"Christmas Channel\",\n422: L\"https://orion.shoutca.st/tunein/asxchristmas.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 422,
        "text": "orion.shoutca.st/tunein/asxchristmas.pls\",",
        "context_before": "420: L\"https://orion.shoutca.st/tunein/asxblues.pls\",\n421: L\"Christmas Channel\",",
        "context_after": "423: L\"Classic Rock Hits\",\n424: L\"https://orion.shoutca.st/tunein/asxrock.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 424,
        "text": "orion.shoutca.st/tunein/asxrock.pls\",",
        "context_before": "422: L\"https://orion.shoutca.st/tunein/asxchristmas.pls\",\n423: L\"Classic Rock Hits\",",
        "context_after": "425: L\"Classical Channel\",\n426: L\"https://orion.shoutca.st/tunein/asxclassical.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 426,
        "text": "orion.shoutca.st/tunein/asxclassical.pls\",",
        "context_before": "424: L\"https://orion.shoutca.st/tunein/asxrock.pls\",\n425: L\"Classical Channel\",",
        "context_after": "427: L\"Country Music\",\n428: L\"https://orion.shoutca.st/tunein/asxcountry.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 428,
        "text": "orion.shoutca.st/tunein/asxcountry.pls\",",
        "context_before": "426: L\"https://orion.shoutca.st/tunein/asxclassical.pls\",\n427: L\"Country Music\",",
        "context_after": "429: L\"DKR TecHouse\",\n430: L\"https://orion.shoutca.st/tunein/asxdkr.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 430,
        "text": "orion.shoutca.st/tunein/asxdkr.pls\",",
        "context_before": "428: L\"https://orion.shoutca.st/tunein/asxcountry.pls\",\n429: L\"DKR TecHouse\",",
        "context_after": "431: L\"Dance '80s\",\n432: L\"https://orion.shoutca.st/tunein/asx80s.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 432,
        "text": "orion.shoutca.st/tunein/asx80s.pls\",",
        "context_before": "430: L\"https://orion.shoutca.st/tunein/asxdkr.pls\",\n431: L\"Dance '80s\",",
        "context_after": "433: L\"Dance '90s\",\n434: L\"https://orion.shoutca.st/tunein/asx90s.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 434,
        "text": "orion.shoutca.st/tunein/asx90s.pls\",",
        "context_before": "432: L\"https://orion.shoutca.st/tunein/asx80s.pls\",\n433: L\"Dance '90s\",",
        "context_after": "435: L\"Ektoplazm PsyRadio\",\n436: L\"https://orion.shoutca.st/tunein/asxektoplazm.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 436,
        "text": "orion.shoutca.st/tunein/asxektoplazm.pls\",",
        "context_before": "434: L\"https://orion.shoutca.st/tunein/asx90s.pls\",\n435: L\"Ektoplazm PsyRadio\",",
        "context_after": "437: L\"Electro Swing & Funk\",\n438: L\"https://orion.shoutca.st/tunein/asxpop.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 438,
        "text": "orion.shoutca.st/tunein/asxpop.pls\",",
        "context_before": "436: L\"https://orion.shoutca.st/tunein/asxektoplazm.pls\",\n437: L\"Electro Swing & Funk\",",
        "context_after": "439: L\"Emacore Trance\",\n440: L\"https://orion.shoutca.st/tunein/asxemacore.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 440,
        "text": "orion.shoutca.st/tunein/asxemacore.pls\",",
        "context_before": "438: L\"https://orion.shoutca.st/tunein/asxpop.pls\",\n439: L\"Emacore Trance\",",
        "context_after": "441: L\"Evergreen Hits\",\n442: L\"https://orion.shoutca.st/tunein/asxoldies.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 442,
        "text": "orion.shoutca.st/tunein/asxoldies.pls\",",
        "context_before": "440: L\"https://orion.shoutca.st/tunein/asxemacore.pls\",\n441: L\"Evergreen Hits\",",
        "context_after": "443: L\"French Skies Trance\",\n444: L\"https://orion.shoutca.st/tunein/asxspies.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 444,
        "text": "orion.shoutca.st/tunein/asxspies.pls\",",
        "context_before": "442: L\"https://orion.shoutca.st/tunein/asxoldies.pls\",\n443: L\"French Skies Trance\",",
        "context_after": "445: L\"Gate Of Paradise\",\n446: L\"https://orion.shoutca.st/tunein/asxgate.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 446,
        "text": "orion.shoutca.st/tunein/asxgate.pls\",",
        "context_before": "444: L\"https://orion.shoutca.st/tunein/asxspies.pls\",\n445: L\"Gate Of Paradise\",",
        "context_after": "447: L\"Global Trance\",\n448: L\"https://orion.shoutca.st/tunein/asxtrance.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 448,
        "text": "orion.shoutca.st/tunein/asxtrance.pls\",",
        "context_before": "446: L\"https://orion.shoutca.st/tunein/asxgate.pls\",\n447: L\"Global Trance\",",
        "context_after": "449: L\"Heavy Metal\",\n450: L\"https://orion.shoutca.st/tunein/asxmetal.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 450,
        "text": "orion.shoutca.st/tunein/asxmetal.pls\",",
        "context_before": "448: L\"https://orion.shoutca.st/tunein/asxtrance.pls\",\n449: L\"Heavy Metal\",",
        "context_after": "451: L\"House Channel\",\n452: L\"https://orion.shoutca.st/tunein/asxcasw.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 452,
        "text": "orion.shoutca.st/tunein/asxcasw.pls\",",
        "context_before": "450: L\"https://orion.shoutca.st/tunein/asxmetal.pls\",\n451: L\"House Channel\",",
        "context_after": "453: L\"Jazz Channel\",\n454: L\"https://orion.shoutca.st/tunein/asxjyzz.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 454,
        "text": "orion.shoutca.st/tunein/asxjyzz.pls\",",
        "context_before": "452: L\"https://orion.shoutca.st/tunein/asxcasw.pls\",\n453: L\"Jazz Channel\",",
        "context_after": "455: //L\"Kuno Trance\",\n456: //L\"https://orion.shoutca.st/tunein/asxkuno.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 455,
        "text": "L\"Kuno Trance\",",
        "context_before": "453: L\"Jazz Channel\",\n454: L\"https://orion.shoutca.st/tunein/asxjyzz.pls\",",
        "context_after": "456: //L\"https://orion.shoutca.st/tunein/asxkuno.pls\",\n457: L\"Larix W. Trance\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 456,
        "text": "L\"https://orion.shoutca.st/tunein/asxkuno.pls\",",
        "context_before": "454: L\"https://orion.shoutca.st/tunein/asxjyzz.pls\",\n455: //L\"Kuno Trance\",",
        "context_after": "457: L\"Larix W. Trance\",\n458: L\"https://orion.shoutca.st/tunein/asxlarix.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 458,
        "text": "orion.shoutca.st/tunein/asxlarix.pls\",",
        "context_before": "456: //L\"https://orion.shoutca.st/tunein/asxkuno.pls\",\n457: L\"Larix W. Trance\",",
        "context_after": "459: L\"Liftburg Trance\",\n460: L\"https://orion.shoutca.st/tunein/asxtomas.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 460,
        "text": "orion.shoutca.st/tunein/asxtomas.pls\",",
        "context_before": "458: L\"https://orion.shoutca.st/tunein/asxlarix.pls\",\n459: L\"Liftburg Trance\",",
        "context_after": "461: L\"Matt Paul Uplifting\",\n462: L\"https://orion.shoutca.st/tunein/asxmatt.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 462,
        "text": "orion.shoutca.st/tunein/asxmatt.pls\",",
        "context_before": "460: L\"https://orion.shoutca.st/tunein/asxtomas.pls\",\n461: L\"Matt Paul Uplifting\",",
        "context_after": "463: L\"Movie Themes\",\n464: L\"https://orion.shoutca.st/tunein/asxmovie.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 464,
        "text": "orion.shoutca.st/tunein/asxmovie.pls\",",
        "context_before": "462: L\"https://orion.shoutca.st/tunein/asxmatt.pls\",\n463: L\"Movie Themes\",",
        "context_after": "465: L\"New Wave '80s\",\n466: L\"https://orion.shoutca.st/tunein/asxwave.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 466,
        "text": "orion.shoutca.st/tunein/asxwave.pls\",",
        "context_before": "464: L\"https://orion.shoutca.st/tunein/asxmovie.pls\",\n465: L\"New Wave '80s\",",
        "context_after": "467: L\"Nick Turner Trance\",\n468: L\"https://orion.shoutca.st/tunein/asxturner.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 468,
        "text": "orion.shoutca.st/tunein/asxturner.pls\",",
        "context_before": "466: L\"https://orion.shoutca.st/tunein/asxwave.pls\",\n467: L\"Nick Turner Trance\",",
        "context_after": "469: L\"Ori Uplift Trance\",\n470: L\"https://orion.shoutca.st/tunein/asxori.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 470,
        "text": "orion.shoutca.st/tunein/asxori.pls\",",
        "context_before": "468: L\"https://orion.shoutca.st/tunein/asxturner.pls\",\n469: L\"Ori Uplift Trance\",",
        "context_after": "471: L\"Paradise Trance\",\n472: L\"https://orion.shoutca.st/tunein/asxatg.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 472,
        "text": "orion.shoutca.st/tunein/asxatg.pls\",",
        "context_before": "470: L\"https://orion.shoutca.st/tunein/asxori.pls\",\n471: L\"Paradise Trance\",",
        "context_after": "473: L\"PowerMixNetwork House\",\n474: L\"https://orion.shoutca.st/tunein/pmnstream1.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 474,
        "text": "orion.shoutca.st/tunein/pmnstream1.pls\",",
        "context_before": "472: L\"https://orion.shoutca.st/tunein/asxatg.pls\",\n473: L\"PowerMixNetwork House\",",
        "context_after": "475: L\"PowerMixNetwork UNDGND\",\n476: L\"https://orion.shoutca.st/tunein/pmnstream2.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 476,
        "text": "orion.shoutca.st/tunein/pmnstream2.pls\",",
        "context_before": "474: L\"https://orion.shoutca.st/tunein/pmnstream1.pls\",\n475: L\"PowerMixNetwork UNDGND\",",
        "context_after": "477: L\"PsychedelicTribe\",\n478: L\"https://orion.shoutca.st/tunein/asxpsy.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 478,
        "text": "orion.shoutca.st/tunein/asxpsy.pls\",",
        "context_before": "476: L\"https://orion.shoutca.st/tunein/pmnstream2.pls\",\n477: L\"PsychedelicTribe\",",
        "context_after": "479: L\"Pulsar Recordings\",\n480: L\"https://orion.shoutca.st/tunein/asxpulsar.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 480,
        "text": "orion.shoutca.st/tunein/asxpulsar.pls\",",
        "context_before": "478: L\"https://orion.shoutca.st/tunein/asxpsy.pls\",\n479: L\"Pulsar Recordings\",",
        "context_after": "481: L\"Reggae\",\n482: L\"https://orion.shoutca.st/tunein/asxreggae.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 482,
        "text": "orion.shoutca.st/tunein/asxreggae.pls\",",
        "context_before": "480: L\"https://orion.shoutca.st/tunein/asxpulsar.pls\",\n481: L\"Reggae\",",
        "context_after": "483: L\"Rik Tights Trance\",\n484: L\"https://orion.shoutca.st/tunein/asxtights.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 484,
        "text": "orion.shoutca.st/tunein/asxtights.pls\",",
        "context_before": "482: L\"https://orion.shoutca.st/tunein/asxreggae.pls\",\n483: L\"Rik Tights Trance\",",
        "context_after": "485: L\"Sean & Xander Trance\",\n486: L\"https://orion.shoutca.st/tunein/asxseanxander.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 486,
        "text": "orion.shoutca.st/tunein/asxseanxander.pls\",",
        "context_before": "484: L\"https://orion.shoutca.st/tunein/asxtights.pls\",\n485: L\"Sean & Xander Trance\",",
        "context_after": "487: L\"Sonic Oblivion Trance\",\n488: L\"https://orion.shoutca.st/tunein/asxoblivion.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 488,
        "text": "orion.shoutca.st/tunein/asxoblivion.pls\",",
        "context_before": "486: L\"https://orion.shoutca.st/tunein/asxseanxander.pls\",\n487: L\"Sonic Oblivion Trance\",",
        "context_after": "489: L\"Sundance Recordings\",\n490: L\"https://orion.shoutca.st/tunein/asxsundance.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 490,
        "text": "orion.shoutca.st/tunein/asxsundance.pls\",",
        "context_before": "488: L\"https://orion.shoutca.st/tunein/asxoblivion.pls\",\n489: L\"Sundance Recordings\",",
        "context_after": "491: L\"Techno Channel\",\n492: L\"https://orion.shoutca.st/tunein/asxrik.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 492,
        "text": "orion.shoutca.st/tunein/asxrik.pls\",",
        "context_before": "490: L\"https://orion.shoutca.st/tunein/asxsundance.pls\",\n491: L\"Techno Channel\",",
        "context_after": "493: L\"The Space Trace\",\n494: L\"https://orion.shoutca.st/tunein/asxalex.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 494,
        "text": "orion.shoutca.st/tunein/asxalex.pls\",",
        "context_before": "492: L\"https://orion.shoutca.st/tunein/asxrik.pls\",\n493: L\"The Space Trace\",",
        "context_after": "495: L\"Victor Special Trance\",\n496: L\"https://orion.shoutca.st/tunein/asxvictor.pls\","
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\RadioList.h",
        "line": 496,
        "text": "orion.shoutca.st/tunein/asxvictor.pls\",",
        "context_before": "494: L\"https://orion.shoutca.st/tunein/asxalex.pls\",\n495: L\"Victor Special Trance\",",
        "context_after": "497: };"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\resource.h",
        "line": 1,
        "text": "{{NO_DEPENDENCIES}}",
        "context_before": "",
        "context_after": "2: // Microsoft Visual C++ generated include file.\n3: // Used by Winyl.rc"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\resource.h",
        "line": 2,
        "text": "Microsoft Visual C++ generated include file.",
        "context_before": "1: //{{NO_DEPENDENCIES}}",
        "context_after": "3: // Used by Winyl.rc\n4: //"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\resource.h",
        "line": 3,
        "text": "Used by Winyl.rc",
        "context_before": "1: //{{NO_DEPENDENCIES}}\n2: // Microsoft Visual C++ generated include file.",
        "context_after": "4: //\n5: #define IDR_MAINFRAME                   100"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\resource.h",
        "line": 384,
        "text": "Next default values for new objects",
        "context_before": "382: #define IDC_STATIC                      -1\n383: ",
        "context_after": "385: //\n386: #ifdef APSTUDIO_INVOKED"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 83,
        "text": "XmlNode xmlCheckForUpdates = xmlMain.FirstChild(\"CheckForUpdates\");",
        "context_before": "81: \t\t\t}\n82: ",
        "context_after": "84: \t\t\t//if (xmlCheckForUpdates)\n85: \t\t\t//\txmlCheckForUpdates.Attribute(\"ID\", &isCheckForUpdates);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 84,
        "text": "if (xmlCheckForUpdates)",
        "context_before": "82: \n83: \t\t\t//XmlNode xmlCheckForUpdates = xmlMain.FirstChild(\"CheckForUpdates\");",
        "context_after": "85: \t\t\t//\txmlCheckForUpdates.Attribute(\"ID\", &isCheckForUpdates);\n86: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 85,
        "text": "xmlCheckForUpdates.Attribute(\"ID\", &isCheckForUpdates);",
        "context_before": "83: \t\t\t//XmlNode xmlCheckForUpdates = xmlMain.FirstChild(\"CheckForUpdates\");\n84: \t\t\t//if (xmlCheckForUpdates)",
        "context_after": "86: \n87: \t\t\tXmlNode xmlWinPosition = xmlMain.FirstChild(\"WinPosition\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 104,
        "text": "Use default settings (fix a bug in old versions, remove in 2010 year)",
        "context_before": "102: \t\t\t\tif (left < -10000 || top < -10000)\n103: \t\t\t\t{",
        "context_after": "105: \t\t\t\t}\n106: \t\t\t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 130,
        "text": "Adjust sound volume (fix a bug in old versions, remove in 2010 year)",
        "context_before": "128: \t\t\t\txmlSoundVolume.Attribute(\"ID\", &soundVolume);\n129: ",
        "context_after": "131: \t\t\tif (soundVolume > 100000) soundVolume = 100000;\n132: \t\t\telse if (soundVolume < 0) soundVolume = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 134,
        "text": "TiXmlElement* eSoundMute = eMain->FirstChildElement(\"SoundMute\"); if (eSoundMute) eSoundMute->Attribute(\"ID\", &isSoundMute);",
        "context_before": "132: \t\t\telse if (soundVolume < 0) soundVolume = 0;\n133: ",
        "context_after": "138: \t\t\tXmlNode xmlDevice = xmlMain.FirstChild(\"Device\");\n139: \t\t\tif (xmlDevice)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 174,
        "text": "[v2.1] Remove after couple of versions",
        "context_before": "172: \t\t\tif (xmlHideToTray)\n173: \t\t\t\txmlHideToTray.Attribute(\"ID\", &isHideToTray);",
        "context_after": "175: \t\t\t{\n176: \t\t\t\txmlHideToTray = xmlMain.FirstChild(\"HideInTray\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 205,
        "text": "XmlNode xmlMSN = xmlMain.FirstChild(\"MSN\");",
        "context_before": "203: \t\t\t\txmlLastFM.Attribute(\"ID\", &isLastFM);\n204: ",
        "context_after": "206: \t\t\t//if (xmlMSN)\n207: \t\t\t//\txmlMSN.Attribute(\"ID\", &isMSN);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 206,
        "text": "if (xmlMSN)",
        "context_before": "204: \n205: \t\t\t//XmlNode xmlMSN = xmlMain.FirstChild(\"MSN\");",
        "context_after": "207: \t\t\t//\txmlMSN.Attribute(\"ID\", &isMSN);\n208: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 207,
        "text": "xmlMSN.Attribute(\"ID\", &isMSN);",
        "context_before": "205: \t\t\t//XmlNode xmlMSN = xmlMain.FirstChild(\"MSN\");\n206: \t\t\t//if (xmlMSN)",
        "context_after": "208: \n209: \t\t\tXmlNode xmlMiniPlayer = xmlMain.FirstChild(\"MiniPlayer\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 217,
        "text": "TiXmlElement* eAssociations = eMain->FirstChildElement(\"Associations\"); if (eAssociations) { eAssociations->Attribute(\"ID\", &isAssociations); }",
        "context_before": "215: \t\t\t}\n216: ",
        "context_after": "223: \t\t\tXmlNode xmlPopup = xmlMain.FirstChild(\"Popup\");\n224: \t\t\tif (xmlPopup)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 291,
        "text": "XmlNode xmlLibrary = xmlMain.FirstChild(\"Library\"); if (xmlLibrary) { XmlNode xmlNode1 = xmlLibrary.FirstChild(\"Node1\"); if (xmlNode1) { xmlNode1.Attribute(\"This\", &stLibrary.isType); xmlNode1.Attribute(\"Type\", &stLibrary.type); } XmlNode xmlNode2 = xmlLibrary.FirstChild(\"Node2\"); if (xmlNode2) { xmlNode2.Attribute(\"This\", &stLibrary.isValue); stLibrary.value = xmlNode2.Attribute16(\"String\"); } XmlNode xmlNode3 = xmlLibrary.FirstChild(\"Node3\"); if (xmlNode3) { xmlNode3.Attribute(\"This\", &stLibrary.isAlbum); stLibrary.artist = xmlNode3.Attribute16(\"Artist\"); stLibrary.album =xmlNode3.Attribute16(\"Album\"); } }",
        "context_before": "289: \t\t\t}\n290: ",
        "context_after": "317: \t\t\tXmlNode xmlOpenItem = xmlMain.FirstChild(\"OpenItem\");\n318: \t\t\tif (xmlOpenItem)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 378,
        "text": "XmlNode xmlCheckForUpdates = xmlMain.AddChild(\"CheckForUpdates\");",
        "context_before": "376: \t\t}\n377: ",
        "context_after": "379: \t\t//if (xmlCheckForUpdates)\n380: \t\t//\txmlCheckForUpdates.AddAttribute(\"ID\", isCheckForUpdates);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 379,
        "text": "if (xmlCheckForUpdates)",
        "context_before": "377: \n378: \t\t//XmlNode xmlCheckForUpdates = xmlMain.AddChild(\"CheckForUpdates\");",
        "context_after": "380: \t\t//\txmlCheckForUpdates.AddAttribute(\"ID\", isCheckForUpdates);\n381: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 380,
        "text": "xmlCheckForUpdates.AddAttribute(\"ID\", isCheckForUpdates);",
        "context_before": "378: \t\t//XmlNode xmlCheckForUpdates = xmlMain.AddChild(\"CheckForUpdates\");\n379: \t\t//if (xmlCheckForUpdates)",
        "context_after": "381: \n382: \t\tXmlNode xmlWinPosition = xmlMain.AddChild(\"WinPosition\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 406,
        "text": "TiXmlElement* eSoundMute = new TiXmlElement(\"SoundMute\"); if (eSoundMute) { eSoundMute->SetAttribute(\"ID\", (int)isSoundMute); eMain->LinkEndChild(eSoundMute); }",
        "context_before": "404: \t\t\txmlSoundVolume.AddAttribute(\"ID\", soundVolume);\n405: ",
        "context_after": "414: \t\tXmlNode xmlDevice = xmlMain.AddChild(\"Device\");\n415: \t\tif (xmlDevice)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 476,
        "text": "XmlNode xmlMSN = xmlMain.AddChild(\"MSN\");",
        "context_before": "474: \t\t\txmlLastFM.AddAttribute(\"ID\", (int)isLastFM);\n475: ",
        "context_after": "477: \t\t//if (xmlMSN)\n478: \t\t//\txmlMSN.AddAttribute(\"ID\", (int)isMSN);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 477,
        "text": "if (xmlMSN)",
        "context_before": "475: \n476: \t\t//XmlNode xmlMSN = xmlMain.AddChild(\"MSN\");",
        "context_after": "478: \t\t//\txmlMSN.AddAttribute(\"ID\", (int)isMSN);\n479: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 478,
        "text": "xmlMSN.AddAttribute(\"ID\", (int)isMSN);",
        "context_before": "476: \t\t//XmlNode xmlMSN = xmlMain.AddChild(\"MSN\");\n477: \t\t//if (xmlMSN)",
        "context_after": "479: \n480: \t\t/*TiXmlElement* eAssociations = new TiXmlElement(\"Associations\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 480,
        "text": "TiXmlElement* eAssociations = new TiXmlElement(\"Associations\"); if (eAssociations) { eAssociations->SetAttribute(\"ID\", (int)isAssociations); eMain->LinkEndChild(eAssociations); }",
        "context_before": "478: \t\t//\txmlMSN.AddAttribute(\"ID\", (int)isMSN);\n479: ",
        "context_after": "488: \t\tXmlNode xmlMiniPlayer = xmlMain.AddChild(\"MiniPlayer\");\n489: \t\tif (xmlMiniPlayer)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 561,
        "text": "XmlNode xmlLibrary = xmlMain.AddChild(\"Library\"); if (xmlLibrary) { XmlNode xmlNode1 = xmlLibrary.AddChild(\"Node1\"); if (xmlNode1) { xmlNode1.AddAttribute(\"This\", stLibrary.isType); xmlNode1.AddAttribute(\"Type\", stLibrary.type); } XmlNode xmlNode2 = xmlLibrary.AddChild(\"Node2\"); if (xmlNode2) { xmlNode2.AddAttribute(\"This\", stLibrary.isValue); xmlNode2.AddAttribute16(\"String\", stLibrary.value); } XmlNode xmlNode3 = xmlLibrary.AddChild(\"Node3\"); if (xmlNode3) { xmlNode3.AddAttribute(\"This\", stLibrary.isAlbum); xmlNode3.AddAttribute16(\"Artist\", stLibrary.artist); xmlNode3.AddAttribute16(\"Album\", stLibrary.album); } }",
        "context_before": "559: \t\t\txmlLastPlayIndex.AddAttributeLong(\"ID\", lastPlayIndex);\n560: ",
        "context_after": "587: \t\tif (xmlOpenItem)\n588: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 615,
        "text": "Adjust the main window position and size by the monitor",
        "context_before": "613: void Settings::FixWinPosMain(const CSize& szMinSize, const CSize& szMaxSize)\n614: {",
        "context_after": "616: \tFixRectByMonitor(rcPosition, szMinSize, szMaxSize);\n617: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 621,
        "text": "Adjust the mini player position and size by the monitor",
        "context_before": "619: void Settings::FixWinPosMini(const CSize& szMinSize, const CSize& szMaxSize)\n620: {",
        "context_after": "622: \tFixRectByMonitor(rcPositionMini, szMinSize, szMaxSize);\n623: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 627,
        "text": "First, adjust window size by min and max size",
        "context_before": "625: void Settings::FixRectByMonitor(CRect& rcRect, const CSize& szMinSize, const CSize& szMaxSize)\n626: {",
        "context_after": "628: \tif (rcRect.Width() < szMinSize.cx)\n629: \t\trcRect.right = rcRect.left + szMinSize.cx;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 638,
        "text": "Next, adjust window position by screen coordinates",
        "context_before": "636: \t\trcRect.bottom = rcRect.top + szMaxSize.cy;\n637: ",
        "context_after": "639: \tCRect rcWork;\n640: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 641,
        "text": "Get work rect (depending on the number of monitors)",
        "context_before": "639: \tCRect rcWork;\n640: ",
        "context_after": "642: \tif (::GetSystemMetrics(SM_CMONITORS) > 1)\n643: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 651,
        "text": "Reason to move is the same as below but before this move we need to",
        "context_before": "649: \t\trcWork = mi.rcWork;\n650: ",
        "context_after": "652: \t\t// move work rect for second, third etc. monitor to default (0, 0) coordinates\n653: \t\t// i.e. work rect for any monitor with same resolution and taskbar position must be equal"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 652,
        "text": "move work rect for second, third etc. monitor to default (0, 0) coordinates",
        "context_before": "650: \n651: \t\t// Reason to move is the same as below but before this move we need to",
        "context_after": "653: \t\t// i.e. work rect for any monitor with same resolution and taskbar position must be equal\n654: \t\trcRect.MoveToX(rcRect.left + (mi.rcWork.left - mi.rcMonitor.left));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 653,
        "text": "i.e. work rect for any monitor with same resolution and taskbar position must be equal",
        "context_before": "651: \t\t// Reason to move is the same as below but before this move we need to\n652: \t\t// move work rect for second, third etc. monitor to default (0, 0) coordinates",
        "context_after": "654: \t\trcRect.MoveToX(rcRect.left + (mi.rcWork.left - mi.rcMonitor.left));\n655: \t\trcRect.MoveToY(rcRect.top + (mi.rcWork.top - mi.rcMonitor.top));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 663,
        "text": "Because we got these coordinates from GetWindowPlacement that uses workspace coordinates",
        "context_before": "661: \t\trcWork = rc;\n662: ",
        "context_after": "664: \t\t// we move our rect to screen coordinates. Otherwise we got \"creep\" effect when taskbar on top for example\n665: \t\t// See Remarks: http://msdn.microsoft.com/en-us/library/windows/desktop/ms632611(v=vs.85).aspx"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 664,
        "text": "we move our rect to screen coordinates. Otherwise we got \"creep\" effect when taskbar on top for example",
        "context_before": "662: \n663: \t\t// Because we got these coordinates from GetWindowPlacement that uses workspace coordinates",
        "context_after": "665: \t\t// See Remarks: http://msdn.microsoft.com/en-us/library/windows/desktop/ms632611(v=vs.85).aspx\n666: \t\t// http://blogs.msdn.com/b/oldnewthing/archive/2003/09/12/54896.aspx"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 665,
        "text": "See Remarks: http://msdn.microsoft.com/en-us/library/windows/desktop/ms632611(v=vs.85).aspx",
        "context_before": "663: \t\t// Because we got these coordinates from GetWindowPlacement that uses workspace coordinates\n664: \t\t// we move our rect to screen coordinates. Otherwise we got \"creep\" effect when taskbar on top for example",
        "context_after": "666: \t\t// http://blogs.msdn.com/b/oldnewthing/archive/2003/09/12/54896.aspx\n667: \t\trcRect.MoveToX(rcRect.left + rcWork.left);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 666,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2003/09/12/54896.aspx",
        "context_before": "664: \t\t// we move our rect to screen coordinates. Otherwise we got \"creep\" effect when taskbar on top for example\n665: \t\t// See Remarks: http://msdn.microsoft.com/en-us/library/windows/desktop/ms632611(v=vs.85).aspx",
        "context_after": "667: \t\trcRect.MoveToX(rcRect.left + rcWork.left);\n668: \t\trcRect.MoveToY(rcRect.top + rcWork.top);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.cpp",
        "line": 671,
        "text": "Finally, if window outside a monitor then move it back",
        "context_before": "669: \t}\n670: ",
        "context_after": "672: \tif (rcRect.left < rcWork.left)\n673: \t\trcRect.MoveToX(rcWork.left);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.h",
        "line": 48,
        "text": "inline void SetMSN(bool isEnable) {isMSN = isEnable;}",
        "context_before": "46: \tinline void SetSkinPack(bool isPack) {isSkinPack = isPack;}\n47: \tinline void SetLastFM(bool isEnable) {isLastFM = isEnable;}",
        "context_after": "49: \tinline void SetPopup(bool isEnable) {isPopupEnable = isEnable;}\n50: \tinline void SetEffect(bool isEnable) {isEffectEnable = isEnable;}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.h",
        "line": 101,
        "text": "inline bool IsMSN() {return isMSN;}",
        "context_before": "99: \tinline bool IsFirstRun() {return isFirstRun;}\n100: \tinline bool IsLastFM() {return isLastFM;}",
        "context_after": "102: \tinline bool IsPopup() {return isPopupEnable;}\n103: \tinline bool IsEffect() {return isEffectEnable;}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.h",
        "line": 289,
        "text": "0 - DirectSound, 1 - WASAPI, 2 - ASIO",
        "context_before": "287: \tbool isFirstRun = false;\n288: ",
        "context_after": "290: \tint bassDevice = -1; // Default Audio Device\n291: \tbool bassBit32 = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.h",
        "line": 290,
        "text": "Default Audio Device",
        "context_before": "288: \n289: \tint bassDriver = 0; // 0 - DirectSound, 1 - WASAPI, 2 - ASIO",
        "context_after": "291: \tbool bassBit32 = true;\n292: \tbool bassSoftMix = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.h",
        "line": 326,
        "text": "bool isMSN = false;",
        "context_before": "324: \tbool isSmoothScroll = true;\n325: \tbool isLastFM = false;",
        "context_after": "327: \tbool isToolTips = true;\n328: \tbool isCheckForUpdates = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.h",
        "line": 329,
        "text": "bool isAssociations = false;",
        "context_before": "327: \tbool isToolTips = true;\n328: \tbool isCheckForUpdates = true;",
        "context_after": "330: \n331: \tCRect rcPosition = {200, 120, 200 + 720, 120 + 520};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.h",
        "line": 345,
        "text": "type is used",
        "context_before": "343: \t{\n344: \t\tint type = 0;",
        "context_after": "346: \t\tbool isValue = false; // type, value are used\n347: \t\tbool isArtist = false; // type, value, artist are used"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.h",
        "line": 346,
        "text": "type, value are used",
        "context_before": "344: \t\tint type = 0;\n345: \t\tbool isType = false; // type is used",
        "context_after": "347: \t\tbool isArtist = false; // type, value, artist are used\n348: \t\tbool isAlbum = false; // type, value, artist, album are used"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.h",
        "line": 347,
        "text": "type, value, artist are used",
        "context_before": "345: \t\tbool isType = false; // type is used\n346: \t\tbool isValue = false; // type, value are used",
        "context_after": "348: \t\tbool isAlbum = false; // type, value, artist, album are used\n349: \t\tstd::wstring value;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.h",
        "line": 348,
        "text": "type, value, artist, album are used",
        "context_before": "346: \t\tbool isValue = false; // type, value are used\n347: \t\tbool isArtist = false; // type, value, artist are used",
        "context_after": "349: \t\tstd::wstring value;\n350: \t\tstd::wstring artist;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.h",
        "line": 353,
        "text": "If isNoneOld == true then above values are not for the current list but for the previous",
        "context_before": "351: \t\tstd::wstring album;\n352: ",
        "context_after": "354: \t\t// It's not used in stNowPlaying but used to fill it\n355: \t\tbool isNoneOld = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.h",
        "line": 354,
        "text": "It's not used in stNowPlaying but used to fill it",
        "context_before": "352: \n353: \t\t// If isNoneOld == true then above values are not for the current list but for the previous",
        "context_after": "355: \t\tbool isNoneOld = false;\n356: \t}stLibrary, stNowPlaying;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.h",
        "line": 385,
        "text": "Center",
        "context_before": "383: \tbool isPortableVersion = false;\n384: ",
        "context_after": "386: \tint lyricsFontSize = 0; // From Skin\n387: \tbool lyricsFontBold = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Settings.h",
        "line": 386,
        "text": "From Skin",
        "context_before": "384: \n385: \tint lyricsAlign = 0; // Center",
        "context_after": "387: \tbool lyricsFontBold = false;\n388: \tstd::wstring lyricsProvider;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 133,
        "text": "Tracking tooltip",
        "context_before": "131: \t\tAction(element, MouseAction::Move);\n132: ",
        "context_after": "134: \tif (element && element->type == SkinElement::Type::Volume)\n135: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 153,
        "text": "https://msdn.microsoft.com/en-us/library/windows/desktop/hh298405%28v=vs.85%29.aspx",
        "context_before": "151: \t\t\tif (isTrackTooltip)\n152: \t\t\t{",
        "context_after": "154: \t\t\t\t// Make sure the mouse has actually moved. The presence of the tooltip\n155: \t\t\t\t// causes Windows to send the message continuously."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 154,
        "text": "Make sure the mouse has actually moved. The presence of the tooltip",
        "context_before": "152: \t\t\t{\n153: \t\t\t\t// https://msdn.microsoft.com/en-us/library/windows/desktop/hh298405%28v=vs.85%29.aspx",
        "context_after": "155: \t\t\t\t// causes Windows to send the message continuously.\n156: \t\t\t\tstatic POINT oldPoint = {};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 190,
        "text": "::SetFocus(thisWnd);",
        "context_before": "188: void SkinAlpha::OnLButtonDown(UINT nFlags, CPoint point)\n189: {",
        "context_after": "191: \n192: \tSkinElement* element = skinDraw.MouseDown(nFlags, point);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 214,
        "text": "Move window",
        "context_before": "212: \t\t}\n213: \t}",
        "context_after": "215: \t{\n216: \t\tskinDraw.EmptyClick();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 258,
        "text": "::SetCursor(::LoadCursorW(NULL, IDC_ARROW));",
        "context_before": "256: //\tif (message == 0) // When open a menu set default cursor\n257: //\t{",
        "context_after": "259: //\t\treturn true;\n260: //\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 259,
        "text": "return true;",
        "context_before": "257: //\t{\n258: //\t\t::SetCursor(::LoadCursorW(NULL, IDC_ARROW));",
        "context_after": "260: //\t}\n261: \tif (message == 0) // When open a menu set default cursor"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 261,
        "text": "When open a menu set default cursor",
        "context_before": "259: //\t\treturn true;\n260: //\t}",
        "context_after": "262: \t\treturn false;\n263: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 264,
        "text": "hWnd == thisWnd is needed because sometimes a wrong cursor is set",
        "context_before": "262: \t\treturn false;\n263: ",
        "context_after": "265: \t// if mouse is not over the main window and over playlist/library for example\n266: \tif (hWnd == thisWnd && moveResize->SetCursor() && !skinDraw.IsHoverElement())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 265,
        "text": "if mouse is not over the main window and over playlist/library for example",
        "context_before": "263: \n264: \t// hWnd == thisWnd is needed because sometimes a wrong cursor is set",
        "context_after": "266: \tif (hWnd == thisWnd && moveResize->SetCursor() && !skinDraw.IsHoverElement())\n267: \t\treturn true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 280,
        "text": "skinDraw.ChangeTrigger(&element->trigger, 0);",
        "context_before": "278: \t{\n279: \t\tcase SkinElement::Type::Button:",
        "context_after": "281: \t\t\tbreak;\n282: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 284,
        "text": "skinDraw.ChangeTrigger(&element->trigger, !param);",
        "context_before": "282: \n283: \t\tcase SkinElement::Type::Switch:",
        "context_after": "285: \t\t\t//skinDraw.DrawTriggerSwitch(element, !param);\n286: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 285,
        "text": "skinDraw.DrawTriggerSwitch(element, !param);",
        "context_before": "283: \t\tcase SkinElement::Type::Switch:\n284: \t\t\t//skinDraw.ChangeTrigger(&element->trigger, !param);",
        "context_after": "286: \t\t\tbreak;\n287: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinButton.cpp",
        "line": 189,
        "text": "Mouse enters button area",
        "context_before": "187: SkinElement* SkinButton::OnMouseMove(unsigned flags, CPoint& point)\n188: {",
        "context_after": "190: \t{\n191: \t\t//fadeAlpha = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinButton.cpp",
        "line": 191,
        "text": "fadeAlpha = 0;",
        "context_before": "189: \tif (!isHover && rcRect.PtInRect(point)) // Mouse enters button area\n190: \t{",
        "context_after": "192: \n193: \t\tisHover = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinButton.cpp",
        "line": 196,
        "text": "Mouse leaves button area",
        "context_before": "194: \t\treturn this;\n195: \t}",
        "context_after": "197: \t{\n198: \t\tisHover = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinButton.cpp",
        "line": 218,
        "text": "if (rRect.PtInRect(point))",
        "context_before": "216: SkinElement* SkinButton::OnButtonUp(unsigned flags, CPoint& point)\n217: {",
        "context_after": "219: //\t{\n220: \tif (isPress)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinButton.h",
        "line": 46,
        "text": "Enable tooltip for this class",
        "context_before": "44: \tSkinElement* OnMouseLeave() override;\n45: ",
        "context_after": "47: \tbool SetToolTip(ToolTips* tips) override {toolTip = tips; return true;}\n48: };"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinCover.cpp",
        "line": 102,
        "text": "Indent due to shadow",
        "context_before": "100: void SkinCover::Draw(HDC dc, bool isAlpha)\n101: {",
        "context_after": "103: \n104: \tif (imShadow.Width() > imCover.Width())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinCover.cpp",
        "line": 133,
        "text": "Indent due to shadow",
        "context_before": "131: \tfadeAlpha = std::min(255, fadeAlpha);\n132: ",
        "context_after": "134: \n135: \tif (imShadow.Width() > imCover.Width())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinCover.h",
        "line": 30,
        "text": "Default cover art",
        "context_before": "28: \n29: private:",
        "context_after": "31: \tExImage imShadow;  // Shadow\n32: \tExImage imOverlay; // Overlay"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinCover.h",
        "line": 31,
        "text": "Shadow",
        "context_before": "29: private:\n30: \tExImage imCover;   // Default cover art",
        "context_after": "32: \tExImage imOverlay; // Overlay\n33: \tExImage imMirror;  // Overlay for mirror"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinCover.h",
        "line": 32,
        "text": "Overlay",
        "context_before": "30: \tExImage imCover;   // Default cover art\n31: \tExImage imShadow;  // Shadow",
        "context_after": "33: \tExImage imMirror;  // Overlay for mirror\n34: \tExImage imCoverMirror; // Mirrored default cover art"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinCover.h",
        "line": 33,
        "text": "Overlay for mirror",
        "context_before": "31: \tExImage imShadow;  // Shadow\n32: \tExImage imOverlay; // Overlay",
        "context_after": "34: \tExImage imCoverMirror; // Mirrored default cover art\n35: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinCover.h",
        "line": 34,
        "text": "Mirrored default cover art",
        "context_before": "32: \tExImage imOverlay; // Overlay\n33: \tExImage imMirror;  // Overlay for mirror",
        "context_after": "35: \n36: \tExImage imCoverImage; // Cover art"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinCover.h",
        "line": 36,
        "text": "Cover art",
        "context_before": "34: \tExImage imCoverMirror; // Mirrored default cover art\n35: ",
        "context_after": "37: \tExImage imMirrorImage; // Mirrored cover art\n38: \tExImage imBackupImage; // Previous cover art"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinCover.h",
        "line": 37,
        "text": "Mirrored cover art",
        "context_before": "35: \n36: \tExImage imCoverImage; // Cover art",
        "context_after": "38: \tExImage imBackupImage; // Previous cover art\n39: \tExImage imBackupMirror; // Mirrored previous cover art"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinCover.h",
        "line": 38,
        "text": "Previous cover art",
        "context_before": "36: \tExImage imCoverImage; // Cover art\n37: \tExImage imMirrorImage; // Mirrored cover art",
        "context_after": "39: \tExImage imBackupMirror; // Mirrored previous cover art\n40: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinCover.h",
        "line": 39,
        "text": "Mirrored previous cover art",
        "context_before": "37: \tExImage imMirrorImage; // Mirrored cover art\n38: \tExImage imBackupImage; // Previous cover art",
        "context_after": "40: \n41: \tbool isMirror = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 24,
        "text": "dcScreen = ::GetDC(NULL);",
        "context_before": "22: SkinDraw::SkinDraw()\n23: {",
        "context_after": "25: }\n26: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 29,
        "text": "if (dcScreen)",
        "context_before": "27: SkinDraw::~SkinDraw()\n28: {",
        "context_after": "30: \t//\t::ReleaseDC(NULL, dcScreen);\n31: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 30,
        "text": "::ReleaseDC(NULL, dcScreen);",
        "context_before": "28: {\n29: \t//if (dcScreen)",
        "context_after": "31: \n32: \tif (bmMemory)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 72,
        "text": "Aero Snap Test (the implementation is not completed):",
        "context_before": "70: \t\tstyle &= ~(WS_CAPTION|WS_SIZEBOX|WS_MAXIMIZEBOX);\n71: ",
        "context_after": "73: \t\t// Add WS_THICKFRAME|WS_MAXIMIZEBOX to WS_CAPTION here, but maximize size will be incorrect\n74: \t\t// Add +1 to latest line in void WinylWnd::OnGetMinMaxInfo(MINMAXINFO* lpMMI)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 73,
        "text": "Add WS_THICKFRAME|WS_MAXIMIZEBOX to WS_CAPTION here, but maximize size will be incorrect",
        "context_before": "71: \n72: \t\t// Aero Snap Test (the implementation is not completed):",
        "context_after": "74: \t\t// Add +1 to latest line in void WinylWnd::OnGetMinMaxInfo(MINMAXINFO* lpMMI)\n75: \t\t// lpMMI->ptMaxSize.y = rcRect.Height()+1; and see interesting thing, maximize size still incorrect but only on this +1"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 74,
        "text": "Add +1 to latest line in void WinylWnd::OnGetMinMaxInfo(MINMAXINFO* lpMMI)",
        "context_before": "72: \t\t// Aero Snap Test (the implementation is not completed):\n73: \t\t// Add WS_THICKFRAME|WS_MAXIMIZEBOX to WS_CAPTION here, but maximize size will be incorrect",
        "context_after": "75: \t\t// lpMMI->ptMaxSize.y = rcRect.Height()+1; and see interesting thing, maximize size still incorrect but only on this +1\n76: \t\t// -------"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 75,
        "text": "lpMMI->ptMaxSize.y = rcRect.Height()+1; and see interesting thing, maximize size still incorrect but only on this +1",
        "context_before": "73: \t\t// Add WS_THICKFRAME|WS_MAXIMIZEBOX to WS_CAPTION here, but maximize size will be incorrect\n74: \t\t// Add +1 to latest line in void WinylWnd::OnGetMinMaxInfo(MINMAXINFO* lpMMI)",
        "context_after": "76: \t\t// -------\n77: \t\t// To proper fix maximize size:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 76,
        "text": "-------",
        "context_before": "74: \t\t// Add +1 to latest line in void WinylWnd::OnGetMinMaxInfo(MINMAXINFO* lpMMI)\n75: \t\t// lpMMI->ptMaxSize.y = rcRect.Height()+1; and see interesting thing, maximize size still incorrect but only on this +1",
        "context_after": "77: \t\t// To proper fix maximize size:\n78: \t\t// in void SkinDraw::Resize(int cx, int cy, bool needRedraw)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 77,
        "text": "To proper fix maximize size:",
        "context_before": "75: \t\t// lpMMI->ptMaxSize.y = rcRect.Height()+1; and see interesting thing, maximize size still incorrect but only on this +1\n76: \t\t// -------",
        "context_after": "78: \t\t// in void SkinDraw::Resize(int cx, int cy, bool needRedraw)\n79: \t\t// change line, only if maximized, layouts[i]->UpdateRectLayout(cxFrame, cyFrame, cx - cxFrame, cy - cyFrame);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 78,
        "text": "in void SkinDraw::Resize(int cx, int cy, bool needRedraw)",
        "context_before": "76: \t\t// -------\n77: \t\t// To proper fix maximize size:",
        "context_after": "79: \t\t// change line, only if maximized, layouts[i]->UpdateRectLayout(cxFrame, cyFrame, cx - cxFrame, cy - cyFrame);\n80: \t\t// cxFrame = GetSystemMetrics(SM_CXSIZEFRAME);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 79,
        "text": "change line, only if maximized, layouts[i]->UpdateRectLayout(cxFrame, cyFrame, cx - cxFrame, cy - cyFrame);",
        "context_before": "77: \t\t// To proper fix maximize size:\n78: \t\t// in void SkinDraw::Resize(int cx, int cy, bool needRedraw)",
        "context_after": "80: \t\t// cxFrame = GetSystemMetrics(SM_CXSIZEFRAME);\n81: \t\t// cyFrame = GetSystemMetrics(SM_CYSIZEFRAME);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 80,
        "text": "cxFrame = GetSystemMetrics(SM_CXSIZEFRAME);",
        "context_before": "78: \t\t// in void SkinDraw::Resize(int cx, int cy, bool needRedraw)\n79: \t\t// change line, only if maximized, layouts[i]->UpdateRectLayout(cxFrame, cyFrame, cx - cxFrame, cy - cyFrame);",
        "context_after": "81: \t\t// cyFrame = GetSystemMetrics(SM_CYSIZEFRAME);\n82: \t\t// And, only if Aero Snap enabled, remove if (::IsZoomed(wnd))..."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 81,
        "text": "cyFrame = GetSystemMetrics(SM_CYSIZEFRAME);",
        "context_before": "79: \t\t// change line, only if maximized, layouts[i]->UpdateRectLayout(cxFrame, cyFrame, cx - cxFrame, cy - cyFrame);\n80: \t\t// cxFrame = GetSystemMetrics(SM_CXSIZEFRAME);",
        "context_after": "82: \t\t// And, only if Aero Snap enabled, remove if (::IsZoomed(wnd))...\n83: \t\t// from MoveResize::MouseDown(HWND wnd, const CPoint& point, bool isMove)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 82,
        "text": "And, only if Aero Snap enabled, remove if (::IsZoomed(wnd))...",
        "context_before": "80: \t\t// cxFrame = GetSystemMetrics(SM_CXSIZEFRAME);\n81: \t\t// cyFrame = GetSystemMetrics(SM_CYSIZEFRAME);",
        "context_after": "83: \t\t// from MoveResize::MouseDown(HWND wnd, const CPoint& point, bool isMove)\n84: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 83,
        "text": "from MoveResize::MouseDown(HWND wnd, const CPoint& point, bool isMove)",
        "context_before": "81: \t\t// cyFrame = GetSystemMetrics(SM_CYSIZEFRAME);\n82: \t\t// And, only if Aero Snap enabled, remove if (::IsZoomed(wnd))...",
        "context_after": "84: \n85: \t\t// Experimental feature for minimize/restore animation in Win7"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 85,
        "text": "Experimental feature for minimize/restore animation in Win7",
        "context_before": "83: \t\t// from MoveResize::MouseDown(HWND wnd, const CPoint& point, bool isMove)\n84: ",
        "context_after": "86: \t\tif (!isStyleBorder && !isLayered && !isLayeredAlpha && !isMiniPlayer)\n87: \t\t\tstyle |= WS_CAPTION; //|WS_THICKFRAME|WS_MAXIMIZEBOX // WS_CAPTION = WS_BORDER|WS_DLGFRAME minmax.c"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 87,
        "text": "|WS_THICKFRAME|WS_MAXIMIZEBOX // WS_CAPTION = WS_BORDER|WS_DLGFRAME minmax.c",
        "context_before": "85: \t\t// Experimental feature for minimize/restore animation in Win7\n86: \t\tif (!isStyleBorder && !isLayered && !isLayeredAlpha && !isMiniPlayer)",
        "context_after": "88: \t\t// End of the feature\n89: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 88,
        "text": "End of the feature",
        "context_before": "86: \t\tif (!isStyleBorder && !isLayered && !isLayeredAlpha && !isMiniPlayer)\n87: \t\t\tstyle |= WS_CAPTION; //|WS_THICKFRAME|WS_MAXIMIZEBOX // WS_CAPTION = WS_BORDER|WS_DLGFRAME minmax.c",
        "context_after": "89: \n90: \t\t::SetWindowLongPtr(wndOwner, GWL_STYLE, style);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 100,
        "text": "Reset window region. Should be always after setting styles (below is explanation).",
        "context_before": "98: \t}\n99: ",
        "context_after": "101: \t// This line not only reset region but also apply styles set before: WS_CAPTION|WS_SIZEBOX|WS_MAXIMIZEBOX\n102: \t// because something should be done with window (change window size, set region etc.)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 101,
        "text": "This line not only reset region but also apply styles set before: WS_CAPTION|WS_SIZEBOX|WS_MAXIMIZEBOX",
        "context_before": "99: \n100: \t// Reset window region. Should be always after setting styles (below is explanation).",
        "context_after": "102: \t// because something should be done with window (change window size, set region etc.)\n103: \t// to apply styles and recalculate client area. If don't do that there will be an issue when skin changed."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 102,
        "text": "because something should be done with window (change window size, set region etc.)",
        "context_before": "100: \t// Reset window region. Should be always after setting styles (below is explanation).\n101: \t// This line not only reset region but also apply styles set before: WS_CAPTION|WS_SIZEBOX|WS_MAXIMIZEBOX",
        "context_after": "103: \t// to apply styles and recalculate client area. If don't do that there will be an issue when skin changed.\n104: \t// I'm not even sure that it works properly, if not the better solution is to recreate window with all styles."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 103,
        "text": "to apply styles and recalculate client area. If don't do that there will be an issue when skin changed.",
        "context_before": "101: \t// This line not only reset region but also apply styles set before: WS_CAPTION|WS_SIZEBOX|WS_MAXIMIZEBOX\n102: \t// because something should be done with window (change window size, set region etc.)",
        "context_after": "104: \t// I'm not even sure that it works properly, if not the better solution is to recreate window with all styles.\n105: \t// Added: Now there is also SetWindowPos(SWP_DRAWFRAME) for the same purpose."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 104,
        "text": "I'm not even sure that it works properly, if not the better solution is to recreate window with all styles.",
        "context_before": "102: \t// because something should be done with window (change window size, set region etc.)\n103: \t// to apply styles and recalculate client area. If don't do that there will be an issue when skin changed.",
        "context_after": "105: \t// Added: Now there is also SetWindowPos(SWP_DRAWFRAME) for the same purpose.\n106: \t// ::SetWindowRgn(wndOwner, NULL, TRUE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 105,
        "text": "Added: Now there is also SetWindowPos(SWP_DRAWFRAME) for the same purpose.",
        "context_before": "103: \t// to apply styles and recalculate client area. If don't do that there will be an issue when skin changed.\n104: \t// I'm not even sure that it works properly, if not the better solution is to recreate window with all styles.",
        "context_after": "106: \t// ::SetWindowRgn(wndOwner, NULL, TRUE);\n107: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 106,
        "text": "::SetWindowRgn(wndOwner, NULL, TRUE);",
        "context_before": "104: \t// I'm not even sure that it works properly, if not the better solution is to recreate window with all styles.\n105: \t// Added: Now there is also SetWindowPos(SWP_DRAWFRAME) for the same purpose.",
        "context_after": "107: \n108: \tif (!isLayered && valueCorners)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 116,
        "text": "Experimental feature for minimize/restore animation in Win7",
        "context_before": "114: \telse\n115: \t{",
        "context_after": "117: \t\tif (!isStyleBorder && !isLayered && !isLayeredAlpha && !isMiniPlayer)\n118: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 119,
        "text": "Use CreateRoundRectRgn instead of CreateRectRgn, or there is window flickering in Vista",
        "context_before": "117: \t\tif (!isStyleBorder && !isLayered && !isLayeredAlpha && !isMiniPlayer)\n118: \t\t{",
        "context_after": "120: \t\t\tCRect rc; ::GetWindowRect(wndOwner, rc);\n121: \t\t\tHRGN rgn = ::CreateRoundRectRgn(0, 0, rc.Width()+1, rc.Height()+1, 0, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 124,
        "text": "End of the feature",
        "context_before": "122: \t\t\t::SetWindowRgn(wndOwner, rgn, TRUE);\n123: \t\t}",
        "context_after": "125: \t\t\t::SetWindowRgn(wndOwner, NULL, TRUE);\n126: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 132,
        "text": "Refactoring is needed (reset previous MARGINS)",
        "context_before": "130: \tif (!isLayered)\n131: \t{",
        "context_after": "133: \t\tif (futureWin->IsCompositionEnabled())\n134: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 186,
        "text": "Reminder: Every region change will cause OnSize (WM_SIZE) extra (unnecessary) call",
        "context_before": "184: \t\tif (!isLayered && valueCorners)\n185: \t\t{",
        "context_after": "187: \t\t\tHRGN rgn = ::CreateRoundRectRgn(0, 0, cx+1, cy+1, valueCorners, valueCorners);\n188: \t\t\t::SetWindowRgn(wndOwner, rgn, TRUE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 190,
        "text": "Experimental feature for minimize/restore animation in Win7",
        "context_before": "188: \t\t\t::SetWindowRgn(wndOwner, rgn, TRUE);\n189: \t\t}",
        "context_after": "191: \t\telse\n192: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 195,
        "text": "Use CreateRoundRectRgn instead of CreateRectRgn, or there is window flickering in Vista",
        "context_before": "193: \t\t\tif (!isStyleBorder && !isLayered && !isLayeredAlpha && !isMiniPlayer)\n194: \t\t\t{",
        "context_after": "196: \t\t\t\tHRGN rgn = ::CreateRoundRectRgn(0, 0, cx+1, cy+1, 0, 0);\n197: \t\t\t\t::SetWindowRgn(wndOwner, rgn, TRUE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 200,
        "text": "End of the feature",
        "context_before": "198: \t\t\t}\n199: \t\t}",
        "context_after": "201: \n202: \t\tif (!::IsIconic(wndOwner) && ::IsWindowVisible(wndOwner))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 209,
        "text": "::InvalidateRect(wndOwner, NULL, FALSE);",
        "context_before": "207: \t\t\t{\n208: \t\t\t\tRedrawWindowDefault();",
        "context_after": "210: \t\t\t\t::RedrawWindow(wndOwner, NULL, NULL, RDW_INVALIDATE|RDW_ALLCHILDREN);\n211: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 237,
        "text": "::UpdateWindow(wndOwner);",
        "context_before": "235: \t}\n236: ",
        "context_after": "238: \n239: //\tRefreshWindow(); // Sometimes unnecessary call Resize()!"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 239,
        "text": "RefreshWindow(); // Sometimes unnecessary call Resize()!",
        "context_before": "237: \t//::UpdateWindow(wndOwner);\n238: ",
        "context_after": "240: //\tRedrawWindow();\n241: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 240,
        "text": "RedrawWindow();",
        "context_before": "238: \n239: //\tRefreshWindow(); // Sometimes unnecessary call Resize()!",
        "context_after": "241: \n242: //\tif (skinDraw2)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 242,
        "text": "if (skinDraw2)",
        "context_before": "240: //\tRedrawWindow();\n241: ",
        "context_after": "243: //\t\tskinDraw2->ChangeTrigger(trigger, state);\n244: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 243,
        "text": "skinDraw2->ChangeTrigger(trigger, state);",
        "context_before": "241: \n242: //\tif (skinDraw2)",
        "context_after": "244: }\n245: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 300,
        "text": "Draw the window in standard way (without layered style)",
        "context_before": "298: void SkinDraw::Paint(HDC dc, PAINTSTRUCT& ps)\n299: {",
        "context_after": "301: \t// The point of this is to replace invalidated data in the window with a new data in the window cache\n302: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 303,
        "text": "Just in case",
        "context_before": "301: \t// The point of this is to replace invalidated data in the window with a new data in the window cache\n302: ",
        "context_after": "304: \t\treturn;\n305: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 306,
        "text": "Get invalidated rect",
        "context_before": "304: \t\treturn;\n305: ",
        "context_after": "307: \n308: \tHDC dcMemory = ::CreateCompatibleDC(dc);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 311,
        "text": "Transfer from window cache into window",
        "context_before": "309: \tHGDIOBJ oldMemory = ::SelectObject(dcMemory, bmMemory);\n310: ",
        "context_after": "312: \t::BitBlt(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcMemory, rc.left, rc.top, SRCCOPY);\n313: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 314,
        "text": "Release resources",
        "context_before": "312: \t::BitBlt(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcMemory, rc.left, rc.top, SRCCOPY);\n313: ",
        "context_after": "315: \t::SelectObject(dcMemory, oldMemory);\n316: \t::DeleteDC(dcMemory);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 324,
        "text": "if (::IsIconic(wndOwner) || !::IsWindowVisible(wndOwner))",
        "context_before": "322: \t\treturn;\n323: ",
        "context_after": "325: //\t\treturn;\n326: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 325,
        "text": "return;",
        "context_before": "323: \n324: //\tif (::IsIconic(wndOwner) || !::IsWindowVisible(wndOwner))",
        "context_after": "326: \n327: \tif (isLayered)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 332,
        "text": "::InvalidateRect(wndOwner, NULL, FALSE);",
        "context_before": "330: \t{\n331: \t\tRedrawWindowDefault();",
        "context_after": "333: \t}\n334: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 352,
        "text": "!::IsWindowVisible(wndOwner) added after a bug appeared in Win7:",
        "context_before": "350: \t\treturn;\n351: ",
        "context_after": "353: \t// layered window loaded wrong after non-layered window,\n354: \t// that is strange because before UpdateLayeredWindowIndirect"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 353,
        "text": "layered window loaded wrong after non-layered window,",
        "context_before": "351: \n352: \t// !::IsWindowVisible(wndOwner) added after a bug appeared in Win7:",
        "context_after": "354: \t// that is strange because before UpdateLayeredWindowIndirect\n355: \t// added to RedrawElementDefault everything works fine."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 354,
        "text": "that is strange because before UpdateLayeredWindowIndirect",
        "context_before": "352: \t// !::IsWindowVisible(wndOwner) added after a bug appeared in Win7:\n353: \t// layered window loaded wrong after non-layered window,",
        "context_after": "355: \t// added to RedrawElementDefault everything works fine.\n356: \t// It's just a note this check is needed here anyway."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 355,
        "text": "added to RedrawElementDefault everything works fine.",
        "context_before": "353: \t// layered window loaded wrong after non-layered window,\n354: \t// that is strange because before UpdateLayeredWindowIndirect",
        "context_after": "356: \t// It's just a note this check is needed here anyway.\n357: \tif (::IsIconic(wndOwner) || !::IsWindowVisible(wndOwner))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 385,
        "text": "RGB(215, 228, 242)",
        "context_before": "383: \tif (!isDwmEnabled)\n384: \t{",
        "context_after": "386: \t\t::ExtTextOut(dcMemory, 0, 0, ETO_OPAQUE, &rcClient, NULL, 0, NULL);\n387: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 398,
        "text": "RGB(215, 228, 242)",
        "context_before": "396: \tif (!isDwmEnabled)\n397: \t{",
        "context_after": "399: \t\t::ExtTextOut(dcBackgd, 0, 0, ETO_OPAQUE, &rcClient, NULL, 0, NULL);\n400: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 404,
        "text": "Skip hidden layouts",
        "context_before": "402: \tfor (std::size_t i = 0, size = layouts.size(); i < size; ++i)\n403: \t{",
        "context_after": "405: \t\t{\n406: \t\t\tlayouts[i]->DrawBackground(dcBackgd); // Draw background"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 406,
        "text": "Draw background",
        "context_before": "404: \t\tif (!layouts[i]->IsHidden()) // Skip hidden layouts\n405: \t\t{",
        "context_after": "407: \n408: \t\t\tCRect rc = layouts[i]->rcRect;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 410,
        "text": "Transfer from background cache into window cache",
        "context_before": "408: \t\t\tCRect rc = layouts[i]->rcRect;\n409: ",
        "context_after": "411: \t\t\t::BitBlt(dcMemory, rc.left, rc.top, rc.Width(), rc.Height(), dcBackgd, rc.left, rc.top, SRCCOPY);\n412: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 413,
        "text": "Draw elements",
        "context_before": "411: \t\t\t::BitBlt(dcMemory, rc.left, rc.top, rc.Width(), rc.Height(), dcBackgd, rc.left, rc.top, SRCCOPY);\n412: ",
        "context_after": "414: \t\t}\n415: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 417,
        "text": "Release resources",
        "context_before": "415: \t}\n416: ",
        "context_after": "418: \t::SelectObject(dcMemory, oldMemory);\n419: \t::SelectObject(dcBackgd, oldBackgd);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 424,
        "text": "pWnd->Invalidate(); // Do not uncomment! It's just a check that resources are released",
        "context_before": "422: \t::DeleteDC(dcBackgd);\n423: ",
        "context_after": "425: }\n426: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 437,
        "text": "First, draw background for the element (transfer from background cache into window cache)",
        "context_before": "435: \tCRect rc = element->rcRect;\n436: ",
        "context_after": "438: \t::BitBlt(dcMemory, rc.left, rc.top, rc.Width(), rc.Height(), dcBackgd, rc.left, rc.top, SRCCOPY);\n439: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 440,
        "text": "Next, draw the element",
        "context_before": "438: \t::BitBlt(dcMemory, rc.left, rc.top, rc.Width(), rc.Height(), dcBackgd, rc.left, rc.top, SRCCOPY);\n439: ",
        "context_after": "441: \n442: \t// Release resources"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 442,
        "text": "Release resources",
        "context_before": "440: \telement->Draw(dcMemory, false); // Next, draw the element\n441: ",
        "context_after": "443: \t::SelectObject(dcMemory, oldMemory);\n444: \t::SelectObject(dcBackgd, oldBackgd);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 449,
        "text": "pWnd->InvalidateRect(pElement->rcRect); // Do not uncomment! It's just a check that resources are released",
        "context_before": "447: \t::DeleteDC(dcBackgd);\n448: ",
        "context_after": "450: }\n451: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 476,
        "text": "Skip hidden layouts",
        "context_before": "474: \tfor (std::size_t i = 0, size = layouts.size(); i < size; ++i)\n475: \t{",
        "context_after": "477: \t\t{\n478: \t\t\tlayouts[i]->DrawBackground(dcBackgd); // Draw background"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 478,
        "text": "Draw background",
        "context_before": "476: \t\tif (!layouts[i]->IsHidden()) // Skip hidden layouts\n477: \t\t{",
        "context_after": "479: \n480: \t\t\tCRect rc  = layouts[i]->rcRect;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 482,
        "text": "Transfer from background cache into window cache",
        "context_before": "480: \t\t\tCRect rc  = layouts[i]->rcRect;\n481: ",
        "context_after": "483: \t\t\t::GdiAlphaBlend(dcMemory, rc.left, rc.top, rc.Width(), rc.Height(),\n484: \t\t\t\tdcBackgd, rc.left, rc.top, rc.Width(), rc.Height(), bfBack);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 486,
        "text": "Draw elements",
        "context_before": "484: \t\t\t\tdcBackgd, rc.left, rc.top, rc.Width(), rc.Height(), bfBack);\n485: ",
        "context_after": "487: \t\t}\n488: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 490,
        "text": "We can draw layered window right away",
        "context_before": "488: \t}\n489: ",
        "context_after": "491: \n492: \tBLENDFUNCTION bf = {AC_SRC_OVER, 0, (BYTE)valueOpacity, AC_SRC_ALPHA};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 494,
        "text": "Window position",
        "context_before": "492: \tBLENDFUNCTION bf = {AC_SRC_OVER, 0, (BYTE)valueOpacity, AC_SRC_ALPHA};\n493: ",
        "context_after": "495: \t::GetWindowRect(wndOwner, rcWindow);\n496: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 501,
        "text": "Use layered function to draw layered window",
        "context_before": "499: \tSIZE sz = {rcWindow.Width(), rcWindow.Height()};\n500: ",
        "context_after": "502: \tif (!futureWin->IsVistaOrLater())\n503: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 506,
        "text": "Vista has better layered function",
        "context_before": "504: \t\t::UpdateLayeredWindow(wndOwner, NULL, &ptDst, &sz, dcMemory, &ptSrc, 0, &bf, ULW_ALPHA);\n505: \t}",
        "context_after": "507: \t{\n508: \t\tUPDATELAYEREDWINDOWINFO info = {sizeof(info), NULL, &ptDst, &sz, dcMemory, &ptSrc, 0, &bf, ULW_ALPHA, NULL};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 512,
        "text": "Release resources",
        "context_before": "510: \t}\n511: ",
        "context_after": "513: \t::SelectObject(dcMemory, oldMemory);\n514: \t::SelectObject(dcBackgd, oldBackgd);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 530,
        "text": "First, draw background for the element (transfer from background cache into window cache)",
        "context_before": "528: \tCRect rc = element->rcRect;\n529: ",
        "context_after": "531: \tBLENDFUNCTION bfBack = {AC_SRC_OVER, 0, 255, 0};\n532: \t::GdiAlphaBlend(dcMemory, rc.left, rc.top, rc.Width(), rc.Height(),"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 535,
        "text": "Next, draw the element",
        "context_before": "533: \t\tdcBackgd, rc.left, rc.top, rc.Width(), rc.Height(), bfBack);\n534: ",
        "context_after": "536: \n537: \t// We can draw layered window right away"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 537,
        "text": "We can draw layered window right away",
        "context_before": "535: \telement->Draw(dcMemory, true); // Next, draw the element\n536: ",
        "context_after": "538: \n539: \tBLENDFUNCTION bf = {AC_SRC_OVER, 0, (BYTE)valueOpacity, AC_SRC_ALPHA};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 541,
        "text": "Window position",
        "context_before": "539: \tBLENDFUNCTION bf = {AC_SRC_OVER, 0, (BYTE)valueOpacity, AC_SRC_ALPHA};\n540: ",
        "context_after": "542: \t::GetWindowRect(wndOwner, rcWindow);\n543: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 548,
        "text": "Use layered function to draw layered window",
        "context_before": "546: \tSIZE sz = {rcWindow.Width(), rcWindow.Height()};\n547: ",
        "context_after": "549: \tif (!futureWin->IsVistaOrLater())\n550: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 553,
        "text": "Vista has better layered function (update only element area)",
        "context_before": "551: \t\t::UpdateLayeredWindow(wndOwner, NULL, &ptDst, &sz, dcMemory, &ptSrc, 0, &bf, ULW_ALPHA);\n552: \t}",
        "context_after": "554: \t{\n555: \t\tUPDATELAYEREDWINDOWINFO info = {sizeof(info), NULL, &ptDst, &sz, dcMemory, &ptSrc, 0, &bf, ULW_ALPHA, rc};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 559,
        "text": "Release resources",
        "context_before": "557: \t}\n558: ",
        "context_after": "560: \t::SelectObject(dcMemory, oldMemory);\n561: \t::SelectObject(dcBackgd, oldBackgd);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 574,
        "text": "::InvalidateRect(wndOwner, layout->rcRect, FALSE);",
        "context_before": "572: \t{\n573: \t\tRedrawLayoutDefault(layout);",
        "context_after": "575: \t\t::RedrawWindow(wndOwner, layout->rcRect, NULL, RDW_INVALIDATE|RDW_ALLCHILDREN);\n576: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 593,
        "text": "dcBackgd.FillSolidRect(rc, RGB(185, 209, 234)); // RGB(215, 228, 242)",
        "context_before": "591: \tCRect rc = layout->rcRect;\n592: ",
        "context_after": "594: \n595: \tlayout->DrawBackground(dcBackgd); // Draw background"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 595,
        "text": "Draw background",
        "context_before": "593: \t//dcBackgd.FillSolidRect(rc, RGB(185, 209, 234)); // RGB(215, 228, 242)\n594: ",
        "context_after": "596: \n597: \t// Transfer from background cache into window cache"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 597,
        "text": "Transfer from background cache into window cache",
        "context_before": "595: \tlayout->DrawBackground(dcBackgd); // Draw background\n596: ",
        "context_after": "598: \t::BitBlt(dcMemory, rc.left, rc.top, rc.Width(), rc.Height(), dcBackgd, rc.left, rc.top, SRCCOPY);\n599: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 600,
        "text": "Draw elements",
        "context_before": "598: \t::BitBlt(dcMemory, rc.left, rc.top, rc.Width(), rc.Height(), dcBackgd, rc.left, rc.top, SRCCOPY);\n599: ",
        "context_after": "601: \n602: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 603,
        "text": "Release resources",
        "context_before": "601: \n602: ",
        "context_after": "604: \t::SelectObject(dcMemory, oldMemory);\n605: \t::SelectObject(dcBackgd, oldBackgd);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 613,
        "text": "This function is the same as Resize (0, 0) (Windows does that when minimize window)",
        "context_before": "611: void SkinDraw::Minimized()\n612: {",
        "context_after": "614: \t// but with some optimizations and explanations.\n615: \t// Also removes caches to free memory when minimize window."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 614,
        "text": "but with some optimizations and explanations.",
        "context_before": "612: {\n613: \t// This function is the same as Resize (0, 0) (Windows does that when minimize window)",
        "context_after": "615: \t// Also removes caches to free memory when minimize window.\n616: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 615,
        "text": "Also removes caches to free memory when minimize window.",
        "context_before": "613: \t// This function is the same as Resize (0, 0) (Windows does that when minimize window)\n614: \t// but with some optimizations and explanations.",
        "context_after": "616: \n617: \tif (wndOwner == NULL)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 622,
        "text": "This comment and the code looks very old",
        "context_before": "620: \tif (isLayered)\n621: \t{",
        "context_after": "623: \t\t// from the time when the logic was different. I don't think it necessary now.\n624: \t\t// -------"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 623,
        "text": "from the time when the logic was different. I don't think it necessary now.",
        "context_before": "621: \t{\n622: \t\t// This comment and the code looks very old",
        "context_after": "624: \t\t// -------\n625: \t\t// The point of the following code that we move layered window offscreen"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 624,
        "text": "-------",
        "context_before": "622: \t\t// This comment and the code looks very old\n623: \t\t// from the time when the logic was different. I don't think it necessary now.",
        "context_after": "625: \t\t// The point of the following code that we move layered window offscreen\n626: \t\t// (Windows does the same when minimize window) with UpdateLayeredWindow,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 625,
        "text": "The point of the following code that we move layered window offscreen",
        "context_before": "623: \t\t// from the time when the logic was different. I don't think it necessary now.\n624: \t\t// -------",
        "context_after": "626: \t\t// (Windows does the same when minimize window) with UpdateLayeredWindow,\n627: \t\t// so when the window is restored there wasn't flickering of windows lying on the main window,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 626,
        "text": "(Windows does the same when minimize window) with UpdateLayeredWindow,",
        "context_before": "624: \t\t// -------\n625: \t\t// The point of the following code that we move layered window offscreen",
        "context_after": "627: \t\t// so when the window is restored there wasn't flickering of windows lying on the main window,\n628: \t\t// that mean that the all windows appears at the same time."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 627,
        "text": "so when the window is restored there wasn't flickering of windows lying on the main window,",
        "context_before": "625: \t\t// The point of the following code that we move layered window offscreen\n626: \t\t// (Windows does the same when minimize window) with UpdateLayeredWindow,",
        "context_after": "628: \t\t// that mean that the all windows appears at the same time.\n629: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 628,
        "text": "that mean that the all windows appears at the same time.",
        "context_before": "626: \t\t// (Windows does the same when minimize window) with UpdateLayeredWindow,\n627: \t\t// so when the window is restored there wasn't flickering of windows lying on the main window,",
        "context_after": "629: \n630: \t\tCRect rcWindow;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 631,
        "text": "::GetWindowRect(wndOwner, rcWindow);",
        "context_before": "629: \n630: \t\tCRect rcWindow;",
        "context_after": "632: \t\trcWindow.SetRect(-32000, -32000, -31900, -31900);\n633: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 641,
        "text": "We can draw layered window right away",
        "context_before": "639: \t\tHGDIOBJ oldMemory = ::SelectObject(dcMemory, bmMemory);\n640: ",
        "context_after": "642: \n643: \t\tBLENDFUNCTION bf = {AC_SRC_OVER, 0, (BYTE)valueOpacity, AC_SRC_ALPHA};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 649,
        "text": "Use layered function to draw layered window",
        "context_before": "647: \t\tSIZE sz = {rcWindow.Width(), rcWindow.Height()};\n648: ",
        "context_after": "650: \t\tif (!futureWin->IsVistaOrLater())\n651: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 654,
        "text": "Vista has better layered function",
        "context_before": "652: \t\t\t::UpdateLayeredWindow(wndOwner, NULL, &ptDst, &sz, dcMemory, &ptSrc, 0, &bf, ULW_ALPHA);\n653: \t\t}",
        "context_after": "655: \t\t{\n656: \t\t\tUPDATELAYEREDWINDOWINFO info = {sizeof(info), NULL, &ptDst, &sz, dcMemory, &ptSrc, 0, &bf, ULW_ALPHA, NULL};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 670,
        "text": "Also set region here, or in Vista when Aero enabled when restore from tray there is window flickering",
        "context_before": "668: \t\t::DeleteObject(bmBackgd); bmBackgd = NULL;\n669: ",
        "context_after": "671: \t\t// under other conditions everything is fine. In general the same code as in Resize. A strange bug.\n672: \t\tif (valueCorners)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 671,
        "text": "under other conditions everything is fine. In general the same code as in Resize. A strange bug.",
        "context_before": "669: \n670: \t\t// Also set region here, or in Vista when Aero enabled when restore from tray there is window flickering",
        "context_after": "672: \t\tif (valueCorners)\n673: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 677,
        "text": "Experimental feature for minimize/restore animation in Win7",
        "context_before": "675: \t\t\t::SetWindowRgn(wndOwner, rgn, TRUE);\n676: \t\t}",
        "context_after": "678: \t\telse\n679: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 682,
        "text": "Use CreateRoundRectRgn instead of CreateRectRgn, or there is window flickering in Vista",
        "context_before": "680: \t\t\tif (!isStyleBorder && !isLayered && !isLayeredAlpha && !isMiniPlayer)\n681: \t\t\t{",
        "context_after": "683: \t\t\t\tHRGN rgn = ::CreateRoundRectRgn(0, 0, 100, 100, 0, 0);\n684: \t\t\t\t::SetWindowRgn(wndOwner, rgn, TRUE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 687,
        "text": "End of the feature",
        "context_before": "685: \t\t\t}\n686: \t\t}",
        "context_after": "688: \t}\n689: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 722,
        "text": "Set volume at the same time when move the volume slider",
        "context_before": "720: \t\t\t\t}\n721: ",
        "context_after": "723: \t\t\t\tif (element->IsPress())\n724: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 730,
        "text": "break;",
        "context_before": "728: \t\t\t\t}\n729: ",
        "context_after": "731: \t\t\t}\n732: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 780,
        "text": "if (pressElement && pressElement != element)",
        "context_before": "778: \t\t\telement = layouts[i]->elements[j]->element->OnButtonDown(flags, point);\n779: ",
        "context_after": "781: //\t\t\t\telement = nullptr;\n782: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 781,
        "text": "element = nullptr;",
        "context_before": "779: \n780: //\t\t\tif (pressElement && pressElement != element)",
        "context_after": "782: \n783: \t\t\tif (layouts[i]->elements[j]->element->IsPress())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 791,
        "text": "if (element->IsPress()) { pressElement = element; clickElement = element; }",
        "context_before": "789: \t\t\tif (element)\n790: \t\t\t{",
        "context_after": "797: \t\t\t\tif (element->IsRedrawPress())\n798: \t\t\t\t\tRedrawElement(element, true);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 800,
        "text": "Set volume and rating at the same time when click on it",
        "context_before": "798: \t\t\t\t\tRedrawElement(element, true);\n799: ",
        "context_after": "801: \t\t\t\tif (element->type == SkinElement::Type::Volume ||\n802: \t\t\t\t\telement->type == SkinElement::Type::Track  ||"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 827,
        "text": "if (pressElement && pressElement != element)",
        "context_before": "825: \t\t\telement = layouts[i]->elements[j]->element->OnButtonUp(flags, point);\n826: ",
        "context_after": "828: //\t\t\t\telement = nullptr;\n829: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 828,
        "text": "element = nullptr;",
        "context_before": "826: \n827: //\t\t\tif (pressElement && pressElement != element)",
        "context_after": "829: \n830: \t\t\tif (element)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 834,
        "text": "Do not redraw when a new window is appear (it redraw itself on mouse leave)",
        "context_before": "832: \t\t\t\tpressElement = nullptr;\n833: ",
        "context_after": "835: \t\t\t\tif (element->type != SkinElement::Type::Equalizer)\n836: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 846,
        "text": "For sliders send the action regardless where the mouse button released",
        "context_before": "844: \t\t\t\t}\n845: ",
        "context_after": "847: \t\t\t\t// for others only if release the mouse button on the element.\n848: \t\t\t\tif (element->type == SkinElement::Type::Track ||"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 847,
        "text": "for others only if release the mouse button on the element.",
        "context_before": "845: \n846: \t\t\t\t// For sliders send the action regardless where the mouse button released",
        "context_after": "848: \t\t\t\tif (element->type == SkinElement::Type::Track ||\n849: \t\t\t\t\telement->type == SkinElement::Type::Volume)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 851,
        "text": "Redraw sliders as soon as possible",
        "context_before": "849: \t\t\t\t\telement->type == SkinElement::Type::Volume)\n850: \t\t\t\t{",
        "context_after": "852: \t\t\t\t\treturn element;\n853: \t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 854,
        "text": "For rating the action is already sent in MouseDown",
        "context_before": "852: \t\t\t\t\treturn element;\n853: \t\t\t\t}",
        "context_after": "855: \t\t\t\telse if (element->IsHover() &&\n856: \t\t\t\t\telement->type != SkinElement::Type::Rating)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1003,
        "text": "Default cover is set and try to set default just ignore",
        "context_before": "1001: \t\t\tif (element->type == SkinElement::Type::Cover)\n1002: \t\t\t{",
        "context_after": "1004: \t\t\t\tif (!static_cast<SkinCover*>(element)->IsImage() && image == nullptr)\n1005: \t\t\t\t\tcontinue;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1357,
        "text": "Compose the file name for example \"Skin\\Default\\Skin.xml\"",
        "context_before": "1355: \tUnloadSkin();\n1356: ",
        "context_after": "1358: \n1359: \tstd::wstring path;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1379,
        "text": "AddFontResourceEx(csPath + L\"Font\\\\\" + L\"Alabama.ttf\", FR_PRIVATE, NULL);",
        "context_before": "1377: \t}\n1378: ",
        "context_after": "1380: \n1381: \tXmlFile xmlFile;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1525,
        "text": "Compose the file name for example \"Skin\\Default\\Skin.xml\"",
        "context_before": "1523: \tUnloadSkin();\n1524: ",
        "context_after": "1526: \n1527: \tstd::wstring path;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1539,
        "text": "AddFontResourceEx(csPath + L\"Font\\\\\" + L\"Alabama.ttf\", FR_PRIVATE, NULL);",
        "context_before": "1537: \tstd::wstring file = path + L\"Alpha.xml\";\n1538: ",
        "context_after": "1540: \n1541: \tXmlFile xmlFile;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1628,
        "text": "std::wstring file = profilePath + L\"SkinSettings.xml\";",
        "context_before": "1626: \tif (!isLayoutsSave)\n1627: \t{",
        "context_after": "1629: \n1630: //\t\tif (FileSystem::Exists(file))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1630,
        "text": "if (FileSystem::Exists(file))",
        "context_before": "1628: //\t\tstd::wstring file = profilePath + L\"SkinSettings.xml\";\n1629: ",
        "context_after": "1631: //\t\t\tFileSystem::RemoveFile(file);\n1632: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1631,
        "text": "FileSystem::RemoveFile(file);",
        "context_before": "1629: \n1630: //\t\tif (FileSystem::Exists(file))",
        "context_after": "1632: \n1633: \t\treturn true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1734,
        "text": "If uncomment then if mizimize and restore then window fading of mizimize button is wrong",
        "context_before": "1732: void SkinDraw::RedrawElementFade(SkinElement* element)\n1733: {",
        "context_after": "1735: \tif (::IsIconic(wndOwner)) // || !::IsWindowVisible(wndOwner))\n1736: \t\treturn;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1735,
        "text": "|| !::IsWindowVisible(wndOwner))",
        "context_before": "1733: {\n1734: \t// If uncomment then if mizimize and restore then window fading of mizimize button is wrong",
        "context_after": "1736: \t\treturn;\n1737: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1753,
        "text": "TIMER_FADE_ID",
        "context_before": "1751: \t\t{\n1752: \t\t\tfadeElements.push_back(element);",
        "context_after": "1754: \t\t}\n1755: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1771,
        "text": "if (fadeElements.empty())",
        "context_before": "1769: bool SkinDraw::FadeElementDefault()\n1770: {",
        "context_after": "1772: //\t\treturn true;\n1773: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1772,
        "text": "return true;",
        "context_before": "1770: {\n1771: //\tif (fadeElements.empty())",
        "context_after": "1773: \n1774: \tHDC dcMemory = ::CreateCompatibleDC(dcScreen);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1788,
        "text": "First, draw background for the element (transfer from background cache into window cache)",
        "context_before": "1786: \t\tCRect rc = element->rcRect;\n1787: ",
        "context_after": "1789: \t\t::BitBlt(dcMemory, rc.left, rc.top, rc.Width(), rc.Height(), dcBackgd, rc.left, rc.top, SRCCOPY);\n1790: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1791,
        "text": "Next, draw the element",
        "context_before": "1789: \t\t::BitBlt(dcMemory, rc.left, rc.top, rc.Width(), rc.Height(), dcBackgd, rc.left, rc.top, SRCCOPY);\n1790: ",
        "context_after": "1792: \t\tif (element->DrawFade(dcMemory, false))\n1793: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1798,
        "text": "Release resources",
        "context_before": "1796: \t\t}\n1797: ",
        "context_after": "1799: \t\t::SelectObject(dcMemory, oldMemory);\n1800: \t\t::SelectObject(dcBackgd, oldBackgd);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1817,
        "text": "if (fadeElements.empty())",
        "context_before": "1815: bool SkinDraw::FadeElementLayered()\n1816: {",
        "context_after": "1818: //\t\treturn true;\n1819: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1818,
        "text": "return true;",
        "context_before": "1816: {\n1817: //\tif (fadeElements.empty())",
        "context_after": "1819: \n1820: \tHDC dcMemory = ::CreateCompatibleDC(dcScreen);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1832,
        "text": "First, draw background for the element (transfer from background cache into window cache)",
        "context_before": "1830: \t\tCRect rc = element->rcRect;\n1831: ",
        "context_after": "1833: \t\tBLENDFUNCTION bfBack = {0, 0, 255, 0};\n1834: \t\t::GdiAlphaBlend(dcMemory, rc.left, rc.top, rc.Width(), rc.Height(),"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1837,
        "text": "Next, draw the element",
        "context_before": "1835: \t\t\tdcBackgd, rc.left, rc.top, rc.Width(), rc.Height(), bfBack);\n1836: ",
        "context_after": "1838: \t\tif (element->DrawFade(dcMemory, true))\n1839: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1844,
        "text": "If WinVista update only element area",
        "context_before": "1842: \t\t}\n1843: ",
        "context_after": "1845: \t\tif (futureWin->IsVistaOrLater())\n1846: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1849,
        "text": "Window position",
        "context_before": "1847: \t\t\tBLENDFUNCTION bf = {AC_SRC_OVER, 0, (BYTE)valueOpacity, AC_SRC_ALPHA};\n1848: ",
        "context_after": "1850: \t\t\tGetWindowRect(wndOwner, rcWindow);\n1851: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1858,
        "text": "Vista has better layered function (update only element area)",
        "context_before": "1856: \t\t\tUPDATELAYEREDWINDOWINFO info = {sizeof(info), NULL, &ptDst, &sz, dcMemory, &ptSrc, 0, &bf, ULW_ALPHA, rc};\n1857: ",
        "context_after": "1859: \t\t\tfutureWin->UpdateLayeredWindowIndirect(wndOwner, &info);\n1860: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1863,
        "text": "If WinXP update whole window",
        "context_before": "1861: \t}\n1862: ",
        "context_after": "1864: \t// Call it here for optimimization to update all elements at once, anyway it slower than Vista variant\n1865: \tif (!futureWin->IsVistaOrLater())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1864,
        "text": "Call it here for optimimization to update all elements at once, anyway it slower than Vista variant",
        "context_before": "1862: \n1863: \t// If WinXP update whole window",
        "context_after": "1865: \tif (!futureWin->IsVistaOrLater())\n1866: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1869,
        "text": "Window position",
        "context_before": "1867: \t\tBLENDFUNCTION bf = {AC_SRC_OVER, 0, (BYTE)valueOpacity, AC_SRC_ALPHA};\n1868: ",
        "context_after": "1870: \t\t::GetWindowRect(wndOwner, rcWindow);\n1871: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1876,
        "text": "Use layered function to draw layered window",
        "context_before": "1874: \t\tSIZE sz = {rcWindow.Width(), rcWindow.Height()};\n1875: ",
        "context_after": "1877: \t\t::UpdateLayeredWindow(wndOwner, NULL, &ptDst, &sz, dcMemory, &ptSrc, 0, &bf, ULW_ALPHA);\n1878: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1880,
        "text": "Release resources",
        "context_before": "1878: \t}\n1879: ",
        "context_after": "1881: \t::SelectObject(dcMemory, oldMemory);\n1882: \t::SelectObject(dcBackgd, oldBackgd);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 50,
        "text": "The following 3 functions return an element that did action or nullptr if no action",
        "context_before": "48: \tvoid Minimized();\n49: ",
        "context_after": "51: \tSkinElement* MouseMove(unsigned flags, CPoint& point);\n52: \tSkinElement* MouseDown(unsigned flags, CPoint& point);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 57,
        "text": "inline bool IsLayered() {return isLayered;}",
        "context_before": "55: \tvoid MouseLeave();\n56: ",
        "context_after": "58: \tinline bool IsAeroGlass() {return isAeroGlass;}\n59: \tinline bool IsLayeredAlpha() {return isLayeredAlpha;}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 63,
        "text": "Element is pressed?",
        "context_before": "61: \tinline bool IsStyleBorder() {return isStyleBorder;}\n62: ",
        "context_after": "64: \tinline bool IsHoverElement() {return (hoverElement ? true:false);} // Mouse over element?\n65: \tinline bool IsClickElement() {return (clickElement ? true:false);} // Used only to check double click"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 64,
        "text": "Mouse over element?",
        "context_before": "62: \n63: \tinline bool IsPressElement() {return (pressElement ? true:false);} // Element is pressed?",
        "context_after": "65: \tinline bool IsClickElement() {return (clickElement ? true:false);} // Used only to check double click\n66: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 65,
        "text": "Used only to check double click",
        "context_before": "63: \tinline bool IsPressElement() {return (pressElement ? true:false);} // Element is pressed?\n64: \tinline bool IsHoverElement() {return (hoverElement ? true:false);} // Mouse over element?",
        "context_after": "66: \n67: \tinline void EmptyClick() {clickElement = nullptr;} // Should be called when click on empty space"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 67,
        "text": "Should be called when click on empty space",
        "context_before": "65: \tinline bool IsClickElement() {return (clickElement ? true:false);} // Used only to check double click\n66: ",
        "context_after": "68: \n69: \tinline SkinElement* GetPressElement() {return pressElement;}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 120,
        "text": "Get sizes for owner window",
        "context_before": "118: \tvoid SetOpacity(int opacity255);\n119: ",
        "context_after": "121: \tinline CSize& GetMinSize() {return szMinSize;}\n122: \tinline CSize& GetMaxSize() {return szMaxSize;}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 137,
        "text": "Virtual layouts that represent the window",
        "context_before": "135: \n136: private:",
        "context_after": "138: \n139: \tSkinDraw* drawMini = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 145,
        "text": "If set then the class used by Alpha Window (SkinAlpha)",
        "context_before": "143: \tbool isAeroGlass = false;\n144: \tbool isDwmEnabled = false;",
        "context_after": "146: \tbool isMiniPlayer = false;\n147: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 157,
        "text": "Allow saving skin layouts",
        "context_before": "155: \tbool isShadowLayered = false;\n156: ",
        "context_after": "158: \tstd::string layoutsVersion;\n159: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 165,
        "text": "Window cache",
        "context_before": "163: \tHDC dcScreen = NULL;\n164: ",
        "context_after": "166: \tHBITMAP bmBackgd = NULL; // Background cache\n167: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 166,
        "text": "Background cache",
        "context_before": "164: \n165: \tHBITMAP bmMemory = NULL; // Window cache",
        "context_after": "167: \n168: \tSkinElement* pressElement = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 172,
        "text": "Window opacity",
        "context_before": "170: \tSkinElement* clickElement = nullptr;\n171: ",
        "context_after": "173: \n174: \tint valueCorners = 0; // Cut window corners (only without layered style)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 174,
        "text": "Cut window corners (only without layered style)",
        "context_before": "172: \tint valueOpacity = 255; // Window opacity\n173: ",
        "context_after": "175: \n176: \tint splitterLayoutX = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 189,
        "text": "void RedrawLayoutLayered(SkinLayout* layout);",
        "context_before": "187: \tvoid RedrawLayout(SkinLayout* layout);\n188: \tvoid RedrawLayoutDefault(SkinLayout* layout);",
        "context_after": "190: \n191: \tvoid ForceUpdate() {if (!isLayered) ::UpdateWindow(wndOwner);}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 195,
        "text": "Animation",
        "context_before": "193: \tvoid DrawSwitch(SkinElement::Type type, int state);\n194: ",
        "context_after": "196: \n197: \tvoid RedrawElementFade(SkinElement* element);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 204,
        "text": "Default values",
        "context_before": "202: \tstd::vector<SkinElement*> fadeElements;\n203: ",
        "context_after": "205: \tstruct DefaultSize\n206: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.h",
        "line": 223,
        "text": "Sizes for owner window, not used in this class but it load them",
        "context_before": "221: \t};\n222: ",
        "context_after": "224: \tCSize szMinSize = {DefaultSize::MinSizeX, DefaultSize::MinSizeY};\n225: \tCSize szMaxSize = {DefaultSize::MaxSizeX, DefaultSize::MaxSizeY};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinEdit.cpp",
        "line": 102,
        "text": "std::wstring path;",
        "context_before": "100: bool SkinEdit::LoadSkin(const std::wstring& file, ZipFile* zipFile)\n101: {",
        "context_after": "103: //\tCFileParser::PathFromFile(csFile, csPath);\n104: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinEdit.cpp",
        "line": 103,
        "text": "CFileParser::PathFromFile(csFile, csPath);",
        "context_before": "101: {\n102: //\tstd::wstring path;",
        "context_after": "104: \n105: \tXmlFile xmlFile;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinEdit.cpp",
        "line": 132,
        "text": "Default",
        "context_before": "130: \t\t\t\teditHeight += editHeight / 3; // 4\n131: ",
        "context_after": "133: \n134: \t\t\t\tconst char* strColor = xmlFont.AttributeRaw(\"Color\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinEdit.cpp",
        "line": 141,
        "text": "Default",
        "context_before": "139: \t\t\t\t}\n140: ",
        "context_after": "142: \n143: \t\t\t\tconst char* strColor2 = xmlFont.AttributeRaw(\"Color2\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinEdit.cpp",
        "line": 162,
        "text": "Default",
        "context_before": "160: \t\t\tif (xmlBackground)\n161: \t\t\t{",
        "context_after": "163: \n164: \t\t\t\tconst char* strColor = xmlBackground.AttributeRaw(\"Color\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinEdit.cpp",
        "line": 192,
        "text": "::SetBkMode(hDC, TRANSPARENT);",
        "context_before": "190: \t\t::SetTextColor(hDC, colorCurrent);\n191: ",
        "context_after": "193: \t\t::SetBkColor(hDC, colorBack);\n194: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinEdit.cpp",
        "line": 208,
        "text": "http://weblogs.asp.net/kennykerr/archive/2007/01/23/controls-and-the-desktop-window-manager.aspx",
        "context_before": "206: \t::FillRect(dc, rc, brushBack);\n207: ",
        "context_after": "209: \n210: \t/*"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinEdit.h",
        "line": 82,
        "text": "Subclass control",
        "context_before": "80: \tHWND wndFocus = NULL;\n81: ",
        "context_after": "83: \tstatic SkinEdit* skinEdit;\n84: \tstatic WNDPROC mainDlgProc;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.cpp",
        "line": 43,
        "text": "Check IsWindow because there was strange asserts when start the program in maximize mode and change the skin",
        "context_before": "41: \trcRect = rcDraw;\n42: ",
        "context_after": "44: \n45: \tif (toolTip)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.cpp",
        "line": 49,
        "text": "Set empty rect for invisible tooltips or they conflict with visible",
        "context_before": "47: \t\tCRect rc;\n48: ",
        "context_after": "50: \t\tif (!isHidden) rc = rcRect;\n51: \t\telse rc.SetRectEmpty();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 25,
        "text": "Forward declarations",
        "context_before": "23: #include \"SkinTrigger.h\"\n24: ",
        "context_after": "26: class ToolTips;\n27: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 38,
        "text": "Play button",
        "context_before": "36: \t{\n37: \t\tNone           = 0,",
        "context_after": "39: \t\tPlayPause      = 2,   // Play/pause button\n40: \t\tPause          = 3,   // Pause button"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 39,
        "text": "Play/pause button",
        "context_before": "37: \t\tNone           = 0,\n38: \t\tPlay           = 1,   // Play button",
        "context_after": "40: \t\tPause          = 3,   // Pause button\n41: \t\tStop           = 4,   // Stop button"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 40,
        "text": "Pause button",
        "context_before": "38: \t\tPlay           = 1,   // Play button\n39: \t\tPlayPause      = 2,   // Play/pause button",
        "context_after": "41: \t\tStop           = 4,   // Stop button\n42: \t\tNext           = 5,   // Next track button"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 41,
        "text": "Stop button",
        "context_before": "39: \t\tPlayPause      = 2,   // Play/pause button\n40: \t\tPause          = 3,   // Pause button",
        "context_after": "42: \t\tNext           = 5,   // Next track button\n43: \t\tPrev           = 6,   // Previous track button"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 42,
        "text": "Next track button",
        "context_before": "40: \t\tPause          = 3,   // Pause button\n41: \t\tStop           = 4,   // Stop button",
        "context_after": "43: \t\tPrev           = 6,   // Previous track button\n44: \t\tVolume         = 7,   // Volume slider"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 43,
        "text": "Previous track button",
        "context_before": "41: \t\tStop           = 4,   // Stop button\n42: \t\tNext           = 5,   // Next track button",
        "context_after": "44: \t\tVolume         = 7,   // Volume slider\n45: \t\tTrack          = 8,   // Track slider"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 44,
        "text": "Volume slider",
        "context_before": "42: \t\tNext           = 5,   // Next track button\n43: \t\tPrev           = 6,   // Previous track button",
        "context_after": "45: \t\tTrack          = 8,   // Track slider\n46: \t\tMute           = 9,   // Mute button"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 45,
        "text": "Track slider",
        "context_before": "43: \t\tPrev           = 6,   // Previous track button\n44: \t\tVolume         = 7,   // Volume slider",
        "context_after": "46: \t\tMute           = 9,   // Mute button\n47: \t\tClose          = 10,  // Close button"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 46,
        "text": "Mute button",
        "context_before": "44: \t\tVolume         = 7,   // Volume slider\n45: \t\tTrack          = 8,   // Track slider",
        "context_after": "47: \t\tClose          = 10,  // Close button\n48: \t\tMinimize       = 11,  // Minimize button"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 47,
        "text": "Close button",
        "context_before": "45: \t\tTrack          = 8,   // Track slider\n46: \t\tMute           = 9,   // Mute button",
        "context_after": "48: \t\tMinimize       = 11,  // Minimize button\n49: \t\tLibrary        = 12,  // Library window"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 48,
        "text": "Minimize button",
        "context_before": "46: \t\tMute           = 9,   // Mute button\n47: \t\tClose          = 10,  // Close button",
        "context_after": "49: \t\tLibrary        = 12,  // Library window\n50: \t\tPlaylist       = 13,  // Playlist window"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 49,
        "text": "Library window",
        "context_before": "47: \t\tClose          = 10,  // Close button\n48: \t\tMinimize       = 11,  // Minimize button",
        "context_after": "50: \t\tPlaylist       = 13,  // Playlist window\n51: \t\tButton         = 14,  // Button with trigger"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 50,
        "text": "Playlist window",
        "context_before": "48: \t\tMinimize       = 11,  // Minimize button\n49: \t\tLibrary        = 12,  // Library window",
        "context_after": "51: \t\tButton         = 14,  // Button with trigger\n52: \t\tCover          = 15,  // Cover art"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 51,
        "text": "Button with trigger",
        "context_before": "49: \t\tLibrary        = 12,  // Library window\n50: \t\tPlaylist       = 13,  // Playlist window",
        "context_after": "52: \t\tCover          = 15,  // Cover art\n53: \t\tSpectrum       = 16,  // Visualizer window"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 52,
        "text": "Cover art",
        "context_before": "50: \t\tPlaylist       = 13,  // Playlist window\n51: \t\tButton         = 14,  // Button with trigger",
        "context_after": "53: \t\tSpectrum       = 16,  // Visualizer window\n54: \t\tRating         = 17,  // Rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 53,
        "text": "Visualizer window",
        "context_before": "51: \t\tButton         = 14,  // Button with trigger\n52: \t\tCover          = 15,  // Cover art",
        "context_after": "54: \t\tRating         = 17,  // Rating\n55: \t\tTitle          = 18,  // Title text line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 54,
        "text": "Rating",
        "context_before": "52: \t\tCover          = 15,  // Cover art\n53: \t\tSpectrum       = 16,  // Visualizer window",
        "context_after": "55: \t\tTitle          = 18,  // Title text line\n56: \t\tArtist         = 19,  // Artist text line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 55,
        "text": "Title text line",
        "context_before": "53: \t\tSpectrum       = 16,  // Visualizer window\n54: \t\tRating         = 17,  // Rating",
        "context_after": "56: \t\tArtist         = 19,  // Artist text line\n57: \t\tRepeat         = 20,  // Repeat switch"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 56,
        "text": "Artist text line",
        "context_before": "54: \t\tRating         = 17,  // Rating\n55: \t\tTitle          = 18,  // Title text line",
        "context_after": "57: \t\tRepeat         = 20,  // Repeat switch\n58: \t\tShuffle        = 21,  // Shuffle switch"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 57,
        "text": "Repeat switch",
        "context_before": "55: \t\tTitle          = 18,  // Title text line\n56: \t\tArtist         = 19,  // Artist text line",
        "context_after": "58: \t\tShuffle        = 21,  // Shuffle switch\n59: \t\tAlbum          = 22,  // Album text line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 58,
        "text": "Shuffle switch",
        "context_before": "56: \t\tArtist         = 19,  // Artist text line\n57: \t\tRepeat         = 20,  // Repeat switch",
        "context_after": "59: \t\tAlbum          = 22,  // Album text line\n60: \t\tEqualizer      = 23,  // Equalizer button"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 59,
        "text": "Album text line",
        "context_before": "57: \t\tRepeat         = 20,  // Repeat switch\n58: \t\tShuffle        = 21,  // Shuffle switch",
        "context_after": "60: \t\tEqualizer      = 23,  // Equalizer button\n61: \t\tSearch         = 24,  // Search window"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 60,
        "text": "Equalizer button",
        "context_before": "58: \t\tShuffle        = 21,  // Shuffle switch\n59: \t\tAlbum          = 22,  // Album text line",
        "context_after": "61: \t\tSearch         = 24,  // Search window\n62: \t\tSearchMenu     = 25,  // Search menu button"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 61,
        "text": "Search window",
        "context_before": "59: \t\tAlbum          = 22,  // Album text line\n60: \t\tEqualizer      = 23,  // Equalizer button",
        "context_after": "62: \t\tSearchMenu     = 25,  // Search menu button\n63: \t\tSearchClear    = 26,  // Search clear button"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 62,
        "text": "Search menu button",
        "context_before": "60: \t\tEqualizer      = 23,  // Equalizer button\n61: \t\tSearch         = 24,  // Search window",
        "context_after": "63: \t\tSearchClear    = 26,  // Search clear button\n64: \t\tMaximize       = 27,  // Maximize button"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 63,
        "text": "Search clear button",
        "context_before": "61: \t\tSearch         = 24,  // Search window\n62: \t\tSearchMenu     = 25,  // Search menu button",
        "context_after": "64: \t\tMaximize       = 27,  // Maximize button\n65: \t\tMainMenu       = 28,  // Main menu button"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 64,
        "text": "Maximize button",
        "context_before": "62: \t\tSearchMenu     = 25,  // Search menu button\n63: \t\tSearchClear    = 26,  // Search clear button",
        "context_after": "65: \t\tMainMenu       = 28,  // Main menu button\n66: \t\tSwitch         = 29,  // Switch with trigger (deprecated)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 65,
        "text": "Main menu button",
        "context_before": "63: \t\tSearchClear    = 26,  // Search clear button\n64: \t\tMaximize       = 27,  // Maximize button",
        "context_after": "66: \t\tSwitch         = 29,  // Switch with trigger (deprecated)\n67: \t\tMiniPlayer     = 30,  // Mini player button"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 66,
        "text": "Switch with trigger (deprecated)",
        "context_before": "64: \t\tMaximize       = 27,  // Maximize button\n65: \t\tMainMenu       = 28,  // Main menu button",
        "context_after": "67: \t\tMiniPlayer     = 30,  // Mini player button\n68: \t\tTimeLength     = 31,  // Time lenght text line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 67,
        "text": "Mini player button",
        "context_before": "65: \t\tMainMenu       = 28,  // Main menu button\n66: \t\tSwitch         = 29,  // Switch with trigger (deprecated)",
        "context_after": "68: \t\tTimeLength     = 31,  // Time lenght text line\n69: \t\tTimeElapsed    = 32,  // Time elapsed text line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 68,
        "text": "Time lenght text line",
        "context_before": "66: \t\tSwitch         = 29,  // Switch with trigger (deprecated)\n67: \t\tMiniPlayer     = 30,  // Mini player button",
        "context_after": "69: \t\tTimeElapsed    = 32,  // Time elapsed text line\n70: \t\tTimeRemains    = 33,  // Time remains text line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 69,
        "text": "Time elapsed text line",
        "context_before": "67: \t\tMiniPlayer     = 30,  // Mini player button\n68: \t\tTimeLength     = 31,  // Time lenght text line",
        "context_after": "70: \t\tTimeRemains    = 33,  // Time remains text line\n71: \t\tTimeElapsed2   = 34,  // Time elapsed 2 text line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 70,
        "text": "Time remains text line",
        "context_before": "68: \t\tTimeLength     = 31,  // Time lenght text line\n69: \t\tTimeElapsed    = 32,  // Time elapsed text line",
        "context_after": "71: \t\tTimeElapsed2   = 34,  // Time elapsed 2 text line\n72: \t\tTimeRemains2   = 35,  // Time remains 2 text line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 71,
        "text": "Time elapsed 2 text line",
        "context_before": "69: \t\tTimeElapsed    = 32,  // Time elapsed text line\n70: \t\tTimeRemains    = 33,  // Time remains text line",
        "context_after": "72: \t\tTimeRemains2   = 35,  // Time remains 2 text line\n73: \t\tSplitter       = 36,  // Splitter"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 72,
        "text": "Time remains 2 text line",
        "context_before": "70: \t\tTimeRemains    = 33,  // Time remains text line\n71: \t\tTimeElapsed2   = 34,  // Time elapsed 2 text line",
        "context_after": "73: \t\tSplitter       = 36,  // Splitter\n74: \t\tYear           = 37,  // Year text line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 73,
        "text": "Splitter",
        "context_before": "71: \t\tTimeElapsed2   = 34,  // Time elapsed 2 text line\n72: \t\tTimeRemains2   = 35,  // Time remains 2 text line",
        "context_after": "74: \t\tYear           = 37,  // Year text line\n75: \t\tArtistTitle    = 38,  // Artist - Title text line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 74,
        "text": "Year text line",
        "context_before": "72: \t\tTimeRemains2   = 35,  // Time remains 2 text line\n73: \t\tSplitter       = 36,  // Splitter",
        "context_after": "75: \t\tArtistTitle    = 38,  // Artist - Title text line\n76: \t\tStatusLine     = 39,  // Status text line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 75,
        "text": "Artist - Title text line",
        "context_before": "73: \t\tSplitter       = 36,  // Splitter\n74: \t\tYear           = 37,  // Year text line",
        "context_after": "76: \t\tStatusLine     = 39,  // Status text line\n77: \t\tStatusLine2    = 40,  // Status short text line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 76,
        "text": "Status text line",
        "context_before": "74: \t\tYear           = 37,  // Year text line\n75: \t\tArtistTitle    = 38,  // Artist - Title text line",
        "context_after": "77: \t\tStatusLine2    = 40,  // Status short text line\n78: \t\tGenre          = 41,  // Genre text line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 77,
        "text": "Status short text line",
        "context_before": "75: \t\tArtistTitle    = 38,  // Artist - Title text line\n76: \t\tStatusLine     = 39,  // Status text line",
        "context_after": "78: \t\tGenre          = 41,  // Genre text line\n79: \t\tLyrics         = 42   // Lyrics window"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 78,
        "text": "Genre text line",
        "context_before": "76: \t\tStatusLine     = 39,  // Status text line\n77: \t\tStatusLine2    = 40,  // Status short text line",
        "context_after": "79: \t\tLyrics         = 42   // Lyrics window\n80: \t};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 79,
        "text": "Lyrics window",
        "context_before": "77: \t\tStatusLine2    = 40,  // Status short text line\n78: \t\tGenre          = 41,  // Genre text line",
        "context_after": "80: \t};\n81: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 82,
        "text": "Element is pressed?",
        "context_before": "80: \t};\n81: ",
        "context_after": "83: \tbool isHover = false; // Mouse over element?\n84: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 83,
        "text": "Mouse over element?",
        "context_before": "81: \n82: \tbool isPress = false; // Element is pressed?",
        "context_after": "84: \n85: \tbool isHidden = false; // Visibility state of element, used for drawing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 85,
        "text": "Visibility state of element, used for drawing",
        "context_before": "83: \tbool isHover = false; // Mouse over element?\n84: ",
        "context_after": "86: \tbool isHiddenReal = false; // Real visibility state of element (regardless of visibility of layout and element)\n87: \tbool isHiddenLayout = false; // Visibility state of layout where element is located"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 86,
        "text": "Real visibility state of element (regardless of visibility of layout and element)",
        "context_before": "84: \n85: \tbool isHidden = false; // Visibility state of element, used for drawing",
        "context_after": "87: \tbool isHiddenLayout = false; // Visibility state of layout where element is located\n88: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 87,
        "text": "Visibility state of layout where element is located",
        "context_before": "85: \tbool isHidden = false; // Visibility state of element, used for drawing\n86: \tbool isHiddenReal = false; // Real visibility state of element (regardless of visibility of layout and element)",
        "context_after": "88: \n89: \tbool isFadeEffect = false; // Animation is enabled?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 89,
        "text": "Animation is enabled?",
        "context_before": "87: \tbool isHiddenLayout = false; // Visibility state of layout where element is located\n88: ",
        "context_after": "90: \n91: \tSkinTrigger skinTrigger; // Trigger for Button"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 91,
        "text": "Trigger for Button",
        "context_before": "89: \tbool isFadeEffect = false; // Animation is enabled?\n90: ",
        "context_after": "92: \n93: \tType type = Type::None; // Element type"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 93,
        "text": "Element type",
        "context_before": "91: \tSkinTrigger skinTrigger; // Trigger for Button\n92: ",
        "context_after": "94: \tHWND window = NULL; // Element window\n95: \tToolTips* toolTip = nullptr; // Element tooltip"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 94,
        "text": "Element window",
        "context_before": "92: \n93: \tType type = Type::None; // Element type",
        "context_after": "95: \tToolTips* toolTip = nullptr; // Element tooltip\n96: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 95,
        "text": "Element tooltip",
        "context_before": "93: \tType type = Type::None; // Element type\n94: \tHWND window = NULL; // Element window",
        "context_after": "96: \n97: \tZipFile* zipFile = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 102,
        "text": "Animation step for cover art",
        "context_before": "100: \tstruct FadeValue\n101: \t{",
        "context_after": "103: \t\tstatic const int StepIn = 51; // Animation step for button (fade in)\n104: \t\tstatic const int StepOut = 17; // Animation step for button (fade out)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 103,
        "text": "Animation step for button (fade in)",
        "context_before": "101: \t{\n102: \t\tstatic const int Step = /*35*/25; // Animation step for cover art",
        "context_after": "104: \t\tstatic const int StepOut = 17; // Animation step for button (fade out)\n105: \t};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 104,
        "text": "Animation step for button (fade out)",
        "context_before": "102: \t\tstatic const int Step = /*35*/25; // Animation step for cover art\n103: \t\tstatic const int StepIn = 51; // Animation step for button (fade in)",
        "context_after": "105: \t};\n106: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 110,
        "text": "Load element skin",
        "context_before": "108: \tstd::wstring skinName;\n109: ",
        "context_after": "111: \tvirtual void Draw(HDC dc, bool isAlpha); // Draw element\n112: \tvirtual bool DrawFade(HDC dc, bool isAlpha); // Draw one frame of animation"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 111,
        "text": "Draw element",
        "context_before": "109: \n110: \tvirtual bool LoadSkin(const std::wstring& file, ZipFile* zipFile); // Load element skin",
        "context_after": "112: \tvirtual bool DrawFade(HDC dc, bool isAlpha); // Draw one frame of animation\n113: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 112,
        "text": "Draw one frame of animation",
        "context_before": "110: \tvirtual bool LoadSkin(const std::wstring& file, ZipFile* zipFile); // Load element skin\n111: \tvirtual void Draw(HDC dc, bool isAlpha); // Draw element",
        "context_after": "113: \n114: \tvirtual void SetRect(CRect& rcDraw); // Set new position for element"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 114,
        "text": "Set new position for element",
        "context_before": "112: \tvirtual bool DrawFade(HDC dc, bool isAlpha); // Draw one frame of animation\n113: ",
        "context_after": "115: \tinline CRect& GetRect() {return rcRect;} // Get current position of element\n116: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 115,
        "text": "Get current position of element",
        "context_before": "113: \n114: \tvirtual void SetRect(CRect& rcDraw); // Set new position for element",
        "context_after": "116: \n117: \tvirtual int GetWidth(); // Element width"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 117,
        "text": "Element width",
        "context_before": "115: \tinline CRect& GetRect() {return rcRect;} // Get current position of element\n116: ",
        "context_after": "118: \tvirtual int GetHeight(); // Element height\n119: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 118,
        "text": "Element height",
        "context_before": "116: \n117: \tvirtual int GetWidth(); // Element width",
        "context_after": "119: \n120: \t// Return element when something changed else return nullptr"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 120,
        "text": "Return element when something changed else return nullptr",
        "context_before": "118: \tvirtual int GetHeight(); // Element height\n119: ",
        "context_after": "121: \t// For example OnMouseMove of Button element return element when\n122: \t// mouse enters element area or leaves it (isHover flag changed)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 121,
        "text": "For example OnMouseMove of Button element return element when",
        "context_before": "119: \n120: \t// Return element when something changed else return nullptr",
        "context_after": "122: \t// mouse enters element area or leaves it (isHover flag changed)\n123: \tvirtual SkinElement* OnMouseMove(unsigned flags, CPoint& point);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 122,
        "text": "mouse enters element area or leaves it (isHover flag changed)",
        "context_before": "120: \t// Return element when something changed else return nullptr\n121: \t// For example OnMouseMove of Button element return element when",
        "context_after": "123: \tvirtual SkinElement* OnMouseMove(unsigned flags, CPoint& point);\n124: \tvirtual SkinElement* OnButtonDown(unsigned flags, CPoint& point);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 128,
        "text": "Need to redraw when mouse over element?",
        "context_before": "126: \tvirtual SkinElement* OnMouseLeave();\n127: ",
        "context_after": "129: \tvirtual bool IsRedrawPress(); // Need to redraw when element is pressed?\n130: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 129,
        "text": "Need to redraw when element is pressed?",
        "context_before": "127: \n128: \tvirtual bool IsRedrawHover(); // Need to redraw when mouse over element?",
        "context_after": "130: \n131: \t// Check element states"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 131,
        "text": "Check element states",
        "context_before": "129: \tvirtual bool IsRedrawPress(); // Need to redraw when element is pressed?\n130: ",
        "context_after": "132: \tinline bool IsPress() {return isPress;} // Element is pressed\n133: \tinline bool IsHover() {return isHover;} // Mouse over element"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 132,
        "text": "Element is pressed",
        "context_before": "130: \n131: \t// Check element states",
        "context_after": "133: \tinline bool IsHover() {return isHover;} // Mouse over element\n134: \tinline bool IsHidden() {return isHidden;} // Element is hidden"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 133,
        "text": "Mouse over element",
        "context_before": "131: \t// Check element states\n132: \tinline bool IsPress() {return isPress;} // Element is pressed",
        "context_after": "134: \tinline bool IsHidden() {return isHidden;} // Element is hidden\n135: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 134,
        "text": "Element is hidden",
        "context_before": "132: \tinline bool IsPress() {return isPress;} // Element is pressed\n133: \tinline bool IsHover() {return isHover;} // Mouse over element",
        "context_after": "135: \n136: \tinline bool IsFadeEffect() {return isFadeEffect;}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 137,
        "text": "inline void SetHide(bool hide) {isHide = hide;}",
        "context_before": "135: \n136: \tinline bool IsFadeEffect() {return isFadeEffect;}",
        "context_after": "138: \tinline bool IsHiddenLayout() {return isHiddenLayout;}\n139: \tinline void HideReal(bool isHide)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 155,
        "text": "Get element type",
        "context_before": "153: \n154: ",
        "context_after": "156: \n157: \tvirtual int GetParam();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 162,
        "text": "Next line with commented part should be added to class where tooltip is needed",
        "context_before": "160: \tinline void SetWindow(HWND wnd) {window = wnd;}\n161: ",
        "context_after": "163: \tvirtual bool SetToolTip(ToolTips* tips) {toolTip = nullptr; return false;}// override {toolTip = tips; return true;}\n164: };"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinElement.h",
        "line": 163,
        "text": "override {toolTip = tips; return true;}",
        "context_before": "161: \n162: \t// Next line with commented part should be added to class where tooltip is needed",
        "context_after": "164: };\n165: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 123,
        "text": "Calculate new pos using new rect",
        "context_before": "121: \t}\n122: ",
        "context_after": "124: \tif (trigger.leftFromRightID || trigger.rightFromLeftID || trigger.leftFromLeftID || trigger.rightFromRightID)\n125: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 126,
        "text": "Left location",
        "context_before": "124: \tif (trigger.leftFromRightID || trigger.rightFromLeftID || trigger.leftFromLeftID || trigger.rightFromRightID)\n125: \t{",
        "context_after": "127: \t\t{\n128: \t\t\tpos.left = rcRect.left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 130,
        "text": "Fixed width",
        "context_before": "128: \t\t\tpos.left = rcRect.left;\n129: ",
        "context_after": "131: \t\t\t\tpos.width = rcRect.right - rcRect.left;\n132: \t\t\telse // To right"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 132,
        "text": "To right",
        "context_before": "130: \t\t\tif (pos.isWidth) // Fixed width\n131: \t\t\t\tpos.width = rcRect.right - rcRect.left;",
        "context_after": "133: \t\t\t\tpos.right = cx - rcRect.right;\n134: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 135,
        "text": "Right location",
        "context_before": "133: \t\t\t\tpos.right = cx - rcRect.right;\n134: \t\t}",
        "context_after": "136: \t\t{\n137: \t\t\tpos.width = rcRect.right - rcRect.left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 144,
        "text": "Top location",
        "context_before": "142: \tif (trigger.topFromBottomID || trigger.bottomFromTopID || trigger.topFromTopID || trigger.bottomFromBottomID)\n143: \t{",
        "context_after": "145: \t\t{\n146: \t\t\tpos.top = rcRect.top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 148,
        "text": "Fixed height",
        "context_before": "146: \t\t\tpos.top = rcRect.top;\n147: ",
        "context_after": "149: \t\t\t\tpos.height = rcRect.bottom - rcRect.top;\n150: \t\t\telse // To bottom"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 150,
        "text": "To bottom",
        "context_before": "148: \t\t\tif (pos.isHeight) // Fixed height\n149: \t\t\t\tpos.height = rcRect.bottom - rcRect.top;",
        "context_after": "151: \t\t\t\tpos.bottom = cy - rcRect.bottom;\n152: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 153,
        "text": "Bottom location",
        "context_before": "151: \t\t\t\tpos.bottom = cy - rcRect.bottom;\n152: \t\t}",
        "context_after": "154: \t\t{\n155: \t\t\tpos.height = rcRect.bottom - rcRect.top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 185,
        "text": "First, restore default rect",
        "context_before": "183: \tCRect rcDef;\n184: ",
        "context_after": "186: \tif (splitter.isMoveLeft || splitter.isMoveRight)\n187: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 188,
        "text": "Left location",
        "context_before": "186: \tif (splitter.isMoveLeft || splitter.isMoveRight)\n187: \t{",
        "context_after": "189: \t\t{\n190: \t\t\trcDef.left = pos.defLeft;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 192,
        "text": "Fixed width",
        "context_before": "190: \t\t\trcDef.left = pos.defLeft;\n191: ",
        "context_after": "193: \t\t\t\trcDef.right = rcDef.left + pos.defWidth;\n194: \t\t\telse // To right"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 194,
        "text": "To right",
        "context_before": "192: \t\t\tif (pos.isWidth) // Fixed width\n193: \t\t\t\trcDef.right = rcDef.left + pos.defWidth;",
        "context_after": "195: \t\t\t\trcDef.right = cx - pos.defRight;\n196: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 197,
        "text": "Right location",
        "context_before": "195: \t\t\t\trcDef.right = cx - pos.defRight;\n196: \t\t}",
        "context_after": "198: \t\t{\n199: \t\t\trcDef.left = cx - pos.defWidth - pos.defRight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 206,
        "text": "Top location",
        "context_before": "204: \tif (splitter.isMoveTop || splitter.isMoveBottom)\n205: \t{",
        "context_after": "207: \t\t{\n208: \t\t\trcDef.top = pos.defTop;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 210,
        "text": "Fixed height",
        "context_before": "208: \t\t\trcDef.top = pos.defTop;\n209: ",
        "context_after": "211: \t\t\t\trcDef.bottom = rcDef.top + pos.defHeight;\n212: \t\t\telse // To bottom"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 212,
        "text": "To bottom",
        "context_before": "210: \t\t\tif (pos.isHeight) // Fixed height\n211: \t\t\t\trcDef.bottom = rcDef.top + pos.defHeight;",
        "context_after": "213: \t\t\t\trcDef.bottom = cy - pos.defBottom;\n214: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 215,
        "text": "Bottom location",
        "context_before": "213: \t\t\t\trcDef.bottom = cy - pos.defBottom;\n214: \t\t}",
        "context_after": "216: \t\t{\n217: \t\t\trcDef.top = cy - pos.defHeight - pos.defBottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 224,
        "text": "Next, calculate new rect",
        "context_before": "222: \tCRect rcOld = rcRect;\n223: ",
        "context_after": "225: \tif (splitter.isMoveLeft)\n226: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 262,
        "text": "Do not redraw if new rect == old rect",
        "context_before": "260: \t}\n261: ",
        "context_after": "263: \tif (rcRect == rcOld)\n264: \t\treturn false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 266,
        "text": "Finally, calculate new pos using new rect",
        "context_before": "264: \t\treturn false;\n265: ",
        "context_after": "267: \tif (splitter.isMoveLeft || splitter.isMoveRight)\n268: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 269,
        "text": "Left location",
        "context_before": "267: \tif (splitter.isMoveLeft || splitter.isMoveRight)\n268: \t{",
        "context_after": "270: \t\t{\n271: \t\t\tpos.left = rcRect.left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 273,
        "text": "Fixed width",
        "context_before": "271: \t\t\tpos.left = rcRect.left;\n272: ",
        "context_after": "274: \t\t\t\tpos.width = rcRect.right - rcRect.left;\n275: \t\t\telse // To right"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 275,
        "text": "To right",
        "context_before": "273: \t\t\tif (pos.isWidth) // Fixed width\n274: \t\t\t\tpos.width = rcRect.right - rcRect.left;",
        "context_after": "276: \t\t\t\tpos.right = cx - rcRect.right;\n277: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 278,
        "text": "Right location",
        "context_before": "276: \t\t\t\tpos.right = cx - rcRect.right;\n277: \t\t}",
        "context_after": "279: \t\t{\n280: \t\t\tpos.width = rcRect.right - rcRect.left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 287,
        "text": "Top location",
        "context_before": "285: \tif (splitter.isMoveTop || splitter.isMoveBottom)\n286: \t{",
        "context_after": "288: \t\t{\n289: \t\t\tpos.top = rcRect.top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 291,
        "text": "Fixed height",
        "context_before": "289: \t\t\tpos.top = rcRect.top;\n290: ",
        "context_after": "292: \t\t\t\tpos.height = rcRect.bottom - rcRect.top;\n293: \t\t\telse // To bottom"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 293,
        "text": "To bottom",
        "context_before": "291: \t\t\tif (pos.isHeight) // Fixed height\n292: \t\t\t\tpos.height = rcRect.bottom - rcRect.top;",
        "context_after": "294: \t\t\t\tpos.bottom = cy - rcRect.bottom;\n295: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 296,
        "text": "Bottom location",
        "context_before": "294: \t\t\t\tpos.bottom = cy - rcRect.bottom;\n295: \t\t}",
        "context_after": "297: \t\t{\n298: \t\t\tpos.height = rcRect.bottom - rcRect.top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 321,
        "text": "Left location",
        "context_before": "319: void SkinLayout::UpdateRectLayout(int left, int top, int right, int bottom)\n320: {",
        "context_after": "322: \t{\n323: \t\trcRect.left = left + pos.left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 325,
        "text": "Fixed width",
        "context_before": "323: \t\trcRect.left = left + pos.left;\n324: ",
        "context_after": "326: \t\t\trcRect.right = rcRect.left + pos.width;\n327: \t\telse if (pos.isRight) // To right"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 327,
        "text": "To right",
        "context_before": "325: \t\tif (pos.isWidth) // Fixed width\n326: \t\t\trcRect.right = rcRect.left + pos.width;",
        "context_after": "328: \t\t\trcRect.right = right - pos.right;\n329: \t\telse // To center"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 329,
        "text": "To center",
        "context_before": "327: \t\telse if (pos.isRight) // To right\n328: \t\t\trcRect.right = right - pos.right;",
        "context_after": "330: \t\t\trcRect.right = left + (right - left)/2 + pos.leftRight;\n331: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 332,
        "text": "Right location",
        "context_before": "330: \t\t\trcRect.right = left + (right - left)/2 + pos.leftRight;\n331: \t}",
        "context_after": "333: \t{\n334: \t\tif (pos.isWidth) // Fixed width"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 334,
        "text": "Fixed width",
        "context_before": "332: \telse if (pos.isRight) // Right location\n333: \t{",
        "context_after": "335: \t\t{\n336: \t\t\trcRect.left = right - pos.width - pos.right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 339,
        "text": "From center",
        "context_before": "337: \t\t\trcRect.right = rcRect.left + pos.width;\n338: \t\t}",
        "context_after": "340: \t\t{\n341: \t\t\trcRect.left = left + (right - left)/2 + pos.leftRight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 345,
        "text": "Center location",
        "context_before": "343: \t\t}\n344: \t}",
        "context_after": "346: \t{\n347: \t\trcRect.left = left + ((right - left)/2 - pos.width/2) + pos.leftRight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 351,
        "text": "Top location",
        "context_before": "349: \t}\n350: ",
        "context_after": "352: \t{\n353: \t\trcRect.top = top + pos.top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 355,
        "text": "Fixed height",
        "context_before": "353: \t\trcRect.top = top + pos.top;\n354: ",
        "context_after": "356: \t\t\trcRect.bottom = rcRect.top + pos.height;\n357: \t\telse if (pos.isBottom) // To bottom"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 357,
        "text": "To bottom",
        "context_before": "355: \t\tif (pos.isHeight) // Fixed height\n356: \t\t\trcRect.bottom = rcRect.top + pos.height;",
        "context_after": "358: \t\t\trcRect.bottom = bottom - pos.bottom;\n359: \t\telse // To center"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 359,
        "text": "To center",
        "context_before": "357: \t\telse if (pos.isBottom) // To bottom\n358: \t\t\trcRect.bottom = bottom - pos.bottom;",
        "context_after": "360: \t\t\trcRect.bottom = top + (bottom - top)/2 + pos.topBottom;\n361: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 362,
        "text": "Bottom location",
        "context_before": "360: \t\t\trcRect.bottom = top + (bottom - top)/2 + pos.topBottom;\n361: \t}",
        "context_after": "363: \t{\n364: \t\tif (pos.isHeight) // Fixed height"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 364,
        "text": "Fixed height",
        "context_before": "362: \telse if (pos.isBottom) // Bottom location\n363: \t{",
        "context_after": "365: \t\t{\n366: \t\t\trcRect.top = bottom - pos.height - pos.bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 369,
        "text": "From center",
        "context_before": "367: \t\t\trcRect.bottom = rcRect.top + pos.height;\n368: \t\t}",
        "context_after": "370: \t\t{\n371: \t\t\trcRect.top = top + (bottom - top)/2 + pos.topBottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 375,
        "text": "Center location",
        "context_before": "373: \t\t}\n374: \t}",
        "context_after": "376: \t{\n377: \t\trcRect.top = top + ((bottom - top)/2 - pos.height/2) + pos.topBottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 400,
        "text": "Default",
        "context_before": "398: \t\t\telse if (xmlPosition.Attribute(\"LeftRight\", &pos.leftRight))\n399: \t\t\t\tpos.isLeftRight = true;",
        "context_after": "401: \t\t\t\tpos.isWidth = true; // Default\n402: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 401,
        "text": "Default",
        "context_before": "399: \t\t\t\tpos.isLeftRight = true;\n400: \t\t\telse // Default",
        "context_after": "402: \t\t}\n403: \t\telse if (xmlPosition.Attribute(\"Right\", &pos.right))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 411,
        "text": "Default",
        "context_before": "409: \t\t\telse if (xmlPosition.Attribute(\"LeftRight\", &pos.leftRight))\n410: \t\t\t\tpos.isLeftRight = true;",
        "context_after": "412: \t\t\t\tpos.isWidth = true; // Default\n413: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 412,
        "text": "Default",
        "context_before": "410: \t\t\t\tpos.isLeftRight = true;\n411: \t\t\telse // Default",
        "context_after": "413: \t\t}\n414: \t\telse if (xmlPosition.Attribute(\"LeftRight\", &pos.leftRight))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 418,
        "text": "Default",
        "context_before": "416: \t\t\tpos.isLeftRight = true;\n417: ",
        "context_after": "419: \n420: \t\t\txmlPosition.Attribute(\"Width\", &pos.width);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 422,
        "text": "Default",
        "context_before": "420: \t\t\txmlPosition.Attribute(\"Width\", &pos.width);\n421: \t\t}",
        "context_after": "423: \t\t{\n424: \t\t\tpos.isLeft = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 424,
        "text": "Default",
        "context_before": "422: \t\telse // Default\n423: \t\t{",
        "context_after": "425: \n426: \t\t\tpos.isWidth = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 426,
        "text": "Default",
        "context_before": "424: \t\t\tpos.isLeft = true; // Default\n425: ",
        "context_after": "427: \n428: \t\t\txmlPosition.Attribute(\"Width\", &pos.width);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 441,
        "text": "Default",
        "context_before": "439: \t\t\telse if (xmlPosition.Attribute(\"TopBottom\", &pos.topBottom))\n440: \t\t\t\tpos.isTopBottom = true;",
        "context_after": "442: \t\t\t\tpos.isHeight = true; // Default\n443: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 442,
        "text": "Default",
        "context_before": "440: \t\t\t\tpos.isTopBottom = true;\n441: \t\t\telse // Default",
        "context_after": "443: \t\t}\n444: \t\telse if (xmlPosition.Attribute(\"Bottom\", &pos.bottom))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 452,
        "text": "Default",
        "context_before": "450: \t\t\telse if (xmlPosition.Attribute(\"TopBottom\", &pos.topBottom))\n451: \t\t\t\tpos.isTopBottom = true;",
        "context_after": "453: \t\t\t\tpos.isHeight = true; // Default\n454: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 453,
        "text": "Default",
        "context_before": "451: \t\t\t\tpos.isTopBottom = true;\n452: \t\t\telse // Default",
        "context_after": "454: \t\t}\n455: \t\telse if (xmlPosition.Attribute(\"TopBottom\", &pos.topBottom))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 459,
        "text": "Default",
        "context_before": "457: \t\t\tpos.isTopBottom = true;\n458: ",
        "context_after": "460: \n461: \t\t\txmlPosition.Attribute(\"Height\", &pos.height);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 463,
        "text": "Default",
        "context_before": "461: \t\t\txmlPosition.Attribute(\"Height\", &pos.height);\n462: \t\t}",
        "context_after": "464: \t\t{\n465: \t\t\tpos.isTop = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 465,
        "text": "Default",
        "context_before": "463: \t\telse // Default\n464: \t\t{",
        "context_after": "466: \n467: \t\t\tpos.isHeight = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 467,
        "text": "Default",
        "context_before": "465: \t\t\tpos.isTop = true; // Default\n466: ",
        "context_after": "468: \n469: \t\t\txmlPosition.Attribute(\"Height\", &pos.height);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 556,
        "text": "if (LoadForeground(xmlNode, path, zipFile))",
        "context_before": "554: \t\tisTest = false;\n555: ",
        "context_after": "557: //\t\tisTest = false;\n558: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.cpp",
        "line": 557,
        "text": "isTest = false;",
        "context_before": "555: \n556: //\tif (LoadForeground(xmlNode, path, zipFile))",
        "context_after": "558: \n559: \treturn true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 41,
        "text": "Height",
        "context_before": "39: \t{\n40: \t\tint width;   // Width",
        "context_after": "42: \t\tint left;    // Left indent\n43: \t\tint right;   // Right indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 42,
        "text": "Left indent",
        "context_before": "40: \t\tint width;   // Width\n41: \t\tint height;  // Height",
        "context_after": "43: \t\tint right;   // Right indent\n44: \t\tint top;     // Top indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 43,
        "text": "Right indent",
        "context_before": "41: \t\tint height;  // Height\n42: \t\tint left;    // Left indent",
        "context_after": "44: \t\tint top;     // Top indent\n45: \t\tint bottom;  // Bottom indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 44,
        "text": "Top indent",
        "context_before": "42: \t\tint left;    // Left indent\n43: \t\tint right;   // Right indent",
        "context_after": "45: \t\tint bottom;  // Bottom indent\n46: \t\tint leftRight; // Center indent X"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 45,
        "text": "Bottom indent",
        "context_before": "43: \t\tint right;   // Right indent\n44: \t\tint top;     // Top indent",
        "context_after": "46: \t\tint leftRight; // Center indent X\n47: \t\tint topBottom; // Center indent Y"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 46,
        "text": "Center indent X",
        "context_before": "44: \t\tint top;     // Top indent\n45: \t\tint bottom;  // Bottom indent",
        "context_after": "47: \t\tint topBottom; // Center indent Y\n48: \t\tbool isWidth;  // Width in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 47,
        "text": "Center indent Y",
        "context_before": "45: \t\tint bottom;  // Bottom indent\n46: \t\tint leftRight; // Center indent X",
        "context_after": "48: \t\tbool isWidth;  // Width in priority\n49: \t\tbool isHeight; // Height in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 48,
        "text": "Width in priority",
        "context_before": "46: \t\tint leftRight; // Center indent X\n47: \t\tint topBottom; // Center indent Y",
        "context_after": "49: \t\tbool isHeight; // Height in priority\n50: \t\tbool isLeft;   // Left indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 49,
        "text": "Height in priority",
        "context_before": "47: \t\tint topBottom; // Center indent Y\n48: \t\tbool isWidth;  // Width in priority",
        "context_after": "50: \t\tbool isLeft;   // Left indent in priority\n51: \t\tbool isTop;    // Top indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 50,
        "text": "Left indent in priority",
        "context_before": "48: \t\tbool isWidth;  // Width in priority\n49: \t\tbool isHeight; // Height in priority",
        "context_after": "51: \t\tbool isTop;    // Top indent in priority\n52: \t\tbool isRight;  // Right indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 51,
        "text": "Top indent in priority",
        "context_before": "49: \t\tbool isHeight; // Height in priority\n50: \t\tbool isLeft;   // Left indent in priority",
        "context_after": "52: \t\tbool isRight;  // Right indent in priority\n53: \t\tbool isBottom; // Bottom indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 52,
        "text": "Right indent in priority",
        "context_before": "50: \t\tbool isLeft;   // Left indent in priority\n51: \t\tbool isTop;    // Top indent in priority",
        "context_after": "53: \t\tbool isBottom; // Bottom indent in priority\n54: \t\tbool isLeftRight; // Center indent X in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 53,
        "text": "Bottom indent in priority",
        "context_before": "51: \t\tbool isTop;    // Top indent in priority\n52: \t\tbool isRight;  // Right indent in priority",
        "context_after": "54: \t\tbool isLeftRight; // Center indent X in priority\n55: \t\tbool isTopBottom; // Center indent Y in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 54,
        "text": "Center indent X in priority",
        "context_before": "52: \t\tbool isRight;  // Right indent in priority\n53: \t\tbool isBottom; // Bottom indent in priority",
        "context_after": "55: \t\tbool isTopBottom; // Center indent Y in priority\n56: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 55,
        "text": "Center indent Y in priority",
        "context_before": "53: \t\tbool isBottom; // Bottom indent in priority\n54: \t\tbool isLeftRight; // Center indent X in priority",
        "context_after": "56: \n57: \t\tint defWidth;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 67,
        "text": "Elements array",
        "context_before": "65: \t}pos;\n66: ",
        "context_after": "68: \tstd::vector<std::unique_ptr<SkinLayoutBack>> backs; // Background array\n69: \tstd::vector<std::unique_ptr<SkinLayoutBack>> forwards; // Foreground array (not used)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 68,
        "text": "Background array",
        "context_before": "66: \n67: \tstd::vector<std::unique_ptr<SkinLayoutElement>> elements; // Elements array",
        "context_after": "69: \tstd::vector<std::unique_ptr<SkinLayoutBack>> forwards; // Foreground array (not used)\n70: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayout.h",
        "line": 69,
        "text": "Foreground array (not used)",
        "context_before": "67: \tstd::vector<std::unique_ptr<SkinLayoutElement>> elements; // Elements array\n68: \tstd::vector<std::unique_ptr<SkinLayoutBack>> backs; // Background array",
        "context_after": "70: \n71: \tinline bool IsHidden() {return isHidden;}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 21,
        "text": "#define RGB(r, g, b)(((DWORD)((BYTE)(r))) | ((DWORD)((BYTE)(g)) << 8) \\",
        "context_before": "19: #include \"SkinLayoutBack.h\"\n20: ",
        "context_after": "22: //                | ((DWORD)((BYTE)(b)) << 16))\n23: //#define GetRValue(rgba)((BYTE)(rgba))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 22,
        "text": "| ((DWORD)((BYTE)(b)) << 16))",
        "context_before": "20: \n21: //#define RGB(r, g, b)(((DWORD)((BYTE)(r))) | ((DWORD)((BYTE)(g)) << 8) \\",
        "context_after": "23: //#define GetRValue(rgba)((BYTE)(rgba))\n24: //#define GetGValue(rgba)((BYTE)(((DWORD)(rgba)) >> 8))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 23,
        "text": "#define GetRValue(rgba)((BYTE)(rgba))",
        "context_before": "21: //#define RGB(r, g, b)(((DWORD)((BYTE)(r))) | ((DWORD)((BYTE)(g)) << 8) \\\n22: //                | ((DWORD)((BYTE)(b)) << 16))",
        "context_after": "24: //#define GetGValue(rgba)((BYTE)(((DWORD)(rgba)) >> 8))\n25: //#define GetBValue(rgba)((BYTE)((DWORD)(rgba) >> 16))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 24,
        "text": "#define GetGValue(rgba)((BYTE)(((DWORD)(rgba)) >> 8))",
        "context_before": "22: //                | ((DWORD)((BYTE)(b)) << 16))\n23: //#define GetRValue(rgba)((BYTE)(rgba))",
        "context_after": "25: //#define GetBValue(rgba)((BYTE)((DWORD)(rgba) >> 16))\n26: #define RGBA(r, g, b, a)(((DWORD)((BYTE)(r))) | ((DWORD)((BYTE)(g)) << 8) \\"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 25,
        "text": "#define GetBValue(rgba)((BYTE)((DWORD)(rgba) >> 16))",
        "context_before": "23: //#define GetRValue(rgba)((BYTE)(rgba))\n24: //#define GetGValue(rgba)((BYTE)(((DWORD)(rgba)) >> 8))",
        "context_after": "26: #define RGBA(r, g, b, a)(((DWORD)((BYTE)(r))) | ((DWORD)((BYTE)(g)) << 8) \\\n27:                 | ((DWORD)((BYTE)(b)) << 16) | ((DWORD)((BYTE)(a)) << 24))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 42,
        "text": "Load type",
        "context_before": "40: bool SkinLayoutBack::LoadSkin(XmlNode& xmlNode, std::wstring& path, ZipFile* zipFile)\n41: {",
        "context_after": "43: \ttype = GetType(xmlNode);\n44: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 48,
        "text": "Load element",
        "context_before": "46: \t\treturn false;\n47: ",
        "context_after": "49: \tif (type == Type::Image)\n50: \t\tLoadImage(xmlNode, path, zipFile);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 99,
        "text": "Default",
        "context_before": "97: \t\t\telse if (xmlPosition.Attribute(\"LeftRight\", &pos.leftRight))\n98: \t\t\t\tpos.isLeftRight = true;",
        "context_after": "100: \t\t\t{\n101: \t\t\t\tpos.isWidth = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 101,
        "text": "Default",
        "context_before": "99: \t\t\telse // Default\n100: \t\t\t{",
        "context_after": "102: \t\t\t\tpos.width = width; // Default\n103: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 102,
        "text": "Default",
        "context_before": "100: \t\t\t{\n101: \t\t\t\tpos.isWidth = true; // Default",
        "context_after": "103: \t\t\t}\n104: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 113,
        "text": "Default",
        "context_before": "111: \t\t\telse if (xmlPosition.Attribute(\"LeftRight\", &pos.leftRight))\n112: \t\t\t\tpos.isLeftRight = true;",
        "context_after": "114: \t\t\t{\n115: \t\t\t\tpos.isWidth = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 115,
        "text": "Default",
        "context_before": "113: \t\t\telse // Default\n114: \t\t\t{",
        "context_after": "116: \t\t\t\tpos.width = width; // Default\n117: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 116,
        "text": "Default",
        "context_before": "114: \t\t\t{\n115: \t\t\t\tpos.isWidth = true; // Default",
        "context_after": "117: \t\t\t}\n118: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 123,
        "text": "Default",
        "context_before": "121: \t\t\tpos.isLeftRight = true;\n122: ",
        "context_after": "124: \t\t\tpos.width = width; // Default\n125: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 124,
        "text": "Default",
        "context_before": "122: \n123: \t\t\tpos.isWidth = true; // Default",
        "context_after": "125: \n126: \t\t\txmlPosition.Attribute(\"Width\", &pos.width);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 128,
        "text": "Default",
        "context_before": "126: \t\t\txmlPosition.Attribute(\"Width\", &pos.width);\n127: \t\t}",
        "context_after": "129: \t\t{\n130: \t\t\tpos.isLeft = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 130,
        "text": "Default",
        "context_before": "128: \t\telse // Default\n129: \t\t{",
        "context_after": "131: \n132: \t\t\tpos.isWidth = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 132,
        "text": "Default",
        "context_before": "130: \t\t\tpos.isLeft = true; // Default\n131: ",
        "context_after": "133: \t\t\tpos.width = width; // Default\n134: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 133,
        "text": "Default",
        "context_before": "131: \n132: \t\t\tpos.isWidth = true; // Default",
        "context_after": "134: \n135: \t\t\txmlPosition.Attribute(\"Width\", &pos.width);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 148,
        "text": "Default",
        "context_before": "146: \t\t\telse if (xmlPosition.Attribute(\"TopBottom\", &pos.topBottom))\n147: \t\t\t\tpos.isTopBottom = true;",
        "context_after": "149: \t\t\t{\n150: \t\t\t\tpos.isHeight = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 150,
        "text": "Default",
        "context_before": "148: \t\t\telse // Default\n149: \t\t\t{",
        "context_after": "151: \t\t\t\tpos.height = height; // Default\n152: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 151,
        "text": "Default",
        "context_before": "149: \t\t\t{\n150: \t\t\t\tpos.isHeight = true; // Default",
        "context_after": "152: \t\t\t}\n153: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 162,
        "text": "Default",
        "context_before": "160: \t\t\telse if (xmlPosition.Attribute(\"TopBottom\", &pos.topBottom))\n161: \t\t\t\tpos.isTopBottom = true;",
        "context_after": "163: \t\t\t{\n164: \t\t\t\tpos.isHeight = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 164,
        "text": "Default",
        "context_before": "162: \t\t\telse // Default\n163: \t\t\t{",
        "context_after": "165: \t\t\t\tpos.height = height; // Default\n166: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 165,
        "text": "Default",
        "context_before": "163: \t\t\t{\n164: \t\t\t\tpos.isHeight = true; // Default",
        "context_after": "166: \t\t\t}\n167: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 172,
        "text": "Default",
        "context_before": "170: \t\t\tpos.isTopBottom = true;\n171: ",
        "context_after": "173: \t\t\tpos.height = height; // Default\n174: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 173,
        "text": "Default",
        "context_before": "171: \n172: \t\t\tpos.isHeight = true; // Default",
        "context_after": "174: \n175: \t\t\txmlPosition.Attribute(\"Height\", &pos.height);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 177,
        "text": "Default",
        "context_before": "175: \t\t\txmlPosition.Attribute(\"Height\", &pos.height);\n176: \t\t}",
        "context_after": "178: \t\t{\n179: \t\t\tpos.isTop = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 179,
        "text": "Default",
        "context_before": "177: \t\telse // Default\n178: \t\t{",
        "context_after": "180: \n181: \t\t\tpos.isHeight = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 181,
        "text": "Default",
        "context_before": "179: \t\t\tpos.isTop = true; // Default\n180: ",
        "context_after": "182: \t\t\tpos.height = height; // Default\n183: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 182,
        "text": "Default",
        "context_before": "180: \n181: \t\t\tpos.isHeight = true; // Default",
        "context_after": "183: \n184: \t\t\txmlPosition.Attribute(\"Height\", &pos.height);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 220,
        "text": "Default (white opaque)",
        "context_before": "218: \t\tconst char* strColor = xmlLine.AttributeRaw(\"Color\");\n219: ",
        "context_after": "221: \n222: \t\t// LOBYTE(LOWORD(c)) - Alpha"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 222,
        "text": "LOBYTE(LOWORD(c)) - Alpha",
        "context_before": "220: \t\telm.color = 0xFFFFFFFF; // Default (white opaque)\n221: ",
        "context_after": "223: \t\t// HIBYTE(HIWORD(c)) - Red\n224: \t\t// LOBYTE(HIWORD(c)) - Green"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 223,
        "text": "HIBYTE(HIWORD(c)) - Red",
        "context_before": "221: \n222: \t\t// LOBYTE(LOWORD(c)) - Alpha",
        "context_after": "224: \t\t// LOBYTE(HIWORD(c)) - Green\n225: \t\t// HIBYTE(LOWORD(c)) - Blue"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 224,
        "text": "LOBYTE(HIWORD(c)) - Green",
        "context_before": "222: \t\t// LOBYTE(LOWORD(c)) - Alpha\n223: \t\t// HIBYTE(HIWORD(c)) - Red",
        "context_after": "225: \t\t// HIBYTE(LOWORD(c)) - Blue\n226: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 225,
        "text": "HIBYTE(LOWORD(c)) - Blue",
        "context_before": "223: \t\t// HIBYTE(HIWORD(c)) - Red\n224: \t\t// LOBYTE(HIWORD(c)) - Green",
        "context_after": "226: \n227: \t\tif (strColor)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 231,
        "text": "Color in RGB format (convert to ABGR)",
        "context_before": "229: \t\t\tDWORD c = strtoul(strColor, 0, 16);\n230: ",
        "context_after": "232: \t\t\t\telm.color = MAKELONG(MAKEWORD(LOBYTE(HIWORD(c)), HIBYTE(LOWORD(c))), MAKEWORD(LOBYTE(LOWORD(c)), 0xFF));\n233: \t\t\telse if (strlen(strColor) == 8) // Color in RGBA format (convert to ABGR)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 233,
        "text": "Color in RGBA format (convert to ABGR)",
        "context_before": "231: \t\t\tif (strlen(strColor) == 6) // Color in RGB format (convert to ABGR)\n232: \t\t\t\telm.color = MAKELONG(MAKEWORD(LOBYTE(HIWORD(c)), HIBYTE(LOWORD(c))), MAKEWORD(LOBYTE(LOWORD(c)), 0xFF));",
        "context_after": "234: \t\t\t\telm.color = MAKELONG(MAKEWORD(HIBYTE(HIWORD(c)), LOBYTE(HIWORD(c))), MAKEWORD(HIBYTE(LOWORD(c)), LOBYTE(LOWORD(c))));\n235: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 251,
        "text": "Default (white opaque)",
        "context_before": "249: \t\tconst char* strColor = xmlRect.AttributeRaw(\"Color\");\n250: ",
        "context_after": "252: \n253: \t\tif (strColor)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 257,
        "text": "Color in RGB format (convert to ABGR)",
        "context_before": "255: \t\t\tDWORD c = strtoul(strColor, 0, 16);\n256: ",
        "context_after": "258: \t\t\t\telm.color = RGBA(GetBValue(c), GetGValue(c), GetRValue(c), 0xFF);\n259: \t\t\telse if (strlen(strColor) == 8) // Color in RGBA format (convert to ABGR)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 259,
        "text": "Color in RGBA format (convert to ABGR)",
        "context_before": "257: \t\t\tif (strlen(strColor) == 6) // Color in RGB format (convert to ABGR)\n258: \t\t\t\telm.color = RGBA(GetBValue(c), GetGValue(c), GetRValue(c), 0xFF);",
        "context_after": "260: \t\t\t\telm.color = RGBA(GetAValue(c), GetBValue(c), GetGValue(c), GetRValue(c));\n261: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 276,
        "text": "Left location",
        "context_before": "274: \tCRect rcDraw;\n275: ",
        "context_after": "277: \t{\n278: \t\trcDraw.left = rcRect.left + pos.left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 280,
        "text": "Fixed width",
        "context_before": "278: \t\trcDraw.left = rcRect.left + pos.left;\n279: ",
        "context_after": "281: \t\t\trcDraw.right = rcDraw.left + pos.width;\n282: \t\telse if (pos.isRight) // To right"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 282,
        "text": "To right",
        "context_before": "280: \t\tif (pos.isWidth) // Fixed width\n281: \t\t\trcDraw.right = rcDraw.left + pos.width;",
        "context_after": "283: \t\t\trcDraw.right = rcRect.right - pos.right;\n284: \t\telse // To center"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 284,
        "text": "To center",
        "context_before": "282: \t\telse if (pos.isRight) // To right\n283: \t\t\trcDraw.right = rcRect.right - pos.right;",
        "context_after": "285: \t\t\trcDraw.right = rcRect.left + rcRect.Width()/2 + pos.leftRight;\n286: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 287,
        "text": "Right location",
        "context_before": "285: \t\t\trcDraw.right = rcRect.left + rcRect.Width()/2 + pos.leftRight;\n286: \t}",
        "context_after": "288: \t{\n289: \t\tif (pos.isWidth) // Fixed width"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 289,
        "text": "Fixed width",
        "context_before": "287: \telse if (pos.isRight) // Right location\n288: \t{",
        "context_after": "290: \t\t{\n291: \t\t\trcDraw.left = rcRect.right - pos.width - pos.right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 294,
        "text": "From center",
        "context_before": "292: \t\t\trcDraw.right = rcDraw.left + pos.width;\n293: \t\t}",
        "context_after": "295: \t\t{\n296: \t\t\trcDraw.left = rcRect.left + rcRect.Width()/2 + pos.leftRight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 300,
        "text": "Center location",
        "context_before": "298: \t\t}\n299: \t}",
        "context_after": "301: \t{\n302: \t\trcDraw.left = rcRect.left + (rcRect.Width()/2 - pos.width/2) + pos.leftRight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 306,
        "text": "Top location",
        "context_before": "304: \t}\n305: ",
        "context_after": "307: \t{\n308: \t\trcDraw.top = rcRect.top + pos.top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 310,
        "text": "Fixed height",
        "context_before": "308: \t\trcDraw.top = rcRect.top + pos.top;\n309: ",
        "context_after": "311: \t\t\trcDraw.bottom = rcDraw.top + pos.height;\n312: \t\telse if (pos.isBottom) // To bottom"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 312,
        "text": "To bottom",
        "context_before": "310: \t\tif (pos.isHeight) // Fixed height\n311: \t\t\trcDraw.bottom = rcDraw.top + pos.height;",
        "context_after": "313: \t\t\trcDraw.bottom = rcRect.bottom - pos.bottom;\n314: \t\telse // To center"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 314,
        "text": "To center",
        "context_before": "312: \t\telse if (pos.isBottom) // To bottom\n313: \t\t\trcDraw.bottom = rcRect.bottom - pos.bottom;",
        "context_after": "315: \t\t\trcDraw.bottom = rcRect.top + rcRect.Height()/2 + pos.topBottom;\n316: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 317,
        "text": "Bottom location",
        "context_before": "315: \t\t\trcDraw.bottom = rcRect.top + rcRect.Height()/2 + pos.topBottom;\n316: \t}",
        "context_after": "318: \t{\n319: \t\tif (pos.isHeight) // Fixed height"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 319,
        "text": "Fixed height",
        "context_before": "317: \telse if (pos.isBottom) // Bottom location\n318: \t{",
        "context_after": "320: \t\t{\n321: \t\t\trcDraw.top = rcRect.bottom - pos.height - pos.bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 324,
        "text": "From center",
        "context_before": "322: \t\t\trcDraw.bottom = rcDraw.top + pos.height;\n323: \t\t}",
        "context_after": "325: \t\t{\n326: \t\t\trcDraw.top = rcRect.top + rcRect.Height()/2 + pos.topBottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 330,
        "text": "Center location",
        "context_before": "328: \t\t}\n329: \t}",
        "context_after": "331: \t{\n332: \t\trcDraw.top = rcRect.top + (rcRect.Height()/2 - pos.height/2) + pos.topBottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 346,
        "text": "Pen pPen(sElm.iColor, 1);",
        "context_before": "344: \telse if (type == Type::Line)\n345: \t{",
        "context_after": "347: \t\t//g->DrawRectangle(&pPen, rDraw.left, rDraw.top, rDraw.Width()-1, rDraw.Height()-1);\n348: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 347,
        "text": "g->DrawRectangle(&pPen, rDraw.left, rDraw.top, rDraw.Width()-1, rDraw.Height()-1);",
        "context_before": "345: \t{\n346: \t\t//Pen pPen(sElm.iColor, 1);",
        "context_after": "348: \n349: \t\tExImage::DrawAlphaRect(dc, rcDraw, elm.color);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 353,
        "text": "Use HatchBrush instead of SolidBrush because there is a bug in GDI+ when using layered window with opaque fill",
        "context_before": "351: \telse if (type == Type::Fill)\n352: \t{",
        "context_after": "354: \t\t//HatchBrush bBrush2(HatchStyleCross, sElm.iColor, sElm.iColor);\n355: \t\t//g->FillRectangle(&bBrush2, rDraw.left, rDraw.top, rDraw.Width(), rDraw.Height());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 354,
        "text": "HatchBrush bBrush2(HatchStyleCross, sElm.iColor, sElm.iColor);",
        "context_before": "352: \t{\n353: \t\t// Use HatchBrush instead of SolidBrush because there is a bug in GDI+ when using layered window with opaque fill",
        "context_after": "355: \t\t//g->FillRectangle(&bBrush2, rDraw.left, rDraw.top, rDraw.Width(), rDraw.Height());\n356: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.cpp",
        "line": 355,
        "text": "g->FillRectangle(&bBrush2, rDraw.left, rDraw.top, rDraw.Width(), rDraw.Height());",
        "context_before": "353: \t\t// Use HatchBrush instead of SolidBrush because there is a bug in GDI+ when using layered window with opaque fill\n354: \t\t//HatchBrush bBrush2(HatchStyleCross, sElm.iColor, sElm.iColor);",
        "context_after": "356: \n357: \t\tExImage::DrawAlphaFill(dc, rcDraw, elm.color);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 32,
        "text": "Image type",
        "context_before": "30: \tSkinLayoutBack& operator=(const SkinLayoutBack&) = delete;\n31: ",
        "context_after": "33: \t{\n34: \t\tNone  = -404,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 37,
        "text": "Outline rectangle",
        "context_before": "35: \n36: \t\tImage = 0,  // Image",
        "context_after": "38: \t\tFill  = 2   // Filled rectangle\n39: \t};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 38,
        "text": "Filled rectangle",
        "context_before": "36: \t\tImage = 0,  // Image\n37: \t\tLine  = 1,  // Outline rectangle",
        "context_after": "39: \t};\n40: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 41,
        "text": "Default size",
        "context_before": "39: \t};\n40: ",
        "context_after": "42: \t{\n43: \t\tstatic const int Width  = 20;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 50,
        "text": "Height",
        "context_before": "48: \t{\n49: \t\tint width;   // Width",
        "context_after": "51: \t\tint left;    // Left indent\n52: \t\tint right;   // Right indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 51,
        "text": "Left indent",
        "context_before": "49: \t\tint width;   // Width\n50: \t\tint height;  // Height",
        "context_after": "52: \t\tint right;   // Right indent\n53: \t\tint top;     // Top indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 52,
        "text": "Right indent",
        "context_before": "50: \t\tint height;  // Height\n51: \t\tint left;    // Left indent",
        "context_after": "53: \t\tint top;     // Top indent\n54: \t\tint bottom;  // Bottom indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 53,
        "text": "Top indent",
        "context_before": "51: \t\tint left;    // Left indent\n52: \t\tint right;   // Right indent",
        "context_after": "54: \t\tint bottom;  // Bottom indent\n55: \t\tint leftRight; // Center indent X"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 54,
        "text": "Bottom indent",
        "context_before": "52: \t\tint right;   // Right indent\n53: \t\tint top;     // Top indent",
        "context_after": "55: \t\tint leftRight; // Center indent X\n56: \t\tint topBottom; // Center indent Y"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 55,
        "text": "Center indent X",
        "context_before": "53: \t\tint top;     // Top indent\n54: \t\tint bottom;  // Bottom indent",
        "context_after": "56: \t\tint topBottom; // Center indent Y\n57: \t\tbool isWidth;  // Width in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 56,
        "text": "Center indent Y",
        "context_before": "54: \t\tint bottom;  // Bottom indent\n55: \t\tint leftRight; // Center indent X",
        "context_after": "57: \t\tbool isWidth;  // Width in priority\n58: \t\tbool isHeight; // Height in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 57,
        "text": "Width in priority",
        "context_before": "55: \t\tint leftRight; // Center indent X\n56: \t\tint topBottom; // Center indent Y",
        "context_after": "58: \t\tbool isHeight; // Height in priority\n59: \t\tbool isLeft;   // Left indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 58,
        "text": "Height in priority",
        "context_before": "56: \t\tint topBottom; // Center indent Y\n57: \t\tbool isWidth;  // Width in priority",
        "context_after": "59: \t\tbool isLeft;   // Left indent in priority\n60: \t\tbool isTop;    // Top indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 59,
        "text": "Left indent in priority",
        "context_before": "57: \t\tbool isWidth;  // Width in priority\n58: \t\tbool isHeight; // Height in priority",
        "context_after": "60: \t\tbool isTop;    // Top indent in priority\n61: \t\tbool isRight;  // Right indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 60,
        "text": "Top indent in priority",
        "context_before": "58: \t\tbool isHeight; // Height in priority\n59: \t\tbool isLeft;   // Left indent in priority",
        "context_after": "61: \t\tbool isRight;  // Right indent in priority\n62: \t\tbool isBottom; // Bottom indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 61,
        "text": "Right indent in priority",
        "context_before": "59: \t\tbool isLeft;   // Left indent in priority\n60: \t\tbool isTop;    // Top indent in priority",
        "context_after": "62: \t\tbool isBottom; // Bottom indent in priority\n63: \t\tbool isLeftRight; // Center indent X in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 62,
        "text": "Bottom indent in priority",
        "context_before": "60: \t\tbool isTop;    // Top indent in priority\n61: \t\tbool isRight;  // Right indent in priority",
        "context_after": "63: \t\tbool isLeftRight; // Center indent X in priority\n64: \t\tbool isTopBottom; // Center indent Y in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 63,
        "text": "Center indent X in priority",
        "context_before": "61: \t\tbool isRight;  // Right indent in priority\n62: \t\tbool isBottom; // Bottom indent in priority",
        "context_after": "64: \t\tbool isTopBottom; // Center indent Y in priority\n65: \t}pos;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutBack.h",
        "line": 64,
        "text": "Center indent Y in priority",
        "context_before": "62: \t\tbool isBottom; // Bottom indent in priority\n63: \t\tbool isLeftRight; // Center indent X in priority",
        "context_after": "65: \t}pos;\n66: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 84,
        "text": "Default",
        "context_before": "82: \t\t\telse if (xmlPosition.Attribute(\"LeftRight\", &pos.leftRight))\n83: \t\t\t\tpos.isLeftRight = true;",
        "context_after": "85: \t\t\t{\n86: \t\t\t\tpos.isWidth = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 86,
        "text": "Default",
        "context_before": "84: \t\t\telse // Default\n85: \t\t\t{",
        "context_after": "87: \t\t\t\tpos.width = width; // Default\n88: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 87,
        "text": "Default",
        "context_before": "85: \t\t\t{\n86: \t\t\t\tpos.isWidth = true; // Default",
        "context_after": "88: \t\t\t}\n89: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 98,
        "text": "Default",
        "context_before": "96: \t\t\telse if (xmlPosition.Attribute(\"LeftRight\", &pos.leftRight))\n97: \t\t\t\tpos.isLeftRight = true;",
        "context_after": "99: \t\t\t{\n100: \t\t\t\tpos.isWidth = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 100,
        "text": "Default",
        "context_before": "98: \t\t\telse // Default\n99: \t\t\t{",
        "context_after": "101: \t\t\t\tpos.width = width; // Default\n102: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 101,
        "text": "Default",
        "context_before": "99: \t\t\t{\n100: \t\t\t\tpos.isWidth = true; // Default",
        "context_after": "102: \t\t\t}\n103: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 108,
        "text": "Default",
        "context_before": "106: \t\t\tpos.isLeftRight = true;\n107: ",
        "context_after": "109: \t\t\tpos.width = width; // Default\n110: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 109,
        "text": "Default",
        "context_before": "107: \n108: \t\t\tpos.isWidth = true; // Default",
        "context_after": "110: \n111: \t\t\txmlPosition.Attribute(\"Width\", &pos.width);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 113,
        "text": "Default",
        "context_before": "111: \t\t\txmlPosition.Attribute(\"Width\", &pos.width);\n112: \t\t}",
        "context_after": "114: \t\t{\n115: \t\t\tpos.isLeft = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 115,
        "text": "Default",
        "context_before": "113: \t\telse // Default\n114: \t\t{",
        "context_after": "116: \n117: \t\t\tpos.isWidth = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 117,
        "text": "Default",
        "context_before": "115: \t\t\tpos.isLeft = true; // Default\n116: ",
        "context_after": "118: \t\t\tpos.width = width; // Default\n119: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 118,
        "text": "Default",
        "context_before": "116: \n117: \t\t\tpos.isWidth = true; // Default",
        "context_after": "119: \n120: \t\t\txmlPosition.Attribute(\"Width\", &pos.width);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 133,
        "text": "Default",
        "context_before": "131: \t\t\telse if (xmlPosition.Attribute(\"TopBottom\", &pos.topBottom))\n132: \t\t\t\tpos.isTopBottom = true;",
        "context_after": "134: \t\t\t{\n135: \t\t\t\tpos.isHeight = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 135,
        "text": "Default",
        "context_before": "133: \t\t\telse // Default\n134: \t\t\t{",
        "context_after": "136: \t\t\t\tpos.height = height; // Default\n137: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 136,
        "text": "Default",
        "context_before": "134: \t\t\t{\n135: \t\t\t\tpos.isHeight = true; // Default",
        "context_after": "137: \t\t\t}\n138: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 147,
        "text": "Default",
        "context_before": "145: \t\t\telse if (xmlPosition.Attribute(\"TopBottom\", &pos.topBottom))\n146: \t\t\t\tpos.isTopBottom = true;",
        "context_after": "148: \t\t\t{\n149: \t\t\t\tpos.isHeight = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 149,
        "text": "Default",
        "context_before": "147: \t\t\telse // Default\n148: \t\t\t{",
        "context_after": "150: \t\t\t\tpos.height = height; // Default\n151: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 150,
        "text": "Default",
        "context_before": "148: \t\t\t{\n149: \t\t\t\tpos.isHeight = true; // Default",
        "context_after": "151: \t\t\t}\n152: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 157,
        "text": "Default",
        "context_before": "155: \t\t\tpos.isTopBottom = true;\n156: ",
        "context_after": "158: \t\t\tpos.height = height; // Default\n159: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 158,
        "text": "Default",
        "context_before": "156: \n157: \t\t\tpos.isHeight = true; // Default",
        "context_after": "159: \n160: \t\t\txmlPosition.Attribute(\"Height\", &pos.height);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 162,
        "text": "Default",
        "context_before": "160: \t\t\txmlPosition.Attribute(\"Height\", &pos.height);\n161: \t\t}",
        "context_after": "163: \t\t{\n164: \t\t\tpos.isTop = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 164,
        "text": "Default",
        "context_before": "162: \t\telse // Default\n163: \t\t{",
        "context_after": "165: \n166: \t\t\tpos.isHeight = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 166,
        "text": "Default",
        "context_before": "164: \t\t\tpos.isTop = true; // Default\n165: ",
        "context_after": "167: \t\t\tpos.height = height; // Default\n168: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 167,
        "text": "Default",
        "context_before": "165: \n166: \t\t\tpos.isHeight = true; // Default",
        "context_after": "168: \n169: \t\t\txmlPosition.Attribute(\"Height\", &pos.height);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 290,
        "text": "else if (strcmp(xmlNode.Name(), \"Switch\") == 0) { element.reset(new SkinSwitch()); element->type = SkinElement::TYPE_SWITCH; }",
        "context_before": "288: \t\telement->type = SkinElement::Type::Button;\n289: \t}",
        "context_after": "296: \t{\n297: \t\telement.reset(new SkinButton());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 405,
        "text": "Left location",
        "context_before": "403: \tCRect rcDraw;\n404: ",
        "context_after": "406: \t{\n407: \t\trcDraw.left = rcRect.left + pos.left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 409,
        "text": "Fixed width",
        "context_before": "407: \t\trcDraw.left = rcRect.left + pos.left;\n408: ",
        "context_after": "410: \t\t\trcDraw.right = rcDraw.left + pos.width;\n411: \t\telse if (pos.isRight) // To right"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 411,
        "text": "To right",
        "context_before": "409: \t\tif (pos.isWidth) // Fixed width\n410: \t\t\trcDraw.right = rcDraw.left + pos.width;",
        "context_after": "412: \t\t\trcDraw.right = rcRect.right - pos.right;\n413: \t\telse // To center"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 413,
        "text": "To center",
        "context_before": "411: \t\telse if (pos.isRight) // To right\n412: \t\t\trcDraw.right = rcRect.right - pos.right;",
        "context_after": "414: \t\t\trcDraw.right = rcRect.left + rcRect.Width()/2 + pos.leftRight;\n415: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 416,
        "text": "Right location",
        "context_before": "414: \t\t\trcDraw.right = rcRect.left + rcRect.Width()/2 + pos.leftRight;\n415: \t}",
        "context_after": "417: \t{\n418: \t\tif (pos.isWidth) // Fixed width"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 418,
        "text": "Fixed width",
        "context_before": "416: \telse if (pos.isRight) // Right location\n417: \t{",
        "context_after": "419: \t\t{\n420: \t\t\trcDraw.left = rcRect.right - pos.width - pos.right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 423,
        "text": "From center",
        "context_before": "421: \t\t\trcDraw.right = rcDraw.left + pos.width;\n422: \t\t}",
        "context_after": "424: \t\t{\n425: \t\t\trcDraw.left = rcRect.left + rcRect.Width()/2 + pos.leftRight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 429,
        "text": "Center location",
        "context_before": "427: \t\t}\n428: \t}",
        "context_after": "430: \t{\n431: \t\trcDraw.left = rcRect.left + (rcRect.Width()/2 - pos.width/2) + pos.leftRight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 435,
        "text": "Top location",
        "context_before": "433: \t}\n434: ",
        "context_after": "436: \t{\n437: \t\trcDraw.top = rcRect.top + pos.top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 439,
        "text": "Fixed height",
        "context_before": "437: \t\trcDraw.top = rcRect.top + pos.top;\n438: ",
        "context_after": "440: \t\t\trcDraw.bottom = rcDraw.top + pos.height;\n441: \t\telse if (pos.isBottom) // To bottom"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 441,
        "text": "To bottom",
        "context_before": "439: \t\tif (pos.isHeight) // Fixed height\n440: \t\t\trcDraw.bottom = rcDraw.top + pos.height;",
        "context_after": "442: \t\t\trcDraw.bottom = rcRect.bottom - pos.bottom;\n443: \t\telse // To center"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 443,
        "text": "To center",
        "context_before": "441: \t\telse if (pos.isBottom) // To bottom\n442: \t\t\trcDraw.bottom = rcRect.bottom - pos.bottom;",
        "context_after": "444: \t\t\trcDraw.bottom = rcRect.top + rcRect.Height()/2 + pos.topBottom;\n445: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 446,
        "text": "Bottom location",
        "context_before": "444: \t\t\trcDraw.bottom = rcRect.top + rcRect.Height()/2 + pos.topBottom;\n445: \t}",
        "context_after": "447: \t{\n448: \t\tif (pos.isHeight) // Fixed height"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 448,
        "text": "Fixed height",
        "context_before": "446: \telse if (pos.isBottom) // Bottom location\n447: \t{",
        "context_after": "449: \t\t{\n450: \t\t\trcDraw.top = rcRect.bottom - pos.height - pos.bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 453,
        "text": "From center",
        "context_before": "451: \t\t\trcDraw.bottom = rcDraw.top + pos.height;\n452: \t\t}",
        "context_after": "454: \t\t{\n455: \t\t\trcDraw.top = rcRect.top + rcRect.Height()/2 + pos.topBottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.cpp",
        "line": 459,
        "text": "Center location",
        "context_before": "457: \t\t}\n458: \t}",
        "context_after": "460: \t{\n461: \t\trcDraw.top = rcRect.top + (rcRect.Height()/2 - pos.height/2) + pos.topBottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 29,
        "text": "#include \"SkinSearch.h\"",
        "context_before": "27: #include \"SkinRating.h\"\n28: #include \"SkinText.h\"",
        "context_after": "30: #include \"SkinSplitter.h\"\n31: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 44,
        "text": "Height",
        "context_before": "42: \t{\n43: \t\tint width;   // Width",
        "context_after": "45: \t\tint left;    // Left indent\n46: \t\tint right;   // Right indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 45,
        "text": "Left indent",
        "context_before": "43: \t\tint width;   // Width\n44: \t\tint height;  // Height",
        "context_after": "46: \t\tint right;   // Right indent\n47: \t\tint top;     // Top indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 46,
        "text": "Right indent",
        "context_before": "44: \t\tint height;  // Height\n45: \t\tint left;    // Left indent",
        "context_after": "47: \t\tint top;     // Top indent\n48: \t\tint bottom;  // Bottom indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 47,
        "text": "Top indent",
        "context_before": "45: \t\tint left;    // Left indent\n46: \t\tint right;   // Right indent",
        "context_after": "48: \t\tint bottom;  // Bottom indent\n49: \t\tint leftRight; // Center indent X"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 48,
        "text": "Bottom indent",
        "context_before": "46: \t\tint right;   // Right indent\n47: \t\tint top;     // Top indent",
        "context_after": "49: \t\tint leftRight; // Center indent X\n50: \t\tint topBottom; // Center indent Y"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 49,
        "text": "Center indent X",
        "context_before": "47: \t\tint top;     // Top indent\n48: \t\tint bottom;  // Bottom indent",
        "context_after": "50: \t\tint topBottom; // Center indent Y\n51: \t\tbool isLeft;   // Left indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 50,
        "text": "Center indent Y",
        "context_before": "48: \t\tint bottom;  // Bottom indent\n49: \t\tint leftRight; // Center indent X",
        "context_after": "51: \t\tbool isLeft;   // Left indent in priority\n52: \t\tbool isTop;    // Top indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 51,
        "text": "Left indent in priority",
        "context_before": "49: \t\tint leftRight; // Center indent X\n50: \t\tint topBottom; // Center indent Y",
        "context_after": "52: \t\tbool isTop;    // Top indent in priority\n53: \t\tbool isRight;  // Right indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 52,
        "text": "Top indent in priority",
        "context_before": "50: \t\tint topBottom; // Center indent Y\n51: \t\tbool isLeft;   // Left indent in priority",
        "context_after": "53: \t\tbool isRight;  // Right indent in priority\n54: \t\tbool isBottom; // Bottom indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 53,
        "text": "Right indent in priority",
        "context_before": "51: \t\tbool isLeft;   // Left indent in priority\n52: \t\tbool isTop;    // Top indent in priority",
        "context_after": "54: \t\tbool isBottom; // Bottom indent in priority\n55: \t\tbool isWidth;  // Width in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 54,
        "text": "Bottom indent in priority",
        "context_before": "52: \t\tbool isTop;    // Top indent in priority\n53: \t\tbool isRight;  // Right indent in priority",
        "context_after": "55: \t\tbool isWidth;  // Width in priority\n56: \t\tbool isHeight; // Height in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 55,
        "text": "Width in priority",
        "context_before": "53: \t\tbool isRight;  // Right indent in priority\n54: \t\tbool isBottom; // Bottom indent in priority",
        "context_after": "56: \t\tbool isHeight; // Height in priority\n57: \t\tbool isLeftRight; // Center indent X in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 56,
        "text": "Height in priority",
        "context_before": "54: \t\tbool isBottom; // Bottom indent in priority\n55: \t\tbool isWidth;  // Width in priority",
        "context_after": "57: \t\tbool isLeftRight; // Center indent X in priority\n58: \t\tbool isTopBottom; // Center indent Y in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 57,
        "text": "Center indent X in priority",
        "context_before": "55: \t\tbool isWidth;  // Width in priority\n56: \t\tbool isHeight; // Height in priority",
        "context_after": "58: \t\tbool isTopBottom; // Center indent Y in priority\n59: \t}pos;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLayoutElement.h",
        "line": 58,
        "text": "Center indent Y in priority",
        "context_before": "56: \t\tbool isHeight; // Height in priority\n57: \t\tbool isLeftRight; // Center indent X in priority",
        "context_after": "59: \t}pos;\n60: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 26,
        "text": "randomEngine.seed(std::random_device{}());",
        "context_before": "24: \n25: \trandomEngine.seed((unsigned)std::chrono::system_clock::now().time_since_epoch().count());",
        "context_after": "27: }\n28: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 88,
        "text": "WS_EX_COMPOSITED",
        "context_before": "86: bool SkinList::NewWindow(HWND parent)\n87: {",
        "context_after": "89: \t{\n90: \t\tlistThread.SetParentWnd(thisWnd);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 103,
        "text": "SetRedraw(TRUE);",
        "context_before": "101: \tif (isControlRedraw)\n102: \t{",
        "context_after": "104: \t\tResetScrollBar();\n105: \t\t::InvalidateRect(thisWnd, NULL, FALSE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 108,
        "text": "SetRedraw(FALSE);",
        "context_before": "106: \t}\n107: //\telse",
        "context_after": "109: }\n110: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 123,
        "text": "L\"%.d\";",
        "context_before": "121: \t{\n122: \t\tstd::wstring format;",
        "context_after": "124: \t\telse if (tempNode->ccount < 100)  format = L\"%02d\"; // L\"%.2d\";\n125: \t\t//else if (tempNode->ccount < 1000) format = L\"%03d\"; // L\"%.3d\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 124,
        "text": "L\"%.2d\";",
        "context_before": "122: \t\tstd::wstring format;\n123: \t\tif      (tempNode->ccount < 10)   format = L\"%d\"; // L\"%.d\";",
        "context_after": "125: \t\t//else if (tempNode->ccount < 1000) format = L\"%03d\"; // L\"%.3d\";\n126: \t\telse                              format = L\"%03d\"; // L\"%.3d\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 125,
        "text": "else if (tempNode->ccount < 1000) format = L\"%03d\"; // L\"%.3d\";",
        "context_before": "123: \t\tif      (tempNode->ccount < 10)   format = L\"%d\"; // L\"%.d\";\n124: \t\telse if (tempNode->ccount < 100)  format = L\"%02d\"; // L\"%.2d\";",
        "context_after": "126: \t\telse                              format = L\"%03d\"; // L\"%.3d\";\n127: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 126,
        "text": "L\"%.3d\";",
        "context_before": "124: \t\telse if (tempNode->ccount < 100)  format = L\"%02d\"; // L\"%.2d\";\n125: \t\t//else if (tempNode->ccount < 1000) format = L\"%03d\"; // L\"%.3d\";",
        "context_after": "127: \n128: \t\tint i = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 153,
        "text": "File name of the first track (use it to get a cover from the track folder)",
        "context_before": "151: \tnewNode->nodeType = SkinListNode::NodeType::Head;\n152: ",
        "context_after": "154: \tnewNode->file = file;\n155: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 212,
        "text": "if (!isFocus)",
        "context_before": "210: \t\tselectedNodes.emplace_back(newNode);\n211: ",
        "context_after": "213: \t\t//\tnewNode->stateSelect = SkinListNode::STATE_SELECT;\n214: \t\t//else"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 213,
        "text": "newNode->stateSelect = SkinListNode::STATE_SELECT;",
        "context_before": "211: \n212: \t\t//if (!isFocus)",
        "context_after": "214: \t\t//else\n215: \t\t//{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 216,
        "text": "if (focusNode)",
        "context_before": "214: \t\t//else\n215: \t\t//{",
        "context_after": "217: \t\t//\t\tfocusNode->stateSelect = SkinListNode::STATE_SELECT;\n218: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 217,
        "text": "focusNode->stateSelect = SkinListNode::STATE_SELECT;",
        "context_before": "215: \t\t//{\n216: \t\t//\tif (focusNode)",
        "context_after": "218: \n219: \t\t//\tnewNode->stateSelect = SkinListNode::STATE_FOCUS;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 219,
        "text": "newNode->stateSelect = SkinListNode::STATE_FOCUS;",
        "context_before": "217: \t\t//\t\tfocusNode->stateSelect = SkinListNode::STATE_SELECT;\n218: ",
        "context_after": "220: \t\t//\tfocusNode = newNode;\n221: \t\t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 220,
        "text": "focusNode = newNode;",
        "context_before": "218: \n219: \t\t//\tnewNode->stateSelect = SkinListNode::STATE_FOCUS;",
        "context_after": "221: \t\t//}\n222: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 309,
        "text": "Beginning of critical functions to remove nodes (check for ending below).",
        "context_before": "307: }\n308: ",
        "context_after": "310: // They are critical because this class designed wrong from the start,\n311: // it uses raw pointers to nodes everywhere and there are so many pointer owners that it hard to control all this mess,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 310,
        "text": "They are critical because this class designed wrong from the start,",
        "context_before": "308: \n309: // Beginning of critical functions to remove nodes (check for ending below).",
        "context_after": "311: // it uses raw pointers to nodes everywhere and there are so many pointer owners that it hard to control all this mess,\n312: // so we need to carefully control removing of nodes in Delete* functions below (I call them \"dead\" nodes there),"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 313,
        "text": "or otherwise it cause random crashes with random errors like heap corruption, recursive destructor calls etc.",
        "context_before": "311: // it uses raw pointers to nodes everywhere and there are so many pointer owners that it hard to control all this mess,\n312: // so we need to carefully control removing of nodes in Delete* functions below (I call them \"dead\" nodes there),",
        "context_after": "314: // Need to redesign this class!\n315: // 5.04.2011 After Now Playing view added it became even worse, it just became too overcomlicated,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 314,
        "text": "Need to redesign this class!",
        "context_before": "312: // so we need to carefully control removing of nodes in Delete* functions below (I call them \"dead\" nodes there),\n313: // or otherwise it cause random crashes with random errors like heap corruption, recursive destructor calls etc.",
        "context_after": "315: // 5.04.2011 After Now Playing view added it became even worse, it just became too overcomlicated,\n316: // there is no point to redesign anymore, I'll try to refactor some of the code later."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 315,
        "text": "5.04.2011 After Now Playing view added it became even worse, it just became too overcomlicated,",
        "context_before": "313: // or otherwise it cause random crashes with random errors like heap corruption, recursive destructor calls etc.\n314: // Need to redesign this class!",
        "context_after": "316: // there is no point to redesign anymore, I'll try to refactor some of the code later.\n317: // 10.03.2012 There are 2 typedefs now: ListNodeUnsafe and ListNodeSafe for raw and safe pointers,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 317,
        "text": "10.03.2012 There are 2 typedefs now: ListNodeUnsafe and ListNodeSafe for raw and safe pointers,",
        "context_before": "315: // 5.04.2011 After Now Playing view added it became even worse, it just became too overcomlicated,\n316: // there is no point to redesign anymore, I'll try to refactor some of the code later.",
        "context_after": "318: // safe pointers uses smart pointers, it helps to control all this mess (also check a comment in RemoveChild function).\n319: // I've rewritten the code and use ListNodeUnsafe for pointers used at the same place where received"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 319,
        "text": "I've rewritten the code and use ListNodeUnsafe for pointers used at the same place where received",
        "context_before": "317: // 10.03.2012 There are 2 typedefs now: ListNodeUnsafe and ListNodeSafe for raw and safe pointers,\n318: // safe pointers uses smart pointers, it helps to control all this mess (also check a comment in RemoveChild function).",
        "context_after": "320: // and ListNodeSafe for pointers used at different places of the code (it was easier this way).\n321: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 320,
        "text": "and ListNodeSafe for pointers used at different places of the code (it was easier this way).",
        "context_before": "318: // safe pointers uses smart pointers, it helps to control all this mess (also check a comment in RemoveChild function).\n319: // I've rewritten the code and use ListNodeUnsafe for pointers used at the same place where received",
        "context_after": "321: \n322: void SkinList::DeleteAllNode()"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 335,
        "text": "Reinit cover thread (always do this before clear)",
        "context_before": "333: \tStopSmoothScroll();\n334: ",
        "context_after": "336: \tlistThread.ReInit();\n337: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 338,
        "text": "Clear list styles",
        "context_before": "336: \tlistThread.ReInit();\n337: ",
        "context_after": "339: \tisSwapEnabled = false;\n340: \tisViewPlaylist = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 347,
        "text": "Clear visible nodes because they can contain pointers to \"dead\" nodes",
        "context_before": "345: \ttotalSize = 0;\n346: ",
        "context_after": "348: \tvisibleNodes.clear();\n349: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 350,
        "text": "Clear everything that can contain pointers to \"dead\" nodes",
        "context_before": "348: \tvisibleNodes.clear();\n349: ",
        "context_after": "351: \tshuffleIndex = 0;\n352: \tshuffleNodes.clear();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 359,
        "text": "And only after all above clear all nodes",
        "context_before": "357: \ttempNextNode.reset();\n358: ",
        "context_after": "360: \trootNode.reset(new SkinListNode());\n361: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 371,
        "text": "Reinit cover thread (always do this before clear)",
        "context_before": "369: \tStopSmoothScroll();\n370: ",
        "context_after": "372: \tlistThread.ReInit();\n373: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 374,
        "text": "Clear visible nodes because they can contain pointers to \"dead\" nodes",
        "context_before": "372: \tlistThread.ReInit();\n373: ",
        "context_after": "375: \tvisibleNodes.clear();\n376: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 377,
        "text": "Switch to \"Now Playing\" view",
        "context_before": "375: \tvisibleNodes.clear();\n376: ",
        "context_after": "378: \t{\n379: \t\t// Restore list styles"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 379,
        "text": "Restore list styles",
        "context_before": "377: \tif (isReturnToDefault) // Switch to \"Now Playing\" view\n378: \t{",
        "context_after": "380: \t\tisSwapEnabled = isSwapEnabledPlay;\n381: \t\tisViewPlaylist = isViewPlaylistPlay;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 388,
        "text": "Restore selection",
        "context_before": "386: \t\ttotalSize = totalSizePlay;\n387: ",
        "context_after": "389: \t\tselectedNodes = selectedNodesPlay;\n390: \t\tselectedNodesPlay.clear();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 392,
        "text": "Restore focus",
        "context_before": "390: \t\tselectedNodesPlay.clear();\n391: ",
        "context_after": "393: \t\tfocusNode = focusNodePlay;\n394: \t\tfocusNodePlay.reset();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 396,
        "text": "Root node = \"Now Playing\" root node",
        "context_before": "394: \t\tfocusNodePlay.reset();\n395: ",
        "context_after": "397: \t\trootNode = rootNodePlay;\n398: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 399,
        "text": "Restore scroll, do this without SetControlRedraw because need to recalculate scroll before set new pos.",
        "context_before": "397: \t\trootNode = rootNodePlay;\n398: ",
        "context_after": "400: \t\t// Only with isReturnToDefault flag we can do this, everything below should be with SetControlRedraw.\n401: \t\tResetScrollBar();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 400,
        "text": "Only with isReturnToDefault flag we can do this, everything below should be with SetControlRedraw.",
        "context_before": "398: \n399: \t\t// Restore scroll, do this without SetControlRedraw because need to recalculate scroll before set new pos.",
        "context_after": "401: \t\tResetScrollBar();\n402: \t\tHScrollSetPos(scrollPosPlay, true);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 406,
        "text": "Switch from \"Now Playing\" view",
        "context_before": "404: \t\t::InvalidateRect(thisWnd, NULL, FALSE);\n405: \t}",
        "context_after": "407: \t{\n408: \t\t// Backup list styles"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 408,
        "text": "Backup list styles",
        "context_before": "406: \telse if (rootNodePlay == rootNode) // Switch from \"Now Playing\" view\n407: \t{",
        "context_after": "409: \t\tisSwapEnabledPlay = isSwapEnabled;\n410: \t\tisViewPlaylistPlay = isViewPlaylist;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 421,
        "text": "Clear list styles",
        "context_before": "419: \t\ttotalSize = 0;\n420: ",
        "context_after": "422: \t\tisSwapEnabled = false;\n423: \t\tisViewPlaylist = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 426,
        "text": "Backup selection",
        "context_before": "424: \t\tisRadioEnabled = false;\n425: ",
        "context_after": "427: \t\tselectedNodesPlay = selectedNodes;\n428: \t\tselectedNodes.clear();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 430,
        "text": "Backup focus",
        "context_before": "428: \t\tselectedNodes.clear();\n429: ",
        "context_after": "431: \t\tfocusNodePlay = focusNode;\n432: \t\tfocusNode.reset();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 434,
        "text": "Backup scroll",
        "context_before": "432: \t\tfocusNode.reset();\n433: ",
        "context_after": "435: \t\tscrollPosPlay = HScrollGetPos();\n436: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 442,
        "text": "Switch between NOT \"Now Playing\" views",
        "context_before": "440: \t\tSetControlRedraw(isControlRedraw);\n441: \t}",
        "context_after": "443: \t{\n444: \t\t// Clear everything"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 444,
        "text": "Clear everything",
        "context_before": "442: \telse // Switch between NOT \"Now Playing\" views\n443: \t{",
        "context_after": "445: \t\tisSwapEnabled = false;\n446: \t\tisViewPlaylist = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 474,
        "text": "\"Now Playing\" is current view",
        "context_before": "472: \t\treturn;\n473: ",
        "context_after": "475: \t\trootNodePlay.reset();\n476: \telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 517,
        "text": "Search for next node",
        "context_before": "515: \tSetControlRedraw(false);\n516: ",
        "context_after": "518: \tListNodeSafe nextNode;\n519: \tif (!selectedNodes.empty())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 526,
        "text": "Clear visible nodes because they can contain pointers to \"dead\" nodes",
        "context_before": "524: \t}\n525: ",
        "context_after": "527: \tvisibleNodes.clear();\n528: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 529,
        "text": "Must clear shuffle too because shuffle array can contain pointers to \"dead\" nodes",
        "context_before": "527: \tvisibleNodes.clear();\n528: ",
        "context_after": "530: \tif (!rootNodePlay || rootNodePlay == rootNode)\n531: \t\tRemoveShuffle();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 533,
        "text": "Clear everything that can contain pointers to \"dead\" nodes",
        "context_before": "531: \t\tRemoveShuffle();\n532: ",
        "context_after": "534: \tfocusNode.reset();\n535: \tshiftNode.reset();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 542,
        "text": "Clear playing node if needed",
        "context_before": "540: \t\tselectedNodes[i].reset();\n541: ",
        "context_after": "543: \t\tif (node == playNode.get())\n544: \t\t\tplayNode.reset();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 558,
        "text": "Remove child from parent node",
        "context_before": "556: \t\tListNodeUnsafe parent = node->Parent();\n557: ",
        "context_after": "559: \t\tparent->RemoveChild(node);\n560: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 561,
        "text": "If all children are removed then remove parent",
        "context_before": "559: \t\tparent->RemoveChild(node);\n560: ",
        "context_after": "562: \t\tif (parent != rootNode.get() && !parent->HasChild())\n563: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 570,
        "text": "Select next node",
        "context_before": "568: \tselectedNodes.clear();\n569: ",
        "context_after": "571: \tif (nextNode)\n572: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 586,
        "text": "Ending of critical functions to remove nodes.",
        "context_before": "584: }\n585: ",
        "context_after": "587: \n588: void SkinList::OnPaint(HDC dc, PAINTSTRUCT& ps)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 590,
        "text": "::Sleep(50) // To test smooth scrolling with lags",
        "context_before": "588: void SkinList::OnPaint(HDC dc, PAINTSTRUCT& ps)\n589: {",
        "context_after": "591: \n592:     CRect rc = ps.rcPaint;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 596,
        "text": "New dcMem //",
        "context_before": "594: \tvisibleNodes.clear();\n595: ",
        "context_after": "597: \tHDC dcMemory = ::CreateCompatibleDC(dc);\n598: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 602,
        "text": "End dcMem //",
        "context_before": "600: \n601: \tHGDIOBJ oldMemory = ::SelectObject(dcMemory, bmMemory);",
        "context_after": "603: \n604: \t::SetBkColor(dcMemory, backColor);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 610,
        "text": "Draw background image",
        "context_before": "608: \n609: \tif (imageBack.IsValid())",
        "context_after": "611: \n612: \tCRect rc2;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 615,
        "text": "Recursively draw all nodes",
        "context_before": "613: \t::GetClientRect(thisWnd, rc2);\n614: ",
        "context_after": "616: \tif (isControlRedraw)\n617: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 630,
        "text": "rcFont.MoveToXY(rcFont.left + (rc2.left - rc.left), rcFont.top + (rc2.top - rc.top));",
        "context_before": "628: \t\t\t::SetTextColor(dcMemory, fontColorNoItems);\n629: \t\t\tCRect rcFont(0, 20, rc2.right - scrollWidth, rc2.bottom);",
        "context_after": "631: \t\t\trcFont.OffsetRect(rc2.left - rc.left, rc2.top - rc.top);\n632: \t\t\t::DrawText(dcMemory, stringNoItems.c_str(), (int)stringNoItems.size(), rcFont, DT_CENTER|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 637,
        "text": "Draw move line",
        "context_before": "635: \t}\n636: ",
        "context_after": "638: \tif (isMoveElement)\n639: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 664,
        "text": "Copy dcMem //",
        "context_before": "662: \n663: ",
        "context_after": "665: \t::BitBlt(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcMemory, 0, 0, SRCCOPY);\n666: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 671,
        "text": "Copy dcMem //",
        "context_before": "669: \t::DeleteObject(bmMemory);\n670: \t::DeleteDC(dcMemory);",
        "context_after": "672: \n673: \t// Start cover loader thread"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 673,
        "text": "Start cover loader thread",
        "context_before": "671: \t// Copy dcMem //\n672: ",
        "context_after": "674: \tlistThread.DrawCover();\n675: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 679,
        "text": "If there are no nodes to draw just return",
        "context_before": "677: int SkinList::VisibleNodesRecursive(SkinListNode* recursiveNode, int y, int height)\n678: {",
        "context_after": "680: \t//if (!recursiveNode->HasChild())\n681: \t//\treturn y;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 680,
        "text": "if (!recursiveNode->HasChild())",
        "context_before": "678: {\n679: \t// If there are no nodes to draw just return",
        "context_after": "681: \t//\treturn y;\n682: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 681,
        "text": "return y;",
        "context_before": "679: \t// If there are no nodes to draw just return\n680: \t//if (!recursiveNode->HasChild())",
        "context_after": "682: \n683: \tint y2 = y;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 687,
        "text": "Do not draw nodes that beyond window bottom",
        "context_before": "685: \tfor (ListNodeUnsafe node = recursiveNode->Child(); node != nullptr; node = node->Next())\n686: \t{",
        "context_after": "688: \t\t\treturn y;\n689: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 690,
        "text": "Draw track",
        "context_before": "688: \t\t\treturn y;\n689: ",
        "context_after": "691: \t\t{\n692: \t\t\tif (y > -trackHeight) // Draw only visible nodes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 692,
        "text": "Draw only visible nodes",
        "context_before": "690: \t\tif (node->nodeType == SkinListNode::NodeType::Song) // Draw track\n691: \t\t{",
        "context_after": "693: \t\t\t{\n694: \t\t\t\tvisibleNodes.push_back(node); // Fill visible nodes array"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 694,
        "text": "Fill visible nodes array",
        "context_before": "692: \t\t\tif (y > -trackHeight) // Draw only visible nodes\n693: \t\t\t{",
        "context_after": "695: \t\t\t}\n696: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 697,
        "text": "Draw header",
        "context_before": "695: \t\t\t}\n696: \t\t}",
        "context_after": "698: \t\t{\n699: \t\t\tif (y > -headHeight) // Draw only visible nodes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 699,
        "text": "Draw only visible nodes",
        "context_before": "697: \t\telse if (node->nodeType == SkinListNode::NodeType::Head) // Draw header\n698: \t\t{",
        "context_after": "700: \t\t\t{\n701: \t\t\t\tvisibleNodes.push_back(node); // Fill visible nodes array"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 701,
        "text": "Fill visible nodes array",
        "context_before": "699: \t\t\tif (y > -headHeight) // Draw only visible nodes\n700: \t\t\t{",
        "context_after": "702: \t\t\t}\n703: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 707,
        "text": "/////////////////////////////////////////////////////////////////////////",
        "context_before": "705: \t\ty += node->rcNode.Height();\n706: ",
        "context_after": "708: \t\t// Recursively draw all open subnodes //\n709: \t\tif (node->isOpen && node->HasChild())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 708,
        "text": "Recursively draw all open subnodes //",
        "context_before": "706: \n707: ///////////////////////////////////////////////////////////////////////////",
        "context_after": "709: \t\tif (node->isOpen && node->HasChild())\n710: \t\t\ty = VisibleNodesRecursive(node, y, height);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 711,
        "text": "/////////////////////////////////////////////////////////////////////////",
        "context_before": "709: \t\tif (node->isOpen && node->HasChild())\n710: \t\t\ty = VisibleNodesRecursive(node, y, height);",
        "context_after": "712: \t}\n713: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 714,
        "text": "Recalculate height to show album art",
        "context_before": "712: \t}\n713: ",
        "context_after": "715: \tif (recursiveNode->left && isLeftAlways && (y - y2) < leftHeight)\n716: \t\ty = y2 + leftHeight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 725,
        "text": "Latest value is height not bottom like expected because it is only a limiter for drawing,",
        "context_before": "723: int SkinList::DrawNodesRecursive(HDC dc, SkinListNode* recursiveNode, int x, int y, int right, int height)\n724: {",
        "context_after": "726: \t// also this function was a bit different before, and for the sake of minimal changes it became slightly illogical.\n727: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 726,
        "text": "also this function was a bit different before, and for the sake of minimal changes it became slightly illogical.",
        "context_before": "724: {\n725: \t// Latest value is height not bottom like expected because it is only a limiter for drawing,",
        "context_after": "727: \n728: \t// If there are no nodes to draw just return"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 728,
        "text": "If there are no nodes to draw just return",
        "context_before": "726: \t// also this function was a bit different before, and for the sake of minimal changes it became slightly illogical.\n727: ",
        "context_after": "729: \t//if (!recursiveNode->HasChild())\n730: \t//\treturn y;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 729,
        "text": "if (!recursiveNode->HasChild())",
        "context_before": "727: \n728: \t// If there are no nodes to draw just return",
        "context_after": "730: \t//\treturn y;\n731: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 730,
        "text": "return y;",
        "context_before": "728: \t// If there are no nodes to draw just return\n729: \t//if (!recursiveNode->HasChild())",
        "context_after": "731: \n732: \tint y2 = y; // Save y to use it at the end to draw panes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 732,
        "text": "Save y to use it at the end to draw panes",
        "context_before": "730: \t//\treturn y;\n731: ",
        "context_after": "733: \tbool isShowL = false; // Show left pane?\n734: \tbool isShowR = false; // Show right pane?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 733,
        "text": "Show left pane?",
        "context_before": "731: \n732: \tint y2 = y; // Save y to use it at the end to draw panes",
        "context_after": "734: \tbool isShowR = false; // Show right pane?\n735: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 734,
        "text": "Show right pane?",
        "context_before": "732: \tint y2 = y; // Save y to use it at the end to draw panes\n733: \tbool isShowL = false; // Show left pane?",
        "context_after": "735: \n736: \tfor (ListNodeUnsafe node = recursiveNode->Child(); node != nullptr; node = node->Next())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 738,
        "text": "Do not draw nodes that beyond window bottom",
        "context_before": "736: \tfor (ListNodeUnsafe node = recursiveNode->Child(); node != nullptr; node = node->Next())\n737: \t{",
        "context_after": "739: \t\t\tbreak; //return y;\n740: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 739,
        "text": "return y;",
        "context_before": "737: \t{\n738: \t\tif (y > height) // Do not draw nodes that beyond window bottom",
        "context_after": "740: \n741: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 742,
        "text": "Draw track",
        "context_before": "740: \n741: ",
        "context_after": "743: \t\t{\n744: \t\t\tif (y > -trackHeight) // Draw only visible nodes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 744,
        "text": "Draw only visible nodes",
        "context_before": "742: \t\tif (node->nodeType == SkinListNode::NodeType::Song) // Draw track\n743: \t\t{",
        "context_after": "745: \t\t\t{\n746: \t\t\t\t// If there is a place for a pane then move nodes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 746,
        "text": "If there is a place for a pane then move nodes",
        "context_before": "744: \t\t\tif (y > -trackHeight) // Draw only visible nodes\n745: \t\t\t{",
        "context_after": "747: \t\t\t\tint showL = 0; int showR = 0;\n748: \t\t\t\tif (recursiveNode->left)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 753,
        "text": "Left pane overlap tracks?",
        "context_before": "751: \t\t\t\t\t{\n752: \t\t\t\t\t\tisShowL = true;",
        "context_after": "754: \t\t\t\t\t\t\tshowL = leftWidth;\n755: \t\t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 762,
        "text": "Right pane overlap tracks?",
        "context_before": "760: \t\t\t\t\t{\n761: \t\t\t\t\t\tisShowR = true;",
        "context_after": "763: \t\t\t\t\t\t\tshowR = rightWidth;\n764: \t\t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 767,
        "text": "Node area",
        "context_before": "765: \t\t\t\t}\n766: ",
        "context_after": "768: \t\t\t\tCRect rc(x + showL, y, right - showR, y + trackHeight);\n769: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 770,
        "text": "Draw background",
        "context_before": "768: \t\t\t\tCRect rc(x + showL, y, right - showR, y + trackHeight);\n769: ",
        "context_after": "771: \t\t\t\tfor (std::size_t i = 0, size = skinTrackB.size(); i < size; ++i)\n772: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 776,
        "text": "Draw elements",
        "context_before": "774: \t\t\t\t}\n775: ",
        "context_after": "777: \t\t\t\tfor (std::size_t i = 0, size = skinTrack.size(); i < size; ++i)\n778: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 787,
        "text": "Fill visible nodes array",
        "context_before": "785: \t\t\t\t}\n786: ",
        "context_after": "788: \t\t\t\t//visibleNodes.push_back(node);\n789: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 788,
        "text": "visibleNodes.push_back(node);",
        "context_before": "786: \n787: \t\t\t\t// Fill visible nodes array",
        "context_after": "789: \t\t\t}\n790: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 791,
        "text": "Draw header",
        "context_before": "789: \t\t\t}\n790: \t\t}",
        "context_after": "792: \t\t{\n793: \t\t\tif (y > -headHeight) // Draw only visible nodes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 793,
        "text": "Draw only visible nodes",
        "context_before": "791: \t\telse if (node->nodeType == SkinListNode::NodeType::Head) // Draw header\n792: \t\t{",
        "context_after": "794: \t\t\t{\n795: \t\t\t\t// Node area"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 795,
        "text": "Node area",
        "context_before": "793: \t\t\tif (y > -headHeight) // Draw only visible nodes\n794: \t\t\t{",
        "context_after": "796: \t\t\t\tCRect rc(x, y, right, y + headHeight);\n797: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 798,
        "text": "Draw background",
        "context_before": "796: \t\t\t\tCRect rc(x, y, right, y + headHeight);\n797: ",
        "context_after": "799: \t\t\t\tfor (std::size_t i = 0, size = skinHeadB.size(); i < size; ++i)\n800: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 804,
        "text": "Draw elements",
        "context_before": "802: \t\t\t\t}\n803: ",
        "context_after": "805: \t\t\t\tfor (std::size_t i = 0, size = skinHead.size(); i < size; ++i)\n806: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 818,
        "text": "Fill visible nodes array",
        "context_before": "816: \t\t\t\t}\n817: ",
        "context_after": "819: \t\t\t\t//visibleNodes.push_back(node);\n820: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 819,
        "text": "visibleNodes.push_back(node);",
        "context_before": "817: \n818: \t\t\t\t// Fill visible nodes array",
        "context_after": "820: \t\t\t}\n821: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 825,
        "text": "/////////////////////////////////////////////////////////////////////////",
        "context_before": "823: \t\ty += node->rcNode.Height();\n824: ",
        "context_after": "826: \t\t// Recursively draw all open subnodes //\n827: \t\tif (node->isOpen && node->HasChild())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 826,
        "text": "Recursively draw all open subnodes //",
        "context_before": "824: \n825: ///////////////////////////////////////////////////////////////////////////",
        "context_after": "827: \t\tif (node->isOpen && node->HasChild())\n828: \t\t\ty = DrawNodesRecursive(dc, node, x + nodeIndent, y, right, height);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 829,
        "text": "/////////////////////////////////////////////////////////////////////////",
        "context_before": "827: \t\tif (node->isOpen && node->HasChild())\n828: \t\t\ty = DrawNodesRecursive(dc, node, x + nodeIndent, y, right, height);",
        "context_after": "830: \t}\n831: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 833,
        "text": "Draw left pane if present and visible",
        "context_before": "831: \n832: ",
        "context_after": "834: \tif (recursiveNode->left && y2 > -leftHeight)\n835: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 836,
        "text": "Show left pane?",
        "context_before": "834: \tif (recursiveNode->left && y2 > -leftHeight)\n835: \t{",
        "context_after": "837: \t\t{\n838: \t\t\t// Left pane use Header node states for drawing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 838,
        "text": "Left pane use Header node states for drawing",
        "context_before": "836: \t\tif (isLeftAlways || isShowL) // Show left pane?\n837: \t\t{",
        "context_after": "839: \t\t\tListNodeUnsafe node = recursiveNode;\n840: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 841,
        "text": "Node area",
        "context_before": "839: \t\t\tListNodeUnsafe node = recursiveNode;\n840: ",
        "context_after": "842: \t\t\tCRect rc(x, y2, x + leftWidth, y2 + leftHeight);\n843: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 844,
        "text": "Draw background",
        "context_before": "842: \t\t\tCRect rc(x, y2, x + leftWidth, y2 + leftHeight);\n843: ",
        "context_after": "845: \t\t\tfor (std::size_t i = 0, size = skinLeftB.size(); i < size; ++i)\n846: \t\t\t\tskinLeftB[i]->Draw(dc, rc, node->stateSelect, node->statePlay, node->stateLine, node->stateLibrary);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 848,
        "text": "Draw elements",
        "context_before": "846: \t\t\t\tskinLeftB[i]->Draw(dc, rc, node->stateSelect, node->statePlay, node->stateLine, node->stateLibrary);\n847: ",
        "context_after": "849: \t\t\tfor (std::size_t i = 0, size = skinLeft.size(); i < size; ++i)\n850: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 860,
        "text": "Do not fill visible nodes array because a pane is transparent for mouse click",
        "context_before": "858: \t\t\t}\n859: ",
        "context_after": "861: \t\t}\n862: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 864,
        "text": "Draw right pane if present and visible",
        "context_before": "862: \t}\n863: ",
        "context_after": "865: \tif (recursiveNode->right && y2 > -rightHeight)\n866: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 867,
        "text": "Show right pane?",
        "context_before": "865: \tif (recursiveNode->right && y2 > -rightHeight)\n866: \t{",
        "context_after": "868: \t\t{\n869: \t\t\t// Right pane use Header node states for drawing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 869,
        "text": "Right pane use Header node states for drawing",
        "context_before": "867: \t\tif (isRightAlways || isShowR) // Show right pane?\n868: \t\t{",
        "context_after": "870: \t\t\tListNodeUnsafe node = recursiveNode;\n871: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 872,
        "text": "Node area",
        "context_before": "870: \t\t\tListNodeUnsafe node = recursiveNode;\n871: ",
        "context_after": "873: \t\t\tCRect rc(right - rightWidth, y2, right, y2 + rightHeight);\n874: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 875,
        "text": "Draw background",
        "context_before": "873: \t\t\tCRect rc(right - rightWidth, y2, right, y2 + rightHeight);\n874: ",
        "context_after": "876: \t\t\tfor (std::size_t i = 0, size = skinRightB.size(); i < size; ++i)\n877: \t\t\t\tskinRightB[i]->Draw(dc, rc, node->stateSelect, node->statePlay, node->stateLine, node->stateLibrary);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 879,
        "text": "Draw elements",
        "context_before": "877: \t\t\t\tskinRightB[i]->Draw(dc, rc, node->stateSelect, node->statePlay, node->stateLine, node->stateLibrary);\n878: ",
        "context_after": "880: \t\t\tfor (std::size_t i = 0, size = skinRight.size(); i < size; ++i)\n881: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 891,
        "text": "Do not fill visible nodes array because a pane is transparent for mouse click",
        "context_before": "889: \t\t\t}\n890: ",
        "context_after": "892: \t\t}\n893: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 895,
        "text": "Recalculate height to show album art",
        "context_before": "893: \t}\n894: ",
        "context_after": "896: \tif (recursiveNode->left && isLeftAlways && (y - y2) < leftHeight)\n897: \t\ty = y2 + leftHeight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 910,
        "text": "Search for clicked node",
        "context_before": "908: \tisSelectedElement = false;\n909: ",
        "context_after": "911: \tint clicked = FindNodeByPoint(point, HScrollGetPos());\n912: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 915,
        "text": "Check if click on track rating",
        "context_before": "913: \tif (!isRadioEnabled)\n914: \t{",
        "context_after": "916: \t\tif (clicked > -1)\n917: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 930,
        "text": "Check if click on track rating",
        "context_before": "928: \t\t\t\trcNode.right = rc.right - scrollWidth;\n929: ",
        "context_after": "931: \t\t\t\tint newRating = 0;\n932: \t\t\t\tif (node->nodeType == SkinListNode::NodeType::Song)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 941,
        "text": "Click on track rating",
        "context_before": "939: \t\t\t\t}\n940: ",
        "context_after": "942: \t\t\t\tif (newRating)\n943: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 962,
        "text": "Click on node",
        "context_before": "960: \tbool isSelectedChanged = false;\n961: ",
        "context_after": "963: \tif (clicked > -1)\n964: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 971,
        "text": "Click on node with Shift, select multiple tracks",
        "context_before": "969: \t\t::SetCapture(thisWnd);\n970: ",
        "context_after": "972: \t\tif ((nFlags & MK_SHIFT))\n973: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 978,
        "text": "Clear selection from all selected nodes",
        "context_before": "976: \t\t\t\tisSelectedChanged = true;\n977: ",
        "context_after": "979: \t\t\t\tfor (std::size_t i = 0, size = selectedNodes.size(); i < size; ++i)\n980: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 989,
        "text": "Select new nodes",
        "context_before": "987: \t\t\t\t\tshiftNode = focusNode;\n988: ",
        "context_after": "990: \t\t\t\tif (!shiftNode || node->rcNode.top >= shiftNode->rcNode.top) // Select below\n991: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 990,
        "text": "Select below",
        "context_before": "988: \n989: \t\t\t\t// Select new nodes",
        "context_after": "991: \t\t\t\t{\n992: \t\t\t\t\tSelectShift(shiftNode.get(), node);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 994,
        "text": "Select above",
        "context_before": "992: \t\t\t\t\tSelectShift(shiftNode.get(), node);\n993: \t\t\t\t}",
        "context_after": "995: \t\t\t\t{\n996: \t\t\t\t\tSelectShift(node, shiftNode.get());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 999,
        "text": "Focus clicked node",
        "context_before": "997: \t\t\t\t}\n998: ",
        "context_after": "1000: \t\t\t\tfocusNode.reset(node);\n1001: \t\t\t\tnode->stateSelect = SkinListNode::StateFlag::Focus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1004,
        "text": "Click on track",
        "context_before": "1002: \t\t\t}\n1003: \t\t}",
        "context_after": "1005: \t\telse if (node->nodeType == SkinListNode::NodeType::Song)\n1006: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1014,
        "text": "Click on track without Ctrl",
        "context_before": "1012: \t\t\t\t\tisSelectedChanged = true;\n1013: ",
        "context_after": "1015: \t\t\t\tif (!(nFlags & MK_CONTROL))\n1016: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1017,
        "text": "Clear selection from all selected nodes",
        "context_before": "1015: \t\t\t\tif (!(nFlags & MK_CONTROL))\n1016: \t\t\t\t{",
        "context_after": "1018: \t\t\t\t\tfor (std::size_t i = 0, size = selectedNodes.size(); i < size; ++i)\n1019: \t\t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1028,
        "text": "Focus clicked node",
        "context_before": "1026: \t\t\t\t\tfocusNode->stateSelect = SkinListNode::StateFlag::Select;\n1027: ",
        "context_after": "1029: \t\t\t\tfocusNode.reset(node);\n1030: \t\t\t\tnode->stateSelect = SkinListNode::StateFlag::Focus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1035,
        "text": "selectedNodes.push_back(node);",
        "context_before": "1033: \t\t\t\t{\n1034: \t\t\t\t\tnode->isSelect = true;",
        "context_after": "1036: \t\t\t\t\t////////////////\n1037: \t\t\t\t\t// Add node to selected nodes array in the same order that it located"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1036,
        "text": "//////////////",
        "context_before": "1034: \t\t\t\t\tnode->isSelect = true;\n1035: \t\t\t\t\t//selectedNodes.push_back(node);",
        "context_after": "1037: \t\t\t\t\t// Add node to selected nodes array in the same order that it located\n1038: \t\t\t\t\tbool isInsert = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1037,
        "text": "Add node to selected nodes array in the same order that it located",
        "context_before": "1035: \t\t\t\t\t//selectedNodes.push_back(node);\n1036: \t\t\t\t\t////////////////",
        "context_after": "1038: \t\t\t\t\tbool isInsert = false;\n1039: \t\t\t\t\tfor (std::size_t i = 0, size = selectedNodes.size(); i < size; ++i)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1050,
        "text": "//////////////",
        "context_before": "1048: \t\t\t\t\tif (!isInsert)\n1049: \t\t\t\t\t\tselectedNodes.emplace_back(node);",
        "context_after": "1051: \t\t\t\t}\n1052: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1053,
        "text": "Track already selected just focus it",
        "context_before": "1051: \t\t\t\t}\n1052: \t\t\t}",
        "context_after": "1054: \t\t\t{\n1055: \t\t\t\tif (nFlags & MK_CONTROL)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1058,
        "text": "Click on track without Ctrl or Shift",
        "context_before": "1056: \t\t\t\t\tisSelectedChanged = true;\n1057: ",
        "context_after": "1059: \t\t\t\tif (!(nFlags & MK_CONTROL) && !(nFlags & MK_SHIFT))\n1060: \t\t\t\t\tisSelectedElement = true; // Set flag to reset selection in MouseUp()"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1060,
        "text": "Set flag to reset selection in MouseUp()",
        "context_before": "1058: \t\t\t\t// Click on track without Ctrl or Shift\n1059: \t\t\t\tif (!(nFlags & MK_CONTROL) && !(nFlags & MK_SHIFT))",
        "context_after": "1061: \n1062: \t\t\t\tif (focusNode)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1068,
        "text": "Remove selection if clicked with Ctrl",
        "context_before": "1066: \t\t\t\tfocusNode->stateSelect = SkinListNode::StateFlag::Focus;\n1067: ",
        "context_after": "1069: \t\t\t\tif (nFlags & MK_CONTROL)\n1070: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1085,
        "text": "Click on header, select all tracks in album",
        "context_before": "1083: \t\t\t}\n1084: \t\t}",
        "context_after": "1086: \t\telse if (node->nodeType == SkinListNode::NodeType::Head)\n1087: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1092,
        "text": "Click on header without Ctrl",
        "context_before": "1090: \t\t\tshiftNode.reset();\n1091: ",
        "context_after": "1093: \t\t\tif (!(nFlags & MK_CONTROL))\n1094: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1095,
        "text": "Clear selection from all selected nodes",
        "context_before": "1093: \t\t\tif (!(nFlags & MK_CONTROL))\n1094: \t\t\t{",
        "context_after": "1096: \t\t\t\tfor (std::size_t i = 0, size = selectedNodes.size(); i < size; ++i)\n1097: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1106,
        "text": "Select all tracks in album",
        "context_before": "1104: \t\t\t\tfocusNode->stateSelect = SkinListNode::StateFlag::Select;\n1105: ",
        "context_after": "1107: \t\t\tfor (ListNodeUnsafe n = node->Child(); n != nullptr; n = n->Next())\n1108: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1109,
        "text": "Focus first track",
        "context_before": "1107: \t\t\tfor (ListNodeUnsafe n = node->Child(); n != nullptr; n = n->Next())\n1108: \t\t\t{",
        "context_after": "1110: \t\t\t\t{\n1111: \t\t\t\t\tn->stateSelect = SkinListNode::StateFlag::Focus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1114,
        "text": "Select others",
        "context_before": "1112: \t\t\t\t\tfocusNode.reset(n);\n1113: \t\t\t\t}",
        "context_after": "1115: \t\t\t\t\tn->stateSelect = SkinListNode::StateFlag::Select;\n1116: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1142,
        "text": "Clear selection from all selected nodes",
        "context_before": "1140: void SkinList::RemoveSelection()\n1141: {",
        "context_after": "1143: \tfor (std::size_t i = 0, size = selectedNodes.size(); i < size; ++i)\n1144: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1176,
        "text": "Reset play state",
        "context_before": "1174: void SkinList::SetPlayNode(ListNodeUnsafe node, bool needRedraw)\n1175: {",
        "context_after": "1177: \t{\n1178: \t\tplayNode->statePlay = SkinListNode::StateFlag::Stop;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1188,
        "text": "Clear selection from all selected nodes",
        "context_before": "1186: \t\t\tif (!rootNodePlay || rootNodePlay == rootNode)\n1187: \t\t\t{",
        "context_after": "1189: \t\t\t\tfor (std::size_t i = 0, size = selectedNodes.size(); i < size; ++i)\n1190: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1200,
        "text": "Clear selection from all selected nodes",
        "context_before": "1198: \t\t\telse\n1199: \t\t\t{",
        "context_after": "1201: \t\t\t\tfor (std::size_t i = 0, size = selectedNodesPlay.size(); i < size; ++i)\n1202: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1212,
        "text": "Set node play state",
        "context_before": "1210: \t\t}\n1211: ",
        "context_after": "1213: \t\tplayNode.reset(node);\n1214: \t\tplayNode->statePlay = SkinListNode::StateFlag::Play;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1222,
        "text": "Select node",
        "context_before": "1220: \t\t\tif (!rootNodePlay || rootNodePlay == rootNode)\n1221: \t\t\t{",
        "context_after": "1223: \t\t\t\tplayNode->stateSelect = SkinListNode::StateFlag::Focus;\n1224: \t\t\t\tif (!playNode->isSelect)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1234,
        "text": "Select node",
        "context_before": "1232: \t\t\telse\n1233: \t\t\t{",
        "context_after": "1235: \t\t\t\tplayNode->stateSelect = SkinListNode::StateFlag::Focus;\n1236: \t\t\t\tif (!playNode->isSelect)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1332,
        "text": "Generate a random number",
        "context_before": "1330: \t\treturn nullptr;\n1331: ",
        "context_after": "1333: \tstd::uniform_int<> randomInt(0, countNew - 1);\n1334: \tint random = randomInt(randomEngine);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1338,
        "text": "Use recursive function to search for node by the random number",
        "context_before": "1336: \tint count = 0;\n1337: ",
        "context_after": "1339: \tListNodeUnsafe node = nullptr;\n1340: \tif (!rootNodePlay || rootNodePlay == rootNode)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1479,
        "text": "Search for clicked node",
        "context_before": "1477: \t::SetFocus(thisWnd);\n1478: ",
        "context_after": "1480: \tint clicked = FindNodeByPoint(point, HScrollGetPos());\n1481: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1482,
        "text": "Click on node",
        "context_before": "1480: \tint clicked = FindNodeByPoint(point, HScrollGetPos());\n1481: ",
        "context_after": "1483: \tif (clicked > -1)\n1484: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1487,
        "text": "Select track if clicked on track",
        "context_before": "1485: \t\tListNodeUnsafe node = visibleNodes[clicked];\n1486: ",
        "context_after": "1488: \t\tif (node->nodeType == SkinListNode::NodeType::Song)\n1489: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1494,
        "text": "Clear selection from all selected nodes",
        "context_before": "1492: \t\t\t\tif (!(nFlags & MK_CONTROL))\n1493: \t\t\t\t{",
        "context_after": "1495: \t\t\t\t\tfor (std::size_t i = 0, size = selectedNodes.size(); i < size; ++i)\n1496: \t\t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1505,
        "text": "Focus clicked node",
        "context_before": "1503: \t\t\t\t\tfocusNode->stateSelect = SkinListNode::StateFlag::Select;\n1504: ",
        "context_after": "1506: \t\t\t\tfocusNode.reset(node);\n1507: \t\t\t\tnode->stateSelect = SkinListNode::StateFlag::Focus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1515,
        "text": "Track already selected just focus it",
        "context_before": "1513: \t\t\t\t}\n1514: \t\t\t}",
        "context_after": "1516: \t\t\t{\n1517: \t\t\t\tisSelectedElement = true; // Set flag to reset selection in MouseUp()"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1517,
        "text": "Set flag to reset selection in MouseUp()",
        "context_before": "1515: \t\t\telse // Track already selected just focus it\n1516: \t\t\t{",
        "context_after": "1518: \n1519: \t\t\t\tif (focusNode)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1536,
        "text": "Menu key or Shift+F10",
        "context_before": "1534: \t\treturn;\n1535: ",
        "context_after": "1537: \t\t::GetCursorPos(&point);\n1538: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1686,
        "text": "if (!node->isSelect)",
        "context_before": "1684: \t\t\t\tnode->stateSelect = SkinListNode::StateFlag::Select;\n1685: ",
        "context_after": "1687: \t\t\t{\n1688: \t\t\t\tnode->isSelect = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1712,
        "text": "If scroll by page",
        "context_before": "1710: \tint scroll = 0;\n1711: ",
        "context_after": "1713: \tif (lineScroll == WHEEL_PAGESCROLL)\n1714: \t\tscroll = HScrollGetPage();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1720,
        "text": "Old without smoothing",
        "context_before": "1718: \tif (isReverse) scroll = -scroll;\n1719: ",
        "context_after": "1721: //\tif (HScrollSetPos(HScrollGetPos() + scroll))\n1722: //\t\tInvalidate();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1721,
        "text": "if (HScrollSetPos(HScrollGetPos() + scroll))",
        "context_before": "1719: \n1720: \t// Old without smoothing",
        "context_after": "1722: //\t\tInvalidate();\n1723: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1722,
        "text": "Invalidate();",
        "context_before": "1720: \t// Old without smoothing\n1721: //\tif (HScrollSetPos(HScrollGetPos() + scroll))",
        "context_after": "1723: \n1724: \tif (!isSmoothScrollEnabled)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1750,
        "text": "smoothScrollNew is a new scroll position that the scroll should reach.",
        "context_before": "1748: {\n1749: \t// For smooth scrolling use two important variables smoothScrollNew and smoothScrollAcc.",
        "context_after": "1751: \t// smoothScrollAcc is the scroll acceleration:\n1752: \t// if = 0 then scroll and timer are stopped, if > 0 then scroll is moving up, if < 0 moving down."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1751,
        "text": "smoothScrollAcc is the scroll acceleration:",
        "context_before": "1749: \t// For smooth scrolling use two important variables smoothScrollNew and smoothScrollAcc.\n1750: \t// smoothScrollNew is a new scroll position that the scroll should reach.",
        "context_after": "1752: \t// if = 0 then scroll and timer are stopped, if > 0 then scroll is moving up, if < 0 moving down.\n1753: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1752,
        "text": "if = 0 then scroll and timer are stopped, if > 0 then scroll is moving up, if < 0 moving down.",
        "context_before": "1750: \t// smoothScrollNew is a new scroll position that the scroll should reach.\n1751: \t// smoothScrollAcc is the scroll acceleration:",
        "context_after": "1753: \n1754: \tif (smoothScrollAcc == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1759,
        "text": "Adjust scroll position",
        "context_before": "1757: \t\tsmoothScrollNew += scroll;\n1758: ",
        "context_after": "1760: \tsmoothScrollNew = std::max(HScrollGetMin(), std::min(HScrollGetMax() - HScrollGetPage(), smoothScrollNew));\n1761: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1762,
        "text": "Scroll is already in position",
        "context_before": "1760: \tsmoothScrollNew = std::max(HScrollGetMin(), std::min(HScrollGetMax() - HScrollGetPage(), smoothScrollNew));\n1761: ",
        "context_after": "1763: \tif (smoothScrollNew == HScrollGetPos())\n1764: \t\treturn;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1766,
        "text": "If scroll is not moving then start timer to move it",
        "context_before": "1764: \t\treturn;\n1765: ",
        "context_after": "1767: \tif (smoothScrollAcc == 0)\n1768: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1769,
        "text": "::SetTimer(thisWnd, 100, 20, NULL); // To test old timer realization (diff / 8)",
        "context_before": "1767: \tif (smoothScrollAcc == 0)\n1768: \t{",
        "context_after": "1770: \t\tisSmoothScrollRun = true;\n1771: \t\teventSmoothScroll->Set();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1786,
        "text": "Slow down scrolling when reaching the destination point",
        "context_before": "1784: \tif (diff == 0) return;\n1785: ",
        "context_after": "1787: \tif (diff > 0)\n1788: \t\tsmoothScrollAcc = diff / 16 + 1;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1792,
        "text": "Scrolling",
        "context_before": "1790: \t\tsmoothScrollAcc = diff / 16 - 1;\n1791: ",
        "context_after": "1793: \tint oldPos = HScrollGetPos();\n1794: \tif (HScrollSetPos(HScrollGetPos() + smoothScrollAcc))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1797,
        "text": "http://stackoverflow.com/questions/17277622/dwm-in-win7-8-gdi",
        "context_before": "1795: \t{\n1796: \t\t::ScrollWindowEx(thisWnd, 0, oldPos - HScrollGetPos(), NULL, NULL, NULL, NULL, SW_INVALIDATE);",
        "context_after": "1798: \t\t// Test: redraw main window for smoother scrolling\n1799: \t\t//if (futureWin->IsVistaOrLater() && futureWin->IsCompositionEnabled())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1798,
        "text": "Test: redraw main window for smoother scrolling",
        "context_before": "1796: \t\t::ScrollWindowEx(thisWnd, 0, oldPos - HScrollGetPos(), NULL, NULL, NULL, NULL, SW_INVALIDATE);\n1797: \t\t// http://stackoverflow.com/questions/17277622/dwm-in-win7-8-gdi",
        "context_after": "1799: \t\t//if (futureWin->IsVistaOrLater() && futureWin->IsCompositionEnabled())\n1800: \t\t//\t::InvalidateRect(thisParentWnd, NULL, FALSE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1800,
        "text": "::InvalidateRect(thisParentWnd, NULL, FALSE);",
        "context_before": "1798: \t\t// Test: redraw main window for smoother scrolling\n1799: \t\t//if (futureWin->IsVistaOrLater() && futureWin->IsCompositionEnabled())",
        "context_after": "1801: \t\t::UpdateWindow(thisWnd);\n1802: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1807,
        "text": "::KillTimer(thisWnd, 100); // To test old timer realization",
        "context_before": "1805: \t\t(smoothScrollAcc < 0 && HScrollGetPos() <= smoothScrollNew))\n1806: \t{",
        "context_after": "1808: \t\teventSmoothScroll->Reset();\n1809: \t\tisSmoothScrollRun = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1823,
        "text": "More than one are selected, need to clear selection",
        "context_before": "1821: \n1822: \t\tstd::size_t size = selectedNodes.size();",
        "context_after": "1824: \t\t{\n1825: \t\t\t// Clear selection from all selected nodes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1825,
        "text": "Clear selection from all selected nodes",
        "context_before": "1823: \t\tif (size > 1) // More than one are selected, need to clear selection\n1824: \t\t{",
        "context_after": "1826: \t\t\tfor (std::size_t i = 0; i < size; ++i)\n1827: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1834,
        "text": "Select focused node",
        "context_before": "1832: \t\t\tisSelectedChanged = true;\n1833: ",
        "context_after": "1835: \t\t\tif (focusNode)\n1836: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1865,
        "text": "Insert into this parent",
        "context_before": "1863: \t\t\tisMoveElement = false;\n1864: ",
        "context_after": "1866: \t\t\tListNodeUnsafe newParent = rootNode.get();\n1867: \t\t\t//if (dropNode) // For the future"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1868,
        "text": "newParent = dropNode->Parent();",
        "context_before": "1866: \t\t\tListNodeUnsafe newParent = rootNode.get();\n1867: \t\t\t//if (dropNode) // For the future",
        "context_after": "1869: \n1870: \t\t\t// If insert into the place of one of seleted nodes then need to find first not selected node after it"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1870,
        "text": "If insert into the place of one of seleted nodes then need to find first not selected node after it",
        "context_before": "1868: \t\t\t//\tnewParent = dropNode->Parent();\n1869: ",
        "context_after": "1871: \t\t\t// only then it will insert correctly (only needed if selected multiple nodes)\n1872: \t\t\tif (dropNodeMove && dropNodeMove->isSelect && selectedNodes.size() > 1)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1871,
        "text": "only then it will insert correctly (only needed if selected multiple nodes)",
        "context_before": "1869: \n1870: \t\t\t// If insert into the place of one of seleted nodes then need to find first not selected node after it",
        "context_after": "1872: \t\t\tif (dropNodeMove && dropNodeMove->isSelect && selectedNodes.size() > 1)\n1873: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1877,
        "text": "Only if the node is not selected",
        "context_before": "1875: \t\t\t\tfor (ListNodeUnsafe node = dropNodeMove.get(); node != nullptr; node = node->Next())\n1876: \t\t\t\t{",
        "context_after": "1878: \t\t\t\t\t{\n1879: \t\t\t\t\t\tisFindNode = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1884,
        "text": "Does not find by any reason (all selected for example)",
        "context_before": "1882: \t\t\t\t\t}\n1883: \t\t\t\t}",
        "context_after": "1885: \t\t\t\t\tdropNodeMove.reset();\n1886: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1888,
        "text": "Move nodes to new position",
        "context_before": "1886: \t\t\t}\n1887: ",
        "context_after": "1889: \t\t\tfor (std::size_t i = 0, size = selectedNodes.size(); i < size; ++i)\n1890: \t\t\t\tselectedNodes[i]->Parent()->MoveChild(selectedNodes[i].get(), newParent, dropNodeMove.get());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1896,
        "text": "Recalculate position of nodes",
        "context_before": "1894: \t\t\tdropNodeMove.reset();\n1895: ",
        "context_after": "1897: \t\t\tResetIndex();\n1898: \t\t\t::InvalidateRect(thisWnd, NULL, FALSE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1935,
        "text": "::InvalidateRect(thisWnd, NULL, FALSE);",
        "context_before": "1933: \t\t{\n1934: \t\t\tisMoveElement = false;",
        "context_after": "1936: \n1937: \t\t\t// Invalidate old"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1937,
        "text": "Invalidate old",
        "context_before": "1935: \t\t\t//::InvalidateRect(thisWnd, NULL, FALSE);\n1936: ",
        "context_after": "1938: \t\t\tCRect rc;\n1939: \t\t\t::GetClientRect(thisWnd, rc);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1945,
        "text": "Do not redraw offscreen",
        "context_before": "1943: \t\t\trc.top = dropPosMove - 2 + dropPosScroll - scrollPos;\n1944: \t\t\trc.bottom = dropPosMove + 3 + dropPosScroll - scrollPos;",
        "context_after": "1946: \t\t\t\t::InvalidateRect(thisWnd, rc, FALSE);\n1947: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1967,
        "text": "Latest node",
        "context_before": "1965: \t\t\tdropPosMoveNew = visibleNodes[found]->rcNode.top - scrollPos;\n1966: \t\t}",
        "context_after": "1968: \t\t{\n1969: \t\t\tdropNodeMoveNew = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1970,
        "text": "-1 to do not redraw offscreen",
        "context_before": "1968: \t\t{\n1969: \t\t\tdropNodeMoveNew = nullptr;",
        "context_after": "1971: \t\t}\n1972: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1973,
        "text": "Offscreen check",
        "context_before": "1971: \t\t}\n1972: ",
        "context_after": "1974: \t\tif (dropPosMoveNew < 0 || dropPosMoveNew > scrollPage - 1) // -1 do not know why, but the calculation more accurate that way\n1975: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1974,
        "text": "-1 do not know why, but the calculation more accurate that way",
        "context_before": "1972: \n1973: \t\t// Offscreen check",
        "context_after": "1975: \t\t{\n1976: \t\t\tdropNodeMoveNew = dropNodeMove.get();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1985,
        "text": "Invalidate old",
        "context_before": "1983: \t\t\t::GetClientRect(thisWnd, rc);\n1984: ",
        "context_after": "1986: \t\t\t{\n1987: \t\t\t\tint bottom = rc.bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1990,
        "text": "Do not redraw offscreen",
        "context_before": "1988: \t\t\t\trc.top = dropPosMove - 2 + dropPosScroll - scrollPos;\n1989: \t\t\t\trc.bottom = dropPosMove + 3 + dropPosScroll - scrollPos;",
        "context_after": "1991: \t\t\t\t\t::InvalidateRect(thisWnd, rc, FALSE);\n1992: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1999,
        "text": "::InvalidateRect(thisWnd, NULL, FALSE);",
        "context_before": "1997: \t\t\tdropNodeMove.reset(dropNodeMoveNew);\n1998: \t\t\tdropPosMove = dropPosMoveNew;",
        "context_after": "2000: \n2001: \t\t\t// Invalidate new"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2001,
        "text": "Invalidate new",
        "context_before": "1999: \t\t\t//::InvalidateRect(thisWnd, NULL, FALSE);\n2000: ",
        "context_after": "2002: \t\t\trc.top = dropPosMove - 2;\n2003: \t\t\trc.bottom = dropPosMove + 3;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2017,
        "text": "Check the limit we need to move a mouse to initiate Drag'n'Drop",
        "context_before": "2015: \t\t\t::SendMessage(thisParentWnd, UWM_LISTDRAG, 0, MAKELPARAM(point.x, point.y));\n2016: \t\t}",
        "context_after": "2018: \t\telse if (point.x > ptPress.x + 10 || point.y > ptPress.y + 10 ||\n2019: \t\t\tpoint.x < ptPress.x - 10 || point.y < ptPress.y - 10)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2034,
        "text": "Without Shift",
        "context_before": "2032: \t\tif (node && node != focusNode.get())\n2033: \t\t{",
        "context_after": "2035: //\t\t\tif (!(GetKeyState(VK_LSHIFT) & 0x8000) && !(GetKeyState(VK_RSHIFT) & 0x8000))\n2036: //\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2035,
        "text": "if (!(GetKeyState(VK_LSHIFT) & 0x8000) && !(GetKeyState(VK_RSHIFT) & 0x8000))",
        "context_before": "2033: \t\t{\n2034: \t\t\t// Without Shift",
        "context_after": "2036: //\t\t\t{\n2037: \t\t\t\t// Clear selection from all selected nodes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2037,
        "text": "Clear selection from all selected nodes",
        "context_before": "2035: //\t\t\tif (!(GetKeyState(VK_LSHIFT) & 0x8000) && !(GetKeyState(VK_RSHIFT) & 0x8000))\n2036: //\t\t\t{",
        "context_after": "2038: \t\t\t\tfor (std::size_t i = 0, size = selectedNodes.size(); i < size; ++i)\n2039: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2045,
        "text": "else if (focusNode)",
        "context_before": "2043: \t\t\t\tselectedNodes.clear();\n2044: //\t\t\t}",
        "context_after": "2046: //\t\t\t\tfocusNode->stateSelect = STATE_SELECT;\n2047: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2046,
        "text": "focusNode->stateSelect = STATE_SELECT;",
        "context_before": "2044: //\t\t\t}\n2045: //\t\t\telse if (focusNode)",
        "context_after": "2047: \n2048: \t\t\tnode->isSelect = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2058,
        "text": "Adjust scroll",
        "context_before": "2056: \t\t\t::InvalidateRect(thisWnd, NULL, FALSE);\n2057: \t\t}",
        "context_after": "2059: \t\t{\n2060: \t\t\tif (ScrollToHome())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2067,
        "text": "Nothing is selected, search for first node",
        "context_before": "2065: \t{\n2066: \t\tListNodeUnsafe node = nullptr;",
        "context_after": "2068: \t\t\tnode = FindPrevNode(nullptr, false);\n2069: \t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2074,
        "text": "Without Shift",
        "context_before": "2072: \t\tif (node && node != focusNode.get())\n2073: \t\t{",
        "context_after": "2075: //\t\t\tif (!(GetKeyState(VK_LSHIFT) & 0x8000) && !(GetKeyState(VK_RSHIFT) & 0x8000))\n2076: //\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2075,
        "text": "if (!(GetKeyState(VK_LSHIFT) & 0x8000) && !(GetKeyState(VK_RSHIFT) & 0x8000))",
        "context_before": "2073: \t\t{\n2074: \t\t\t// Without Shift",
        "context_after": "2076: //\t\t\t{\n2077: \t\t\t\t// Clear selection from all selected nodes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2077,
        "text": "Clear selection from all selected nodes",
        "context_before": "2075: //\t\t\tif (!(GetKeyState(VK_LSHIFT) & 0x8000) && !(GetKeyState(VK_RSHIFT) & 0x8000))\n2076: //\t\t\t{",
        "context_after": "2078: \t\t\t\tfor (std::size_t i = 0, size = selectedNodes.size(); i < size; ++i)\n2079: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2085,
        "text": "else if (focusNode)",
        "context_before": "2083: \t\t\t\tselectedNodes.clear();\n2084: //\t\t\t}",
        "context_after": "2086: //\t\t\t\tfocusNode->stateSelect = STATE_SELECT;\n2087: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2086,
        "text": "focusNode->stateSelect = STATE_SELECT;",
        "context_before": "2084: //\t\t\t}\n2085: //\t\t\telse if (focusNode)",
        "context_after": "2087: \n2088: \t\t\tnode->isSelect = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2098,
        "text": "Adjust scroll",
        "context_before": "2096: \t\t\t::InvalidateRect(thisWnd, NULL, FALSE);\n2097: \t\t}",
        "context_after": "2099: \t\t{\n2100: \t\t\tif (ScrollToEnd())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2110,
        "text": "Without Shift",
        "context_before": "2108: \t\tif (node && node != focusNode.get())\n2109: \t\t{",
        "context_after": "2111: //\t\t\tif (!(GetKeyState(VK_LSHIFT) & 0x8000) && !(GetKeyState(VK_RSHIFT) & 0x8000))\n2112: //\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2111,
        "text": "if (!(GetKeyState(VK_LSHIFT) & 0x8000) && !(GetKeyState(VK_RSHIFT) & 0x8000))",
        "context_before": "2109: \t\t{\n2110: \t\t\t// Without Shift",
        "context_after": "2112: //\t\t\t{\n2113: \t\t\t\t// Clear selection from all selected nodes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2113,
        "text": "Clear selection from all selected nodes",
        "context_before": "2111: //\t\t\tif (!(GetKeyState(VK_LSHIFT) & 0x8000) && !(GetKeyState(VK_RSHIFT) & 0x8000))\n2112: //\t\t\t{",
        "context_after": "2114: \t\t\t\tfor (std::size_t i = 0, size = selectedNodes.size(); i < size; ++i)\n2115: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2121,
        "text": "else if (focusNode)",
        "context_before": "2119: \t\t\t\tselectedNodes.clear();\n2120: //\t\t\t}",
        "context_after": "2122: //\t\t\t\tfocusNode->stateSelect = STATE_SELECT;\n2123: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2122,
        "text": "focusNode->stateSelect = STATE_SELECT;",
        "context_before": "2120: //\t\t\t}\n2121: //\t\t\telse if (focusNode)",
        "context_after": "2123: \n2124: \t\t\tnode->isSelect = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2134,
        "text": "Adjust scroll",
        "context_before": "2132: \t\t\t::InvalidateRect(thisWnd, NULL, FALSE);\n2133: \t\t}",
        "context_after": "2135: \t\t{\n2136: \t\t\tif (ScrollToHome())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2143,
        "text": "Nothing is selected, search for first node",
        "context_before": "2141: \t{\n2142: \t\tListNodeUnsafe node = nullptr;",
        "context_after": "2144: \t\t\tnode = FindPrevNode(nullptr, true);\n2145: \t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2150,
        "text": "Without Shift",
        "context_before": "2148: \t\tif (node && node != focusNode.get())\n2149: \t\t{",
        "context_after": "2151: //\t\t\tif (!(GetKeyState(VK_LSHIFT) & 0x8000) && !(GetKeyState(VK_RSHIFT) & 0x8000))\n2152: //\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2151,
        "text": "if (!(GetKeyState(VK_LSHIFT) & 0x8000) && !(GetKeyState(VK_RSHIFT) & 0x8000))",
        "context_before": "2149: \t\t{\n2150: \t\t\t// Without Shift",
        "context_after": "2152: //\t\t\t{\n2153: \t\t\t\t// Clear selection from all selected nodes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2153,
        "text": "Clear selection from all selected nodes",
        "context_before": "2151: //\t\t\tif (!(GetKeyState(VK_LSHIFT) & 0x8000) && !(GetKeyState(VK_RSHIFT) & 0x8000))\n2152: //\t\t\t{",
        "context_after": "2154: \t\t\t\tfor (std::size_t i = 0, size = selectedNodes.size(); i < size; ++i)\n2155: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2161,
        "text": "else if (focusNode)",
        "context_before": "2159: \t\t\t\tselectedNodes.clear();\n2160: //\t\t\t}",
        "context_after": "2162: //\t\t\t\tfocusNode->stateSelect = STATE_SELECT;\n2163: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2162,
        "text": "focusNode->stateSelect = STATE_SELECT;",
        "context_before": "2160: //\t\t\t}\n2161: //\t\t\telse if (focusNode)",
        "context_after": "2163: \n2164: \t\t\tnode->isSelect = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2174,
        "text": "Adjust scroll",
        "context_before": "2172: \t\t\t::InvalidateRect(thisWnd, NULL, FALSE);\n2173: \t\t}",
        "context_after": "2175: \t\t{\n2176: \t\t\tif (ScrollToEnd())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2186,
        "text": "Clear selection from all selected nodes",
        "context_before": "2184: \t\tif (node && node != focusNode.get())\n2185: \t\t{",
        "context_after": "2187: \t\t\tfor (std::size_t i = 0, size = selectedNodes.size(); i < size; ++i)\n2188: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2204,
        "text": "Adjust scroll",
        "context_before": "2202: \t\t\t::InvalidateRect(thisWnd, NULL, FALSE);\n2203: \t\t}",
        "context_after": "2205: \t\t{\n2206: \t\t\tif (ScrollToHome())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2216,
        "text": "Clear selection from all selected nodes",
        "context_before": "2214: \t\tif (node && node != focusNode.get())\n2215: \t\t{",
        "context_after": "2217: \t\t\tfor (std::size_t i = 0, size = selectedNodes.size(); i < size; ++i)\n2218: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2234,
        "text": "Adjust scroll",
        "context_before": "2232: \t\t\t::InvalidateRect(thisWnd, NULL, FALSE);\n2233: \t\t}",
        "context_after": "2235: \t\t{\n2236: \t\t\tif (ScrollToEnd())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2285,
        "text": "Search node function, helper for a recursive function below,",
        "context_before": "2283: ListNodeUnsafe SkinList::FindNextNode(ListNodeUnsafe findNode, bool isPage, ListNodeUnsafe recursiveNode)\n2284: {",
        "context_after": "2286: \t// also stores a variable for the recursive function\n2287: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2286,
        "text": "also stores a variable for the recursive function",
        "context_before": "2284: {\n2285: \t// Search node function, helper for a recursive function below,",
        "context_after": "2287: \n2288: \t// if findNode == nullptr then the function return the latest node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2288,
        "text": "if findNode == nullptr then the function return the latest node",
        "context_before": "2286: \t// also stores a variable for the recursive function\n2287: ",
        "context_after": "2289: \t// if the function return nullptr then a node searched for is latest\n2290: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2289,
        "text": "if the function return nullptr then a node searched for is latest",
        "context_before": "2287: \n2288: \t// if findNode == nullptr then the function return the latest node",
        "context_after": "2290: \n2291: \tbool isFind = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2301,
        "text": "Exception for search by page",
        "context_before": "2299: \tif (findNode == nullptr)\n2300: \t\treturn lastNode;",
        "context_after": "2302: \t{\n2303: \t\tif (findNode == lastNode)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2321,
        "text": "Search only tracks",
        "context_before": "2319: \tfor (ListNodeUnsafe node = recursiveNode->Child(); node != nullptr; node = node->Next())\n2320: \t{",
        "context_after": "2322: \t\t{\n2323: \t\t\tlastNode = node; // lastNode always contains the latest track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2323,
        "text": "lastNode always contains the latest track",
        "context_before": "2321: \t\tif (node->nodeType == SkinListNode::NodeType::Song) // Search only tracks\n2322: \t\t{",
        "context_after": "2324: \n2325: \t\t\tif (findNode) // Search for a track (else search for the latest track)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2325,
        "text": "Search for a track (else search for the latest track)",
        "context_before": "2323: \t\t\tlastNode = node; // lastNode always contains the latest track\n2324: ",
        "context_after": "2326: \t\t\t{\n2327: \t\t\t\tif (isFind)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2329,
        "text": "Return next (KEY_DOWN)",
        "context_before": "2327: \t\t\t\tif (isFind)\n2328: \t\t\t\t{",
        "context_after": "2330: \t\t\t\t\t\treturn node;\n2331: \t\t\t\t\telse // Return next (one page down)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2331,
        "text": "Return next (one page down)",
        "context_before": "2329: \t\t\t\t\tif (!isPage) // Return next (KEY_DOWN)\n2330: \t\t\t\t\t\treturn node;",
        "context_after": "2332: \t\t\t\t\t{\n2333: \t\t\t\t\t\tint page = HScrollGetPage() - trackHeight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2336,
        "text": "Return next (KEY_PAGEDOWN)",
        "context_before": "2334: \n2335: \t\t\t\t\t\tif (node->rcNode.bottom > findNode->rcNode.top + page)",
        "context_after": "2337: \t\t\t\t\t}\n2338: \t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2345,
        "text": "Recursive search",
        "context_before": "2343: \t\t}\n2344: ",
        "context_after": "2346: \t    if (node->isOpen && node->HasChild())\n2347: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2360,
        "text": "Search node function, helper for a recursive function below,",
        "context_before": "2358: ListNodeUnsafe SkinList::FindPrevNode(ListNodeUnsafe findNode, bool isPage, ListNodeUnsafe recursiveNode)\n2359: {",
        "context_after": "2361: \t// also stores a variable for the recursive function\n2362: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2361,
        "text": "also stores a variable for the recursive function",
        "context_before": "2359: {\n2360: \t// Search node function, helper for a recursive function below,",
        "context_after": "2362: \n2363: \t// if findNode == nullptr then the function return the first node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2363,
        "text": "if findNode == nullptr then the function return the first node",
        "context_before": "2361: \t// also stores a variable for the recursive function\n2362: ",
        "context_after": "2364: \t// if the function return nullptr then a node searched for is first\n2365: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2364,
        "text": "if the function return nullptr then a node searched for is first",
        "context_before": "2362: \n2363: \t// if findNode == nullptr then the function return the first node",
        "context_after": "2365: \n2366: \tListNodeUnsafe foundNode = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2376,
        "text": "Exception for search by page",
        "context_before": "2374: \tif (findNode == nullptr)\n2375: \t\treturn firstNode;",
        "context_after": "2377: \t{\n2378: \t\tif (findNode == firstNode)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2396,
        "text": "Search only tracks",
        "context_before": "2394: \tfor (ListNodeUnsafe node = recursiveNode->Child(); node != nullptr; node = node->Next())\n2395: \t{",
        "context_after": "2397: \t\t{\n2398: \t\t\tif (firstNode == nullptr) firstNode = node; // firstNode always contains the first track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2398,
        "text": "firstNode always contains the first track",
        "context_before": "2396: \t\tif (node->nodeType == SkinListNode::NodeType::Song) // Search only tracks\n2397: \t\t{",
        "context_after": "2399: \n2400: \t\t\tif (findNode == nullptr) // Search for the first track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2400,
        "text": "Search for the first track",
        "context_before": "2398: \t\t\tif (firstNode == nullptr) firstNode = node; // firstNode always contains the first track\n2399: ",
        "context_after": "2401: \t\t\t\treturn nullptr; // Already found\n2402: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2404,
        "text": "Return previous (KEY_UP)",
        "context_before": "2402: \n2403: \t\t\tif (node == findNode) // Found a node",
        "context_after": "2405: \n2406: \t\t\tif (!isPage) // Store previous"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2406,
        "text": "Store previous",
        "context_before": "2404: \t\t\t\treturn foundNode; // Return previous (KEY_UP)\n2405: ",
        "context_after": "2407: \t\t\t\tfoundNode = node;\n2408: \t\t\telse // Store previous (one page up)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2408,
        "text": "Store previous (one page up)",
        "context_before": "2406: \t\t\tif (!isPage) // Store previous\n2407: \t\t\t\tfoundNode = node;",
        "context_after": "2409: \t\t\t{\n2410: \t\t\t\tint page = HScrollGetPage() - trackHeight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2413,
        "text": "Return previous (KEY_PAGEUP)",
        "context_before": "2411: \n2412: \t\t\t\tif (findNode->rcNode.bottom > node->rcNode.top + page)",
        "context_after": "2414: \t\t\t}\n2415: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2417,
        "text": "Recursive search",
        "context_before": "2415: \t\t}\n2416: ",
        "context_after": "2418: \t\tif (node->isOpen && node->HasChild())\n2419: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2444,
        "text": "Search only tracks",
        "context_before": "2442: \tfor (ListNodeUnsafe node = recursiveNode->Child(); node != nullptr; node = node->Next())\n2443: \t{",
        "context_after": "2445: \t\t{\n2446: \t\t\tif (startNode == nullptr || node == startNode) // Found start node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2453,
        "text": "Select all nodes between start and end",
        "context_before": "2451: \t\t\t}\n2452: ",
        "context_after": "2454: \t\t\tif (isFind)\n2455: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2530,
        "text": "end if (eHeadElements)",
        "context_before": "2528: \t\t\t\t\t}\n2529: \t\t\t\t}",
        "context_after": "2531: \n2532: \t\t\t\tXmlNode xmlHeadBackground = xmlHead.FirstChild(\"Background\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2542,
        "text": "end if (eHeadBackground)",
        "context_before": "2540: \t\t\t\t\t}\n2541: \t\t\t\t}",
        "context_after": "2543: \t\t\t}\n2544: \t\t\t// end if (eHead)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2544,
        "text": "end if (eHead)",
        "context_before": "2542: \t\t\t\t// end if (eHeadBackground)\n2543: \t\t\t}",
        "context_after": "2545: \n2546: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2563,
        "text": "end if (eSongElements)",
        "context_before": "2561: \t\t\t\t\t}\n2562: \t\t\t\t}",
        "context_after": "2564: \n2565: \t\t\t\tXmlNode xmlTrackBackground = xmlTrack.FirstChild(\"Background\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2575,
        "text": "end if (eSongBackground)",
        "context_before": "2573: \t\t\t\t\t}\n2574: \t\t\t\t}",
        "context_after": "2576: \t\t\t}\n2577: \t\t\t// end if (eSong)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2577,
        "text": "end if (eSong)",
        "context_before": "2575: \t\t\t\t// end if (eSongBackground)\n2576: \t\t\t}",
        "context_after": "2578: \n2579: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2600,
        "text": "end if (eLeftElements)",
        "context_before": "2598: \t\t\t\t\t}\n2599: \t\t\t\t}",
        "context_after": "2601: \n2602: \t\t\t\tXmlNode xmlLeftBackground = xmlLeft.FirstChild(\"Background\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2612,
        "text": "end if (eLeftBackground)",
        "context_before": "2610: \t\t\t\t\t}\n2611: \t\t\t\t}",
        "context_after": "2613: \t\t\t}\n2614: \t\t\t// end if (eLeft)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2614,
        "text": "end if (eLeft)",
        "context_before": "2612: \t\t\t\t// end if (eLeftBackground)\n2613: \t\t\t}",
        "context_after": "2615: \n2616: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2637,
        "text": "end if (eRightElements)",
        "context_before": "2635: \t\t\t\t\t}\n2636: \t\t\t\t}",
        "context_after": "2638: \n2639: \t\t\t\tXmlNode xmlRightBackground = xmlRight.FirstChild(\"Background\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2649,
        "text": "end if (eRightBackground)",
        "context_before": "2647: \t\t\t\t\t}\n2648: \t\t\t\t}",
        "context_after": "2650: \t\t\t}\n2651: \t\t\t// end if (eRight)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2651,
        "text": "end if (eRight)",
        "context_before": "2649: \t\t\t\t// end if (eRightBackground)\n2650: \t\t\t}",
        "context_after": "2652: \n2653: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2713,
        "text": "end if (eMain)",
        "context_before": "2711: \t\t\t}\n2712: \t\t}",
        "context_after": "2714: \t}\n2715: \telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2772,
        "text": "Get number of lines to scroll from Windows settings",
        "context_before": "2770: \tif (skinScroll)\n2771: \t{",
        "context_after": "2773: \t\tUINT lineScroll = 3; // default value\n2774: \t\tSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &lineScroll, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2773,
        "text": "default value",
        "context_before": "2771: \t{\n2772: \t\t// Get number of lines to scroll from Windows settings",
        "context_after": "2774: \t\tSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &lineScroll, 0);\n2775: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2789,
        "text": "iMax - 1 and below + 1 because:",
        "context_before": "2787: \t\t::SetScrollInfo(nativeScroll, SB_CTL, &si, TRUE);\n2788: ",
        "context_after": "2790: \t\t// The SetScrollInfo function performs range checking on the values specified by the nPage and nPos\n2791: \t\t// members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2790,
        "text": "The SetScrollInfo function performs range checking on the values specified by the nPage and nPos",
        "context_before": "2788: \n2789: \t\t// iMax - 1 and below + 1 because:",
        "context_after": "2791: \t\t// members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1.\n2792: \t\t// The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2791,
        "text": "members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1.",
        "context_before": "2789: \t\t// iMax - 1 and below + 1 because:\n2790: \t\t// The SetScrollInfo function performs range checking on the values specified by the nPage and nPos",
        "context_after": "2792: \t\t// The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value\n2793: \t\t// is beyond its range, the function sets it to a value that is just within the range."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2792,
        "text": "The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value",
        "context_before": "2790: \t\t// The SetScrollInfo function performs range checking on the values specified by the nPage and nPos\n2791: \t\t// members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1.",
        "context_after": "2793: \t\t// is beyond its range, the function sets it to a value that is just within the range.\n2794: \t\t// SetScrollInfo: http://msdn.microsoft.com/en-us/library/bb787595(VS.85).aspx"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2793,
        "text": "is beyond its range, the function sets it to a value that is just within the range.",
        "context_before": "2791: \t\t// members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1.\n2792: \t\t// The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value",
        "context_after": "2794: \t\t// SetScrollInfo: http://msdn.microsoft.com/en-us/library/bb787595(VS.85).aspx\n2795: \t\t// i.e. we compensate this 1 pixel otherwise for example SmoothScroll never reach the end on 1 pixel."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2794,
        "text": "SetScrollInfo: http://msdn.microsoft.com/en-us/library/bb787595(VS.85).aspx",
        "context_before": "2792: \t\t// The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value\n2793: \t\t// is beyond its range, the function sets it to a value that is just within the range.",
        "context_after": "2795: \t\t// i.e. we compensate this 1 pixel otherwise for example SmoothScroll never reach the end on 1 pixel.\n2796: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2795,
        "text": "i.e. we compensate this 1 pixel otherwise for example SmoothScroll never reach the end on 1 pixel.",
        "context_before": "2793: \t\t// is beyond its range, the function sets it to a value that is just within the range.\n2794: \t\t// SetScrollInfo: http://msdn.microsoft.com/en-us/library/bb787595(VS.85).aspx",
        "context_after": "2796: \t}\n2797: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2870,
        "text": "Get number of lines to scroll from Windows settings",
        "context_before": "2868: \telse\n2869: \t{",
        "context_after": "2871: \t\tUINT lineScroll = 3; // default value\n2872: \t\tSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &lineScroll, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2871,
        "text": "default value",
        "context_before": "2869: \t{\n2870: \t\t// Get number of lines to scroll from Windows settings",
        "context_after": "2872: \t\tSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &lineScroll, 0);\n2873: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 145,
        "text": "inline ListNodeUnsafe GetRootNodeNowPlaying() {return rootNodePlay;}",
        "context_before": "143: \tinline bool IsNowPlaying() {return (rootNodePlay ? true : false);}\n144: ",
        "context_after": "146: \n147: \tinline void EnableSmoothScroll(bool isEnable) {isSmoothScrollEnabled = isEnable;}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 168,
        "text": "Total number of tracks, only tracks!",
        "context_before": "166: \n167: private:",
        "context_after": "169: \tint heightNodes = 0; // Total height of all nodes\n170: \tint nodeIndent = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 169,
        "text": "Total height of all nodes",
        "context_before": "167: private:\n168: \tint countNodes = 0; // Total number of tracks, only tracks!",
        "context_after": "170: \tint nodeIndent = 0;\n171: \tunsigned backColor = 0x00FFFFFF;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 177,
        "text": "Root node",
        "context_before": "175: \tstd::mt19937 randomEngine;\n176: ",
        "context_after": "178: \tListNodeSafe rootNodePlay; // Root node of \"Now Playing\" view\n179: \tListNodeSafe focusNode; // Focused node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 178,
        "text": "Root node of \"Now Playing\" view",
        "context_before": "176: \n177:     ListNodeSafe rootNode; // Root node",
        "context_after": "179: \tListNodeSafe focusNode; // Focused node\n180: \tListNodeSafe playNode; // Playing node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 179,
        "text": "Focused node",
        "context_before": "177:     ListNodeSafe rootNode; // Root node\n178: \tListNodeSafe rootNodePlay; // Root node of \"Now Playing\" view",
        "context_after": "180: \tListNodeSafe playNode; // Playing node\n181: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 180,
        "text": "Playing node",
        "context_before": "178: \tListNodeSafe rootNodePlay; // Root node of \"Now Playing\" view\n179: \tListNodeSafe focusNode; // Focused node",
        "context_after": "181: \n182: \tListNodeSafe shiftNode;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 184,
        "text": "Variables below used to restore \"Now Playing\" view",
        "context_before": "182: \tListNodeSafe shiftNode;\n183: ",
        "context_after": "185: \t//ListNodeSafe rootNodePlay; // Root node of \"Now Playing\" view\n186: \tListNodeSafe focusNodePlay;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 185,
        "text": "ListNodeSafe rootNodePlay; // Root node of \"Now Playing\" view",
        "context_before": "183: \n184: \t// Variables below used to restore \"Now Playing\" view",
        "context_after": "186: \tListNodeSafe focusNodePlay;\n187: \tstd::vector<ListNodeSafe> selectedNodesPlay;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 212,
        "text": "bool isSwapElement = false;",
        "context_before": "210: \tbool isDragElement = false;\n211: \tbool isMoveElement = false;",
        "context_after": "213: \n214: \tCPoint ptPress;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 228,
        "text": "Native Windows scroll",
        "context_before": "226: \tbool isHeadUpperCase = false;\n227: ",
        "context_after": "229: \tstd::unique_ptr<SkinScroll> skinScroll; // Skin scroll, if nullptr use native\n230: \tint scrollWidth = 0; // Scroll width, if 0 then scroll is hidden"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 229,
        "text": "Skin scroll, if nullptr use native",
        "context_before": "227: \n228: \tHWND nativeScroll = NULL; // Native Windows scroll",
        "context_after": "230: \tint scrollWidth = 0; // Scroll width, if 0 then scroll is hidden\n231: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 230,
        "text": "Scroll width, if 0 then scroll is hidden",
        "context_before": "228: \tHWND nativeScroll = NULL; // Native Windows scroll\n229: \tstd::unique_ptr<SkinScroll> skinScroll; // Skin scroll, if nullptr use native",
        "context_after": "231: \n232: \tbool ScrollToNode(ListNodeUnsafe node, int indent = 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 236,
        "text": "Helper functions for scroll (native and skin)",
        "context_before": "234: \tbool ScrollToEnd();\n235: ",
        "context_after": "237: \t// The class interact with scroll throught these functions.\n238: \t// These functions does not interact with class only with scroll,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 237,
        "text": "The class interact with scroll throught these functions.",
        "context_before": "235: \n236: \t// Helper functions for scroll (native and skin)",
        "context_after": "238: \t// These functions does not interact with class only with scroll,\n239: \t// only exception in HScrollMessage when native scroll."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 238,
        "text": "These functions does not interact with class only with scroll,",
        "context_before": "236: \t// Helper functions for scroll (native and skin)\n237: \t// The class interact with scroll throught these functions.",
        "context_after": "239: \t// only exception in HScrollMessage when native scroll.\n240: \tint HScrollGetPos();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 252,
        "text": "Smooth scrolling",
        "context_before": "250: \tint HScrollMessageGetPosOld();\n251: ",
        "context_after": "253: \tbool isSmoothScrollEnabled = true;\n254: \tint smoothScrollAcc = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 261,
        "text": "Track height",
        "context_before": "259: \tvoid StopSmoothScroll();\n260: ",
        "context_after": "262: \tint headHeight = 0; // Header height\n263: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 262,
        "text": "Header height",
        "context_before": "260: \n261: \tint trackHeight = 0; // Track height",
        "context_after": "263: \n264: \tint leftHeight = 0; // Left pane height"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 264,
        "text": "Left pane height",
        "context_before": "262: \tint headHeight = 0; // Header height\n263: ",
        "context_after": "265: \tint leftWidth = 0; // Left pane width\n266: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 265,
        "text": "Left pane width",
        "context_before": "263: \n264: \tint leftHeight = 0; // Left pane height",
        "context_after": "266: \n267: \tint rightHeight = 0; // Right pane height"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 267,
        "text": "Right pane height",
        "context_before": "265: \tint leftWidth = 0; // Left pane width\n266: ",
        "context_after": "268: \tint rightWidth = 0; // Right pane width\n269: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 268,
        "text": "Right pane width",
        "context_before": "266: \n267: \tint rightHeight = 0; // Right pane height",
        "context_after": "269: \n270: \tbool isLeftShow = false; // Show left pane?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 270,
        "text": "Show left pane?",
        "context_before": "268: \tint rightWidth = 0; // Right pane width\n269: ",
        "context_after": "271: \tbool isRightShow = false; // Show right pane?\n272: \tbool isLeftAlways = true; // Always show left pane?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 271,
        "text": "Show right pane?",
        "context_before": "269: \n270: \tbool isLeftShow = false; // Show left pane?",
        "context_after": "272: \tbool isLeftAlways = true; // Always show left pane?\n273: \tbool isRightAlways = true; // Always show right pane?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 272,
        "text": "Always show left pane?",
        "context_before": "270: \tbool isLeftShow = false; // Show left pane?\n271: \tbool isRightShow = false; // Show right pane?",
        "context_after": "273: \tbool isRightAlways = true; // Always show right pane?\n274: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 273,
        "text": "Always show right pane?",
        "context_before": "271: \tbool isRightShow = false; // Show right pane?\n272: \tbool isLeftAlways = true; // Always show left pane?",
        "context_after": "274: \n275: \tbool isLeftOver = false; // Left pane overlap tracks?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 275,
        "text": "Left pane overlap tracks?",
        "context_before": "273: \tbool isRightAlways = true; // Always show right pane?\n274: ",
        "context_after": "276: \tbool isRightOver = false; // Right pane overlap tracks?\n277: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 276,
        "text": "Right pane overlap tracks?",
        "context_before": "274: \n275: \tbool isLeftOver = false; // Left pane overlap tracks?",
        "context_after": "277: \n278: \tExImage imageBack; // Background image (expiremental)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 278,
        "text": "Background image (expiremental)",
        "context_before": "276: \tbool isRightOver = false; // Right pane overlap tracks?\n277: ",
        "context_after": "279: \n280: \tstd::vector<ListNodeUnsafe> visibleNodes;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 35,
        "text": "Load type",
        "context_before": "33: bool SkinListBack::LoadSkin(XmlNode& xmlNode, std::wstring& path, ZipFile* zipFile)\n34: {",
        "context_after": "36: \ttype = GetType(xmlNode);\n37: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 41,
        "text": "Load default element",
        "context_before": "39: \t\treturn false;\n40: ",
        "context_after": "42: \tif (type == Type::Image)\n43: \t\tLoadImage(xmlNode, path, zipFile, defElm);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 49,
        "text": "Load default position",
        "context_before": "47: \t\tLoadFill(xmlNode, defElm);\n48: ",
        "context_after": "50: \tLoadPosition(xmlNode, defPos, defElm);\n51: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 52,
        "text": "Load states",
        "context_before": "50: \tLoadPosition(xmlNode, defPos, defElm);\n51: ",
        "context_after": "53: \tfor (XmlNode xmlState = xmlNode.FirstChild(\"State\"); xmlState; xmlState = xmlState.NextChild(\"State\"))\n54: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 63,
        "text": "Add new state",
        "context_before": "61: void SkinListBack::LoadState(XmlNode& xmlNode, std::wstring& path, ZipFile* zipFile, XmlNode& xmlState)\n62: {",
        "context_after": "64: \tlistState.push_back(structState());\n65: \tstructState& state2 = listState.back();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 73,
        "text": "Reset states to find out what loaded",
        "context_before": "71: \tstructElm& elm2 = *listElm.back();\n72: ",
        "context_after": "74: \tstate2.stateSelect = 0;\n75: \tstate2.statePlay = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 93,
        "text": "Select state is not loaded, use for all",
        "context_before": "91: \t\tif (state == 1) state2.stateSelect |= SkinListNode::StateFlag::Focus;\n92: \t}",
        "context_after": "94: \tif (state2.stateSelect == 0)\n95: \t\tstate2.stateSelect = SkinListNode::StateFlag::Normal | SkinListNode::StateFlag::Select | SkinListNode::StateFlag::Focus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 109,
        "text": "Play state is not loaded, use for all",
        "context_before": "107: \t\tif (state == 1) state2.statePlay |= SkinListNode::StateFlag::Pause;\n108: \t}",
        "context_after": "110: \tif (state2.statePlay == 0)\n111: \t\tstate2.statePlay = SkinListNode::StateFlag::Stop | SkinListNode::StateFlag::Play | SkinListNode::StateFlag::Pause;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 121,
        "text": "Line state is not loaded, use for all",
        "context_before": "119: \t\tif (state == 1) state2.stateLine |= SkinListNode::StateFlag::Line2;\n120: \t}",
        "context_after": "122: \tif (state2.stateLine == 0)\n123: \t\tstate2.stateLine = SkinListNode::StateFlag::Line1 | SkinListNode::StateFlag::Line2;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 138,
        "text": "Load element for the state, if empty load default",
        "context_before": "136: \n137: ",
        "context_after": "139: \tif (type == Type::Image)\n140: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 142,
        "text": "elm2 = defElm",
        "context_before": "140: \t{\n141: \t\tif (!LoadImage(xmlState, path, zipFile, elm2))",
        "context_after": "143: \t}\n144: \telse if (type == Type::Line)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 147,
        "text": "elm2 = defElm",
        "context_before": "145: \t{\n146: \t\tif (!LoadLine(xmlState, elm2))",
        "context_after": "148: \t}\n149: \telse if (type == Type::Fill)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 152,
        "text": "elm2 = defElm",
        "context_before": "150: \t{\n151: \t\tif (!LoadFill(xmlState, elm2))",
        "context_after": "153: \t}\n154: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 155,
        "text": "Load position for the state, if empty load default",
        "context_before": "153: \t}\n154: ",
        "context_after": "156: \tif (!LoadPosition(xmlState, pos2, elm2))\n157: \t\tLoadPosition(xmlNode, pos2, elm2); // pos2 = defPos"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 157,
        "text": "pos2 = defPos",
        "context_before": "155: \t// Load position for the state, if empty load default\n156: \tif (!LoadPosition(xmlState, pos2, elm2))",
        "context_after": "158: }\n159: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 174,
        "text": "Default",
        "context_before": "172: bool SkinListBack::LoadPosition(XmlNode& xmlNode, structPos& pos, structElm& elm)\n173: {",
        "context_after": "175: \tpos.left   = 0;\n176: \tpos.right  = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 214,
        "text": "Default",
        "context_before": "212: \t\t\t\tpos.isWidth = true;\n213: \t\t}",
        "context_after": "215: \t\t{\n216: \t\t\tpos.isLeft = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 238,
        "text": "Default",
        "context_before": "236: \t\t\t\tpos.isHeight = true;\n237: \t\t}",
        "context_after": "239: \t\t{\n240: \t\t\tpos.isTop = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 280,
        "text": "Default",
        "context_before": "278: \t\tconst char* strColor = xmlLine.AttributeRaw(\"Color\");\n279: ",
        "context_after": "281: \n282: \t\tif (strColor)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 306,
        "text": "Default",
        "context_before": "304: \t\tconst char* strColor = xmlRect.AttributeRaw(\"Color\");\n305: ",
        "context_after": "307: \n308: \t\tif (strColor)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 332,
        "text": "If element or position for the state exists then use it else use default",
        "context_before": "330: \tstructElm* elm = &defElm;\n331: ",
        "context_after": "333: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n334: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 335,
        "text": "Check all states",
        "context_before": "333: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n334: \t{",
        "context_after": "336: \t\tif ((listState[i].stateLibrary & stateLibrary) &&\n337: \t\t\t(listState[i].stateSelect & stateSelect) &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 352,
        "text": "Left location",
        "context_before": "350: \tCRect rcDraw;\n351: ",
        "context_after": "353: \t{\n354: \t\trcDraw.left = rc.left + pos->left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 356,
        "text": "Fixed width",
        "context_before": "354: \t\trcDraw.left = rc.left + pos->left;\n355: ",
        "context_after": "357: \t\t\trcDraw.right = rcDraw.left + pos->width;\n358: \t\telse // To right"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 358,
        "text": "To right",
        "context_before": "356: \t\tif (pos->isWidth) // Fixed width\n357: \t\t\trcDraw.right = rcDraw.left + pos->width;",
        "context_after": "359: \t\t\trcDraw.right = rc.right - pos->right;\n360: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 361,
        "text": "Right location",
        "context_before": "359: \t\t\trcDraw.right = rc.right - pos->right;\n360: \t}",
        "context_after": "362: \t{\n363: \t\trcDraw.left = rc.right - pos->width - pos->right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 367,
        "text": "Top location",
        "context_before": "365: \t}\n366: ",
        "context_after": "368: \t{\n369: \t\trcDraw.top = rc.top + pos->top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 371,
        "text": "Fixed height",
        "context_before": "369: \t\trcDraw.top = rc.top + pos->top;\n370: ",
        "context_after": "372: \t\t\trcDraw.bottom = rcDraw.top + pos->height;\n373: \t\telse // To bottom"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 373,
        "text": "To bottom",
        "context_before": "371: \t\tif (pos->isHeight) // Fixed height\n372: \t\t\trcDraw.bottom = rcDraw.top + pos->height;",
        "context_after": "374: \t\t\trcDraw.bottom = rc.bottom - pos->bottom;\n375: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.cpp",
        "line": 376,
        "text": "Bottom location",
        "context_before": "374: \t\t\trcDraw.bottom = rc.bottom - pos->bottom;\n375: \t}",
        "context_after": "377: \t{\n378: \t\trcDraw.top = rc.bottom - pos->height - pos->bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.h",
        "line": 32,
        "text": "Image type",
        "context_before": "30: \tSkinListBack& operator=(const SkinListBack&) = delete;\n31: ",
        "context_after": "33: \t{\n34: \t\tNone  = -404,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.h",
        "line": 37,
        "text": "Outline rectangle",
        "context_before": "35: \n36: \t\tImage = 0,  // Image",
        "context_after": "38: \t\tFill  = 2   // Filled rectangle\n39: \t};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.h",
        "line": 38,
        "text": "Filled rectangle",
        "context_before": "36: \t\tImage = 0,  // Image\n37: \t\tLine  = 1,  // Outline rectangle",
        "context_after": "39: \t};\n40: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.h",
        "line": 41,
        "text": "Default size",
        "context_before": "39: \t};\n40: ",
        "context_after": "42: \t{\n43: \t\tstatic const int Width  = 20;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.h",
        "line": 50,
        "text": "Left indent",
        "context_before": "48: \t{\n49: \t\tbool isLoad;",
        "context_after": "51: \t\tint right;   // Right indent\n52: \t\tint top;     // Top indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.h",
        "line": 51,
        "text": "Right indent",
        "context_before": "49: \t\tbool isLoad;\n50: \t\tint left;    // Left indent",
        "context_after": "52: \t\tint top;     // Top indent\n53: \t\tint bottom;  // Bottom indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.h",
        "line": 52,
        "text": "Top indent",
        "context_before": "50: \t\tint left;    // Left indent\n51: \t\tint right;   // Right indent",
        "context_after": "53: \t\tint bottom;  // Bottom indent\n54: \t\tint width;   // Width"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.h",
        "line": 53,
        "text": "Bottom indent",
        "context_before": "51: \t\tint right;   // Right indent\n52: \t\tint top;     // Top indent",
        "context_after": "54: \t\tint width;   // Width\n55: \t\tint height;  // Height"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.h",
        "line": 55,
        "text": "Height",
        "context_before": "53: \t\tint bottom;  // Bottom indent\n54: \t\tint width;   // Width",
        "context_after": "56: \t\tbool isLeft;   // Left indent in priority (else right indent)\n57: \t\tbool isTop;    // Top indent in priority (else bottom indent)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.h",
        "line": 56,
        "text": "Left indent in priority (else right indent)",
        "context_before": "54: \t\tint width;   // Width\n55: \t\tint height;  // Height",
        "context_after": "57: \t\tbool isTop;    // Top indent in priority (else bottom indent)\n58: \t\tbool isWidth;  // Width in priority (else right indent)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.h",
        "line": 57,
        "text": "Top indent in priority (else bottom indent)",
        "context_before": "55: \t\tint height;  // Height\n56: \t\tbool isLeft;   // Left indent in priority (else right indent)",
        "context_after": "58: \t\tbool isWidth;  // Width in priority (else right indent)\n59: \t\tbool isHeight; // Height in priority (else bottom indent)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.h",
        "line": 58,
        "text": "Width in priority (else right indent)",
        "context_before": "56: \t\tbool isLeft;   // Left indent in priority (else right indent)\n57: \t\tbool isTop;    // Top indent in priority (else bottom indent)",
        "context_after": "59: \t\tbool isHeight; // Height in priority (else bottom indent)\n60: \t}defPos;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.h",
        "line": 59,
        "text": "Height in priority (else bottom indent)",
        "context_before": "57: \t\tbool isTop;    // Top indent in priority (else bottom indent)\n58: \t\tbool isWidth;  // Width in priority (else right indent)",
        "context_after": "60: \t}defPos;\n61: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListBack.h",
        "line": 79,
        "text": "State arrays",
        "context_before": "77: \tType type = Type::None;\n78: ",
        "context_after": "80: \tstd::vector<structState> listState;\n81: \tstd::vector<structPos> listPos;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 42,
        "text": "Load type",
        "context_before": "40: bool SkinListElement::LoadSkin(XmlNode& xmlNode, std::wstring& path, ZipFile* zipFile)\n41: {",
        "context_after": "43: \ttype = GetType(xmlNode);\n44: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 48,
        "text": "Load default element",
        "context_before": "46: \t\treturn false;\n47: ",
        "context_after": "49: \tif ((int)type >= 0) // Font\n50: \t\tLoadFont(xmlNode, path, defElm);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 58,
        "text": "Load default position",
        "context_before": "56: \t\tLoadFont(xmlNode, path, defElm);\n57: ",
        "context_after": "59: \tLoadPosition(xmlNode, defPos);\n60: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 61,
        "text": "Load states",
        "context_before": "59: \tLoadPosition(xmlNode, defPos);\n60: ",
        "context_after": "62: \tfor (XmlNode xmlState = xmlNode.FirstChild(\"State\"); xmlState; xmlState = xmlState.NextChild(\"State\"))\n63: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 78,
        "text": "Add new state",
        "context_before": "76: void SkinListElement::LoadState(XmlNode& xmlNode, std::wstring& path, ZipFile* zipFile, XmlNode& xmlState)\n77: {",
        "context_after": "79: \tlistState.push_back(structState());\n80: \tstructState& state2 = listState.back();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 90,
        "text": "Reset states to find out what loaded",
        "context_before": "88: \telm2.font = NULL;\n89: ",
        "context_after": "91: \tstate2.stateSelect = 0;\n92: \tstate2.statePlay = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 110,
        "text": "Select state is not loaded, use for all",
        "context_before": "108: \t\tif (state == 1) state2.stateSelect |= SkinListNode::StateFlag::Focus;\n109: \t}",
        "context_after": "111: \tif (state2.stateSelect == 0)\n112: \t\tstate2.stateSelect = SkinListNode::StateFlag::Normal | SkinListNode::StateFlag::Select | SkinListNode::StateFlag::Focus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 126,
        "text": "Play state is not loaded, use for all",
        "context_before": "124: \t\tif (state == 1) state2.statePlay |= SkinListNode::StateFlag::Pause;\n125: \t}",
        "context_after": "127: \tif (state2.statePlay == 0)\n128: \t\tstate2.statePlay = SkinListNode::StateFlag::Stop | SkinListNode::StateFlag::Play | SkinListNode::StateFlag::Pause;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 138,
        "text": "Line state is not loaded, use for all",
        "context_before": "136: \t\tif (state == 1) state2.stateLine |= SkinListNode::StateFlag::Line2;\n137: \t}",
        "context_after": "139: \tif (state2.stateLine == 0)\n140: \t\tstate2.stateLine = SkinListNode::StateFlag::Line1 | SkinListNode::StateFlag::Line2;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 156,
        "text": "Load element for the state, if empty load default",
        "context_before": "154: \n155: ",
        "context_after": "157: \tif ((int)type >= 0) // Font\n158: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 160,
        "text": "elm2 = defElm",
        "context_before": "158: \t{\n159: \t\tif (!LoadFont(xmlState, path, elm2))",
        "context_after": "161: \t}\n162: \telse if (type == Type::Rating)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 165,
        "text": "elm2 = defElm",
        "context_before": "163: \t{\n164: \t\tif (!LoadRating(xmlState, path, zipFile, elm2))",
        "context_after": "166: \t}\n167: \telse if (type == Type::Cover)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 170,
        "text": "elm2 = defElm",
        "context_before": "168: \t{\n169: \t\tif (!LoadCover(xmlState, path, zipFile, elm2))",
        "context_after": "171: \t}\n172: \telse if (type == Type::ArtistAlbum || type == Type::ArtistTitle)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 175,
        "text": "elm2 = defElm",
        "context_before": "173: \t{\n174: \t\tif (!LoadFont(xmlState, path, elm2))",
        "context_after": "176: \t}\n177: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 178,
        "text": "Load position for the state, if empty load default",
        "context_before": "176: \t}\n177: ",
        "context_after": "179: \tif (!LoadPosition(xmlState, pos2))\n180: \t\tLoadPosition(xmlNode, pos2); // pos2 = defPos"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 180,
        "text": "pos2 = defPos",
        "context_before": "178: \t// Load position for the state, if empty load default\n179: \tif (!LoadPosition(xmlState, pos2))",
        "context_after": "181: }\n182: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 215,
        "text": "Default",
        "context_before": "213: bool SkinListElement::LoadPosition(XmlNode& xmlNode, structPos& pos)\n214: {",
        "context_after": "216: \tpos.left   = 0;\n217: \tpos.right  = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 221,
        "text": "pos.height = 0;",
        "context_before": "219: \tpos.bottom = 0;\n220: \tpos.width  = 0;",
        "context_after": "222: \tpos.isLeft   = true;\n223: \tpos.isTop    = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 225,
        "text": "pos.height = true;",
        "context_before": "223: \tpos.isTop    = true;\n224: \tpos.isWidth  = true;",
        "context_after": "226: \n227: \tXmlNode xmlPosition = xmlNode.FirstChild(\"Position\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 247,
        "text": "Default",
        "context_before": "245: \t\t\t\tpos.isWidth = true;\n246: \t\t}",
        "context_after": "248: \t\t{\n249: \t\t\tpos.isLeft = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 259,
        "text": "Default",
        "context_before": "257: \t\telse if (xmlPosition.Attribute(\"Bottom\", &pos.bottom))\n258: \t\t\tpos.isTop = false;",
        "context_after": "260: \t\t\tpos.isTop = true;\n261: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 286,
        "text": "Default",
        "context_before": "284: \t\telm.font = ExImage::CreateElementFont(fname, fsize, fbold, fitalic, fclear);\n285: ",
        "context_after": "287: \t\txmlFont.Attribute(\"Align\", &elm.align);\n288: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 291,
        "text": "Default",
        "context_before": "289: \t\tconst char* strColor = xmlFont.AttributeRaw(\"Color\");\n290: ",
        "context_after": "292: \n293: \t\tif (strColor)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 303,
        "text": "Default",
        "context_before": "301: \t\tconst char* strColor2 = xmlFont.AttributeRaw(\"Color2\");\n302: ",
        "context_after": "304: \n305: \t\tif (strColor2)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 431,
        "text": "If element or position for the state exists then use it else use default",
        "context_before": "429: \tstructElm* elm = &defElm;\n430: ",
        "context_after": "432: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n433: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 434,
        "text": "Check all states",
        "context_before": "432: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n433: \t{",
        "context_after": "435: \t\tif ((listState[i].stateLibrary & stateLibrary) &&\n436: \t\t\t(listState[i].stateSelect & stateSelect) &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 449,
        "text": "Get text size",
        "context_before": "447: \t\treturn;\n448: ",
        "context_after": "450: \tHGDIOBJ oldFont = ::SelectObject(dc, elm->font);\n451: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 457,
        "text": "Left location",
        "context_before": "455: \tCRect rcText;\n456: ",
        "context_after": "458: \t{\n459: \t\trcText.left = rc.left + pos->left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 461,
        "text": "Fixed width",
        "context_before": "459: \t\trcText.left = rc.left + pos->left;\n460: ",
        "context_after": "462: \t\t\trcText.right = rcText.left + pos->width; //szText.cx;\n463: \t\telse // To right"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 462,
        "text": "szText.cx;",
        "context_before": "460: \n461: \t\tif (pos->isWidth) // Fixed width",
        "context_after": "463: \t\telse // To right\n464: \t\t\trcText.right = rc.right - pos->right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 463,
        "text": "To right",
        "context_before": "461: \t\tif (pos->isWidth) // Fixed width\n462: \t\t\trcText.right = rcText.left + pos->width; //szText.cx;",
        "context_after": "464: \t\t\trcText.right = rc.right - pos->right;\n465: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 466,
        "text": "Right location",
        "context_before": "464: \t\t\trcText.right = rc.right - pos->right;\n465: \t}",
        "context_after": "467: \t{\n468: \t\trcText.left = rc.right - szText.cx - pos->right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 472,
        "text": "Top location",
        "context_before": "470: \t}\n471: ",
        "context_after": "473: \t{\n474: \t\trcText.top = rc.top + pos->top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 477,
        "text": "Bottom location",
        "context_before": "475: \t\trcText.bottom = rcText.top + szText.cy;\n476: \t}",
        "context_after": "478: \t{\n479: \t\trcText.top = rc.bottom - szText.cy - pos->bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 487,
        "text": "TEXTMETRIC tm;",
        "context_before": "485: \t::SetTextColor(dc, elm->color);\n486: ",
        "context_after": "488: //\t::GetTextMetricsW(dc, &tm);\n489: //\trcText.top -= tm.tmExternalLeading;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 488,
        "text": "::GetTextMetricsW(dc, &tm);",
        "context_before": "486: \n487: //\tTEXTMETRIC tm;",
        "context_after": "489: //\trcText.top -= tm.tmExternalLeading;\n490: //\tszText.cx += tm.tmOverhang;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 489,
        "text": "rcText.top -= tm.tmExternalLeading;",
        "context_before": "487: //\tTEXTMETRIC tm;\n488: //\t::GetTextMetricsW(dc, &tm);",
        "context_after": "490: //\tszText.cx += tm.tmOverhang;\n491: //\tszText.cy = tm.tmHeight - tm.tmExternalLeading;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 490,
        "text": "szText.cx += tm.tmOverhang;",
        "context_before": "488: //\t::GetTextMetricsW(dc, &tm);\n489: //\trcText.top -= tm.tmExternalLeading;",
        "context_after": "491: //\tszText.cy = tm.tmHeight - tm.tmExternalLeading;\n492: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 491,
        "text": "szText.cy = tm.tmHeight - tm.tmExternalLeading;",
        "context_before": "489: //\trcText.top -= tm.tmExternalLeading;\n490: //\tszText.cx += tm.tmOverhang;",
        "context_after": "492: \n493: \t//if (pos->right)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 493,
        "text": "if (pos->right)",
        "context_before": "491: //\tszText.cy = tm.tmHeight - tm.tmExternalLeading;\n492: ",
        "context_after": "494: \t//{\n495: \t\tif (elm->align == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 496,
        "text": "|DT_VCENTER",
        "context_before": "494: \t//{\n495: \t\tif (elm->align == 0)",
        "context_after": "498: \t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_RIGHT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n499: \t\telse // if (elm->align == 2)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 498,
        "text": "|DT_VCENTER",
        "context_before": "496: \t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n497: \t\telse if (elm->align == 1)",
        "context_after": "500: \t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_CENTER|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n501: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 499,
        "text": "if (elm->align == 2)",
        "context_before": "497: \t\telse if (elm->align == 1)\n498: \t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_RIGHT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);",
        "context_after": "500: \t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_CENTER|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n501: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 500,
        "text": "|DT_VCENTER",
        "context_before": "498: \t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_RIGHT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n499: \t\telse // if (elm->align == 2)",
        "context_after": "502: \t//else\n503: \t//\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 503,
        "text": "::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);",
        "context_before": "501: \t//}\n502: \t//else",
        "context_after": "504: \n505: /*\tDTTOPTS opt = {};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 536,
        "text": "If element or position for the state exists then use it else use default",
        "context_before": "534: \tstructElm* elm = &defElm;\n535: ",
        "context_after": "537: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n538: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 539,
        "text": "Check all states",
        "context_before": "537: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n538: \t{",
        "context_after": "540: \t\tif ((listState[i].stateLibrary & stateLibrary) &&\n541: \t\t\t(listState[i].stateSelect & stateSelect) &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 554,
        "text": "Get text size",
        "context_before": "552: \t\treturn;\n553: ",
        "context_after": "555: \tHGDIOBJ oldFont = ::SelectObject(dc, elm->font);\n556: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 562,
        "text": "Left location",
        "context_before": "560: \tCRect rcText;\n561: ",
        "context_after": "563: \t{\n564: \t\trcText.left = rc.left + pos->left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 566,
        "text": "Fixed width",
        "context_before": "564: \t\trcText.left = rc.left + pos->left;\n565: ",
        "context_after": "567: \t\t\trcText.right = rcText.left + pos->width; //szText.cx;\n568: \t\telse // To right"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 567,
        "text": "szText.cx;",
        "context_before": "565: \n566: \t\tif (pos->isWidth) // Fixed width",
        "context_after": "568: \t\telse // To right\n569: \t\t\trcText.right = rc.right - pos->right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 568,
        "text": "To right",
        "context_before": "566: \t\tif (pos->isWidth) // Fixed width\n567: \t\t\trcText.right = rcText.left + pos->width; //szText.cx;",
        "context_after": "569: \t\t\trcText.right = rc.right - pos->right;\n570: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 571,
        "text": "Right location",
        "context_before": "569: \t\t\trcText.right = rc.right - pos->right;\n570: \t}",
        "context_after": "572: \t{\n573: \t\trcText.left = rc.right - szText.cx - pos->right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 577,
        "text": "Top location",
        "context_before": "575: \t}\n576: ",
        "context_after": "578: \t{\n579: \t\trcText.top = rc.top + pos->top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 582,
        "text": "Bottom location",
        "context_before": "580: \t\trcText.bottom = rcText.top + szText.cy;\n581: \t}",
        "context_after": "583: \t{\n584: \t\trcText.top = rc.bottom - szText.cy - pos->bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 600,
        "text": "if (pos->right > 0)",
        "context_before": "598: \t\tCRect rcText2 = CRect(rcDash.right, rcText.top, rcText.right, rcText.bottom);\n599: ",
        "context_after": "601: //\t\t{\n602: \t\t\t::SetTextColor(dc, elm->color);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 603,
        "text": "::SetTextAlign(dc, TA_UPDATECP);",
        "context_before": "601: //\t\t{\n602: \t\t\t::SetTextColor(dc, elm->color);",
        "context_after": "604: \n605: \t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 605,
        "text": "|DT_VCENTER",
        "context_before": "603: \t\t\t//::SetTextAlign(dc, TA_UPDATECP);\n604: ",
        "context_after": "607: \t\t\t//if (rcDash.right < rcText.right) // If there is a place to draw the second text\n608: \t\t\tif (rcDash.right + szDash.cx < rcText.right) // If there is a place to draw the second text"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 607,
        "text": "if (rcDash.right < rcText.right) // If there is a place to draw the second text",
        "context_before": "605: \t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n606: ",
        "context_after": "608: \t\t\tif (rcDash.right + szDash.cx < rcText.right) // If there is a place to draw the second text\n609: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 608,
        "text": "If there is a place to draw the second text",
        "context_before": "606: \n607: \t\t\t//if (rcDash.right < rcText.right) // If there is a place to draw the second text",
        "context_after": "609: \t\t\t{\n610: \t\t\t\t::DrawText(dc, dash.c_str(), (int)dash.size(), rcDash, DT_LEFT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 610,
        "text": "|DT_VCENTER",
        "context_before": "608: \t\t\tif (rcDash.right + szDash.cx < rcText.right) // If there is a place to draw the second text\n609: \t\t\t{",
        "context_after": "612: \t\t\t\t::SetTextColor(dc, elm->color2);\n613: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 614,
        "text": "|DT_VCENTER",
        "context_before": "612: \t\t\t\t::SetTextColor(dc, elm->color2);\n613: ",
        "context_after": "616: //\t\t}\n617: //\t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 619,
        "text": "::SetTextColor(dc, elm->color);",
        "context_before": "617: //\t\telse\n618: //\t\t{",
        "context_after": "620: //\n621: //\t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 621,
        "text": "::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);",
        "context_before": "619: //\t\t\t::SetTextColor(dc, elm->color);\n620: //",
        "context_after": "622: //\t\t\t::DrawText(dc, dash.c_str(), (int)dash.size(), rcDash, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n623: //"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 622,
        "text": "::DrawText(dc, dash.c_str(), (int)dash.size(), rcDash, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);",
        "context_before": "620: //\n621: //\t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);",
        "context_after": "623: //\n624: //\t\t\t::SetTextColor(dc, elm->color2);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 624,
        "text": "::SetTextColor(dc, elm->color2);",
        "context_before": "622: //\t\t\t::DrawText(dc, dash.c_str(), (int)dash.size(), rcDash, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n623: //",
        "context_after": "625: //\n626: //\t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText2, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 626,
        "text": "::DrawText(dc, text.c_str(), (int)text.size(), rcText2, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);",
        "context_before": "624: //\t\t\t::SetTextColor(dc, elm->color2);\n625: //",
        "context_after": "627: //\t\t}\n628: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 633,
        "text": "if (pos->right > 0)",
        "context_before": "631: \t\t::SetTextColor(dc, elm->color2);\n632: ",
        "context_after": "634: \t\t\t::DrawText(dc, text2.c_str(), (int)text2.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n635: \t\t//else"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 634,
        "text": "|DT_VCENTER",
        "context_before": "632: \n633: \t\t//if (pos->right > 0)",
        "context_after": "636: \t\t//\t::DrawText(dc, text2.c_str(), (int)text2.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n637: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 636,
        "text": "::DrawText(dc, text2.c_str(), (int)text2.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);",
        "context_before": "634: \t\t\t::DrawText(dc, text2.c_str(), (int)text2.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n635: \t\t//else",
        "context_after": "637: \t}\n638: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 650,
        "text": "If element or position for the state exists then use it else use default",
        "context_before": "648: \tstructElm* elm = &defElm;\n649: ",
        "context_after": "651: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n652: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 653,
        "text": "Check all states",
        "context_before": "651: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n652: \t{",
        "context_after": "654: \t\tif ((listState[i].stateLibrary & stateLibrary) &&\n655: \t\t\t(listState[i].stateSelect & stateSelect) &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 675,
        "text": "Left location",
        "context_before": "673: \tCRect rcDraw;\n674: ",
        "context_after": "676: \t{\n677: \t\trcDraw.left = rc.left + pos->left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 680,
        "text": "Right location",
        "context_before": "678: \t\trcDraw.right = rcDraw.left + width5;\n679: \t}",
        "context_after": "681: \t{\n682: \t\trcDraw.left = rc.right - width5 - pos->right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 686,
        "text": "Top location",
        "context_before": "684: \t}\n685: ",
        "context_after": "687: \t{\n688: \t\trcDraw.top = rc.top + pos->top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 691,
        "text": "Bottom location",
        "context_before": "689: \t\trcDraw.bottom = rcDraw.top + height;\n690: \t}",
        "context_after": "692: \t{\n693: \t\trcDraw.top = rc.bottom - height - pos->bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 715,
        "text": "If element or position for the state exists then use it else use default",
        "context_before": "713: \tstructElm* elm = &defElm;\n714: ",
        "context_after": "716: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n717: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 718,
        "text": "Check all states",
        "context_before": "716: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n717: \t{",
        "context_after": "719: \t\tif ((listState[i].stateLibrary & stateLibrary) &&\n720: \t\t\t(listState[i].stateSelect & stateSelect) &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 740,
        "text": "Left location",
        "context_before": "738: \tCRect rcDraw;\n739: ",
        "context_after": "741: \t{\n742: \t\trcDraw.left = rc.left + pos->left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 745,
        "text": "Right location",
        "context_before": "743: \t\trcDraw.right = rcDraw.left + width5;\n744: \t}",
        "context_after": "746: \t{\n747: \t\trcDraw.left = rc.right - width5 - pos->right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 751,
        "text": "Top location",
        "context_before": "749: \t}\n750: ",
        "context_after": "752: \t{\n753: \t\trcDraw.top = rc.top + pos->top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 756,
        "text": "Bottom location",
        "context_before": "754: \t\trcDraw.bottom = rcDraw.top + height;\n755: \t}",
        "context_after": "757: \t{\n758: \t\trcDraw.top = rc.bottom - height - pos->bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 762,
        "text": "Check which star is clicked",
        "context_before": "760: \t}\n761: ",
        "context_after": "763: \tif (rcDraw.PtInRect(point))\n764: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 787,
        "text": "If element or position for the state exists then use it else use default",
        "context_before": "785: \tstructElm* elm = &defElm;\n786: ",
        "context_after": "788: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n789: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 790,
        "text": "Check all states",
        "context_before": "788: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n789: \t{",
        "context_after": "791: \t\tif ((listState[i].stateLibrary & stateLibrary) &&\n792: \t\t\t(listState[i].stateSelect & stateSelect) &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 810,
        "text": "Left location",
        "context_before": "808: \tCRect rcDraw;\n809: ",
        "context_after": "811: \t{\n812: \t\trcDraw.left = rc.left + pos->left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 815,
        "text": "Right location",
        "context_before": "813: \t\trcDraw.right = rcDraw.left + width;\n814: \t}",
        "context_after": "816: \t{\n817: \t\trcDraw.left = rc.right - width - pos->right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 821,
        "text": "Top location",
        "context_before": "819: \t}\n820: ",
        "context_after": "822: \t{\n823: \t\trcDraw.top = rc.top + pos->top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 826,
        "text": "Bottom location",
        "context_before": "824: \t\trcDraw.bottom = rcDraw.top + height;\n825: \t}",
        "context_after": "827: \t{\n828: \t\trcDraw.top = rc.bottom - height - pos->bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 51,
        "text": "Total number (Latest + 1)",
        "context_before": "49: \t\tGenre     = 6,\n50: \t\tIndex     = 7,",
        "context_after": "52: \t};\n53: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 57,
        "text": "Left indent",
        "context_before": "55: \t{\n56: \t\tbool isLoad;",
        "context_after": "58: \t\tint right;   // Right indent\n59: \t\tint top;     // Top indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 58,
        "text": "Right indent",
        "context_before": "56: \t\tbool isLoad;\n57: \t\tint left;    // Left indent",
        "context_after": "59: \t\tint top;     // Top indent\n60: \t\tint bottom;  // Bottom indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 59,
        "text": "Top indent",
        "context_before": "57: \t\tint left;    // Left indent\n58: \t\tint right;   // Right indent",
        "context_after": "60: \t\tint bottom;  // Bottom indent\n61: \t\tint width;   // Width"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 60,
        "text": "Bottom indent",
        "context_before": "58: \t\tint right;   // Right indent\n59: \t\tint top;     // Top indent",
        "context_after": "61: \t\tint width;   // Width\n62: \t\t// int height;  // Height"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 62,
        "text": "int height;  // Height",
        "context_before": "60: \t\tint bottom;  // Bottom indent\n61: \t\tint width;   // Width",
        "context_after": "63: \t\tbool isLeft;   // Left indent in priority (else right indent)\n64: \t\tbool isTop;    // Top indent in priority (else bottom indent)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 63,
        "text": "Left indent in priority (else right indent)",
        "context_before": "61: \t\tint width;   // Width\n62: \t\t// int height;  // Height",
        "context_after": "64: \t\tbool isTop;    // Top indent in priority (else bottom indent)\n65: \t\tbool isWidth;  // Width in priority (else right indent)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 64,
        "text": "Top indent in priority (else bottom indent)",
        "context_before": "62: \t\t// int height;  // Height\n63: \t\tbool isLeft;   // Left indent in priority (else right indent)",
        "context_after": "65: \t\tbool isWidth;  // Width in priority (else right indent)\n66: \t\t// bool isHeight; // Height in priority (else bottom indent)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 65,
        "text": "Width in priority (else right indent)",
        "context_before": "63: \t\tbool isLeft;   // Left indent in priority (else right indent)\n64: \t\tbool isTop;    // Top indent in priority (else bottom indent)",
        "context_after": "66: \t\t// bool isHeight; // Height in priority (else bottom indent)\n67: \t}defPos;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 66,
        "text": "bool isHeight; // Height in priority (else bottom indent)",
        "context_before": "64: \t\tbool isTop;    // Top indent in priority (else bottom indent)\n65: \t\tbool isWidth;  // Width in priority (else right indent)",
        "context_after": "67: \t}defPos;\n68: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 73,
        "text": "title(color)",
        "context_before": "71: \t\tbool isLoad;\n72: \t\tHFONT font; // Font",
        "context_after": "74: \t\tCOLORREF color2; // artist(color) - title(color2)\n75: \t\tint align; // Text align"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 74,
        "text": "artist(color) - title(color2)",
        "context_before": "72: \t\tHFONT font; // Font\n73: \t\tCOLORREF color; // title(color)",
        "context_after": "75: \t\tint align; // Text align\n76: \t\tExImage rating[2]; // Rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 75,
        "text": "Text align",
        "context_before": "73: \t\tCOLORREF color; // title(color)\n74: \t\tCOLORREF color2; // artist(color) - title(color2)",
        "context_after": "76: \t\tExImage rating[2]; // Rating\n77: \t\tExImage cover[2]; // Cover"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 76,
        "text": "Rating",
        "context_before": "74: \t\tCOLORREF color2; // artist(color) - title(color2)\n75: \t\tint align; // Text align",
        "context_after": "77: \t\tExImage cover[2]; // Cover\n78: \t}defElm;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.h",
        "line": 92,
        "text": "State arrays",
        "context_before": "90: \tstd::wstring dash = L\" - \";\n91: ",
        "context_after": "93: \tstd::vector<structState> listState;\n94: \tstd::vector<structPos> listPos;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 34,
        "text": "Parent node",
        "context_before": "32: \n33: private:",
        "context_after": "35: \tSkinListNode* child = nullptr; // First child node\n36: \tSkinListNode* clast = nullptr; // Last child node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 35,
        "text": "First child node",
        "context_before": "33: private:\n34: \tSkinListNode* parent = nullptr; // Parent node",
        "context_after": "36: \tSkinListNode* clast = nullptr; // Last child node\n37: \tSkinListNode* next = nullptr; // Next node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 36,
        "text": "Last child node",
        "context_before": "34: \tSkinListNode* parent = nullptr; // Parent node\n35: \tSkinListNode* child = nullptr; // First child node",
        "context_after": "37: \tSkinListNode* next = nullptr; // Next node\n38: \tSkinListNode* prev = nullptr; // Previous node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 37,
        "text": "Next node",
        "context_before": "35: \tSkinListNode* child = nullptr; // First child node\n36: \tSkinListNode* clast = nullptr; // Last child node",
        "context_after": "38: \tSkinListNode* prev = nullptr; // Previous node\n39: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 38,
        "text": "Previous node",
        "context_before": "36: \tSkinListNode* clast = nullptr; // Last child node\n37: \tSkinListNode* next = nullptr; // Next node",
        "context_after": "39: \n40: \tint ccount = 0; // Number of children"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 40,
        "text": "Number of children",
        "context_before": "38: \tSkinListNode* prev = nullptr; // Previous node\n39: ",
        "context_after": "41: \n42: \tSkinListNode* left = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 100,
        "text": "if (clast == nodeBefore) // Don't do this! Leave it commented to don't forget.",
        "context_before": "98: \t\tif (child == nodeBefore)\n99: \t\t\tchild = node;",
        "context_after": "101: \t\t//\tclast = node;\n102: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 101,
        "text": "clast = node;",
        "context_before": "99: \t\t\tchild = node;\n100: \t\t//if (clast == nodeBefore) // Don't do this! Leave it commented to don't forget.",
        "context_after": "102: \n103: \t\tif (nodeBefore->prev)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 124,
        "text": "If this assert was called then 1 of smart pointers still owns the node.",
        "context_before": "122: \t\t\tnode->next->prev = node->prev;\n123: ",
        "context_after": "125: \t\t// In case this error pop up in the release just remove all node's relationships (cause memory leak),\n126: \t\t// or otherwise it will cause undefined behaviour and the program just crash in the best case."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 125,
        "text": "In case this error pop up in the release just remove all node's relationships (cause memory leak),",
        "context_before": "123: \n124: \t\t// If this assert was called then 1 of smart pointers still owns the node.",
        "context_after": "126: \t\t// or otherwise it will cause undefined behaviour and the program just crash in the best case.\n127: \t\tassert(node->refCount == 0); // Critical error"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 127,
        "text": "Critical error",
        "context_before": "125: \t\t// In case this error pop up in the release just remove all node's relationships (cause memory leak),\n126: \t\t// or otherwise it will cause undefined behaviour and the program just crash in the best case.",
        "context_after": "128: \t\tif (node->refCount == 0)\n129: \t\t\tdelete node;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 145,
        "text": "If this assert was called then 1 of smart pointers still owns the node.",
        "context_before": "143: \t\t\tSkinListNode* t = n->next;\n144: ",
        "context_after": "146: \t\t\t// In case this error pop up in the release just remove all node relationships (cause memory leak),\n147: \t\t\t// or otherwise it will cause undefined behaviour and the program just crash in the best case."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 146,
        "text": "In case this error pop up in the release just remove all node relationships (cause memory leak),",
        "context_before": "144: \n145: \t\t\t// If this assert was called then 1 of smart pointers still owns the node.",
        "context_after": "147: \t\t\t// or otherwise it will cause undefined behaviour and the program just crash in the best case.\n148: \t\t\tassert(n->refCount == 0); // Critical error"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 148,
        "text": "Critical error",
        "context_before": "146: \t\t\t// In case this error pop up in the release just remove all node relationships (cause memory leak),\n147: \t\t\t// or otherwise it will cause undefined behaviour and the program just crash in the best case.",
        "context_after": "149: \t\t\tif (n->refCount == 0)\n150: \t\t\t\tdelete n;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 180,
        "text": "node - remove this node from the old place and insert it into the new one",
        "context_before": "178: \tinline void MoveChild(SkinListNode* node, SkinListNode* newParent, SkinListNode* nodeBefore)\n179: \t{",
        "context_after": "181: \t\t// newParent - new parent for the node\n182: \t\t// nodeBefore - insert before this node, if nullptr then insert to the end"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 181,
        "text": "newParent - new parent for the node",
        "context_before": "179: \t{\n180: \t\t// node - remove this node from the old place and insert it into the new one",
        "context_after": "182: \t\t// nodeBefore - insert before this node, if nullptr then insert to the end\n183: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 182,
        "text": "nodeBefore - insert before this node, if nullptr then insert to the end",
        "context_before": "180: \t\t// node - remove this node from the old place and insert it into the new one\n181: \t\t// newParent - new parent for the node",
        "context_after": "183: \n184: \t\tif (node == nodeBefore) // Do not insert into the same place"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 184,
        "text": "Do not insert into the same place",
        "context_before": "182: \t\t// nodeBefore - insert before this node, if nullptr then insert to the end\n183: ",
        "context_after": "185: \t\t\treturn;\n186: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 187,
        "text": "Remove from the old place",
        "context_before": "185: \t\t\treturn;\n186: ",
        "context_after": "188: \t\tif (child == node)\n189: \t\t\tchild = node->next;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 204,
        "text": "Insert into the new place",
        "context_before": "202: \t\tnode->prev = nullptr;\n203: ",
        "context_after": "205: \t\tif (nodeBefore == nullptr)\n206: \t\t\tnewParent->AddChild(node);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 223,
        "text": "Only one of the following values should be > 0",
        "context_before": "221: \tunsigned trackSize = 0;\n222: ",
        "context_after": "224: \tlong long idLibrary = 0; // Track index in the library\n225: \tlong long idPlaylist = 0; // Track index in the playlist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 224,
        "text": "Track index in the library",
        "context_before": "222: \n223: \t// Only one of the following values should be > 0",
        "context_after": "225: \tlong long idPlaylist = 0; // Track index in the playlist\n226: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 225,
        "text": "Track index in the playlist",
        "context_before": "223: \t// Only one of the following values should be > 0\n224: \tlong long idLibrary = 0; // Track index in the library",
        "context_after": "226: \n227: private:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 228,
        "text": "Cover art",
        "context_before": "226: \n227: private:",
        "context_after": "229: \tbool isCover = false; // Cover art is loaded?\n230: \tCSize szCover;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 229,
        "text": "Cover art is loaded?",
        "context_before": "227: private:\n228: \tExImage* cover = nullptr; // Cover art",
        "context_after": "230: \tCSize szCover;\n231: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 248,
        "text": "int flag = 0;",
        "context_before": "246: \tstd::vector<std::wstring> labels;\n247: ",
        "context_after": "249: \n250: \tstruct StateFlag"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 252,
        "text": "Selection states",
        "context_before": "250: \tstruct StateFlag\n251: \t{",
        "context_after": "253: \t\tstatic const int Normal   = 0x0001;\n254: \t\tstatic const int Select   = 0x0002;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 257,
        "text": "Play states",
        "context_before": "255: \t\tstatic const int Focus    = 0x0004;\n256: ",
        "context_after": "258: \t\tstatic const int Stop     = 0x0001;\n259: \t\tstatic const int Play     = 0x0002;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 262,
        "text": "Open states",
        "context_before": "260: \t\tstatic const int Pause    = 0x0004;\n261: ",
        "context_after": "263: \t\tstatic const int Open     = 0x0001;\n264: \t\tstatic const int Close    = 0x0002;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 266,
        "text": "Line number states",
        "context_before": "264: \t\tstatic const int Close    = 0x0002;\n265: ",
        "context_after": "267: \t\tstatic const int Line1    = 0x0001;\n268: \t\tstatic const int Line2    = 0x0002;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 270,
        "text": "Library or Playlist states",
        "context_before": "268: \t\tstatic const int Line2    = 0x0002;\n269: ",
        "context_after": "271: \t\tstatic const int Library  = 0x0001;\n272: \t\tstatic const int Playlist = 0x0002;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 280,
        "text": "ListNodeUnsafe (raw pointer) for pointers used at the same place where received.",
        "context_before": "278: \tint stateLibrary = 0;\n279: ",
        "context_after": "281: \t// ListNodeSafe (smart pointer) for pointers used at different places of the code.\n282: public:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 281,
        "text": "ListNodeSafe (smart pointer) for pointers used at different places of the code.",
        "context_before": "279: \n280: \t// ListNodeUnsafe (raw pointer) for pointers used at the same place where received.",
        "context_after": "282: public:\n283: \tclass SmartPtr final"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 307,
        "text": "operator SkinListNode*() const {return node;}",
        "context_before": "305: \t\tinline SkinListNode& operator*() const {return *node;}\n306: \t\tinline SkinListNode* operator->() const {return node;}",
        "context_after": "308: \t\tinline explicit operator bool() const {return node != nullptr;}\n309: \t\tinline bool operator!=(const SmartPtr& smart) const {return node != smart.node;}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListThread.cpp",
        "line": 98,
        "text": "Sleep(1000);",
        "context_before": "96: \t\t\t\tif (cover->ThumbnailFromSource(coverLoader.GetImage(), sz.cx, sz.cy))\n97: \t\t\t\t{",
        "context_after": "99: \n100: \t\t\t\t\tnode->cover = cover;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 238,
        "text": "New dcMemory //",
        "context_before": "236: \t\t::GetClientRect(thisWnd, rc);\n237: ",
        "context_after": "239: \tHDC dcMemory = ::CreateCompatibleDC(dc);\n240: \tHBITMAP bmMemory = ExImage::Create32BppBitmap(rc.Width(), rc.Height());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 242,
        "text": "New dcMemory //",
        "context_before": "240: \tHBITMAP bmMemory = ExImage::Create32BppBitmap(rc.Width(), rc.Height());\n241: \tHGDIOBJ oldMemory = ::SelectObject(dcMemory, bmMemory);",
        "context_after": "243: \n244: \tif (!isBackTransparent)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 300,
        "text": "Copy dcMemory //",
        "context_before": "298: \t}\n299: ",
        "context_after": "301: \t::BitBlt(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcMemory, 0, 0, SRCCOPY);\n302: \t::SelectObject(dcMemory, oldMemory);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 305,
        "text": "Copy dcMemory //",
        "context_before": "303: \t::DeleteObject(bmMemory);\n304: \t::DeleteDC(dcMemory);",
        "context_after": "306: }\n307: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 361,
        "text": "DrawText with DT_WORDBREAK is slow so use GetTextExtentPoint32 and calc size word by word",
        "context_before": "359: \t\t\t\tformat = DT_RIGHT|DT_NOPREFIX;\n360: ",
        "context_after": "362: \n363: \t\t\tif (!lines[i].empty())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 422,
        "text": "if (lyricsAlign == 0) ::DrawText(dc, lines[i].c_str(), (int)lines[i].size(), rc, DT_CENTER|DT_NOPREFIX|DT_WORDBREAK); else if (lyricsAlign == 1) ::DrawText(dc, lines[i].c_str(), (int)lines[i].size(), rc, DT_LEFT|DT_NOPREFIX|DT_WORDBREAK); else ::DrawText(dc, lines[i].c_str(), (int)lines[i].size(), rc, DT_RIGHT|DT_NOPREFIX|DT_WORDBREAK);",
        "context_before": "420: \n421: \t\t\t// Old",
        "context_after": "429: \n430: \t\ty += linesHeight[i];"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 471,
        "text": "DrawText with DT_CALCRECT is slow so use GetTextExtentPoint32 and calc size word by word",
        "context_before": "469: \tfor (std::size_t i = 0, size = lines.size(); i < size; ++i)\n470: \t{",
        "context_after": "472: \n473: \t\tint height = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 533,
        "text": "Old, slow.",
        "context_before": "531: \t\tresultHeight += height;\n532: ",
        "context_after": "534: \t\t/*CRect rc(0, 0, cx, cy);\n535: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 534,
        "text": "CRect rc(0, 0, cx, cy); if (!lines[i].empty()) ::DrawText(dc, lines[i].c_str(), (int)lines[i].size(), rc, DT_CALCRECT|DT_NOPREFIX|DT_WORDBREAK|DT_NOCLIP); else ::DrawText(dc, L\" \", 1, rc, DT_CALCRECT|DT_NOPREFIX|DT_SINGLELINE|DT_NOCLIP); linesHeight[i] = rc.Height(); resultHeight += rc.Height();",
        "context_before": "532: \n533: \t\t// Old, slow.",
        "context_after": "545: \n546: \t::SelectObject(dc, oldFont);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 638,
        "text": "default value",
        "context_before": "636: void SkinLyrics::MouseWheel(bool isReverse)\n637: {",
        "context_after": "639: \tSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &lineScroll, 0);\n640: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 679,
        "text": "smoothScrollNew is a new scroll position that the scroll should reach.",
        "context_before": "677: {\n678: \t// For smooth scrolling use two important variables smoothScrollNew and smoothScrollAcc.",
        "context_after": "680: \t// smoothScrollAcc is the scroll acceleration:\n681: \t// if = 0 then scroll and timer are stopped, if > 0 then scroll is moving up, if < 0 moving down."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 680,
        "text": "smoothScrollAcc is the scroll acceleration:",
        "context_before": "678: \t// For smooth scrolling use two important variables smoothScrollNew and smoothScrollAcc.\n679: \t// smoothScrollNew is a new scroll position that the scroll should reach.",
        "context_after": "681: \t// if = 0 then scroll and timer are stopped, if > 0 then scroll is moving up, if < 0 moving down.\n682: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 681,
        "text": "if = 0 then scroll and timer are stopped, if > 0 then scroll is moving up, if < 0 moving down.",
        "context_before": "679: \t// smoothScrollNew is a new scroll position that the scroll should reach.\n680: \t// smoothScrollAcc is the scroll acceleration:",
        "context_after": "682: \n683: \tif (smoothScrollAcc == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 688,
        "text": "Adjust scroll position",
        "context_before": "686: \t\tsmoothScrollNew += scroll;\n687: ",
        "context_after": "689: \tsmoothScrollNew = std::max(HScrollGetMin(), std::min(HScrollGetMax() - HScrollGetPage(), smoothScrollNew));\n690: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 691,
        "text": "Scroll is already in position",
        "context_before": "689: \tsmoothScrollNew = std::max(HScrollGetMin(), std::min(HScrollGetMax() - HScrollGetPage(), smoothScrollNew));\n690: ",
        "context_after": "692: \tif (smoothScrollNew == HScrollGetPos())\n693: \t\treturn;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 695,
        "text": "If scroll is not moving then start timer to move it",
        "context_before": "693: \t\treturn;\n694: ",
        "context_after": "696: \tif (smoothScrollAcc == 0)\n697: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 714,
        "text": "Slow down scrolling when reaching the destination point",
        "context_before": "712: \tif (diff == 0) return;\n713: ",
        "context_after": "715: \tif (diff > 0)\n716: \t\tsmoothScrollAcc = diff / 16 + 1;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 720,
        "text": "Scrolling",
        "context_before": "718: \t\tsmoothScrollAcc = diff / 16 - 1;\n719: ",
        "context_after": "721: \tint oldPos = HScrollGetPos();\n722: \tif (HScrollSetPos(HScrollGetPos() + smoothScrollAcc))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 850,
        "text": "Get number of lines to scroll from Windows settings",
        "context_before": "848: \tif (skinScroll)\n849: \t{",
        "context_after": "851: \t\tUINT lineScroll = 3; // default value\n852: \t\tSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &lineScroll, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 851,
        "text": "default value",
        "context_before": "849: \t{\n850: \t\t// Get number of lines to scroll from Windows settings",
        "context_after": "852: \t\tSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &lineScroll, 0);\n853: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 867,
        "text": "iMax - 1 and below + 1 because:",
        "context_before": "865: \t\t::SetScrollInfo(nativeScroll, SB_CTL, &si, TRUE);\n866: ",
        "context_after": "868: \t\t// The SetScrollInfo function performs range checking on the values specified by the nPage and nPos\n869: \t\t// members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 868,
        "text": "The SetScrollInfo function performs range checking on the values specified by the nPage and nPos",
        "context_before": "866: \n867: \t\t// iMax - 1 and below + 1 because:",
        "context_after": "869: \t\t// members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1.\n870: \t\t// The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 869,
        "text": "members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1.",
        "context_before": "867: \t\t// iMax - 1 and below + 1 because:\n868: \t\t// The SetScrollInfo function performs range checking on the values specified by the nPage and nPos",
        "context_after": "870: \t\t// The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value\n871: \t\t// is beyond its range, the function sets it to a value that is just within the range."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 870,
        "text": "The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value",
        "context_before": "868: \t\t// The SetScrollInfo function performs range checking on the values specified by the nPage and nPos\n869: \t\t// members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1.",
        "context_after": "871: \t\t// is beyond its range, the function sets it to a value that is just within the range.\n872: \t\t// SetScrollInfo: http://msdn.microsoft.com/en-us/library/bb787595(VS.85).aspx"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 871,
        "text": "is beyond its range, the function sets it to a value that is just within the range.",
        "context_before": "869: \t\t// members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1.\n870: \t\t// The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value",
        "context_after": "872: \t\t// SetScrollInfo: http://msdn.microsoft.com/en-us/library/bb787595(VS.85).aspx\n873: \t\t// i.e. we compensate this 1 pixel otherwise for example SmoothScroll never reach the end on 1 pixel."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 872,
        "text": "SetScrollInfo: http://msdn.microsoft.com/en-us/library/bb787595(VS.85).aspx",
        "context_before": "870: \t\t// The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value\n871: \t\t// is beyond its range, the function sets it to a value that is just within the range.",
        "context_after": "873: \t\t// i.e. we compensate this 1 pixel otherwise for example SmoothScroll never reach the end on 1 pixel.\n874: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 873,
        "text": "i.e. we compensate this 1 pixel otherwise for example SmoothScroll never reach the end on 1 pixel.",
        "context_before": "871: \t\t// is beyond its range, the function sets it to a value that is just within the range.\n872: \t\t// SetScrollInfo: http://msdn.microsoft.com/en-us/library/bb787595(VS.85).aspx",
        "context_after": "874: \t}\n875: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 948,
        "text": "Get number of lines to scroll from Windows settings",
        "context_before": "946: \telse\n947: \t{",
        "context_after": "949: \t\tUINT lineScroll = 3; // default value\n950: \t\tSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &lineScroll, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 949,
        "text": "default value",
        "context_before": "947: \t{\n948: \t\t// Get number of lines to scroll from Windows settings",
        "context_after": "950: \t\tSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &lineScroll, 0);\n951: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.h",
        "line": 119,
        "text": "Native Windows scroll",
        "context_before": "117: \tvoid ResetScrollImpl(int cx, int cy);\n118: ",
        "context_after": "120: \tstd::unique_ptr<SkinScroll> skinScroll; // Skin scroll, if nullptr use native\n121: \tint scrollWidth = 0; // Scroll width, if 0 then scroll is hidden"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.h",
        "line": 120,
        "text": "Skin scroll, if nullptr use native",
        "context_before": "118: \n119: \tHWND nativeScroll = NULL; // Native Windows scroll",
        "context_after": "121: \tint scrollWidth = 0; // Scroll width, if 0 then scroll is hidden\n122: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.h",
        "line": 121,
        "text": "Scroll width, if 0 then scroll is hidden",
        "context_before": "119: \tHWND nativeScroll = NULL; // Native Windows scroll\n120: \tstd::unique_ptr<SkinScroll> skinScroll; // Skin scroll, if nullptr use native",
        "context_after": "122: \n123: \t// Smooth scrolling"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.h",
        "line": 123,
        "text": "Smooth scrolling",
        "context_before": "121: \tint scrollWidth = 0; // Scroll width, if 0 then scroll is hidden\n122: ",
        "context_after": "124: \tbool isSmoothScrollEnabled = false;\n125: \tint smoothScrollAcc = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.h",
        "line": 132,
        "text": "Helper functions for scroll (native and skin)",
        "context_before": "130: \tvoid StopSmoothScroll();\n131: ",
        "context_after": "133: \t// The class interact with scroll throught these functions.\n134: \t// These functions does not interact with class only with scroll,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.h",
        "line": 133,
        "text": "The class interact with scroll throught these functions.",
        "context_before": "131: \n132: \t// Helper functions for scroll (native and skin)",
        "context_after": "134: \t// These functions does not interact with class only with scroll,\n135: \t// only exception in HScrollMessage when native scroll."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.h",
        "line": 134,
        "text": "These functions does not interact with class only with scroll,",
        "context_before": "132: \t// Helper functions for scroll (native and skin)\n133: \t// The class interact with scroll throught these functions.",
        "context_after": "135: \t// only exception in HScrollMessage when native scroll.\n136: \tint HScrollGetPos();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 110,
        "text": "WS_EX_TOOLWINDOW|WS_EX_NOACTIVATE",
        "context_before": "108: \n109: \tif (CreateClassWindow(parent, L\"WinylMiniWnd\", WS_OVERLAPPED|WS_SYSMENU|WS_MINIMIZEBOX|WS_CLIPCHILDREN|WS_CLIPSIBLINGS,",
        "context_after": "111: \t{\n112: \t\t//::SetParent(thisWnd, ::FindWindowW(L\"Progman\", L\"Program Manager\"));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 112,
        "text": "::SetParent(thisWnd, ::FindWindowW(L\"Progman\", L\"Program Manager\"));",
        "context_before": "110: \t\tWS_EX_ACCEPTFILES|styleTopmost, rcPos, L\"Winyl\", iconLarge, iconSmall, true)) // WS_EX_TOOLWINDOW|WS_EX_NOACTIVATE\n111: \t{",
        "context_after": "113: \n114: \t\tskinDraw.SetWindowStyle(thisWnd, parent);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 120,
        "text": "moveResize.CorrectSize(this);",
        "context_before": "118: \t\tmoveResize.SetResizeBorder(skinDraw.GetResizeBorder());\n119: ",
        "context_after": "121: \t\t//skinDraw.RefreshWindow(); // Refresh all skin elements\n122: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 121,
        "text": "skinDraw.RefreshWindow(); // Refresh all skin elements",
        "context_before": "119: \n120: \t\t//moveResize.CorrectSize(this);",
        "context_after": "122: \n123: \t\t::UpdateWindow(thisWnd);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 202,
        "text": "Also when resized",
        "context_before": "200: \t\tskinDraw.Minimized();\n201: \t}",
        "context_after": "203: \t{\n204: \t\tmoveResize.Resize(cx, cy);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 225,
        "text": "::SetFocus(thisWnd);",
        "context_before": "223: void SkinMini::OnLButtonDown(UINT nFlags, CPoint point)\n224: {",
        "context_after": "226: \n227: \tSkinElement* element = skinDraw.MouseDown(nFlags, point);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 235,
        "text": "Move window",
        "context_before": "233: \t\t\tAction(element, MouseAction::Down);\n234: \t}",
        "context_after": "236: \t{\n237: \t\tskinDraw.EmptyClick();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 274,
        "text": "::SetCursor(::LoadCursorW(NULL, IDC_ARROW));",
        "context_before": "272: //\tif (message == 0) // When open a menu set default cursor\n273: //\t{",
        "context_after": "275: //\t\treturn true;\n276: //\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 275,
        "text": "return true;",
        "context_before": "273: //\t{\n274: //\t\t::SetCursor(::LoadCursorW(NULL, IDC_ARROW));",
        "context_after": "276: //\t}\n277: \tif (message == 0) // When open a menu set default cursor"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 277,
        "text": "When open a menu set default cursor",
        "context_before": "275: //\t\treturn true;\n276: //\t}",
        "context_after": "278: \t\treturn false;\n279: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 280,
        "text": "hWnd == thisWnd is needed because sometimes a wrong cursor is set",
        "context_before": "278: \t\treturn false;\n279: ",
        "context_after": "281: \t// if mouse is not over the main window and over playlist/library for example\n282: \tif (hWnd == thisWnd && moveResize.SetCursor() && !skinDraw.IsHoverElement())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 281,
        "text": "if mouse is not over the main window and over playlist/library for example",
        "context_before": "279: \n280: \t// hWnd == thisWnd is needed because sometimes a wrong cursor is set",
        "context_after": "282: \tif (hWnd == thisWnd && moveResize.SetCursor() && !skinDraw.IsHoverElement())\n283: \t\treturn true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 397,
        "text": "if (lpwndpos->hwnd == this->m_hWnd)",
        "context_before": "395: void SkinMini::OnWindowPosChanging(WINDOWPOS* lpwndpos)\n396: {",
        "context_after": "398: //\t\tlpwndpos->flags |= SWP_NOZORDER;\n399: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 398,
        "text": "lpwndpos->flags |= SWP_NOZORDER;",
        "context_before": "396: {\n397: //\tif (lpwndpos->hwnd == this->m_hWnd)",
        "context_after": "399: \n400: //\tlpwndpos->hwndInsertAfter = NULL;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 400,
        "text": "lpwndpos->hwndInsertAfter = NULL;",
        "context_before": "398: //\t\tlpwndpos->flags |= SWP_NOZORDER;\n399: ",
        "context_after": "401: //\tif (lpwndpos->hwnd == this->m_hWnd)\n402: //\t\tlpwndpos->flags |= SWP_NOZORDER;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 401,
        "text": "if (lpwndpos->hwnd == this->m_hWnd)",
        "context_before": "399: \n400: //\tlpwndpos->hwndInsertAfter = NULL;",
        "context_after": "402: //\t\tlpwndpos->flags |= SWP_NOZORDER;\n403: //\tlpwndpos->flags |= SWP_NOOWNERZORDER|SWP_NOSENDCHANGING;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 402,
        "text": "lpwndpos->flags |= SWP_NOZORDER;",
        "context_before": "400: //\tlpwndpos->hwndInsertAfter = NULL;\n401: //\tif (lpwndpos->hwnd == this->m_hWnd)",
        "context_after": "403: //\tlpwndpos->flags |= SWP_NOOWNERZORDER|SWP_NOSENDCHANGING;\n404: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 403,
        "text": "lpwndpos->flags |= SWP_NOOWNERZORDER|SWP_NOSENDCHANGING;",
        "context_before": "401: //\tif (lpwndpos->hwnd == this->m_hWnd)\n402: //\t\tlpwndpos->flags |= SWP_NOZORDER;",
        "context_after": "404: \n405: \t// Window style should be WS_EX_TOPMOST when we use it! Or the main window will be always on desktop too!"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 405,
        "text": "Window style should be WS_EX_TOPMOST when we use it! Or the main window will be always on desktop too!",
        "context_before": "403: //\tlpwndpos->flags |= SWP_NOOWNERZORDER|SWP_NOSENDCHANGING;\n404: ",
        "context_after": "406: \tif (zOrder == 1)\n407: \t\tlpwndpos->hwndInsertAfter = HWND_BOTTOM;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 408,
        "text": "lpwndpos->flags |= SWP_NOOWNERZORDER;",
        "context_before": "406: \tif (zOrder == 1)\n407: \t\tlpwndpos->hwndInsertAfter = HWND_BOTTOM;",
        "context_after": "409: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 24,
        "text": "dcScreen = ::GetDC(NULL);",
        "context_before": "22: SkinPopup::SkinPopup()\n23: {",
        "context_after": "25: }\n26: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 29,
        "text": "if (dcScreen)",
        "context_before": "27: SkinPopup::~SkinPopup()\n28: {",
        "context_after": "30: \t//\t::ReleaseDC(NULL, dcScreen);\n31: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 30,
        "text": "::ReleaseDC(NULL, dcScreen);",
        "context_before": "28: {\n29: \t//if (dcScreen)",
        "context_after": "31: \n32: \tif (dcWindow)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 73,
        "text": "case WM_SHOWWINDOW:",
        "context_before": "71: \t\tOnContextMenu((HWND)wParam, CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam)));\n72: \t\treturn 0;",
        "context_after": "74: \t//\t// Forbid the system to hide the window (or when minimize the main window this window will hide too)\n75: \t//\treturn 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 74,
        "text": "// Forbid the system to hide the window (or when minimize the main window this window will hide too)",
        "context_before": "72: \t\treturn 0;\n73: \t//case WM_SHOWWINDOW:",
        "context_after": "75: \t//\treturn 0;\n76: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 75,
        "text": "return 0;",
        "context_before": "73: \t//case WM_SHOWWINDOW:\n74: \t//\t// Forbid the system to hide the window (or when minimize the main window this window will hide too)",
        "context_after": "76: \t}\n77: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 114,
        "text": "Waiting",
        "context_before": "112: void SkinPopup::OnTimer(UINT_PTR nIDEvent)\n113: {",
        "context_after": "115: \t{\n116: \t\tif (isMouseOnWindow || isMenuPopup)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 121,
        "text": "Showing",
        "context_before": "119: \t\t\tSetTimerAction(TimerAction::Hide);\n120: \t}",
        "context_after": "122: \t{\n123: \t\ttimer += (255 * TimerValue::Div / (float)timerShow);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 146,
        "text": "Hiding",
        "context_before": "144: \t\t}\n145: \t}",
        "context_after": "147: \t{\n148: \t\ttimer -= (255 * TimerValue::Div / (float)timerHide);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 199,
        "text": "Get desktop working area (depending on the number of monitors)",
        "context_before": "197: \tCRect rcRect;\n198: ",
        "context_after": "200: \tif (::GetSystemMetrics(SM_CMONITORS) > 1)\n201: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 217,
        "text": "Get popup window position (also apply offset from the corner)",
        "context_before": "215: \t}\n216: ",
        "context_after": "218: \tif (position == PositionType::TopLeft)\n219: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 249,
        "text": "For slide effect the position will be offscreen",
        "context_before": "247: \trcWindow = rcRect;\n248: ",
        "context_after": "250: \tif (showEffect == EffectType::Horz)\n251: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 267,
        "text": "Draw window and set transparency to zero",
        "context_before": "265: \t::MoveWindow(thisWnd, rcRect.left, rcRect.top, rcRect.Width(), rcRect.Height(), TRUE);\n266: ",
        "context_after": "268: \tif (!isLayered)\n269: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 281,
        "text": "if (isEffectFade)",
        "context_before": "279: \t\tRedrawWindowDefault();\n280: ",
        "context_after": "282: \t\t\t::SetLayeredWindowAttributes(thisWnd, NULL, 0, LWA_ALPHA);\n283: \t\t//else"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 284,
        "text": "::SetLayeredWindowAttributes(thisWnd, NULL, 255, LWA_ALPHA);",
        "context_before": "282: \t\t\t::SetLayeredWindowAttributes(thisWnd, NULL, 0, LWA_ALPHA);\n283: \t\t//else",
        "context_after": "285: \t}\n286: \telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 290,
        "text": "if (bEffectFade)",
        "context_before": "288: \t\tRedrawWindowLayered();\n289: ",
        "context_after": "291: \t\t\tAlphaWindowLayered(0);\n292: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 299,
        "text": "Call InvalidateRect only after the window becomes visible",
        "context_before": "297: \tif (!isLayered)\n298: \t{",
        "context_after": "300: \t\t// or there is a strange bug when slide effect (the window doesn't update)\n301: \t\t::InvalidateRect(thisWnd, NULL, TRUE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 300,
        "text": "or there is a strange bug when slide effect (the window doesn't update)",
        "context_before": "298: \t{\n299: \t\t// Call InvalidateRect only after the window becomes visible",
        "context_after": "301: \t\t::InvalidateRect(thisWnd, NULL, TRUE);\n302: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 379,
        "text": "When click on the window hide it",
        "context_before": "377: void SkinPopup::OnLButtonDown(UINT nFlags, CPoint point)\n378: {",
        "context_after": "380: \n381: //\tif (iTimerAction == TIMER_ACTION_HOLD)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 381,
        "text": "if (iTimerAction == TIMER_ACTION_HOLD)",
        "context_before": "379: \t// When click on the window hide it\n380: ",
        "context_after": "382: //\t\tSetTimerAction(TIMER_ACTION_HIDE);\n383: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 382,
        "text": "SetTimerAction(TIMER_ACTION_HIDE);",
        "context_before": "380: \n381: //\tif (iTimerAction == TIMER_ACTION_HOLD)",
        "context_after": "383: \n384: \tSetTimerAction(TimerAction::None);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 390,
        "text": "While mouse over the window do not hide it",
        "context_before": "388: void SkinPopup::OnMouseMove(UINT nFlags, CPoint point)\n389: {",
        "context_after": "391: \tisMouseOnWindow = true;\n392: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 396,
        "text": "When mouse leave the window hide it",
        "context_before": "394: void SkinPopup::OnMouseLeave()\n395: {",
        "context_after": "397: \n398: \tisMouseOnWindow = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 406,
        "text": "Just in case",
        "context_before": "404: void SkinPopup::OnPaint(HDC dc, PAINTSTRUCT& ps)\n405: {",
        "context_after": "407: \t\treturn;\n408: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 409,
        "text": "Get invalidated rect",
        "context_before": "407: \t\treturn;\n408: ",
        "context_after": "410: \n411: \tHDC dcMemory = ::CreateCompatibleDC(dc);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 414,
        "text": "Transfer from window cache into window",
        "context_before": "412: \tHGDIOBJ oldMemory = ::SelectObject(dcMemory, bmMemory);\n413: ",
        "context_after": "415: \t::BitBlt(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcMemory, rc.left, rc.top, SRCCOPY);\n416: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 417,
        "text": "Release resources",
        "context_before": "415: \t::BitBlt(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcMemory, rc.left, rc.top, SRCCOPY);\n416: ",
        "context_after": "418: \t::SelectObject(dcMemory, oldMemory);\n419: \t::DeleteDC(dcMemory);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 438,
        "text": "Draw background",
        "context_before": "436: \n437: ",
        "context_after": "439: \tif (isBackground)\n440: \t\timBackground[0].Draw(dcMemory, 0, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 449,
        "text": "Draw elements",
        "context_before": "447: \t}\n448: ",
        "context_after": "450: \tfor (std::size_t i = 0, size = elements.size(); i < size; ++i)\n451: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 456,
        "text": "Release resources",
        "context_before": "454: \t}\n455: ",
        "context_after": "457: \t::SelectObject(dcMemory, oldMemory);\n458: \t::DeleteDC(dcMemory);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 460,
        "text": "InvalidateRect moved to PrepareWindow check it to see why",
        "context_before": "458: \t::DeleteDC(dcMemory);\n459: ",
        "context_after": "461: //\t::InvalidateRect(thisWnd, NULL, TRUE);\n462: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 461,
        "text": "::InvalidateRect(thisWnd, NULL, TRUE);",
        "context_before": "459: \n460: //\tInvalidateRect moved to PrepareWindow check it to see why",
        "context_after": "462: }\n463: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 477,
        "text": "Draw background",
        "context_before": "475: \n476: ",
        "context_after": "478: \tif (isBackground)\n479: \t\timBackground[0].Draw(dcMemory, 0, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 488,
        "text": "Draw elements",
        "context_before": "486: \t}\n487: ",
        "context_after": "489: \tfor (std::size_t i = 0, size = elements.size(); i < size; ++i)\n490: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 495,
        "text": "We can draw layered window right away",
        "context_before": "493: \t}\n494: ",
        "context_after": "496: \n497: \tBLENDFUNCTION bf = {AC_SRC_OVER, 0, 255, AC_SRC_ALPHA};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 506,
        "text": "Use layered function to draw layered window",
        "context_before": "504: \tSIZE sz = {rcWindow.Width(), rcWindow.Height()};\n505: ",
        "context_after": "507: \t::UpdateLayeredWindow(thisWnd, NULL, &ptDst, &sz, dcMemory, &ptSrc, 0, &bf, ULW_ALPHA);\n508: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 509,
        "text": "Release resources",
        "context_before": "507: \t::UpdateLayeredWindow(thisWnd, NULL, &ptDst, &sz, dcMemory, &ptSrc, 0, &bf, ULW_ALPHA);\n508: ",
        "context_after": "510: \t::SelectObject(dcMemory, oldMemory);\n511: \t::DeleteDC(dcMemory);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 529,
        "text": "Use layered function to draw layered window",
        "context_before": "527: \tSIZE sz = {rcWindow.Width(), rcWindow.Height()};\n528: ",
        "context_after": "530: \t::UpdateLayeredWindow(thisWnd, NULL, &ptDst, &sz, dcMemory, &ptSrc, 0, &bf, ULW_ALPHA);\n531: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 532,
        "text": "Release resources",
        "context_before": "530: \t::UpdateLayeredWindow(thisWnd, NULL, &ptDst, &sz, dcMemory, &ptSrc, 0, &bf, ULW_ALPHA);\n531: ",
        "context_after": "533: \t::SelectObject(dcMemory, oldMemory);\n534: \t::DeleteDC(dcMemory);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 539,
        "text": "This function is deprecated",
        "context_before": "537: void SkinPopup::UnloadSkin()\n538: {",
        "context_after": "540: \tassert(false);\n541: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 546,
        "text": "SetLayeredWindowAttributes and UpdateLayeredWindow doesn't like each other so remove and set layered style",
        "context_before": "544: \t::ShowWindow(thisWnd, SW_HIDE);\n545: ",
        "context_after": "547: \t//ModifyStyleEx(WS_EX_LAYERED, 0);\n548: \t//ModifyStyleEx(0, WS_EX_LAYERED);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 547,
        "text": "ModifyStyleEx(WS_EX_LAYERED, 0);",
        "context_before": "545: \n546: \t// SetLayeredWindowAttributes and UpdateLayeredWindow doesn't like each other so remove and set layered style",
        "context_after": "548: \t//ModifyStyleEx(0, WS_EX_LAYERED);\n549: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.cpp",
        "line": 548,
        "text": "ModifyStyleEx(0, WS_EX_LAYERED);",
        "context_before": "546: \t// SetLayeredWindowAttributes and UpdateLayeredWindow doesn't like each other so remove and set layered style\n547: \t//ModifyStyleEx(WS_EX_LAYERED, 0);",
        "context_after": "549: \n550: \tisLayered = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 42,
        "text": "inline bool IsLoaded() {return true;}",
        "context_before": "40: \tvoid Popup();\n41: \tvoid Disable();",
        "context_after": "43: \n44: \tenum class PositionType // Window position"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 44,
        "text": "Window position",
        "context_before": "42: //\tinline bool IsLoaded() {return true;}\n43: ",
        "context_after": "45: \t{\n46: \t\tTopLeft     = 0,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 52,
        "text": "Window animation effect",
        "context_before": "50: \t};\n51: ",
        "context_after": "53: \t{\n54: \t\tFade = 0,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 73,
        "text": "Timer constants",
        "context_before": "71: \n72: private:",
        "context_after": "74: \t{\n75: \t\t// 15, 10, 5"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 75,
        "text": "15, 10, 5",
        "context_before": "73: \tstruct TimerValue // Timer constants\n74: \t{",
        "context_after": "76: \n77: \t\tstatic const int Time = 10; // Update period"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 77,
        "text": "Update period",
        "context_before": "75: \t\t// 15, 10, 5\n76: ",
        "context_after": "78: \t\tstatic const int Div = 16;\n79: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 80,
        "text": "Timer ID",
        "context_before": "78: \t\tstatic const int Div = 16;\n79: ",
        "context_after": "81: \t};\n82: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 83,
        "text": "Current action of the timer",
        "context_before": "81: \t};\n82: ",
        "context_after": "84: \t{\n85: \t\tNone = 0, // Timer is stopped (window is hidden)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 85,
        "text": "Timer is stopped (window is hidden)",
        "context_before": "83: \tenum class TimerAction // Current action of the timer\n84: \t{",
        "context_after": "86: \t\tHold = 1, // Timer is waiting\n87: \t\tShow = 2, // Timer is showing the window with animation"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 86,
        "text": "Timer is waiting",
        "context_before": "84: \t{\n85: \t\tNone = 0, // Timer is stopped (window is hidden)",
        "context_after": "87: \t\tShow = 2, // Timer is showing the window with animation\n88: \t\tHide = 3  // Timer is hiding the window with animation"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 87,
        "text": "Timer is showing the window with animation",
        "context_before": "85: \t\tNone = 0, // Timer is stopped (window is hidden)\n86: \t\tHold = 1, // Timer is waiting",
        "context_after": "88: \t\tHide = 3  // Timer is hiding the window with animation\n89: \t};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 88,
        "text": "Timer is hiding the window with animation",
        "context_before": "86: \t\tHold = 1, // Timer is waiting\n87: \t\tShow = 2, // Timer is showing the window with animation",
        "context_after": "89: \t};\n90: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 91,
        "text": "Current value ot the timer (from 0 to 255)",
        "context_before": "89: \t};\n90: ",
        "context_after": "92: \tTimerAction timerAction = TimerAction::None; // Current action of the timer\n93: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 92,
        "text": "Current action of the timer",
        "context_before": "90: \n91: \tfloat timer = 0.0f; // Current value ot the timer (from 0 to 255)",
        "context_after": "93: \n94: \tint timerHold = 0; // Hold time"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 94,
        "text": "Hold time",
        "context_before": "92: \tTimerAction timerAction = TimerAction::None; // Current action of the timer\n93: ",
        "context_after": "95: \tint timerShow = 0; // Show time\n96: \tint timerHide = 0; // Hide time"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 95,
        "text": "Show time",
        "context_before": "93: \n94: \tint timerHold = 0; // Hold time",
        "context_after": "96: \tint timerHide = 0; // Hide time\n97: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 96,
        "text": "Hide time",
        "context_before": "94: \tint timerHold = 0; // Hold time\n95: \tint timerShow = 0; // Show time",
        "context_after": "97: \n98: \tPositionType position = PositionType::TopLeft; // Window position"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 98,
        "text": "Window position",
        "context_before": "96: \tint timerHide = 0; // Hide time\n97: ",
        "context_after": "99: \tEffectType showEffect = EffectType::Fade; // Show effect\n100: \tEffectType hideEffect = EffectType::Fade; // Hide effect"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 99,
        "text": "Show effect",
        "context_before": "97: \n98: \tPositionType position = PositionType::TopLeft; // Window position",
        "context_after": "100: \tEffectType hideEffect = EffectType::Fade; // Hide effect\n101: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 100,
        "text": "Hide effect",
        "context_before": "98: \tPositionType position = PositionType::TopLeft; // Window position\n99: \tEffectType showEffect = EffectType::Fade; // Show effect",
        "context_after": "101: \n102: \tstruct MarginDef"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 104,
        "text": "Offset from corner by X",
        "context_before": "102: \tstruct MarginDef\n103: \t{",
        "context_after": "105: \t\tstatic const int SizeY = 5; // Offset from corner by Y\n106: \t};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 105,
        "text": "Offset from corner by Y",
        "context_before": "103: \t{\n104: \t\tstatic const int SizeX = 5; // Offset from corner by X",
        "context_after": "106: \t};\n107: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 108,
        "text": "Default settings",
        "context_before": "106: \t};\n107: ",
        "context_after": "109: \tint setTimerHold = 4000;\n110: \tint setTimerShow = 500;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 118,
        "text": "Mouse over the window",
        "context_before": "116: \tbool isSkinLoad = false;\n117: ",
        "context_after": "119: \tbool isMenuPopup = false; // Popup menu is activated\n120: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 119,
        "text": "Popup menu is activated",
        "context_before": "117: \n118: \tbool isMouseOnWindow = false; // Mouse over the window",
        "context_after": "120: \n121: \tbool isLayered = false; // Layered window style"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 121,
        "text": "Layered window style",
        "context_before": "119: \tbool isMenuPopup = false; // Popup menu is activated\n120: ",
        "context_after": "122: \tint valueCorners = 0; // Cut window corners (only without layered style)\n123: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 122,
        "text": "Cut window corners (only without layered style)",
        "context_before": "120: \n121: \tbool isLayered = false; // Layered window style",
        "context_after": "123: \n124: \tHDC dcScreen = NULL;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 138,
        "text": "Window width",
        "context_before": "136: \tHWND wndParent = NULL;\n137: ",
        "context_after": "139: \tint height = 0; // Window height\n140: \tint minWidth = 0; // Min window width"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 139,
        "text": "Window height",
        "context_before": "137: \n138: \tint width = 0; // Window width",
        "context_after": "140: \tint minWidth = 0; // Min window width\n141: \tint maxWidth = 0; // Max window width"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 140,
        "text": "Min window width",
        "context_before": "138: \tint width = 0; // Window width\n139: \tint height = 0; // Window height",
        "context_after": "141: \tint maxWidth = 0; // Max window width\n142: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 141,
        "text": "Max window width",
        "context_before": "139: \tint height = 0; // Window height\n140: \tint minWidth = 0; // Min window width",
        "context_after": "142: \n143: \tCRect rcWindow = {0, 0, 0, 0};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 125,
        "text": "Default",
        "context_before": "123: \t\t\telse if (xmlPosition.Attribute(\"LeftRight\", &pos.leftRight))\n124: \t\t\t\tpos.isLeftRight = true;",
        "context_after": "126: \t\t\t{\n127: \t\t\t\tpos.isWidth = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 127,
        "text": "Default",
        "context_before": "125: \t\t\telse // Default\n126: \t\t\t{",
        "context_after": "128: \t\t\t\tpos.width = width; // Default\n129: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 128,
        "text": "Default",
        "context_before": "126: \t\t\t{\n127: \t\t\t\tpos.isWidth = true; // Default",
        "context_after": "129: \t\t\t}\n130: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 139,
        "text": "Default",
        "context_before": "137: \t\t\telse if (xmlPosition.Attribute(\"LeftRight\", &pos.leftRight))\n138: \t\t\t\tpos.isLeftRight = true;",
        "context_after": "140: \t\t\t{\n141: \t\t\t\tpos.isWidth = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 141,
        "text": "Default",
        "context_before": "139: \t\t\telse // Default\n140: \t\t\t{",
        "context_after": "142: \t\t\t\tpos.width = width; // Default\n143: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 142,
        "text": "Default",
        "context_before": "140: \t\t\t{\n141: \t\t\t\tpos.isWidth = true; // Default",
        "context_after": "143: \t\t\t}\n144: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 149,
        "text": "Default",
        "context_before": "147: \t\t\tpos.isLeftRight = true;\n148: ",
        "context_after": "150: \t\t\tpos.width = width; // Default\n151: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 150,
        "text": "Default",
        "context_before": "148: \n149: \t\t\tpos.isWidth = true; // Default",
        "context_after": "151: \n152: \t\t\txmlPosition.Attribute(\"Width\", &pos.width);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 154,
        "text": "Default",
        "context_before": "152: \t\t\txmlPosition.Attribute(\"Width\", &pos.width);\n153: \t\t}",
        "context_after": "155: \t\t{\n156: \t\t\tpos.isLeft = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 156,
        "text": "Default",
        "context_before": "154: \t\telse // Default\n155: \t\t{",
        "context_after": "157: \n158: \t\t\tpos.isWidth = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 158,
        "text": "Default",
        "context_before": "156: \t\t\tpos.isLeft = true; // Default\n157: ",
        "context_after": "159: \t\t\tpos.width = width; // Default\n160: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 159,
        "text": "Default",
        "context_before": "157: \n158: \t\t\tpos.isWidth = true; // Default",
        "context_after": "160: \n161: \t\t\txmlPosition.Attribute(\"Width\", &pos.width);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 174,
        "text": "Default",
        "context_before": "172: \t\t\telse if (xmlPosition.Attribute(\"TopBottom\", &pos.topBottom))\n173: \t\t\t\tpos.isTopBottom = true;",
        "context_after": "175: \t\t\t{\n176: \t\t\t\tpos.isHeight = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 176,
        "text": "Default",
        "context_before": "174: \t\t\telse // Default\n175: \t\t\t{",
        "context_after": "177: \t\t\t\tpos.height = height; // Default\n178: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 177,
        "text": "Default",
        "context_before": "175: \t\t\t{\n176: \t\t\t\tpos.isHeight = true; // Default",
        "context_after": "178: \t\t\t}\n179: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 188,
        "text": "Default",
        "context_before": "186: \t\t\telse if (xmlPosition.Attribute(\"TopBottom\", &pos.topBottom))\n187: \t\t\t\tpos.isTopBottom = true;",
        "context_after": "189: \t\t\t{\n190: \t\t\t\tpos.isHeight = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 190,
        "text": "Default",
        "context_before": "188: \t\t\telse // Default\n189: \t\t\t{",
        "context_after": "191: \t\t\t\tpos.height = height; // Default\n192: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 191,
        "text": "Default",
        "context_before": "189: \t\t\t{\n190: \t\t\t\tpos.isHeight = true; // Default",
        "context_after": "192: \t\t\t}\n193: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 198,
        "text": "Default",
        "context_before": "196: \t\t\tpos.isTopBottom = true;\n197: ",
        "context_after": "199: \t\t\tpos.height = height; // Default\n200: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 199,
        "text": "Default",
        "context_before": "197: \n198: \t\t\tpos.isHeight = true; // Default",
        "context_after": "200: \n201: \t\t\txmlPosition.Attribute(\"Height\", &pos.height);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 203,
        "text": "Default",
        "context_before": "201: \t\t\txmlPosition.Attribute(\"Height\", &pos.height);\n202: \t\t}",
        "context_after": "204: \t\t{\n205: \t\t\tpos.isTop = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 205,
        "text": "Default",
        "context_before": "203: \t\telse // Default\n204: \t\t{",
        "context_after": "206: \n207: \t\t\tpos.isHeight = true; // Default"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 207,
        "text": "Default",
        "context_before": "205: \t\t\tpos.isTop = true; // Default\n206: ",
        "context_after": "208: \t\t\tpos.height = height; // Default\n209: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 208,
        "text": "Default",
        "context_before": "206: \n207: \t\t\tpos.isHeight = true; // Default",
        "context_after": "209: \n210: \t\t\txmlPosition.Attribute(\"Height\", &pos.height);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 226,
        "text": "Left location",
        "context_before": "224: \tCRect rcDraw;\n225: ",
        "context_after": "227: \t{\n228: \t\trcDraw.left = rcRect.left + pos.left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 230,
        "text": "Fixed width",
        "context_before": "228: \t\trcDraw.left = rcRect.left + pos.left;\n229: ",
        "context_after": "231: \t\t\trcDraw.right = rcDraw.left + pos.width;\n232: \t\telse if (pos.isRight) // To right"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 232,
        "text": "To right",
        "context_before": "230: \t\tif (pos.isWidth) // Fixed width\n231: \t\t\trcDraw.right = rcDraw.left + pos.width;",
        "context_after": "233: \t\t\trcDraw.right = rcRect.right - pos.right;\n234: \t\telse // To center"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 234,
        "text": "To center",
        "context_before": "232: \t\telse if (pos.isRight) // To right\n233: \t\t\trcDraw.right = rcRect.right - pos.right;",
        "context_after": "235: \t\t\trcDraw.right = rcRect.left + rcRect.Width()/2 + pos.leftRight;\n236: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 237,
        "text": "Right location",
        "context_before": "235: \t\t\trcDraw.right = rcRect.left + rcRect.Width()/2 + pos.leftRight;\n236: \t}",
        "context_after": "238: \t{\n239: \t\tif (pos.isWidth) // Fixed width"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 239,
        "text": "Fixed width",
        "context_before": "237: \telse if (pos.isRight) // Right location\n238: \t{",
        "context_after": "240: \t\t{\n241: \t\t\trcDraw.left = rcRect.right - pos.width - pos.right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 244,
        "text": "From center",
        "context_before": "242: \t\t\trcDraw.right = rcDraw.left + pos.width;\n243: \t\t}",
        "context_after": "245: \t\t{\n246: \t\t\trcDraw.left = rcRect.left + rcRect.Width()/2 + pos.leftRight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 250,
        "text": "Center location",
        "context_before": "248: \t\t}\n249: \t}",
        "context_after": "251: \t{\n252: \t\trcDraw.left = rcRect.left + (rcRect.Width()/2 - pos.width/2) + pos.leftRight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 256,
        "text": "Top location",
        "context_before": "254: \t}\n255: ",
        "context_after": "257: \t{\n258: \t\trcDraw.top = rcRect.top + pos.top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 260,
        "text": "Fixed height",
        "context_before": "258: \t\trcDraw.top = rcRect.top + pos.top;\n259: ",
        "context_after": "261: \t\t\trcDraw.bottom = rcDraw.top + pos.height;\n262: \t\telse if (pos.isBottom) // To bottom"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 262,
        "text": "To bottom",
        "context_before": "260: \t\tif (pos.isHeight) // Fixed height\n261: \t\t\trcDraw.bottom = rcDraw.top + pos.height;",
        "context_after": "263: \t\t\trcDraw.bottom = rcRect.bottom - pos.bottom;\n264: \t\telse // To center"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 264,
        "text": "To center",
        "context_before": "262: \t\telse if (pos.isBottom) // To bottom\n263: \t\t\trcDraw.bottom = rcRect.bottom - pos.bottom;",
        "context_after": "265: \t\t\trcDraw.bottom = rcRect.top + rcRect.Height()/2 + pos.topBottom;\n266: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 267,
        "text": "Bottom location",
        "context_before": "265: \t\t\trcDraw.bottom = rcRect.top + rcRect.Height()/2 + pos.topBottom;\n266: \t}",
        "context_after": "268: \t{\n269: \t\tif (pos.isHeight) // Fixed height"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 269,
        "text": "Fixed height",
        "context_before": "267: \telse if (pos.isBottom) // Bottom location\n268: \t{",
        "context_after": "270: \t\t{\n271: \t\t\trcDraw.top = rcRect.bottom - pos.height - pos.bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 274,
        "text": "From center",
        "context_before": "272: \t\t\trcDraw.bottom = rcDraw.top + pos.height;\n273: \t\t}",
        "context_after": "275: \t\t{\n276: \t\t\trcDraw.top = rcRect.top + rcRect.Height()/2 + pos.topBottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.cpp",
        "line": 280,
        "text": "Center location",
        "context_before": "278: \t\t}\n279: \t}",
        "context_after": "281: \t{\n282: \t\trcDraw.top = rcRect.top + (rcRect.Height()/2 - pos.height/2) + pos.topBottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 38,
        "text": "Height",
        "context_before": "36: \t{\n37: \t\tint width;   // Width",
        "context_after": "39: \t\tint left;    // Left indent\n40: \t\tint right;   // Right indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 39,
        "text": "Left indent",
        "context_before": "37: \t\tint width;   // Width\n38: \t\tint height;  // Height",
        "context_after": "40: \t\tint right;   // Right indent\n41: \t\tint top;     // Top indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 40,
        "text": "Right indent",
        "context_before": "38: \t\tint height;  // Height\n39: \t\tint left;    // Left indent",
        "context_after": "41: \t\tint top;     // Top indent\n42: \t\tint bottom;  // Bottom indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 41,
        "text": "Top indent",
        "context_before": "39: \t\tint left;    // Left indent\n40: \t\tint right;   // Right indent",
        "context_after": "42: \t\tint bottom;  // Bottom indent\n43: \t\tint leftRight; // Center indent X"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 42,
        "text": "Bottom indent",
        "context_before": "40: \t\tint right;   // Right indent\n41: \t\tint top;     // Top indent",
        "context_after": "43: \t\tint leftRight; // Center indent X\n44: \t\tint topBottom; // Center indent Y"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 43,
        "text": "Center indent X",
        "context_before": "41: \t\tint top;     // Top indent\n42: \t\tint bottom;  // Bottom indent",
        "context_after": "44: \t\tint topBottom; // Center indent Y\n45: \t\tbool isWidth;  // Width in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 44,
        "text": "Center indent Y",
        "context_before": "42: \t\tint bottom;  // Bottom indent\n43: \t\tint leftRight; // Center indent X",
        "context_after": "45: \t\tbool isWidth;  // Width in priority\n46: \t\tbool isHeight; // Height in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 45,
        "text": "Width in priority",
        "context_before": "43: \t\tint leftRight; // Center indent X\n44: \t\tint topBottom; // Center indent Y",
        "context_after": "46: \t\tbool isHeight; // Height in priority\n47: \t\tbool isLeft;   // Left indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 46,
        "text": "Height in priority",
        "context_before": "44: \t\tint topBottom; // Center indent Y\n45: \t\tbool isWidth;  // Width in priority",
        "context_after": "47: \t\tbool isLeft;   // Left indent in priority\n48: \t\tbool isTop;    // Top indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 47,
        "text": "Left indent in priority",
        "context_before": "45: \t\tbool isWidth;  // Width in priority\n46: \t\tbool isHeight; // Height in priority",
        "context_after": "48: \t\tbool isTop;    // Top indent in priority\n49: \t\tbool isRight;  // Right indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 48,
        "text": "Top indent in priority",
        "context_before": "46: \t\tbool isHeight; // Height in priority\n47: \t\tbool isLeft;   // Left indent in priority",
        "context_after": "49: \t\tbool isRight;  // Right indent in priority\n50: \t\tbool isBottom; // Bottom indent in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 49,
        "text": "Right indent in priority",
        "context_before": "47: \t\tbool isLeft;   // Left indent in priority\n48: \t\tbool isTop;    // Top indent in priority",
        "context_after": "50: \t\tbool isBottom; // Bottom indent in priority\n51: \t\tbool isLeftRight; // Center indent X in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 50,
        "text": "Bottom indent in priority",
        "context_before": "48: \t\tbool isTop;    // Top indent in priority\n49: \t\tbool isRight;  // Right indent in priority",
        "context_after": "51: \t\tbool isLeftRight; // Center indent X in priority\n52: \t\tbool isTopBottom; // Center indent Y in priority"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 51,
        "text": "Center indent X in priority",
        "context_before": "49: \t\tbool isRight;  // Right indent in priority\n50: \t\tbool isBottom; // Bottom indent in priority",
        "context_after": "52: \t\tbool isTopBottom; // Center indent Y in priority\n53: \t}pos;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopupElement.h",
        "line": 52,
        "text": "Center indent Y in priority",
        "context_before": "50: \t\tbool isBottom; // Bottom indent in priority\n51: \t\tbool isLeftRight; // Center indent X in priority",
        "context_after": "53: \t}pos;\n54: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinRating.cpp",
        "line": 152,
        "text": "Calculate which star was clicked",
        "context_before": "150: \t\tbool isRedraw = false;\n151: ",
        "context_after": "153: \t\tint star = rcRect.Width() / 5;\n154: \t\tint pos = point.x - rcRect.left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinRating.cpp",
        "line": 200,
        "text": "Calculate which star was clicked",
        "context_before": "198: \t\tisPress = true;\n199: ",
        "context_after": "201: \t\tint star = rcRect.Width() / 5;\n202: \t\tint pos = point.x - rcRect.left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinRating.cpp",
        "line": 262,
        "text": "Disable",
        "context_before": "260: \t\trating = param;\n261: \t}",
        "context_after": "263: \t{\n264: \t\tisVisible = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 310,
        "text": "if (::IsWindowVisible(thisWnd))",
        "context_before": "308: void SkinScroll::OnPaint(HDC dc, PAINTSTRUCT& ps)\n309: {",
        "context_after": "311: \t\tDrawScroll(dc);\n312: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 316,
        "text": "if (::IsWindowVisible(thisWnd))",
        "context_before": "314: void SkinScroll::Redraw()\n315: {",
        "context_after": "317: \t{\n318: \t\tHDC dc = ::GetDC(thisWnd);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 334,
        "text": "New dcMem //",
        "context_before": "332: \t::GetClientRect(thisWnd, rc);\n333: ",
        "context_after": "335: \tHDC dcMemory = ::CreateCompatibleDC(dc);\n336: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 340,
        "text": "End dcMem //",
        "context_before": "338: \n339: \tHGDIOBJ oldMemory = ::SelectObject(dcMemory, bmMemory);",
        "context_after": "341: \n342: \tif (bmBack == NULL)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 361,
        "text": "Draw background",
        "context_before": "359: \t}\n360: ",
        "context_after": "362: \tif (imTrack.IsValid())\n363: \t\timTrack.Draw(dcMemory, 0, imArrowUp[0].Height(), imTrack.Width(), rc.Height() - imArrowUp[0].Height() - imArrowDown[0].Height());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 365,
        "text": "Draw up down buttons",
        "context_before": "363: \t\timTrack.Draw(dcMemory, 0, imArrowUp[0].Height(), imTrack.Width(), rc.Height() - imArrowUp[0].Height() - imArrowDown[0].Height());\n364: ",
        "context_after": "366: \tif (isPressUp)\n367: \t\timArrowUp[2].Draw(dcMemory, 0, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 382,
        "text": "Calc additional values for thumb",
        "context_before": "380: \n381: ",
        "context_after": "383: \tint thumbTop = imThumbBegin[0].Height();\n384: \tint thumbBottom = imThumbEnd[0].Height();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 388,
        "text": "Draw thumb",
        "context_before": "386: \tint thumbFill = thumbSize - (thumbTop + thumbBottom);\n387: ",
        "context_after": "389: \tif (isPressThumb)\n390: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 417,
        "text": "Copy dcMem //",
        "context_before": "415: \t}\n416: ",
        "context_after": "418: \t::BitBlt(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcMemory, rc.left, rc.top, SRCCOPY);\n419: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 424,
        "text": "Copy dcMem //",
        "context_before": "422: \t::DeleteObject(bmMemory);\n423: \t::DeleteDC(dcMemory);",
        "context_after": "425: }\n426: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 429,
        "text": "scrollPosOld = scrollPos;",
        "context_before": "427: bool SkinScroll::SetScrollPos(int pos, bool needRedraw)\n428: {",
        "context_after": "430: \n431: \tpos = std::max(scrollMin, std::min(scrollMax - scrollPage, pos));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 444,
        "text": "::UpdateWindow(thisWnd); // Do not!",
        "context_before": "442: \t\t{\n443: \t\t\t::InvalidateRect(thisWnd, NULL, FALSE);",
        "context_after": "445: \t\t}\n446: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 460,
        "text": "Adjust scroll position",
        "context_before": "458: \tscrollHeight = scrollPage;\n459: ",
        "context_after": "461: \tscrollPos = std::max(scrollMin, std::min(scrollMax - scrollPage, scrollPos));\n462: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 466,
        "text": "::UpdateWindow(thisWnd); // Do not!",
        "context_before": "464: \n465: \t::InvalidateRect(thisWnd, NULL, FALSE);",
        "context_after": "467: }\n468: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 631,
        "text": "If mouse outside scroll area return to previous pos",
        "context_before": "629: \t::GetClientRect(thisWnd, rc);\n630: ",
        "context_after": "632: \tif (!(pt.x < rc.left - 135 || pt.x > rc.right + 135 ||\n633: \t\tpt.y < rc.top - 35 || pt.y > rc.bottom + 35))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 674,
        "text": "thumbSize = (scrollHeight - (sizeArrowUp + sizeArrowDown)) * scrollPage / std::max(1, scrollMax - scrollMin);",
        "context_before": "672: void SkinScroll::CalcThumbByPos(int pos)\n673: {",
        "context_after": "675: \t// thumbSize = (int)(0.5f + ((float)((scrollHeight - (sizeArrowUp + sizeArrowDown)) * scrollPage) / (float)std::max(1, scrollMax - scrollMin)));\n676: \tthumbSize = MulDivide(scrollHeight - (sizeArrowUp + sizeArrowDown), scrollPage, std::max(1, scrollMax - scrollMin));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 675,
        "text": "thumbSize = (int)(0.5f + ((float)((scrollHeight - (sizeArrowUp + sizeArrowDown)) * scrollPage) / (float)std::max(1, scrollMax - scrollMin)));",
        "context_before": "673: {\n674: \t// thumbSize = (scrollHeight - (sizeArrowUp + sizeArrowDown)) * scrollPage / std::max(1, scrollMax - scrollMin);",
        "context_after": "676: \tthumbSize = MulDivide(scrollHeight - (sizeArrowUp + sizeArrowDown), scrollPage, std::max(1, scrollMax - scrollMin));\n677: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 682,
        "text": "thumbPos = sizeArrowUp + (pos * thumbPage) / std::max(1, scrollMax - scrollMin - scrollPage);",
        "context_before": "680: \tint thumbPage = scrollHeight - thumbSize - (sizeArrowUp + sizeArrowDown);\n681: ",
        "context_after": "683: \t// thumbPos = (int)(0.5f + ((float)sizeArrowUp + (float)(pos * thumbPage) / (float)std::max(1, scrollMax - scrollMin - scrollPage)));\n684: \tthumbPos = sizeArrowUp + MulDivide(pos, thumbPage, std::max(1, scrollMax - scrollMin - scrollPage));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 683,
        "text": "thumbPos = (int)(0.5f + ((float)sizeArrowUp + (float)(pos * thumbPage) / (float)std::max(1, scrollMax - scrollMin - scrollPage)));",
        "context_before": "681: \n682: \t// thumbPos = sizeArrowUp + (pos * thumbPage) / std::max(1, scrollMax - scrollMin - scrollPage);",
        "context_after": "684: \tthumbPos = sizeArrowUp + MulDivide(pos, thumbPage, std::max(1, scrollMax - scrollMin - scrollPage));\n685: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 691,
        "text": "return (thumbPos - sizeArrowUp) * (scrollMax - scrollMin - scrollPage) / std::max(1, thumbPage);",
        "context_before": "689: \tint thumbPage = scrollHeight - thumbSize - (sizeArrowUp + sizeArrowDown);\n690: ",
        "context_after": "692: \t// return (int)(0.5f + ((float)((thumbPos - sizeArrowUp) * (scrollMax - scrollMin - scrollPage)) / (float)std::max(1, thumbPage)));\n693: \treturn MulDivide(thumbPos - sizeArrowUp, scrollMax - scrollMin - scrollPage, std::max(1, thumbPage));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 692,
        "text": "return (int)(0.5f + ((float)((thumbPos - sizeArrowUp) * (scrollMax - scrollMin - scrollPage)) / (float)std::max(1, thumbPage)));",
        "context_before": "690: \n691: \t// return (thumbPos - sizeArrowUp) * (scrollMax - scrollMin - scrollPage) / std::max(1, thumbPage);",
        "context_after": "693: \treturn MulDivide(thumbPos - sizeArrowUp, scrollMax - scrollMin - scrollPage, std::max(1, thumbPage));\n694: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 698,
        "text": "Same as ::MulDiv",
        "context_before": "696: int SkinScroll::MulDivide(int number, int numerator, int denominator)\n697: {",
        "context_after": "699: \n700: \tassert(denominator != 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 702,
        "text": "Remove this to crash on divide by zero",
        "context_before": "700: \tassert(denominator != 0);\n701: ",
        "context_after": "703: \tif (denominator == 0)\n704: \t\tdenominator = 1;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 706,
        "text": "Remove this to always rounded up (with this rounded to the nearest integer)",
        "context_before": "704: \t\tdenominator = 1;\n705: ",
        "context_after": "707: \tif (denominator < 0)\n708: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 719,
        "text": "Overflow check",
        "context_before": "717: \t\treturn (int)((((long long)number * numerator) - (denominator / 2)) / denominator);\n718: ",
        "context_after": "720: \t//if ((result > 2147483647) || (result < -2147483647)) return -1;\n721: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 720,
        "text": "if ((result > 2147483647) || (result < -2147483647)) return -1;",
        "context_before": "718: \n719: \t// Overflow check",
        "context_after": "721: }\n722: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 27,
        "text": "DECLARE_DYNAMIC(SkinScroll)",
        "context_before": "25: class SkinScroll : public WindowEx\n26: {",
        "context_after": "28: \n29: public:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 54,
        "text": "Scroll current position",
        "context_before": "52: \tvoid Redraw();\n53: ",
        "context_after": "55: \tint scrollMin = 0; // Scroll min position\n56: \tint scrollMax = 100; // Scroll max position"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 55,
        "text": "Scroll min position",
        "context_before": "53: \n54: \tint scrollPos = 0; // Scroll current position",
        "context_after": "56: \tint scrollMax = 100; // Scroll max position\n57: \tint scrollPage = 10; // Scroll page size"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 56,
        "text": "Scroll max position",
        "context_before": "54: \tint scrollPos = 0; // Scroll current position\n55: \tint scrollMin = 0; // Scroll min position",
        "context_after": "57: \tint scrollPage = 10; // Scroll page size\n58: \tint scrollLine = 1; // Scroll line size"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 57,
        "text": "Scroll page size",
        "context_before": "55: \tint scrollMin = 0; // Scroll min position\n56: \tint scrollMax = 100; // Scroll max position",
        "context_after": "58: \tint scrollLine = 1; // Scroll line size\n59: \tint scrollPosOld = 0; // Scroll old position"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 58,
        "text": "Scroll line size",
        "context_before": "56: \tint scrollMax = 100; // Scroll max position\n57: \tint scrollPage = 10; // Scroll page size",
        "context_after": "59: \tint scrollPosOld = 0; // Scroll old position\n60: \tint scrollPosReturn = 0; // Scroll return pos (when mouse leaves scroll area)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 59,
        "text": "Scroll old position",
        "context_before": "57: \tint scrollPage = 10; // Scroll page size\n58: \tint scrollLine = 1; // Scroll line size",
        "context_after": "60: \tint scrollPosReturn = 0; // Scroll return pos (when mouse leaves scroll area)\n61: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 60,
        "text": "Scroll return pos (when mouse leaves scroll area)",
        "context_before": "58: \tint scrollLine = 1; // Scroll line size\n59: \tint scrollPosOld = 0; // Scroll old position",
        "context_after": "61: \n62: \t// Values that are used to draw and calc"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 62,
        "text": "Values that are used to draw and calc",
        "context_before": "60: \tint scrollPosReturn = 0; // Scroll return pos (when mouse leaves scroll area)\n61: ",
        "context_after": "63: \n64: \tint scrollWidth = 20; // Scroll width"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 64,
        "text": "Scroll width",
        "context_before": "62: \t// Values that are used to draw and calc\n63: ",
        "context_after": "65: \tint scrollHeight = 0; // Scroll height\n66: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 65,
        "text": "Scroll height",
        "context_before": "63: \n64: \tint scrollWidth = 20; // Scroll width",
        "context_after": "66: \n67: \tint sizeArrowUp = 0; // Up arrow size (offset for thumb from above)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 67,
        "text": "Up arrow size (offset for thumb from above)",
        "context_before": "65: \tint scrollHeight = 0; // Scroll height\n66: ",
        "context_after": "68: \tint sizeArrowDown = 0; // Down arrow size (offset for thumb from below)\n69: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 68,
        "text": "Down arrow size (offset for thumb from below)",
        "context_before": "66: \n67: \tint sizeArrowUp = 0; // Up arrow size (offset for thumb from above)",
        "context_after": "69: \n70: \tint thumbPos = 0; // Thumb current position"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 70,
        "text": "Thumb current position",
        "context_before": "68: \tint sizeArrowDown = 0; // Down arrow size (offset for thumb from below)\n69: ",
        "context_after": "71: \tint thumbSize = 0; // Thumb size\n72: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 71,
        "text": "Thumb size",
        "context_before": "69: \n70: \tint thumbPos = 0; // Thumb current position",
        "context_after": "72: \n73: \tint thumbMove = 0; // To calc thumb pos when thumb are moving"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 73,
        "text": "To calc thumb pos when thumb are moving",
        "context_before": "71: \tint thumbSize = 0; // Thumb size\n72: ",
        "context_after": "74: \tint thumbMinSize = 0; // Thumb min size\n75: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 74,
        "text": "Thumb min size",
        "context_before": "72: \n73: \tint thumbMove = 0; // To calc thumb pos when thumb are moving",
        "context_after": "75: \n76: \t// Values that are used to draw (should be used only to draw)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 76,
        "text": "Values that are used to draw (should be used only to draw)",
        "context_before": "74: \tint thumbMinSize = 0; // Thumb min size\n75: ",
        "context_after": "77: \n78: \tbool isPressUp = false; // Up is pressed"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 78,
        "text": "Up is pressed",
        "context_before": "76: \t// Values that are used to draw (should be used only to draw)\n77: ",
        "context_after": "79: \tbool isPressDown = false; // Down is pressed\n80: \tbool isPressThumb = false; // Thumb is pressed"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 79,
        "text": "Down is pressed",
        "context_before": "77: \n78: \tbool isPressUp = false; // Up is pressed",
        "context_after": "80: \tbool isPressThumb = false; // Thumb is pressed\n81: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 80,
        "text": "Thumb is pressed",
        "context_before": "78: \tbool isPressUp = false; // Up is pressed\n79: \tbool isPressDown = false; // Down is pressed",
        "context_after": "81: \n82: \tbool isHoverUp = false; // Mouse over Up"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 82,
        "text": "Mouse over Up",
        "context_before": "80: \tbool isPressThumb = false; // Thumb is pressed\n81: ",
        "context_after": "83: \tbool isHoverDown = false; // Mouse over Down\n84: \tbool isHoverThumb = false; // Mouse over Thumb"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 83,
        "text": "Mouse over Down",
        "context_before": "81: \n82: \tbool isHoverUp = false; // Mouse over Up",
        "context_after": "84: \tbool isHoverThumb = false; // Mouse over Thumb\n85: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 84,
        "text": "Mouse over Thumb",
        "context_before": "82: \tbool isHoverUp = false; // Mouse over Up\n83: \tbool isHoverDown = false; // Mouse over Down",
        "context_after": "85: \n86: \tenum class ActionType"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 96,
        "text": "Current action",
        "context_before": "94: \t};\n95: ",
        "context_after": "97: \n98: \tbool isShiftDown = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 100,
        "text": "Timer is started?",
        "context_before": "98: \tbool isShiftDown = false;\n99: ",
        "context_after": "101: \n102: \t// Images to draw"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 102,
        "text": "Images to draw",
        "context_before": "100: \tbool isTimer = false; // Timer is started?\n101: ",
        "context_after": "103: \n104: \tint backSize = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 119,
        "text": "Functions",
        "context_before": "117: \tExImage imThumbMiddle[3];\n118: ",
        "context_after": "120: \n121: \tvoid ScrollThumb(CPoint& pt);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 130,
        "text": "Calc thumb position by scroll position",
        "context_before": "128: \tvoid StopTimer();\n129: ",
        "context_after": "131: \tint CalcPosByThumb(); // Calc scroll position by thumb position\n132: \tint MulDivide(int number, int numerator, int denominator);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 131,
        "text": "Calc scroll position by thumb position",
        "context_before": "129: \n130: \tvoid CalcThumbByPos(int pos); // Calc thumb position by scroll position",
        "context_after": "132: \tint MulDivide(int number, int numerator, int denominator);\n133: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 139,
        "text": "Check if need to redraw one of the states",
        "context_before": "137: \tvoid ResetHover();\n138: ",
        "context_after": "140: \tbool IsRedrawPressSet(ActionType type);\n141: \tbool IsRedrawPressReset(ActionType type);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinShadow.cpp",
        "line": 212,
        "text": "Bottom",
        "context_before": "210: \t\tshadowTopRight.Draw(dcMemory, cx - shadowTopRight.Width(), 0);\n211: \t}",
        "context_after": "213: \t{\n214: \t\tshadowBottomLeft.Draw(dcMemory, 0, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSlider.cpp",
        "line": 59,
        "text": "For compatibility with old skins (added in v2.2)",
        "context_before": "57: \t\t\t\t\tXmlNode xmlBegin = xmlBackground.FirstChild(\"Begin\");\n58: ",
        "context_after": "60: \t\t\t\t\t\txmlBegin = xmlBackground.FirstChild(\"Start\");\n61: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSlider.cpp",
        "line": 152,
        "text": "imFill[0].Draw(dc, rcRect);",
        "context_before": "150: \tif (isBackground)\n151: \t{",
        "context_after": "153: \t\timFill[1].Crop(dc, rcRect.left, rcRect.top, pos, rcRect.Height());\n154: \t\t//imFill[0].Crop(dc, rcRect.left + pos, rcRect.top, rcRect.Width() - pos, rcRect.Height());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSlider.cpp",
        "line": 154,
        "text": "imFill[0].Crop(dc, rcRect.left + pos, rcRect.top, rcRect.Width() - pos, rcRect.Height());",
        "context_before": "152: \t\t//imFill[0].Draw(dc, rcRect);\n153: \t\timFill[1].Crop(dc, rcRect.left, rcRect.top, pos, rcRect.Height());",
        "context_after": "155: \n156: \t\t//imFill[1].Crop2(dc, rcRect.left, rcRect.top, CRect(0, 0, iPos, rcRect.Height()));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSlider.cpp",
        "line": 156,
        "text": "imFill[1].Crop2(dc, rcRect.left, rcRect.top, CRect(0, 0, iPos, rcRect.Height()));",
        "context_before": "154: \t\t//imFill[0].Crop(dc, rcRect.left + pos, rcRect.top, rcRect.Width() - pos, rcRect.Height());\n155: ",
        "context_after": "157: \t\timFill[0].Crop2(dc, rcRect.left + pos, rcRect.top, CRect(pos, 0, rcRect.Width(), rcRect.Height()));\n158: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSlider.cpp",
        "line": 161,
        "text": "imFill[0].Draw(dc, rcRect);",
        "context_before": "159: \telse\n160: \t{",
        "context_after": "162: \t\timFill[1].Draw(dc, rcRect.left + imBegin.Width(), rcRect.top, pos - imBegin.Width(), rcRect.Height());\n163: \t\timFill[0].Draw(dc, rcRect.left + pos, rcRect.top, rcRect.Width() - pos - imEnd.Width(), rcRect.Height());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSlider.cpp",
        "line": 224,
        "text": "AllocConsole(); freopen (\"CONOUT$\", \"w\", stdout ); printf(\"%i\\n\", percent);",
        "context_before": "222: \t\t\treturn nullptr;\n223: ",
        "context_after": "229: \t\treturn this;\n230: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSlider.cpp",
        "line": 304,
        "text": "point.x += 1; // Adjust",
        "context_before": "302: \tif (!isButton)\n303: \t{",
        "context_after": "305: \n306: \t\tif (point.x < rcRect.left)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSlider.cpp",
        "line": 316,
        "text": "point.x += 2; // Adjust",
        "context_before": "314: \telse\n315: \t{",
        "context_after": "317: \n318: \t\tint width = imButton[0].Width();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSplitter.cpp",
        "line": 86,
        "text": "Mouse enters splitter area",
        "context_before": "84: SkinElement* SkinSplitter::OnMouseMove(unsigned flags, CPoint& point)\n85: {",
        "context_after": "87: \t{\n88: \t\tisHover = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSplitter.cpp",
        "line": 90,
        "text": "Mouse leaves splitter area",
        "context_before": "88: \t\tisHover = true;\n89: \t}",
        "context_after": "91: \t{\n92: \t\tisHover = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSwitch.cpp",
        "line": 310,
        "text": "Mouse enters button area",
        "context_before": "308: SkinElement* SkinSwitch::OnMouseMove(unsigned flags, CPoint& point)\n309: {",
        "context_after": "311: \t{\n312: \t\t//fadeAlpha = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSwitch.cpp",
        "line": 312,
        "text": "fadeAlpha = 0;",
        "context_before": "310: \tif (!isHover && rcRect.PtInRect(point)) // Mouse enters button area\n311: \t{",
        "context_after": "313: \n314: \t\tisHover = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSwitch.cpp",
        "line": 317,
        "text": "Mouse leaves button area",
        "context_before": "315: \t\treturn this;\n316: \t}",
        "context_after": "318: \t{\n319: \t\tisHover = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSwitch.cpp",
        "line": 341,
        "text": "if (rcRect.PtInRect(point))",
        "context_before": "339: \tif (isPress)\n340: \t{",
        "context_after": "342: //\t\t\tisState = !isState;\n343: \t\tif (!isHover)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSwitch.cpp",
        "line": 342,
        "text": "isState = !isState;",
        "context_before": "340: \t{\n341: //\t\tif (rcRect.PtInRect(point))",
        "context_after": "343: \t\tif (!isHover)\n344: \t\t\tfadeAlpha = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinSwitch.h",
        "line": 52,
        "text": "Enable tooltip for this class",
        "context_before": "50: \tvoid SetParam(int param) override;\n51: ",
        "context_after": "53: \tbool SetToolTip(ToolTips* tips)  override {toolTip = tips; return true;}\n54: };"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 21,
        "text": "#define RGB(r, g, b)(((DWORD)((BYTE)(r))) | ((DWORD)((BYTE)(g)) << 8) \\",
        "context_before": "19: #include \"SkinText.h\"\n20: ",
        "context_after": "22: //                | ((DWORD)((BYTE)(b)) << 16))\n23: //#define GetRValue(rgba)((BYTE)(rgba))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 22,
        "text": "| ((DWORD)((BYTE)(b)) << 16))",
        "context_before": "20: \n21: //#define RGB(r, g, b)(((DWORD)((BYTE)(r))) | ((DWORD)((BYTE)(g)) << 8) \\",
        "context_after": "23: //#define GetRValue(rgba)((BYTE)(rgba))\n24: //#define GetGValue(rgba)((BYTE)(((DWORD)(rgba)) >> 8))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 23,
        "text": "#define GetRValue(rgba)((BYTE)(rgba))",
        "context_before": "21: //#define RGB(r, g, b)(((DWORD)((BYTE)(r))) | ((DWORD)((BYTE)(g)) << 8) \\\n22: //                | ((DWORD)((BYTE)(b)) << 16))",
        "context_after": "24: //#define GetGValue(rgba)((BYTE)(((DWORD)(rgba)) >> 8))\n25: //#define GetBValue(rgba)((BYTE)((DWORD)(rgba) >> 16))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 24,
        "text": "#define GetGValue(rgba)((BYTE)(((DWORD)(rgba)) >> 8))",
        "context_before": "22: //                | ((DWORD)((BYTE)(b)) << 16))\n23: //#define GetRValue(rgba)((BYTE)(rgba))",
        "context_after": "25: //#define GetBValue(rgba)((BYTE)((DWORD)(rgba) >> 16))\n26: #define RGBA(r, g, b, a)(((DWORD)((BYTE)(r))) | ((DWORD)((BYTE)(g)) << 8) \\"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 25,
        "text": "#define GetBValue(rgba)((BYTE)((DWORD)(rgba) >> 16))",
        "context_before": "23: //#define GetRValue(rgba)((BYTE)(rgba))\n24: //#define GetGValue(rgba)((BYTE)(((DWORD)(rgba)) >> 8))",
        "context_after": "26: #define RGBA(r, g, b, a)(((DWORD)((BYTE)(r))) | ((DWORD)((BYTE)(g)) << 8) \\\n27:                 | ((DWORD)((BYTE)(b)) << 16) | ((DWORD)((BYTE)(a)) << 24))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 73,
        "text": "Default (black)",
        "context_before": "71: \t\t\t\tconst char* strColor = xmlFont.AttributeRaw(\"Color\");\n72: ",
        "context_after": "74: \t\t\t\tcolorTextAlpha = 0xFF; // Default (opaque)\n75: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 74,
        "text": "Default (opaque)",
        "context_before": "72: \n73: \t\t\t\tcolorText = 0x00000000; // Default (black)",
        "context_after": "75: \n76: \t\t\t\tif (strColor)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 80,
        "text": "Color in RGB format (convert to ABGR)",
        "context_before": "78: \t\t\t\t\tDWORD c = strtoul(strColor, 0, 16);\n79: ",
        "context_after": "81: \t\t\t\t\t{\n82: \t\t\t\t\t\tcolorText = RGB(GetBValue(c), GetGValue(c), GetRValue(c));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 85,
        "text": "Color in RGBA format (convert to ABGR)",
        "context_before": "83: \t\t\t\t\t\tcolorTextAlpha = 0xFF;\n84: \t\t\t\t\t}",
        "context_after": "86: \t\t\t\t\t{\n87: \t\t\t\t\t\tcolorText = RGB(GetAValue(c), GetBValue(c), GetGValue(c));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 96,
        "text": "Default (black)",
        "context_before": "94: \t\t\t\t\tconst char* strColor = xmlFont.AttributeRaw(\"Color2\");\n95: ",
        "context_after": "97: \t\t\t\t\tcolorTextAlpha2 = 0xFF; // Default (opaque)\n98: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 97,
        "text": "Default (opaque)",
        "context_before": "95: \n96: \t\t\t\t\tcolorText2 = 0x00000000; // Default (black)",
        "context_after": "98: \n99: \t\t\t\t\tif (strColor)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 103,
        "text": "Color in RGB format (convert to ABGR)",
        "context_before": "101: \t\t\t\t\t\tDWORD c = strtoul(strColor, 0, 16);\n102: ",
        "context_after": "104: \t\t\t\t\t\t{\n105: \t\t\t\t\t\t\tcolorText2 = RGB(GetBValue(c), GetGValue(c), GetRValue(c));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 108,
        "text": "Color in RGBA format (convert to ABGR)",
        "context_before": "106: \t\t\t\t\t\t\tcolorTextAlpha2 = 0xFF;\n107: \t\t\t\t\t\t}",
        "context_after": "109: \t\t\t\t\t\t{\n110: \t\t\t\t\t\t\tcolorText2 = RGB(GetAValue(c), GetBValue(c), GetGValue(c));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 126,
        "text": "Old name",
        "context_before": "124: \t\t\t{\n125: \t\t\t\tif (!xmlEffect.Attribute(\"FixOpacity\", &effect.isFixOpacity))",
        "context_after": "127: \n128: \t\t\t\txmlEffect.Attribute(\"GlowSize\", &effect.glowSize);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 135,
        "text": "Default (black)",
        "context_before": "133: \t\t\t\t\teffect.isShadow = true;\n134: ",
        "context_after": "136: \n137: \t\t\t\t\tDWORD c = strtoul(strColor, 0, 16);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 139,
        "text": "Color in RGB format (convert to ABGR)",
        "context_before": "137: \t\t\t\t\tDWORD c = strtoul(strColor, 0, 16);\n138: ",
        "context_after": "140: \t\t\t\t\t{\n141: \t\t\t\t\t\teffect.colorShadow = RGB(GetBValue(c), GetGValue(c), GetRValue(c));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 144,
        "text": "Color in RGBA format (convert to ABGR)",
        "context_before": "142: \t\t\t\t\t\teffect.colorShadowAlpha = 0xFF;\n143: \t\t\t\t\t}",
        "context_after": "145: \t\t\t\t\t{\n146: \t\t\t\t\t\teffect.colorShadow = RGB(GetAValue(c), GetBValue(c), GetGValue(c));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 173,
        "text": "DT_NOCLIP Draws without clipping. DrawTextEx is somewhat faster when DT_NOCLIP is used.",
        "context_before": "171: \t}\n172: ",
        "context_after": "174: \n175: \tDWORD format = DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 185,
        "text": "if (align == 2)",
        "context_before": "183: \telse if (align == 1)\n184: \t\tDrawTextSimple(dc, isAlpha, thisText, rcRect, colorText, colorTextAlpha, DT_RIGHT|format);",
        "context_after": "186: \t\tDrawTextSimple(dc, isAlpha, thisText, rcRect, colorText, colorTextAlpha, DT_CENTER|format);\n187: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 229,
        "text": "If there is a place to draw the second text",
        "context_before": "227: \tDrawTextSimple(dc, isAlpha, thisText, rcText1, colorText, colorTextAlpha, DT_LEFT|DT_END_ELLIPSIS|format);\n228: ",
        "context_after": "230: \t{\n231: \t\tDrawTextSimple(dc, isAlpha, dash, rcDash, colorText, colorTextAlpha, DT_LEFT|format);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 238,
        "text": "Default width",
        "context_before": "236: int SkinText::GetWidth()\n237: {",
        "context_after": "239: }\n240: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 243,
        "text": "Default height",
        "context_before": "241: int SkinText::GetHeight()\n242: {",
        "context_after": "244: }\n245: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 277,
        "text": "time += 36000;",
        "context_before": "275: {\n276: \t// Test",
        "context_after": "278: \t//length += 36000;\n279: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 278,
        "text": "length += 36000;",
        "context_before": "276: \t// Test\n277: \t//time += 36000;",
        "context_after": "279: \n280: \tif (time < 0) time = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 330,
        "text": "thisText += L\"Selected\";",
        "context_before": "328: \tif (count > 1)\n329: \t{",
        "context_after": "331: \t\t//thisText.push_back(' ');\n332: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 331,
        "text": "thisText.push_back(' ');",
        "context_before": "329: \t{\n330: \t\t//thisText += L\"Selected\";",
        "context_after": "332: \n333: \t\tthisText += std::to_wstring(count);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 393,
        "text": "::DrawFocusRect(dc, rc);",
        "context_before": "391: {\n392: \t// Test",
        "context_after": "394: \n395: \tif (isAlpha) // If draw on layered window"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 395,
        "text": "If draw on layered window",
        "context_before": "393: \t//::DrawFocusRect(dc, rc);\n394: ",
        "context_after": "396: \t{\n397: \t\tif (effect.isFixOpacity)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 411,
        "text": "If glow effect",
        "context_before": "409: \t\treturn;\n410: \t}",
        "context_after": "412: \t{\n413: \t\tDrawTextAlpha7(dc, text, rc, clr, alpha, format);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 437,
        "text": "if (effect.isFixOpacity) // Fix opacity in WinXP is enabled",
        "context_before": "435: void SkinText::DrawTextAlphaXP(HDC dc, const std::wstring& text, CRect& rc, COLORREF clr, BYTE alpha, UINT format)\n436: {",
        "context_after": "438: //\t{\n439: //\t\tif (!futureWin->IsVistaOrBetter() || !futureWin->IsTheme())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 440,
        "text": "DrawTextAlpha7(dc, text, rc, clr, alpha, format);",
        "context_before": "438: //\t{\n439: //\t\tif (!futureWin->IsVistaOrBetter() || !futureWin->IsTheme())",
        "context_after": "441: //\n442: //\t\tDrawTextAlphaFixXP(dc, text, rc, clr, alpha, format);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 442,
        "text": "DrawTextAlphaFixXP(dc, text, rc, clr, alpha, format);",
        "context_before": "440: //\t\t\tDrawTextAlpha7(dc, text, rc, clr, alpha, format);\n441: //",
        "context_after": "443: //\t\treturn;\n444: //\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 443,
        "text": "return;",
        "context_before": "441: //\n442: //\t\tDrawTextAlphaFixXP(dc, text, rc, clr, alpha, format);",
        "context_after": "444: //\t}\n445: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 464,
        "text": "Transfer background",
        "context_before": "462: \tBLENDFUNCTION bf = {AC_SRC_OVER, 0, 255, 0};\n463: ",
        "context_after": "465: \t//::GdiAlphaBlend(dcBitmap, 0, 0, rc.Width(), rc.Height(), dc, rc.left, rc.top, rc.Width(), rc.Height(), bf);\n466: \t::BitBlt(dcBitmap, 0, 0, rc.Width(), rc.Height(), dc, rc.left, rc.top, SRCCOPY);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 465,
        "text": "::GdiAlphaBlend(dcBitmap, 0, 0, rc.Width(), rc.Height(), dc, rc.left, rc.top, rc.Width(), rc.Height(), bf);",
        "context_before": "463: \n464: \t// Transfer background",
        "context_after": "466: \t::BitBlt(dcBitmap, 0, 0, rc.Width(), rc.Height(), dc, rc.left, rc.top, SRCCOPY);\n467: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 478,
        "text": "Draw text",
        "context_before": "476: \t}\n477: ",
        "context_after": "479: \t::SetTextColor(dcBitmap, clr);\n480: \t::DrawText(dcBitmap, text.c_str(), (int)text.size(), CRect(0, 0, rc.Width(), rc.Height()), format);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 482,
        "text": "::DrawFocusRect(dcBitmap, CRect(0, 0, rc.Width(), rc.Height()));",
        "context_before": "480: \t::DrawText(dcBitmap, text.c_str(), (int)text.size(), CRect(0, 0, rc.Width(), rc.Height()), format);\n481: ",
        "context_after": "483: \n484: \t// Make opaque all pixels with the text"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 484,
        "text": "Make opaque all pixels with the text",
        "context_before": "482: //\t ::DrawFocusRect(dcBitmap, CRect(0, 0, rc.Width(), rc.Height()));\n483: ",
        "context_after": "485: \tfor (int i = 0; i < bytes; i += 4)\n486: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 487,
        "text": "All pixels with the text are transparent so change only them",
        "context_before": "485: \tfor (int i = 0; i < bytes; i += 4)\n486: \t{",
        "context_after": "488: \t\t\tbits[i + 3] = 255;\n489: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 491,
        "text": "Transfer background with text into window",
        "context_before": "489: \t}\n490: ",
        "context_after": "492: \t//::GdiAlphaBlend(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcBitmap, 0, 0, rc.Width(), rc.Height(), bf);\n493: \t::BitBlt(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcBitmap, 0, 0, SRCCOPY);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 492,
        "text": "::GdiAlphaBlend(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcBitmap, 0, 0, rc.Width(), rc.Height(), bf);",
        "context_before": "490: \n491: \t// Transfer background with text into window",
        "context_after": "493: \t::BitBlt(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcBitmap, 0, 0, SRCCOPY);\n494: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 495,
        "text": "Release resources",
        "context_before": "493: \t::BitBlt(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcBitmap, 0, 0, SRCCOPY);\n494: ",
        "context_after": "496: \t::SelectObject(dcBitmap, oldFont);\n497: \t::SelectObject(dcBitmap, oldBitmap);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 504,
        "text": "Convert to black and white examples",
        "context_before": "502: void SkinText::DrawTextAlphaFixXP(HDC dc, const std::wstring& text, CRect& rc, COLORREF clr, BYTE alpha, UINT format)\n503: {",
        "context_after": "505: \t////#define RGB2GRAY(r,g,b) (((b)*114 + (g)*587 + (r)*299)/1000)\n506: \t//#define RGB2GRAY(r,g,b) (((b)*117 + (g)*601 + (r)*306) >> 10)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 505,
        "text": "//#define RGB2GRAY(r,g,b) (((b)*114 + (g)*587 + (r)*299)/1000)",
        "context_before": "503: {\n504: \t// Convert to black and white examples",
        "context_after": "506: \t//#define RGB2GRAY(r,g,b) (((b)*117 + (g)*601 + (r)*306) >> 10)\n507: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 506,
        "text": "#define RGB2GRAY(r,g,b) (((b)*117 + (g)*601 + (r)*306) >> 10)",
        "context_before": "504: \t// Convert to black and white examples\n505: \t////#define RGB2GRAY(r,g,b) (((b)*114 + (g)*587 + (r)*299)/1000)",
        "context_after": "507: \n508: \tBITMAPINFO bi32 = {};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 518,
        "text": "Create mask",
        "context_before": "516: \tint bytes = bi32.bmiHeader.biWidth * bi32.bmiHeader.biHeight * 4;\n517: ",
        "context_after": "519: \n520: \tHDC dcBitmapMask = ::CreateCompatibleDC(dc);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 526,
        "text": "::ZeroMemory(bitsMask, bytes); // Make black (should be black by default)",
        "context_before": "524: \tHGDIOBJ oldBitmapMask = ::SelectObject(dcBitmapMask, bitmapMask);\n525: ",
        "context_after": "527: \n528: \t::SetBkMode(dcBitmapMask, TRANSPARENT);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 529,
        "text": "Draw white text on black",
        "context_before": "527: \n528: \t::SetBkMode(dcBitmapMask, TRANSPARENT);",
        "context_after": "530: \n531: \tHGDIOBJ oldFontMask = ::SelectObject(dcBitmapMask, font);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 534,
        "text": "End create mask",
        "context_before": "532: \t::DrawText(dcBitmapMask, text.c_str(), (int)text.size(), CRect(0, 0, rc.Width(), rc.Height()), format);\n533: ",
        "context_after": "535: \n536: \tHDC dcBitmap = ::CreateCompatibleDC(dc);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 543,
        "text": "::GdiAlphaBlend(dcBitmap, 0, 0, rc.Width(), rc.Height(), hDC, rc.left, rc.top, rc.Width(), rc.Height(), bf);",
        "context_before": "541: \n542: \t// Transfer background (isn't needed we just use 32 bit color text later)",
        "context_after": "544: \n545: \t// Shadow (optional)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 545,
        "text": "Shadow (optional)",
        "context_before": "543: \t//::GdiAlphaBlend(dcBitmap, 0, 0, rc.Width(), rc.Height(), hDC, rc.left, rc.top, rc.Width(), rc.Height(), bf);\n544: ",
        "context_after": "546: \tif (effect.isShadow)\n547: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 548,
        "text": "Shadow color",
        "context_before": "546: \tif (effect.isShadow)\n547: \t{",
        "context_after": "549: \t\tBYTE red   = GetRValue(effect.colorShadow);\n550: \t\tBYTE green = GetGValue(effect.colorShadow);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 553,
        "text": "Use mask to make 32 bit color (with alpha) text (alpha will be a bit wrong and black and white but it's fine)",
        "context_before": "551: \t\tBYTE blue  = GetBValue(effect.colorShadow);\n552: ",
        "context_after": "554: \t\t// Draw the text with offset (use i2 and w variables for this) this text will be our shadow\n555: \t\tint w = bi32.bmiHeader.biWidth * -effect.shadowY + effect.shadowX;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 554,
        "text": "Draw the text with offset (use i2 and w variables for this) this text will be our shadow",
        "context_before": "552: \n553: \t\t// Use mask to make 32 bit color (with alpha) text (alpha will be a bit wrong and black and white but it's fine)",
        "context_after": "555: \t\tint w = bi32.bmiHeader.biWidth * -effect.shadowY + effect.shadowX;\n556: \t\tint i2 = w * 4;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 563,
        "text": "BYTE alpha = bitsMask[i];",
        "context_before": "561: \t\t\t\tw = 0;\n562: ",
        "context_after": "564: \t\t\tBYTE alpha = (BYTE)(((int)bitsMask[i]*117 + (int)bitsMask[i+1]*601 + (int)bitsMask[i+2]*306) >> 10);\n565: \t\t\tif (alpha && i2 >= 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 581,
        "text": "Transfer shadow text into window",
        "context_before": "579: \t\tBLENDFUNCTION bf = {AC_SRC_OVER, 0, effect.colorShadowAlpha, AC_SRC_ALPHA};\n580: ",
        "context_after": "582: \t\t::GdiAlphaBlend(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcBitmap, 0, 0, rc.Width(), rc.Height(), bf);\n583: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 584,
        "text": "Clear the buffer we need it below",
        "context_before": "582: \t\t::GdiAlphaBlend(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcBitmap, 0, 0, rc.Width(), rc.Height(), bf);\n583: ",
        "context_after": "585: \t\t::ZeroMemory(bits, bytes);\n586: \t} // End shadow"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 586,
        "text": "End shadow",
        "context_before": "584: \t\t// Clear the buffer we need it below\n585: \t\t::ZeroMemory(bits, bytes);",
        "context_after": "587: \n588: \t// Text color"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 588,
        "text": "Text color",
        "context_before": "586: \t} // End shadow\n587: ",
        "context_after": "589: \tBYTE red   = GetRValue(clr);\n590: \tBYTE green = GetGValue(clr);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 593,
        "text": "Use mask to make 32 bit color (with alpha) text (alpha will be a bit wrong and black and white but it's fine)",
        "context_before": "591: \tBYTE blue  = GetBValue(clr);\n592: ",
        "context_after": "594: \tfor (int i = 0; i < bytes; i += 4)\n595: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 596,
        "text": "BYTE alpha = bitsMask[i];",
        "context_before": "594: \tfor (int i = 0; i < bytes; i += 4)\n595: \t{",
        "context_after": "597: \t\tBYTE alpha = (BYTE)(((int)bitsMask[i]*117 + (int)bitsMask[i+1]*601 + (int)bitsMask[i+2]*306) >> 10);\n598: \t\tif (alpha)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 611,
        "text": "Transfer text into window",
        "context_before": "609: \tBLENDFUNCTION bf = {AC_SRC_OVER, 0, alpha, AC_SRC_ALPHA};\n610: ",
        "context_after": "612: \t::GdiAlphaBlend(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcBitmap, 0, 0, rc.Width(), rc.Height(), bf);\n613: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 614,
        "text": "Release resources",
        "context_before": "612: \t::GdiAlphaBlend(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcBitmap, 0, 0, rc.Width(), rc.Height(), bf);\n613: ",
        "context_after": "615: \t::SelectObject(dcBitmap, oldBitmap);\n616: \t::DeleteObject(bitmap);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 619,
        "text": "Release mask resources",
        "context_before": "617: \t::DeleteDC(dcBitmap);\n618: ",
        "context_after": "620: \t::SelectObject(dcBitmapMask, oldFontMask);\n621: \t::SelectObject(dcBitmapMask, oldBitmapMask);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 628,
        "text": "Offsets to fix text position when glow effect",
        "context_before": "626: void SkinText::DrawTextAlpha7(HDC dc, const std::wstring& text, CRect& rc, COLORREF clr, BYTE alpha, UINT format)\n627: {",
        "context_after": "629: \tint glowOffsetL = 0;\n630: \tint glowOffsetR = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 635,
        "text": "Windows 8 does not support glow effect for text (do not do effect.glowSize = 0 for this!)",
        "context_before": "633: \topt.dwSize = sizeof(opt);\n634: \topt.dwFlags = DTT_TEXTCOLOR|DTT_COMPOSITED;",
        "context_after": "636: \tif (effect.glowSize > 0 && !futureWin->IsEightOrLater())\n637: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 665,
        "text": "Windows 8 does not support glow effect for text so draw shadow in this case too",
        "context_before": "663: \tHGDIOBJ oldFont = ::SelectObject(dcBitmap, font);\n664: ",
        "context_after": "666: \tif (effect.isShadow && (effect.glowSize == 0 || futureWin->IsEightOrLater())) // Shadow (optional)\n667: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 666,
        "text": "Shadow (optional)",
        "context_before": "664: \n665: \t// Windows 8 does not support glow effect for text so draw shadow in this case too",
        "context_after": "667: \t{\n668: \t\topt.crText = effect.colorShadow;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 674,
        "text": "Transfer shadow text into window",
        "context_before": "672: \t\tBLENDFUNCTION bf = {AC_SRC_OVER, 0, effect.colorShadowAlpha, AC_SRC_ALPHA};\n673: ",
        "context_after": "675: \t\t::GdiAlphaBlend(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcBitmap, 0, 0, rc.Width(), rc.Height(), bf);\n676: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 677,
        "text": "We don't need to clear the buffer here and we can't because it's locked by DrawThemeTextEx",
        "context_before": "675: \t\t::GdiAlphaBlend(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcBitmap, 0, 0, rc.Width(), rc.Height(), bf);\n676: ",
        "context_after": "678: \t\t// Try to clear will cause Write Memory error.\n679: \t\t// What is written above is not true."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 678,
        "text": "Try to clear will cause Write Memory error.",
        "context_before": "676: \n677: \t\t// We don't need to clear the buffer here and we can't because it's locked by DrawThemeTextEx",
        "context_after": "679: \t\t// What is written above is not true.\n680: \t\t::ZeroMemory(bits, bytes);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 679,
        "text": "What is written above is not true.",
        "context_before": "677: \t\t// We don't need to clear the buffer here and we can't because it's locked by DrawThemeTextEx\n678: \t\t// Try to clear will cause Write Memory error.",
        "context_after": "680: \t\t::ZeroMemory(bits, bytes);\n681: \t} // End shadow"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 681,
        "text": "End shadow",
        "context_before": "679: \t\t// What is written above is not true.\n680: \t\t::ZeroMemory(bits, bytes);",
        "context_after": "682: \n683: \t// Draw text"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 683,
        "text": "Draw text",
        "context_before": "681: \t} // End shadow\n682: ",
        "context_after": "684: \topt.crText = clr;\n685: \tfutureWin->DrawThemeTextEx(futureWin->handleTheme, dcBitmap, 0, 0, text.c_str(), -1, format,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 690,
        "text": "Transfer text into window",
        "context_before": "688: \tBLENDFUNCTION bf = {AC_SRC_OVER, 0, alpha, AC_SRC_ALPHA};\n689: ",
        "context_after": "691: \t::GdiAlphaBlend(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcBitmap, 0, 0, rc.Width(), rc.Height(), bf);\n692: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 693,
        "text": "Release resources",
        "context_before": "691: \t::GdiAlphaBlend(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcBitmap, 0, 0, rc.Width(), rc.Height(), bf);\n692: ",
        "context_after": "694: \t::SelectObject(dcBitmap, oldFont);\n695: \t::SelectObject(dcBitmap, oldBitmap);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 31,
        "text": "Text font",
        "context_before": "29: \n30: private:",
        "context_after": "32: \tint align = 0; // Text align\n33: \tCOLORREF colorText = 0x00000000; // Text color"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 32,
        "text": "Text align",
        "context_before": "30: private:\n31: \tHFONT font = NULL; // Text font",
        "context_after": "33: \tCOLORREF colorText = 0x00000000; // Text color\n34: \tCOLORREF colorText2 = 0x00000000; // Text 2 color (Artist(color) - Title(color2))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 33,
        "text": "Text color",
        "context_before": "31: \tHFONT font = NULL; // Text font\n32: \tint align = 0; // Text align",
        "context_after": "34: \tCOLORREF colorText2 = 0x00000000; // Text 2 color (Artist(color) - Title(color2))\n35: \tBYTE colorTextAlpha = 0xFF; // Text opacity"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 34,
        "text": "Text 2 color (Artist(color) - Title(color2))",
        "context_before": "32: \tint align = 0; // Text align\n33: \tCOLORREF colorText = 0x00000000; // Text color",
        "context_after": "35: \tBYTE colorTextAlpha = 0xFF; // Text opacity\n36: \tBYTE colorTextAlpha2 = 0xFF; // Text 2 opacity"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 35,
        "text": "Text opacity",
        "context_before": "33: \tCOLORREF colorText = 0x00000000; // Text color\n34: \tCOLORREF colorText2 = 0x00000000; // Text 2 color (Artist(color) - Title(color2))",
        "context_after": "36: \tBYTE colorTextAlpha2 = 0xFF; // Text 2 opacity\n37: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 36,
        "text": "Text 2 opacity",
        "context_before": "34: \tCOLORREF colorText2 = 0x00000000; // Text 2 color (Artist(color) - Title(color2))\n35: \tBYTE colorTextAlpha = 0xFF; // Text opacity",
        "context_after": "37: \n38: \t// Effects"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 38,
        "text": "Effects",
        "context_before": "36: \tBYTE colorTextAlpha2 = 0xFF; // Text 2 opacity\n37: ",
        "context_after": "39: \tstruct structEffect\n40: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 41,
        "text": "Glow effect (only if Vista or newer)",
        "context_before": "39: \tstruct structEffect\n40: \t{",
        "context_after": "42: \t\tbool isShadow = false; // Shadow effect is enabled?\n43: \t\tCOLORREF colorShadow = 0x00000000; // Shadow color"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 42,
        "text": "Shadow effect is enabled?",
        "context_before": "40: \t{\n41: \t\tint glowSize = 0; // Glow effect (only if Vista or newer)",
        "context_after": "43: \t\tCOLORREF colorShadow = 0x00000000; // Shadow color\n44: \t\tBYTE colorShadowAlpha = 0xFF; // Shadow opacity"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 43,
        "text": "Shadow color",
        "context_before": "41: \t\tint glowSize = 0; // Glow effect (only if Vista or newer)\n42: \t\tbool isShadow = false; // Shadow effect is enabled?",
        "context_after": "44: \t\tBYTE colorShadowAlpha = 0xFF; // Shadow opacity\n45: \t\tint shadowX = 0; // Shadow offset X"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 44,
        "text": "Shadow opacity",
        "context_before": "42: \t\tbool isShadow = false; // Shadow effect is enabled?\n43: \t\tCOLORREF colorShadow = 0x00000000; // Shadow color",
        "context_after": "45: \t\tint shadowX = 0; // Shadow offset X\n46: \t\tint shadowY = 0; // Shadow offset Y"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 45,
        "text": "Shadow offset X",
        "context_before": "43: \t\tCOLORREF colorShadow = 0x00000000; // Shadow color\n44: \t\tBYTE colorShadowAlpha = 0xFF; // Shadow opacity",
        "context_after": "46: \t\tint shadowY = 0; // Shadow offset Y\n47: \t\tbool isFixOpacity = false; // Fix opacity is enabled?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 46,
        "text": "Shadow offset Y",
        "context_before": "44: \t\tBYTE colorShadowAlpha = 0xFF; // Shadow opacity\n45: \t\tint shadowX = 0; // Shadow offset X",
        "context_after": "47: \t\tbool isFixOpacity = false; // Fix opacity is enabled?\n48: \t}effect;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 47,
        "text": "Fix opacity is enabled?",
        "context_before": "45: \t\tint shadowX = 0; // Shadow offset X\n46: \t\tint shadowY = 0; // Shadow offset Y",
        "context_after": "48: \t}effect;\n49: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 50,
        "text": "Text line",
        "context_before": "48: \t}effect;\n49: ",
        "context_after": "51: \tstd::wstring thisText2; // Text line 2\n52: \tstd::wstring dash; // \" - \""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.h",
        "line": 51,
        "text": "Text line 2",
        "context_before": "49: \n50: \tstd::wstring thisText; // Text line",
        "context_after": "52: \tstd::wstring dash; // \" - \"\n53: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 87,
        "text": "WS_EX_COMPOSITED",
        "context_before": "85: bool SkinTree::NewWindow(HWND parent)\n86: {",
        "context_after": "88: \t{\n89: \t\treturn true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 101,
        "text": "SetRedraw(TRUE);",
        "context_before": "99: \tif (isControlRedraw)\n100: \t{",
        "context_after": "102: \t\tResetScrollBar();\n103: \t\t::InvalidateRect(thisWnd, NULL, FALSE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 106,
        "text": "SetRedraw(FALSE);",
        "context_before": "104: \t}\n105: //\telse",
        "context_after": "107: }\n108: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 354,
        "text": "Clear selection if focus node is related to the library",
        "context_before": "352: \tif (focusNode && focusNode->nodeType == SkinTreeNode::NodeType::Text)\n353: \t{",
        "context_after": "355: \t\tif (focusNode->type != SkinTreeNode::Type::NowPlaying &&\n356: \t\t\tfocusNode->type != SkinTreeNode::Type::Radio &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 366,
        "text": "Close and remove all nodes related to the library",
        "context_before": "364: \t}\n365: ",
        "context_after": "367: \tif (rootNode->HasChild())\n368: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 425,
        "text": "Search for next node (within one parent)",
        "context_before": "423: \t\tdefPlaylistNode.reset();\n424: ",
        "context_after": "426: \tTreeNodeSafe nextNode;\n427: \tif (focusNode)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 437,
        "text": "Remove node",
        "context_before": "435: \tfocusNode.reset();\n436: ",
        "context_after": "438: \tnode->Parent()->RemoveChild(node);\n439: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 440,
        "text": "Select next node",
        "context_before": "438: \tnode->Parent()->RemoveChild(node);\n439: ",
        "context_after": "441: \tif (nextNode)\n442: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 458,
        "text": "Open \"Playlists\" when add playlist",
        "context_before": "456: \tif (playlistNode)\n457: \t{",
        "context_after": "459: \t\tplaylistNode->isOpen = true;\n460: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 475,
        "text": "Open \"Smartlists\" when add smartlist",
        "context_before": "473: \tif (smartlistNode)\n474: \t{",
        "context_after": "476: \t\tsmartlistNode->isOpen = true;\n477: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 492,
        "text": "New dcMem //",
        "context_before": "490: \tvisibleNodes.clear();\n491: ",
        "context_after": "493: \tHDC dcMemory = ::CreateCompatibleDC(dc);\n494: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 498,
        "text": "End dcMem //",
        "context_before": "496: \n497: \tHGDIOBJ oldMemory = ::SelectObject(dcMemory, bmMemory);",
        "context_after": "499: \n500: \t::SetBkColor(dcMemory, backColor);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 506,
        "text": "Draw background image",
        "context_before": "504: \n505: \tif (imageBack.IsValid())",
        "context_after": "507: \n508: \tCRect rc2;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 511,
        "text": "Recursively draw all nodes",
        "context_before": "509: \t::GetClientRect(thisWnd, rc2);\n510: ",
        "context_after": "512: \tif (isControlRedraw)\n513: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 523,
        "text": "Draw move line",
        "context_before": "521: \t}\n522: ",
        "context_after": "524: \tif (isMoveElement)\n525: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 550,
        "text": "Copy dcMem //",
        "context_before": "548: \n549: ",
        "context_after": "551: \t::BitBlt(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcMemory, 0, 0, SRCCOPY);\n552: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 557,
        "text": "Copy dcMem //",
        "context_before": "555: \t::DeleteObject(bmMemory);\n556: \t::DeleteDC(dcMemory);",
        "context_after": "558: }\n559: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 562,
        "text": "If there are no nodes to draw just return",
        "context_before": "560: int SkinTree::VisibleNodesRecursive(SkinTreeNode* recursiveNode, int y, int height)\n561: {",
        "context_after": "563: \t//if (!recursiveNode->HasChild())\n564: \t//\treturn y;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 563,
        "text": "if (!recursiveNode->HasChild())",
        "context_before": "561: {\n562: \t// If there are no nodes to draw just return",
        "context_after": "564: \t//\treturn y;\n565: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 564,
        "text": "return y;",
        "context_before": "562: \t// If there are no nodes to draw just return\n563: \t//if (!recursiveNode->HasChild())",
        "context_after": "565: \n566: \tfor (TreeNodeUnsafe node = recursiveNode->Child(); node != nullptr; node = node->Next())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 568,
        "text": "Do not draw nodes that beyond window bottom",
        "context_before": "566: \tfor (TreeNodeUnsafe node = recursiveNode->Child(); node != nullptr; node = node->Next())\n567: \t{",
        "context_after": "569: \t\t\treturn y;\n570: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 571,
        "text": "Draw node",
        "context_before": "569: \t\t\treturn y;\n570: ",
        "context_after": "572: \t\t{\n573: \t\t\tif (y > -nodeHeight) // Draw only visible nodes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 573,
        "text": "Draw only visible nodes",
        "context_before": "571: \t\tif (node->nodeType == SkinTreeNode::NodeType::Text) // Draw node\n572: \t\t{",
        "context_after": "574: \t\t\t{\n575: \t\t\t\tvisibleNodes.push_back(node); // Fill visible nodes array"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 575,
        "text": "Fill visible nodes array",
        "context_before": "573: \t\t\tif (y > -nodeHeight) // Draw only visible nodes\n574: \t\t\t{",
        "context_after": "576: \t\t\t}\n577: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 578,
        "text": "Draw header",
        "context_before": "576: \t\t\t}\n577: \t\t}",
        "context_after": "579: \t\t{\n580: \t\t\tif (y > -headHeight) // Draw only visible nodes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 580,
        "text": "Draw only visible nodes",
        "context_before": "578: \t\telse if (node->nodeType == SkinTreeNode::NodeType::Head) // Draw header\n579: \t\t{",
        "context_after": "581: \t\t\t{\n582: \t\t\t\tvisibleNodes.push_back(node); // Fill visible nodes array"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 582,
        "text": "Fill visible nodes array",
        "context_before": "580: \t\t\tif (y > -headHeight) // Draw only visible nodes\n581: \t\t\t{",
        "context_after": "583: \t\t\t}\n584: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 589,
        "text": "/////////////////////////////////////////////////////////////////////////",
        "context_before": "587: \t\ty += node->rcNode.Height();\n588: ",
        "context_after": "590: \t\t// Recursively draw all open subnodes //\n591: \t\tif (node->isOpen && node->HasChild())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 590,
        "text": "Recursively draw all open subnodes //",
        "context_before": "588: \n589: ///////////////////////////////////////////////////////////////////////////",
        "context_after": "591: \t\tif (node->isOpen && node->HasChild())\n592: \t\t\ty = VisibleNodesRecursive(node, y, height);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 593,
        "text": "/////////////////////////////////////////////////////////////////////////",
        "context_before": "591: \t\tif (node->isOpen && node->HasChild())\n592: \t\t\ty = VisibleNodesRecursive(node, y, height);",
        "context_after": "594: \t}\n595: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 601,
        "text": "If there are no nodes to draw just return",
        "context_before": "599: int SkinTree::DrawNodesRecursive(HDC dc, SkinTreeNode* recursiveNode, int x, int y, int left, int right, int height)\n600: {",
        "context_after": "602: \t//if (!recursiveNode->HasChild())\n603: \t//\treturn y;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 602,
        "text": "if (!recursiveNode->HasChild())",
        "context_before": "600: {\n601: \t// If there are no nodes to draw just return",
        "context_after": "603: \t//\treturn y;\n604: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 603,
        "text": "return y;",
        "context_before": "601: \t// If there are no nodes to draw just return\n602: \t//if (!recursiveNode->HasChild())",
        "context_after": "604: \n605: \tfor (TreeNodeUnsafe node = recursiveNode->Child(); node != nullptr; node = node->Next())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 607,
        "text": "Do not draw nodes that beyond window bottom",
        "context_before": "605: \tfor (TreeNodeUnsafe node = recursiveNode->Child(); node != nullptr; node = node->Next())\n606: \t{",
        "context_after": "608: \t\t\tbreak; //return y;\n609: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 608,
        "text": "return y;",
        "context_before": "606: \t{\n607: \t\tif (y > height) // Do not draw nodes that beyond window bottom",
        "context_after": "609: \n610: \t\tif (node->nodeType == SkinTreeNode::NodeType::Text) // Draw node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 610,
        "text": "Draw node",
        "context_before": "608: \t\t\tbreak; //return y;\n609: ",
        "context_after": "611: \t\t{\n612: \t\t\tif (y > -nodeHeight) // Draw only visible nodes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 612,
        "text": "Draw only visible nodes",
        "context_before": "610: \t\tif (node->nodeType == SkinTreeNode::NodeType::Text) // Draw node\n611: \t\t{",
        "context_after": "613: \t\t\t{\n614: \t\t\t\t// Node area"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 614,
        "text": "Node area",
        "context_before": "612: \t\t\tif (y > -nodeHeight) // Draw only visible nodes\n613: \t\t\t{",
        "context_after": "615: \t\t\t\tCRect rc(x, y, right, y + nodeHeight);\n616: \t\t\t\tCRect rc2(left, y, right, y + nodeHeight);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 618,
        "text": "Draw background",
        "context_before": "616: \t\t\t\tCRect rc2(left, y, right, y + nodeHeight);\n617: ",
        "context_after": "619: \t\t\t\tfor (std::size_t i = 0, size = skinNodeB.size(); i < size; ++i)\n620: \t\t\t\t\tskinNodeB[i]->Draw(dc, rc2, node->stateSelect, node->stateLine);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 622,
        "text": "Draw elements",
        "context_before": "620: \t\t\t\t\tskinNodeB[i]->Draw(dc, rc2, node->stateSelect, node->stateLine);\n621: ",
        "context_after": "623: \t\t\t\tfor (std::size_t i = 0, size = skinNode.size(); i < size; ++i)\n624: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 634,
        "text": "Draw header",
        "context_before": "632: \t\t\t}\n633: \t\t}",
        "context_after": "635: \t\t{\n636: \t\t\tif (y > -headHeight) // Draw only visible nodes"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 636,
        "text": "Draw only visible nodes",
        "context_before": "634: \t\telse if (node->nodeType == SkinTreeNode::NodeType::Head) // Draw header\n635: \t\t{",
        "context_after": "637: \t\t\t{\n638: \t\t\t\t// Node area"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 638,
        "text": "Node area",
        "context_before": "636: \t\t\tif (y > -headHeight) // Draw only visible nodes\n637: \t\t\t{",
        "context_after": "639: \t\t\t\tCRect rc(x, y, right, y + headHeight);\n640: \t\t\t\tCRect rc2(left, y, right, y + headHeight);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 642,
        "text": "Draw background",
        "context_before": "640: \t\t\t\tCRect rc2(left, y, right, y + headHeight);\n641: ",
        "context_after": "643: \t\t\t\tfor (std::size_t i = 0, size = skinHeadB.size(); i < size; ++i)\n644: \t\t\t\t\tskinHeadB[i]->Draw(dc, rc2, node->stateSelect, node->stateLine);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 646,
        "text": "Draw elements",
        "context_before": "644: \t\t\t\t\tskinHeadB[i]->Draw(dc, rc2, node->stateSelect, node->stateLine);\n645: ",
        "context_after": "647: \t\t\t\tfor (std::size_t i = 0, size = skinHead.size(); i < size; ++i)\n648: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 662,
        "text": "/////////////////////////////////////////////////////////////////////////",
        "context_before": "660: \t\ty += node->rcNode.Height();\n661: ",
        "context_after": "663: \t\t// Recursively draw all open subnodes //\n664: \t\tif (node->isOpen && node->HasChild())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 663,
        "text": "Recursively draw all open subnodes //",
        "context_before": "661: \n662: ///////////////////////////////////////////////////////////////////////////",
        "context_after": "664: \t\tif (node->isOpen && node->HasChild())\n665: \t\t\ty = DrawNodesRecursive(dc, node, x + nodeIndent, y, left, right, height);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 666,
        "text": "/////////////////////////////////////////////////////////////////////////",
        "context_before": "664: \t\tif (node->isOpen && node->HasChild())\n665: \t\t\ty = DrawNodesRecursive(dc, node, x + nodeIndent, y, left, right, height);",
        "context_after": "667: \t}\n668: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 674,
        "text": "Clear selection",
        "context_before": "672: void SkinTree::SetFocusNode(TreeNodeUnsafe node)\n673: {",
        "context_after": "675: \tif (focusNode)\n676: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 681,
        "text": "Select new node",
        "context_before": "679: \t}\n680: ",
        "context_after": "682: \tnode->isSelect = true;\n683: \tnode->stateSelect = SkinTreeNode::StateFlag::Focus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 700,
        "text": "Recalculate position of nodes",
        "context_before": "698: \t\tnode->isShowOpen = false;\n699: ",
        "context_after": "701: \tResetScrollBar();\n702: \tisControlRedraw = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 714,
        "text": "Clear selection",
        "context_before": "712: \t\tTreeNodeUnsafe node = visibleNodes[clicked];\n713: ",
        "context_after": "715: \t\tif (focusNode)\n716: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 721,
        "text": "Select new node",
        "context_before": "719: \t\t}\n720: ",
        "context_after": "722: \t\tnode->isSelect = true;\n723: \t\tnode->stateSelect = SkinTreeNode::StateFlag::Focus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 738,
        "text": "Search for clicked node",
        "context_before": "736: \t::SetFocus(thisWnd);\n737: ",
        "context_after": "739: \tint clicked = FindNodeByPoint(point, HScrollGetPos());\n740: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 741,
        "text": "Click on node",
        "context_before": "739: \tint clicked = FindNodeByPoint(point, HScrollGetPos());\n740: ",
        "context_after": "742: \tif (clicked > -1)\n743: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 755,
        "text": "Click on expand",
        "context_before": "753: \t\trcNode.right = rc.right - scrollWidth;\n754: ",
        "context_after": "756: \t\tbool isClickExpand = false;\n757: \t\tif (node->isShowOpen)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 779,
        "text": "Expand or collapse node",
        "context_before": "777: \t\tif (isClickExpand)\n778: \t\t{",
        "context_after": "780: \t\t\tnode->isOpen = !node->isOpen;\n781: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 788,
        "text": "Recalculate position of nodes",
        "context_before": "786: \t\t\t\tnode->isShowOpen = false;\n787: ",
        "context_after": "789: \t\t\tResetScrollBar();\n790: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 798,
        "text": "Click on node",
        "context_before": "796: \t}\n797: ",
        "context_after": "799: \tif (clicked > -1)\n800: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 803,
        "text": "Set move node flag",
        "context_before": "801: \t\tTreeNodeUnsafe node = visibleNodes[clicked];\n802: ",
        "context_after": "804: \t\tif (node->nodeType == SkinTreeNode::NodeType::Text &&\n805: \t\t\t(node->type == SkinTreeNode::Type::Playlist || node->type == SkinTreeNode::Type::Smartlist))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 812,
        "text": "Clear selection",
        "context_before": "810: \t\t}\n811: ",
        "context_after": "813: \t\tif (focusNode)\n814: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 819,
        "text": "Select new node",
        "context_before": "817: \t\t}\n818: ",
        "context_after": "820: \t\tnode->isSelect = true;\n821: \t\tnode->stateSelect = SkinTreeNode::StateFlag::Focus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 831,
        "text": "Clear selection",
        "context_before": "829: \telse\n830: \t{",
        "context_after": "832: \t\tif (focusNode)\n833: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 854,
        "text": "Expand or collapse node",
        "context_before": "852: \t\t\tif (node == focusNode.get())\n853: \t\t\t{",
        "context_after": "855: \t\t\t\tnode->isOpen = !node->isOpen;\n856: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 863,
        "text": "Recalculate position of nodes",
        "context_before": "861: \t\t\t\t\tnode->isShowOpen = false;\n862: ",
        "context_after": "864: \t\t\t\tResetScrollBar();\n865: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 877,
        "text": "Search for clicked node",
        "context_before": "875: \tif (point)\n876: \t{",
        "context_after": "878: \t\tint clicked = FindNodeByPoint((*point), HScrollGetPos());\n879: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 880,
        "text": "Click on node",
        "context_before": "878: \t\tint clicked = FindNodeByPoint((*point), HScrollGetPos());\n879: ",
        "context_after": "881: \t\tif (clicked > -1)\n882: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 891,
        "text": "Do not select the same node",
        "context_before": "889: \t\t\t\t(node->nodeType == SkinTreeNode::NodeType::Head && node->type == SkinTreeNode::Type::NowPlaying))\n890: \t\t\t{",
        "context_after": "892: \t\t\t\t{\n893: \t\t\t\t\t// Clear selection"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 893,
        "text": "Clear selection",
        "context_before": "891: \t\t\t\tif (node != dropNode.get()) // Do not select the same node\n892: \t\t\t\t{",
        "context_after": "894: \t\t\t\t\tif (dropNode && (dropNode != focusNode))\n895: \t\t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 900,
        "text": "Select new node",
        "context_before": "898: \t\t\t\t\t}\n899: ",
        "context_after": "901: \t\t\t\t\tnode->isSelect = true;\n902: \t\t\t\t\tnode->stateSelect = SkinTreeNode::StateFlag::Focus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 908,
        "text": "Select something else other than playlist, clear selection",
        "context_before": "906: \t\t\t\t}\n907: \t\t\t}",
        "context_after": "909: \t\t\t\tpoint = nullptr;\n910: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 911,
        "text": "Select nothing, clear selection",
        "context_before": "909: \t\t\t\tpoint = nullptr;\n910: \t\t}",
        "context_after": "912: \t\t\tpoint = nullptr;\n913: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 917,
        "text": "Clear selection",
        "context_before": "915: \tif (point == nullptr)\n916: \t{",
        "context_after": "918: \t\t{\n919: \t\t\tif (dropNode != focusNode) // Do not clear selection from focus node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 919,
        "text": "Do not clear selection from focus node",
        "context_before": "917: \t\tif (dropNode) // Clear selection\n918: \t\t{",
        "context_after": "920: \t\t\t{\n921: \t\t\t\tdropNode->isSelect = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 942,
        "text": "Search for clicked node",
        "context_before": "940: \t::SetFocus(thisWnd);\n941: ",
        "context_after": "943: \tint clicked = FindNodeByPoint(point, HScrollGetPos());\n944: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 945,
        "text": "Click on node",
        "context_before": "943: \tint clicked = FindNodeByPoint(point, HScrollGetPos());\n944: ",
        "context_after": "946: \tif (clicked > -1)\n947: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 953,
        "text": "Clear selection",
        "context_before": "951: \t\t\tnode->type == SkinTreeNode::Type::Smartlist)\n952: \t\t{",
        "context_after": "954: \t\t\tif (focusNode)\n955: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 960,
        "text": "Select new node",
        "context_before": "958: \t\t\t}\n959: ",
        "context_after": "961: \t\t\tnode->isSelect = true;\n962: \t\t\tnode->stateSelect = SkinTreeNode::StateFlag::Focus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 975,
        "text": "Menu key or Shift+F10",
        "context_before": "973: \t\treturn;\n974: ",
        "context_after": "976: \t\t::GetCursorPos(&point);\n977: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1106,
        "text": "default value",
        "context_before": "1104: void SkinTree::MouseWheel(bool isReverse)\n1105: {",
        "context_after": "1107: \tSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &lineScroll, 0);\n1108: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1118,
        "text": "Old without smoothing",
        "context_before": "1116: \tif (isReverse) scroll = -scroll;\n1117: ",
        "context_after": "1119: //\tif (HScrollSetPos(HScrollGetPos() + scroll))\n1120: //\t\tInvalidate();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1119,
        "text": "if (HScrollSetPos(HScrollGetPos() + scroll))",
        "context_before": "1117: \n1118: \t// Old without smoothing",
        "context_after": "1120: //\t\tInvalidate();\n1121: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1120,
        "text": "Invalidate();",
        "context_before": "1118: \t// Old without smoothing\n1119: //\tif (HScrollSetPos(HScrollGetPos() + scroll))",
        "context_after": "1121: \n1122: \tif (!isSmoothScrollEnabled)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1148,
        "text": "smoothScrollNew is a new scroll position that the scroll should reach.",
        "context_before": "1146: {\n1147: \t// For smooth scrolling use two important variables smoothScrollNew and smoothScrollAcc.",
        "context_after": "1149: \t// smoothScrollAcc is the scroll acceleration:\n1150: \t// if = 0 then scroll and timer are stopped, if > 0 then scroll is moving up, if < 0 moving down."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1149,
        "text": "smoothScrollAcc is the scroll acceleration:",
        "context_before": "1147: \t// For smooth scrolling use two important variables smoothScrollNew and smoothScrollAcc.\n1148: \t// smoothScrollNew is a new scroll position that the scroll should reach.",
        "context_after": "1150: \t// if = 0 then scroll and timer are stopped, if > 0 then scroll is moving up, if < 0 moving down.\n1151: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1150,
        "text": "if = 0 then scroll and timer are stopped, if > 0 then scroll is moving up, if < 0 moving down.",
        "context_before": "1148: \t// smoothScrollNew is a new scroll position that the scroll should reach.\n1149: \t// smoothScrollAcc is the scroll acceleration:",
        "context_after": "1151: \n1152: \tif (smoothScrollAcc == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1157,
        "text": "Adjust scroll position",
        "context_before": "1155: \t\tsmoothScrollNew += scroll;\n1156: ",
        "context_after": "1158: \tsmoothScrollNew = std::max(HScrollGetMin(), std::min(HScrollGetMax() - HScrollGetPage(), smoothScrollNew));\n1159: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1160,
        "text": "Scroll is already in position",
        "context_before": "1158: \tsmoothScrollNew = std::max(HScrollGetMin(), std::min(HScrollGetMax() - HScrollGetPage(), smoothScrollNew));\n1159: ",
        "context_after": "1161: \tif (smoothScrollNew == HScrollGetPos())\n1162: \t\treturn;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1164,
        "text": "If scroll is not moving then start timer to move it",
        "context_before": "1162: \t\treturn;\n1163: ",
        "context_after": "1165: \tif (smoothScrollAcc == 0)\n1166: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1183,
        "text": "Slow down scrolling when reaching the destination point",
        "context_before": "1181: \tif (diff == 0) return;\n1182: ",
        "context_after": "1184: \tif (diff > 0)\n1185: \t\tsmoothScrollAcc = diff / 16 + 1;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1189,
        "text": "Scrolling",
        "context_before": "1187: \t\tsmoothScrollAcc = diff / 16 - 1;\n1188: ",
        "context_after": "1190: \tint oldPos = HScrollGetPos();\n1191: \tif (HScrollSetPos(HScrollGetPos() + smoothScrollAcc))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1228,
        "text": "Recalculate position of nodes",
        "context_before": "1226: \n1227: \t\t\tisMoveElement = false;",
        "context_after": "1229: \t\t\t::InvalidateRect(thisWnd, NULL, FALSE);\n1230: \t\t\t::SendMessage(thisParentWnd, UWM_TREESWAP, 0, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1235,
        "text": "else if (focusNode && focusNode->mainType == SkinTreeNode::NODE_HEAD && focusNode->type == SkinTreeNode::TYPE_NOW)",
        "context_before": "1233: \n1234: ",
        "context_after": "1236: \t//{\n1237: \t//\tfocusNode->isSelect = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1237,
        "text": "focusNode->isSelect = false;",
        "context_before": "1235: \t//else if (focusNode && focusNode->mainType == SkinTreeNode::NODE_HEAD && focusNode->type == SkinTreeNode::TYPE_NOW)\n1236: \t//{",
        "context_after": "1238: \t//\tfocusNode->stateSelect = SkinTreeNode::STATE_NORMAL;\n1239: \t//\tfocusNode = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1238,
        "text": "focusNode->stateSelect = SkinTreeNode::STATE_NORMAL;",
        "context_before": "1236: \t//{\n1237: \t//\tfocusNode->isSelect = false;",
        "context_after": "1239: \t//\tfocusNode = nullptr;\n1240: \t//\tInvalidate();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1239,
        "text": "focusNode = nullptr;",
        "context_before": "1237: \t//\tfocusNode->isSelect = false;\n1238: \t//\tfocusNode->stateSelect = SkinTreeNode::STATE_NORMAL;",
        "context_after": "1240: \t//\tInvalidate();\n1241: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1240,
        "text": "Invalidate();",
        "context_before": "1238: \t//\tfocusNode->stateSelect = SkinTreeNode::STATE_NORMAL;\n1239: \t//\tfocusNode = nullptr;",
        "context_after": "1241: \t//}\n1242: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1251,
        "text": "::InvalidateRect(thisWnd, NULL, FALSE);",
        "context_before": "1249: \t\t{\n1250: \t\t\tisMoveElement = false;",
        "context_after": "1252: \n1253: \t\t\t// Invalidate old"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1253,
        "text": "Invalidate old",
        "context_before": "1251: \t\t\t//::InvalidateRect(thisWnd, NULL, FALSE);\n1252: ",
        "context_after": "1254: \t\t\tCRect rc;\n1255: \t\t\t::GetClientRect(thisWnd, rc);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1261,
        "text": "Do not redraw offscreen",
        "context_before": "1259: \t\t\trc.top = dropPosMove - 2 + dropPosScroll - scrollPos;\n1260: \t\t\trc.bottom = dropPosMove + 3 + dropPosScroll - scrollPos;",
        "context_after": "1262: \t\t\t\t::InvalidateRect(thisWnd, rc, FALSE);\n1263: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1290,
        "text": "Latest node",
        "context_before": "1288: \t\t\t\tdropPosMoveNew = focusNode->Parent()->Child()->rcNode.top - scrollPos;\n1289: \t\t\t}",
        "context_after": "1291: \t\t\t{\n1292: \t\t\t\tdropNodeMoveNew = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1293,
        "text": "iDropPosNew = heightNodes - 1 - HScrollGetPos(); // -1 to do not redraw offscreen",
        "context_before": "1291: \t\t\t{\n1292: \t\t\t\tdropNodeMoveNew = nullptr;",
        "context_after": "1294: \t\t\t\tif (focusNode->Parent()->HasChild() && focusNode->Parent()->Child()->Next())\n1295: \t\t\t\t\tdropPosMoveNew = focusNode->Parent()->LastChild()->rcNode.bottom - 1 - scrollPos;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1299,
        "text": "Offscreen check",
        "context_before": "1297: \t\t}\n1298: ",
        "context_after": "1300: \t\tif (dropPosMoveNew < 0 || dropPosMoveNew > scrollPage - 1) // -1 do not know why, but the calculation more accurate that way\n1301: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1300,
        "text": "-1 do not know why, but the calculation more accurate that way",
        "context_before": "1298: \n1299: \t\t// Offscreen check",
        "context_after": "1301: \t\t{\n1302: \t\t\tdropNodeMoveNew = dropNodeMove.get();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1311,
        "text": "Invalidate old",
        "context_before": "1309: \t\t\t::GetClientRect(thisWnd, rc);\n1310: ",
        "context_after": "1312: \t\t\t{\n1313: \t\t\t\tint bottom = rc.bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1316,
        "text": "Do not redraw offscreen",
        "context_before": "1314: \t\t\t\trc.top = dropPosMove - 2 + dropPosScroll - scrollPos;\n1315: \t\t\t\trc.bottom = dropPosMove + 3 + dropPosScroll - scrollPos;",
        "context_after": "1317: \t\t\t\t\t::InvalidateRect(thisWnd, rc, FALSE);\n1318: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1325,
        "text": "::InvalidateRect(thisWnd, NULL, FALSE);",
        "context_before": "1323: \t\t\tdropNodeMove.reset(dropNodeMoveNew);\n1324: \t\t\tdropPosMove = dropPosMoveNew;",
        "context_after": "1326: \n1327: \t\t\t// Invalidate new"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1327,
        "text": "Invalidate new",
        "context_before": "1325: \t\t\t//::InvalidateRect(thisWnd, NULL, FALSE);\n1326: ",
        "context_after": "1328: \t\t\trc.top = dropPosMove - 2;\n1329: \t\t\trc.bottom = dropPosMove + 3;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1361,
        "text": "Check the limit we need to move a mouse to initiate Drag'n'Drop",
        "context_before": "1359: \t\t\t::SendMessage(thisParentWnd, UWM_TREEDRAG, 0, MAKELPARAM(point.x, point.y));\n1360: \t\t}",
        "context_after": "1362: \t\telse if (point.x > ptPress.x + 10 || point.y > ptPress.y + 10 ||\n1363: \t\t\tpoint.x < ptPress.x - 10 || point.y < ptPress.y - 10)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1372,
        "text": "if ((nFlags & (1 << 14))) // Do not repeat while holding a key",
        "context_before": "1370: void SkinTree::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)\n1371: {",
        "context_after": "1373: //\t{\n1374: //\t\tCWnd::OnKeyDown(nChar, nRepCnt, nFlags);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1374,
        "text": "CWnd::OnKeyDown(nChar, nRepCnt, nFlags);",
        "context_before": "1372: //\tif ((nFlags & (1 << 14))) // Do not repeat while holding a key\n1373: //\t{",
        "context_after": "1375: //\t\treturn;\n1376: //\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1375,
        "text": "return;",
        "context_before": "1373: //\t{\n1374: //\t\tCWnd::OnKeyDown(nChar, nRepCnt, nFlags);",
        "context_after": "1376: //\t}\n1377: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1401,
        "text": "Adjust scroll",
        "context_before": "1399: \t\t\t::SendMessage(thisParentWnd, UWM_FILLLIST, 0, (LPARAM)node);\n1400: \t\t}",
        "context_after": "1402: \t\t{\n1403: \t\t\tif (ScrollToHome())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1410,
        "text": "Nothing is selected, search for first node",
        "context_before": "1408: \t{\n1409: \t\tTreeNodeUnsafe node = nullptr;",
        "context_after": "1411: \t\t\tnode = FindPrevNode(nullptr, false);\n1412: \t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1434,
        "text": "Adjust scroll",
        "context_before": "1432: \t\t\t::SendMessage(thisParentWnd, UWM_FILLLIST, 0, (LPARAM)node);\n1433: \t\t}",
        "context_after": "1435: \t\t{\n1436: \t\t\tif (ScrollToEnd())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1463,
        "text": "Adjust scroll",
        "context_before": "1461: \t\t\t::SendMessage(thisParentWnd, UWM_FILLLIST, 0, (LPARAM)node);\n1462: \t\t}",
        "context_after": "1464: \t\t{\n1465: \t\t\tif (ScrollToHome())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1472,
        "text": "Nothing is selected, search for first node",
        "context_before": "1470: \t{\n1471: \t\tTreeNodeUnsafe node = nullptr;",
        "context_after": "1473: \t\t\tnode = FindPrevNode(nullptr, true);\n1474: \t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1496,
        "text": "Adjust scroll",
        "context_before": "1494: \t\t\t::SendMessage(thisParentWnd, UWM_FILLLIST, 0, (LPARAM)node);\n1495: \t\t}",
        "context_after": "1497: \t\t{\n1498: \t\t\tif (ScrollToEnd())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1508,
        "text": "Clear selection",
        "context_before": "1506: \t\tif (node && node != focusNode.get())\n1507: \t\t{",
        "context_after": "1509: \t\t\tif (focusNode)\n1510: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1525,
        "text": "Adjust scroll",
        "context_before": "1523: \t\t\t::SendMessage(thisParentWnd, UWM_FILLLIST, 0, (LPARAM)node);\n1524: \t\t}",
        "context_after": "1526: \t\t{\n1527: \t\t\tif (ScrollToHome())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1537,
        "text": "Clear selection",
        "context_before": "1535: \t\tif (node && node != focusNode.get())\n1536: \t\t{",
        "context_after": "1538: \t\t\tif (focusNode)\n1539: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1554,
        "text": "Adjust scroll",
        "context_before": "1552: \t\t\t::SendMessage(thisParentWnd, UWM_FILLLIST, 0, (LPARAM)node);\n1553: \t\t}",
        "context_after": "1555: \t\t{\n1556: \t\t\tif (ScrollToEnd())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1565,
        "text": "Expand",
        "context_before": "1563: \t\tif (focusNode && focusNode->isShowOpen && !focusNode->isOpen)\n1564: \t\t{",
        "context_after": "1566: \t\t\tfocusNode->isOpen = true;\n1567: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1581,
        "text": "Collapse",
        "context_before": "1579: \t\tif (focusNode && focusNode->isShowOpen && focusNode->isOpen)\n1580: \t\t{",
        "context_after": "1582: \t\t\tfocusNode->isOpen = false;\n1583: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1625,
        "text": "Search node function, helper for a recursive function below,",
        "context_before": "1623: TreeNodeUnsafe SkinTree::FindNextNode(TreeNodeUnsafe findNode, bool isPage)\n1624: {",
        "context_after": "1626: \t// also stores a variable for the recursive function\n1627: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1626,
        "text": "also stores a variable for the recursive function",
        "context_before": "1624: {\n1625: \t// Search node function, helper for a recursive function below,",
        "context_after": "1627: \n1628: \t// if findNode == nullptr then the function return the latest node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1628,
        "text": "if findNode == nullptr then the function return the latest node",
        "context_before": "1626: \t// also stores a variable for the recursive function\n1627: ",
        "context_after": "1629: \t// if the function return nullptr then a node searched for is latest\n1630: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1629,
        "text": "if the function return nullptr then a node searched for is latest",
        "context_before": "1627: \n1628: \t// if findNode == nullptr then the function return the latest node",
        "context_after": "1630: \n1631: \tbool isFind = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1638,
        "text": "Exception for search by page",
        "context_before": "1636: \tif (findNode == nullptr)\n1637: \t\treturn lastNode;",
        "context_after": "1639: \t{\n1640: \t\tif (findNode == lastNode)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1658,
        "text": "lastNode always contains the latest track",
        "context_before": "1656: \tfor (TreeNodeUnsafe node = recursiveNode->Child(); node != nullptr; node = node->Next())\n1657: \t{",
        "context_after": "1659: \n1660: \t\tif (findNode) // Search for a track (else search for the latest track)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1660,
        "text": "Search for a track (else search for the latest track)",
        "context_before": "1658: \t\tlastNode = node; // lastNode always contains the latest track\n1659: ",
        "context_after": "1661: \t\t{\n1662: \t\t\tif (isFind)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1664,
        "text": "Return next (KEY_DOWN)",
        "context_before": "1662: \t\t\tif (isFind)\n1663: \t\t\t{",
        "context_after": "1665: \t\t\t\t\treturn node;\n1666: \t\t\t\telse // Return next (one page down)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1666,
        "text": "Return next (one page down)",
        "context_before": "1664: \t\t\t\tif (!isPage) // Return next (KEY_DOWN)\n1665: \t\t\t\t\treturn node;",
        "context_after": "1667: \t\t\t\t{\n1668: \t\t\t\t\tint page = HScrollGetPage() - nodeHeight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1671,
        "text": "Return next (KEY_PAGEDOWN)",
        "context_before": "1669: \n1670: \t\t\t\t\tif (node->rcNode.bottom > findNode->rcNode.top + page)",
        "context_after": "1672: \t\t\t\t}\n1673: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1679,
        "text": "Recursive search",
        "context_before": "1677: \t\t}\n1678: ",
        "context_after": "1680: \t    if (node->isOpen && node->HasChild())\n1681: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1694,
        "text": "Search node function, helper for a recursive function below,",
        "context_before": "1692: TreeNodeUnsafe SkinTree::FindPrevNode(TreeNodeUnsafe findNode, bool isPage)\n1693: {",
        "context_after": "1695: \t// also stores a variable for the recursive function\n1696: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1695,
        "text": "also stores a variable for the recursive function",
        "context_before": "1693: {\n1694: \t// Search node function, helper for a recursive function below,",
        "context_after": "1696: \n1697: \t// if findNode == nullptr then the function return the first node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1697,
        "text": "if findNode == nullptr then the function return the first node",
        "context_before": "1695: \t// also stores a variable for the recursive function\n1696: ",
        "context_after": "1698: \t// if the function return nullptr then a node searched for is first\n1699: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1698,
        "text": "if the function return nullptr then a node searched for is first",
        "context_before": "1696: \n1697: \t// if findNode == nullptr then the function return the first node",
        "context_after": "1699: \n1700: \tTreeNodeUnsafe foundNode = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1707,
        "text": "Exception for search by page",
        "context_before": "1705: \tif (findNode == nullptr)\n1706: \t\treturn firstNode;",
        "context_after": "1708: \t{\n1709: \t\tif (findNode == firstNode)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1727,
        "text": "firstNode always contains the first track",
        "context_before": "1725: \tfor (TreeNodeUnsafe node = recursiveNode->Child(); node != nullptr; node = node->Next())\n1726: \t{",
        "context_after": "1728: \n1729: \t\tif (firstNode == nullptr) // Search for the first track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1729,
        "text": "Search for the first track",
        "context_before": "1727: \t\tif (firstNode == nullptr) firstNode = node; // firstNode always contains the first track\n1728: ",
        "context_after": "1730: \t\t\treturn nullptr; // Already found\n1731: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1733,
        "text": "Return previous (KEY_UP)",
        "context_before": "1731: \n1732: \t\tif (node == findNode) // Found a node",
        "context_after": "1734: \n1735: \t\tif (!isPage) // Store previous"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1735,
        "text": "Store previous",
        "context_before": "1733: \t\t\treturn foundNode; // Return previous (KEY_UP)\n1734: ",
        "context_after": "1736: \t\t\tfoundNode = node;\n1737: \t\telse // Store previous (one page up)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1737,
        "text": "Store previous (one page up)",
        "context_before": "1735: \t\tif (!isPage) // Store previous\n1736: \t\t\tfoundNode = node;",
        "context_after": "1738: \t\t{\n1739: \t\t\tint page = HScrollGetPage() - nodeHeight;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1742,
        "text": "Return previous (KEY_PAGEUP)",
        "context_before": "1740: \n1741: \t\t\tif (findNode->rcNode.bottom > node->rcNode.top + page)",
        "context_after": "1743: \t\t}\n1744: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1745,
        "text": "Recursive search",
        "context_before": "1743: \t\t}\n1744: ",
        "context_after": "1746: \t\tif (node->isOpen && node->HasChild())\n1747: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1786,
        "text": "end if (eNodeElements)",
        "context_before": "1784: \t\t\t\t\t}\n1785: \t\t\t\t}",
        "context_after": "1787: \n1788: \t\t\t\tXmlNode xmlNode2Background = xmlNode2.FirstChild(\"Background\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1798,
        "text": "end if (eNodeBackground)",
        "context_before": "1796: \t\t\t\t\t}\n1797: \t\t\t\t}",
        "context_after": "1799: \t\t\t}\n1800: \t\t\t// end if (eNode)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1800,
        "text": "end if (eNode)",
        "context_before": "1798: \t\t\t\t// end if (eNodeBackground)\n1799: \t\t\t}",
        "context_after": "1801: \n1802: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1823,
        "text": "end if (eHeadElements)",
        "context_before": "1821: \t\t\t\t\t}\n1822: \t\t\t\t}",
        "context_after": "1824: \n1825: \t\t\t\tXmlNode xmlHeadBackground = xmlHead.FirstChild(\"Background\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1835,
        "text": "end if (eHeadBackground)",
        "context_before": "1833: \t\t\t\t\t}\n1834: \t\t\t\t}",
        "context_after": "1836: \t\t\t}\n1837: \t\t\t// end if (eHead)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1837,
        "text": "end if (eHead)",
        "context_before": "1835: \t\t\t\t// end if (eHeadBackground)\n1836: \t\t\t}",
        "context_after": "1838: \n1839: \t\t\tXmlNode xmlBackground = xmlMain.FirstChild(\"Background\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1879,
        "text": "end if (eMain)",
        "context_before": "1877: \t\t\t}\n1878: \t\t}",
        "context_after": "1880: \t}\n1881: \telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1932,
        "text": "Get number of lines to scroll from Windows settings",
        "context_before": "1930: \tif (skinScroll)\n1931: \t{",
        "context_after": "1933: \t\tUINT lineScroll = 3; // default value\n1934: \t\tSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &lineScroll, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1933,
        "text": "default value",
        "context_before": "1931: \t{\n1932: \t\t// Get number of lines to scroll from Windows settings",
        "context_after": "1934: \t\tSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &lineScroll, 0);\n1935: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1949,
        "text": "iMax - 1 and below + 1 because:",
        "context_before": "1947: \t\t::SetScrollInfo(nativeScroll, SB_CTL, &si, TRUE);\n1948: ",
        "context_after": "1950: \t\t// The SetScrollInfo function performs range checking on the values specified by the nPage and nPos\n1951: \t\t// members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1950,
        "text": "The SetScrollInfo function performs range checking on the values specified by the nPage and nPos",
        "context_before": "1948: \n1949: \t\t// iMax - 1 and below + 1 because:",
        "context_after": "1951: \t\t// members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1.\n1952: \t\t// The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1951,
        "text": "members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1.",
        "context_before": "1949: \t\t// iMax - 1 and below + 1 because:\n1950: \t\t// The SetScrollInfo function performs range checking on the values specified by the nPage and nPos",
        "context_after": "1952: \t\t// The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value\n1953: \t\t// is beyond its range, the function sets it to a value that is just within the range."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1952,
        "text": "The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value",
        "context_before": "1950: \t\t// The SetScrollInfo function performs range checking on the values specified by the nPage and nPos\n1951: \t\t// members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1.",
        "context_after": "1953: \t\t// is beyond its range, the function sets it to a value that is just within the range.\n1954: \t\t// SetScrollInfo: http://msdn.microsoft.com/en-us/library/bb787595(VS.85).aspx"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1953,
        "text": "is beyond its range, the function sets it to a value that is just within the range.",
        "context_before": "1951: \t\t// members of the SCROLLINFO structure. The nPage member must specify a value from 0 to nMax - nMin +1.\n1952: \t\t// The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value",
        "context_after": "1954: \t\t// SetScrollInfo: http://msdn.microsoft.com/en-us/library/bb787595(VS.85).aspx\n1955: \t\t// i.e. we compensate this 1 pixel otherwise for example SmoothScroll never reach the end on 1 pixel."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1954,
        "text": "SetScrollInfo: http://msdn.microsoft.com/en-us/library/bb787595(VS.85).aspx",
        "context_before": "1952: \t\t// The nPos member must specify a value between nMin and nMax - max( nPage- 1, 0). If either value\n1953: \t\t// is beyond its range, the function sets it to a value that is just within the range.",
        "context_after": "1955: \t\t// i.e. we compensate this 1 pixel otherwise for example SmoothScroll never reach the end on 1 pixel.\n1956: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1955,
        "text": "i.e. we compensate this 1 pixel otherwise for example SmoothScroll never reach the end on 1 pixel.",
        "context_before": "1953: \t\t// is beyond its range, the function sets it to a value that is just within the range.\n1954: \t\t// SetScrollInfo: http://msdn.microsoft.com/en-us/library/bb787595(VS.85).aspx",
        "context_after": "1956: \t}\n1957: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 2030,
        "text": "Get number of lines to scroll from Windows settings",
        "context_before": "2028: \telse\n2029: \t{",
        "context_after": "2031: \t\tUINT lineScroll = 3; // default value\n2032: \t\tSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &lineScroll, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 2031,
        "text": "default value",
        "context_before": "2029: \t{\n2030: \t\t// Get number of lines to scroll from Windows settings",
        "context_after": "2032: \t\tSystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &lineScroll, 0);\n2033: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.h",
        "line": 134,
        "text": "Native Windows scroll",
        "context_before": "132: \tbool isControlRedraw = true;\n133: ",
        "context_after": "135: \tstd::unique_ptr<SkinScroll> skinScroll; // Skin scroll, if nullptr use native\n136: \tint scrollWidth = 0; // Scroll width, if 0 then scroll is hidden"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.h",
        "line": 135,
        "text": "Skin scroll, if nullptr use native",
        "context_before": "133: \n134: \tHWND nativeScroll = NULL; // Native Windows scroll",
        "context_after": "136: \tint scrollWidth = 0; // Scroll width, if 0 then scroll is hidden\n137: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.h",
        "line": 136,
        "text": "Scroll width, if 0 then scroll is hidden",
        "context_before": "134: \tHWND nativeScroll = NULL; // Native Windows scroll\n135: \tstd::unique_ptr<SkinScroll> skinScroll; // Skin scroll, if nullptr use native",
        "context_after": "137: \n138: \tbool ScrollToNode(TreeNodeUnsafe node, int indent = 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.h",
        "line": 142,
        "text": "Helper functions for scroll (native and skin)",
        "context_before": "140: \tbool ScrollToEnd();\n141: ",
        "context_after": "143: \t// The class interact with scroll throught these functions.\n144: \t// These functions does not interact with class only with scroll,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.h",
        "line": 143,
        "text": "The class interact with scroll throught these functions.",
        "context_before": "141: \n142: \t// Helper functions for scroll (native and skin)",
        "context_after": "144: \t// These functions does not interact with class only with scroll,\n145: \t// only exception in HScrollMessage when native scroll."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.h",
        "line": 144,
        "text": "These functions does not interact with class only with scroll,",
        "context_before": "142: \t// Helper functions for scroll (native and skin)\n143: \t// The class interact with scroll throught these functions.",
        "context_after": "145: \t// only exception in HScrollMessage when native scroll.\n146: \tint HScrollGetPos();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.h",
        "line": 158,
        "text": "Smooth scrolling",
        "context_before": "156: \tint HScrollMessageGetPosOld();\n157: ",
        "context_after": "159: \tbool isSmoothScrollEnabled = true;\n160: \tint smoothScrollAcc = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 35,
        "text": "Load type",
        "context_before": "33: bool SkinTreeBack::LoadSkin(XmlNode& xmlNode, std::wstring& path, ZipFile* zipFile)\n34: {",
        "context_after": "36: \ttype = GetType(xmlNode);\n37: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 41,
        "text": "Load default element",
        "context_before": "39: \t\treturn false;\n40: ",
        "context_after": "42: \tif (type == Type::Image)\n43: \t\tLoadImage(xmlNode, path, zipFile, defElm);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 49,
        "text": "Load default position",
        "context_before": "47: \t\tLoadFill(xmlNode, defElm);\n48: ",
        "context_after": "50: \tLoadPosition(xmlNode, defPos, defElm);\n51: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 52,
        "text": "Load states",
        "context_before": "50: \tLoadPosition(xmlNode, defPos, defElm);\n51: ",
        "context_after": "53: \tfor (XmlNode xmlState = xmlNode.FirstChild(\"State\"); xmlState; xmlState = xmlState.NextChild(\"State\"))\n54: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 63,
        "text": "Add new state",
        "context_before": "61: void SkinTreeBack::LoadState(XmlNode& xmlNode, std::wstring& path, ZipFile* zipFile, XmlNode& xmlState)\n62: {",
        "context_after": "64: \tlistState.push_back(structState());\n65: \tstructState& state2 = listState.back();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 73,
        "text": "Reset states to find out what loaded",
        "context_before": "71: \tstructElm& elm2 = *listElm.back();\n72: ",
        "context_after": "74: \tstate2.stateSelect = 0;\n75: \tstate2.stateLine = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 91,
        "text": "Select state is not loaded, use for all",
        "context_before": "89: \t\tif (state == 1) state2.stateSelect |= SkinTreeNode::StateFlag::Focus;\n90: \t}",
        "context_after": "92: \tif (state2.stateSelect == 0)\n93: \t\tstate2.stateSelect = SkinTreeNode::StateFlag::Normal | SkinTreeNode::StateFlag::Select | SkinTreeNode::StateFlag::Focus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 103,
        "text": "Line state is not loaded, use for all",
        "context_before": "101: \t\tif (state == 1) state2.stateLine |= SkinTreeNode::StateFlag::Line2;\n102: \t}",
        "context_after": "104: \tif (state2.stateLine == 0)\n105: \t\tstate2.stateLine = SkinTreeNode::StateFlag::Line1 | SkinTreeNode::StateFlag::Line2;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 108,
        "text": "Load element for the state, if empty load default",
        "context_before": "106: \n107: ",
        "context_after": "109: \tif (type == Type::Image)\n110: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 112,
        "text": "elm2 = defElm",
        "context_before": "110: \t{\n111: \t\tif (!LoadImage(xmlState, path, zipFile, elm2))",
        "context_after": "113: \t}\n114: \telse if (type == Type::Line)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 117,
        "text": "elm2 = defElm",
        "context_before": "115: \t{\n116: \t\tif (!LoadLine(xmlState, elm2))",
        "context_after": "118: \t}\n119: \telse if (type == Type::Fill)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 122,
        "text": "elm2 = defElm",
        "context_before": "120: \t{\n121: \t\tif (!LoadFill(xmlState, elm2))",
        "context_after": "123: \t}\n124: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 125,
        "text": "Load position for the state, if empty load default",
        "context_before": "123: \t}\n124: ",
        "context_after": "126: \tif (!LoadPosition(xmlState, pos2, elm2))\n127: \t\tLoadPosition(xmlNode, pos2, elm2); // pos2 = defPos"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 127,
        "text": "pos2 = defPos",
        "context_before": "125: \t// Load position for the state, if empty load default\n126: \tif (!LoadPosition(xmlState, pos2, elm2))",
        "context_after": "128: }\n129: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 144,
        "text": "Default",
        "context_before": "142: bool SkinTreeBack::LoadPosition(XmlNode& xmlNode, structPos& pos, structElm& elm)\n143: {",
        "context_after": "145: \tpos.left   = 0;\n146: \tpos.right  = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 184,
        "text": "Default",
        "context_before": "182: \t\t\t\tpos.isWidth = true;\n183: \t\t}",
        "context_after": "185: \t\t{\n186: \t\t\tpos.isLeft = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 208,
        "text": "Default",
        "context_before": "206: \t\t\t\tpos.isHeight = true;\n207: \t\t}",
        "context_after": "209: \t\t{\n210: \t\t\tpos.isTop = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 250,
        "text": "Default",
        "context_before": "248: \t\tconst char* strColor = xmlLine.AttributeRaw(\"Color\");\n249: ",
        "context_after": "251: \n252: \t\tif (strColor)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 276,
        "text": "Default",
        "context_before": "274: \t\tconst char* strColor = xmlRect.AttributeRaw(\"Color\");\n275: ",
        "context_after": "277: \n278: \t\tif (strColor)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 302,
        "text": "If element or position for the state exists then use it else use default",
        "context_before": "300: \tstructElm* elm = &defElm;\n301: ",
        "context_after": "303: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n304: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 305,
        "text": "Check all states",
        "context_before": "303: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n304: \t{",
        "context_after": "306: \t\tif ((listState[i].stateSelect & stateSelect) &&\n307: \t\t\t(listState[i].stateLine & stateLine))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 320,
        "text": "Left location",
        "context_before": "318: \tCRect rcDraw;\n319: ",
        "context_after": "321: \t{\n322: \t\trcDraw.left = rc.left + pos->left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 324,
        "text": "Fixed width",
        "context_before": "322: \t\trcDraw.left = rc.left + pos->left;\n323: ",
        "context_after": "325: \t\t\trcDraw.right = rcDraw.left + pos->width;\n326: \t\telse // To right"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 326,
        "text": "To right",
        "context_before": "324: \t\tif (pos->isWidth) // Fixed width\n325: \t\t\trcDraw.right = rcDraw.left + pos->width;",
        "context_after": "327: \t\t\trcDraw.right = rc.right - pos->right;\n328: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 329,
        "text": "Right location",
        "context_before": "327: \t\t\trcDraw.right = rc.right - pos->right;\n328: \t}",
        "context_after": "330: \t{\n331: \t\trcDraw.left = rc.right - pos->width - pos->right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 335,
        "text": "Top location",
        "context_before": "333: \t}\n334: ",
        "context_after": "336: \t{\n337: \t\trcDraw.top = rc.top + pos->top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 339,
        "text": "Fixed height",
        "context_before": "337: \t\trcDraw.top = rc.top + pos->top;\n338: ",
        "context_after": "340: \t\t\trcDraw.bottom = rcDraw.top + pos->height;\n341: \t\telse // To bottom"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 341,
        "text": "To bottom",
        "context_before": "339: \t\tif (pos->isHeight) // Fixed height\n340: \t\t\trcDraw.bottom = rcDraw.top + pos->height;",
        "context_after": "342: \t\t\trcDraw.bottom = rc.bottom - pos->bottom;\n343: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.cpp",
        "line": 344,
        "text": "Bottom location",
        "context_before": "342: \t\t\trcDraw.bottom = rc.bottom - pos->bottom;\n343: \t}",
        "context_after": "345: \t{\n346: \t\trcDraw.top = rc.bottom - pos->height - pos->bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.h",
        "line": 32,
        "text": "Image type",
        "context_before": "30: \tSkinTreeBack& operator=(const SkinTreeBack&) = delete;\n31: ",
        "context_after": "33: \t{\n34: \t\tNone  = -404,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.h",
        "line": 37,
        "text": "Outline rectangle",
        "context_before": "35: \n36: \t\tImage = 0,  // Image",
        "context_after": "38: \t\tFill  = 2   // Filled rectangle\n39: \t};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.h",
        "line": 38,
        "text": "Filled rectangle",
        "context_before": "36: \t\tImage = 0,  // Image\n37: \t\tLine  = 1,  // Outline rectangle",
        "context_after": "39: \t};\n40: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.h",
        "line": 41,
        "text": "Default size",
        "context_before": "39: \t};\n40: ",
        "context_after": "42: \t{\n43: \t\tstatic const int Width  = 20;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.h",
        "line": 50,
        "text": "Left indent",
        "context_before": "48: \t{\n49: \t\tbool isLoad;",
        "context_after": "51: \t\tint right;   // Right indent\n52: \t\tint top;     // Top indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.h",
        "line": 51,
        "text": "Right indent",
        "context_before": "49: \t\tbool isLoad;\n50: \t\tint left;    // Left indent",
        "context_after": "52: \t\tint top;     // Top indent\n53: \t\tint bottom;  // Bottom indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.h",
        "line": 52,
        "text": "Top indent",
        "context_before": "50: \t\tint left;    // Left indent\n51: \t\tint right;   // Right indent",
        "context_after": "53: \t\tint bottom;  // Bottom indent\n54: \t\tint width;   // Width"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.h",
        "line": 53,
        "text": "Bottom indent",
        "context_before": "51: \t\tint right;   // Right indent\n52: \t\tint top;     // Top indent",
        "context_after": "54: \t\tint width;   // Width\n55: \t\tint height;  // Height"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.h",
        "line": 55,
        "text": "Height",
        "context_before": "53: \t\tint bottom;  // Bottom indent\n54: \t\tint width;   // Width",
        "context_after": "56: \t\tbool isLeft;   // Left indent in priority (else right indent)\n57: \t\tbool isTop;    // Top indent in priority (else bottom indent)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.h",
        "line": 56,
        "text": "Left indent in priority (else right indent)",
        "context_before": "54: \t\tint width;   // Width\n55: \t\tint height;  // Height",
        "context_after": "57: \t\tbool isTop;    // Top indent in priority (else bottom indent)\n58: \t\tbool isWidth;  // Width in priority (else right indent)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.h",
        "line": 57,
        "text": "Top indent in priority (else bottom indent)",
        "context_before": "55: \t\tint height;  // Height\n56: \t\tbool isLeft;   // Left indent in priority (else right indent)",
        "context_after": "58: \t\tbool isWidth;  // Width in priority (else right indent)\n59: \t\tbool isHeight; // Height in priority (else bottom indent)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.h",
        "line": 58,
        "text": "Width in priority (else right indent)",
        "context_before": "56: \t\tbool isLeft;   // Left indent in priority (else right indent)\n57: \t\tbool isTop;    // Top indent in priority (else bottom indent)",
        "context_after": "59: \t\tbool isHeight; // Height in priority (else bottom indent)\n60: \t}defPos;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.h",
        "line": 59,
        "text": "Height in priority (else bottom indent)",
        "context_before": "57: \t\tbool isTop;    // Top indent in priority (else bottom indent)\n58: \t\tbool isWidth;  // Width in priority (else right indent)",
        "context_after": "60: \t}defPos;\n61: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeBack.h",
        "line": 77,
        "text": "State arrays",
        "context_before": "75: \tType type = Type::None;\n76: ",
        "context_after": "78: \tstd::vector<structState> listState;\n79: \tstd::vector<structPos> listPos;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 42,
        "text": "Load type",
        "context_before": "40: bool SkinTreeElement::LoadSkin(XmlNode& xmlNode, std::wstring& path, ZipFile* zipFile)\n41: {",
        "context_after": "43: \ttype = GetType(xmlNode);\n44: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 48,
        "text": "Load default element",
        "context_before": "46: \t\treturn false;\n47: ",
        "context_after": "49: \tif ((int)type >= 0) // Font\n50: \t\tLoadFont(xmlNode, path, defElm);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 56,
        "text": "Load default position",
        "context_before": "54: \t\tLoadIcons(xmlNode, path, zipFile, defElm);\n55: ",
        "context_after": "57: \tLoadPosition(xmlNode, defPos);\n58: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 59,
        "text": "Load states",
        "context_before": "57: \tLoadPosition(xmlNode, defPos);\n58: ",
        "context_after": "60: \tfor (XmlNode xmlState = xmlNode.FirstChild(\"State\"); xmlState; xmlState = xmlState.NextChild(\"State\"))\n61: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 70,
        "text": "Add new state",
        "context_before": "68: void SkinTreeElement::LoadState(XmlNode& xmlNode, std::wstring& path, ZipFile* zipFile, XmlNode& xmlState)\n69: {",
        "context_after": "71: \tlistState.push_back(structState());\n72: \tstructState& state2 = listState.back();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 82,
        "text": "Reset states to find out what loaded",
        "context_before": "80: \telm2.font = NULL;\n81: ",
        "context_after": "83: \tstate2.stateSelect = 0;\n84: \tstate2.stateLine = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 100,
        "text": "Select state is not loaded, use for all",
        "context_before": "98: \t\tif (state == 1) state2.stateSelect |= SkinTreeNode::StateFlag::Focus;\n99: \t}",
        "context_after": "101: \tif (state2.stateSelect == 0)\n102: \t\tstate2.stateSelect = SkinTreeNode::StateFlag::Normal | SkinTreeNode::StateFlag::Select | SkinTreeNode::StateFlag::Focus;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 113,
        "text": "Line state is not loaded, use for all",
        "context_before": "111: \t\tif (state == 1) state2.stateLine |= SkinTreeNode::StateFlag::Line2;\n112: \t}",
        "context_after": "114: \tif (state2.stateLine == 0)\n115: \t\tstate2.stateLine = SkinTreeNode::StateFlag::Line1 | SkinTreeNode::StateFlag::Line2;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 118,
        "text": "Load element for the state, if empty load default",
        "context_before": "116: \n117: ",
        "context_after": "119: \tif ((int)type >= 0) // Font\n120: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 122,
        "text": "elm2 = defElm",
        "context_before": "120: \t{\n121: \t\tif (!LoadFont(xmlState, path, elm2))",
        "context_after": "123: \t}\n124: \telse if (type == Type::Expand)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 127,
        "text": "elm2 = defElm",
        "context_before": "125: \t{\n126: \t\tif (!LoadExpand(xmlState, path, zipFile, elm2))",
        "context_after": "128: \t}\n129: \telse if (type == Type::Icon)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 132,
        "text": "elm2 = defElm",
        "context_before": "130: \t{\n131: \t\tif (!LoadIcons(xmlState, path, zipFile, elm2))",
        "context_after": "133: \t}\n134: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 135,
        "text": "Load position for the state, if empty load default",
        "context_before": "133: \t}\n134: ",
        "context_after": "136: \tif (!LoadPosition(xmlState, pos2))\n137: \t\tLoadPosition(xmlNode, pos2); // pos2 = defPos"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 137,
        "text": "pos2 = defPos",
        "context_before": "135: \t// Load position for the state, if empty load default\n136: \tif (!LoadPosition(xmlState, pos2))",
        "context_after": "138: }\n139: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 154,
        "text": "Default",
        "context_before": "152: bool SkinTreeElement::LoadPosition(XmlNode& xmlNode, structPos& pos)\n153: {",
        "context_after": "155: \tpos.left   = 0;\n156: \tpos.right  = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 160,
        "text": "pos.height = 0;",
        "context_before": "158: \tpos.bottom = 0;\n159: \tpos.width  = 0;",
        "context_after": "161: \tpos.isLeft   = true;\n162: \tpos.isTop    = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 164,
        "text": "pos.height = true;",
        "context_before": "162: \tpos.isTop    = true;\n163: \tpos.isWidth  = true;",
        "context_after": "165: \n166: \tXmlNode xmlPosition = xmlNode.FirstChild(\"Position\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 186,
        "text": "Default",
        "context_before": "184: \t\t\t\tpos.isWidth = true;\n185: \t\t}",
        "context_after": "187: \t\t{\n188: \t\t\tpos.isLeft = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 198,
        "text": "Default",
        "context_before": "196: \t\telse if (xmlPosition.Attribute(\"Bottom\", &pos.bottom))\n197: \t\t\tpos.isTop = false;",
        "context_after": "199: \t\t\tpos.isTop = true;\n200: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 225,
        "text": "Default",
        "context_before": "223: \t\telm.font = ExImage::CreateElementFont(fname, fsize, fbold, fitalic, fclear);\n224: ",
        "context_after": "226: \t\txmlFont.Attribute(\"Align\", &elm.align);\n227: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 230,
        "text": "Default",
        "context_before": "228: \t\tconst char* strColor = xmlFont.AttributeRaw(\"Color\");\n229: ",
        "context_after": "231: \n232: \t\tif (strColor)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 421,
        "text": "If element or position for the state exists then use it else use default",
        "context_before": "419: \tstructElm* elm = &defElm;\n420: ",
        "context_after": "422: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n423: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 424,
        "text": "Check all states",
        "context_before": "422: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n423: \t{",
        "context_after": "425: \t\tif ((listState[i].stateSelect & stateSelect) &&\n426: \t\t\t(listState[i].stateLine & stateLine))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 437,
        "text": "Get text size",
        "context_before": "435: \t\treturn;\n436: ",
        "context_after": "438: \tHGDIOBJ oldFont = ::SelectObject(dc, elm->font);\n439: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 443,
        "text": "TEXTMETRIC tm; ::GetTextMetricsW(dc, &tm); szText.cx += tm.tmOverhang; szText.cy = tm.tmHeight - tm.tmExternalLeading;",
        "context_before": "441: \t::GetTextExtentPoint32(dc, text.c_str(), (int)text.size(), &szText);\n442: ",
        "context_after": "448: \n449: \tCRect rcText;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 447,
        "text": "szText.cx += 3;",
        "context_before": "445: \tszText.cx += tm.tmOverhang;\n446: \tszText.cy = tm.tmHeight - tm.tmExternalLeading;*/",
        "context_after": "448: \n449: \tCRect rcText;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 451,
        "text": "Left location",
        "context_before": "449: \tCRect rcText;\n450: ",
        "context_after": "452: \t{\n453: \t\trcText.left = rc.left + pos->left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 455,
        "text": "Fixed width",
        "context_before": "453: \t\trcText.left = rc.left + pos->left;\n454: ",
        "context_after": "456: \t\t\trcText.right = rcText.left + pos->width; //szText.cx;\n457: \t\telse // To right"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 456,
        "text": "szText.cx;",
        "context_before": "454: \n455: \t\tif (pos->isWidth) // Fixed width",
        "context_after": "457: \t\telse // To right\n458: \t\t\trcText.right = rc.right - pos->right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 457,
        "text": "To right",
        "context_before": "455: \t\tif (pos->isWidth) // Fixed width\n456: \t\t\trcText.right = rcText.left + pos->width; //szText.cx;",
        "context_after": "458: \t\t\trcText.right = rc.right - pos->right;\n459: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 460,
        "text": "Right location",
        "context_before": "458: \t\t\trcText.right = rc.right - pos->right;\n459: \t}",
        "context_after": "461: \t{\n462: \t\trcText.left = rc.right - szText.cx - pos->right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 466,
        "text": "Top location",
        "context_before": "464: \t}\n465: ",
        "context_after": "467: \t{\n468: \t\trcText.top = rc.top + pos->top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 471,
        "text": "Bottom location",
        "context_before": "469: \t\trcText.bottom = rcText.top + szText.cy;\n470: \t}",
        "context_after": "472: \t{\n473: \t\trcText.top = rc.bottom - szText.cy - pos->bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 481,
        "text": "if (sPos2->iRight > 0)",
        "context_before": "479: \t::SetTextColor(dc, elm->color);\n480: ",
        "context_after": "482: //\t{\n483: \t\tif (elm->align == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 484,
        "text": "|DT_VCENTER",
        "context_before": "482: //\t{\n483: \t\tif (elm->align == 0)",
        "context_after": "486: \t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_RIGHT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n487: \t\telse // if (elm->align == 2)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 486,
        "text": "|DT_VCENTER",
        "context_before": "484: \t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n485: \t\telse if (elm->align == 1)",
        "context_after": "488: \t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_CENTER|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n489: //\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 487,
        "text": "if (elm->align == 2)",
        "context_before": "485: \t\telse if (elm->align == 1)\n486: \t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_RIGHT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);",
        "context_after": "488: \t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_CENTER|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n489: //\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 488,
        "text": "|DT_VCENTER",
        "context_before": "486: \t\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_RIGHT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n487: \t\telse // if (elm->align == 2)",
        "context_after": "490: //\telse\n491: //\t\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 491,
        "text": "::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);",
        "context_before": "489: //\t}\n490: //\telse",
        "context_after": "492: \n493: \t::SelectObject(dc, oldFont);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 504,
        "text": "If element or position for the state exists then use it else use default",
        "context_before": "502: \tstructElm* elm = &defElm;\n503: ",
        "context_after": "505: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n506: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 507,
        "text": "Check all states",
        "context_before": "505: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n506: \t{",
        "context_after": "508: \t\tif ((listState[i].stateSelect & stateSelect) &&\n509: \t\t\t(listState[i].stateLine & stateLine))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 527,
        "text": "Left location",
        "context_before": "525: \tCRect rcDraw;\n526: ",
        "context_after": "528: \t{\n529: \t\trcDraw.left = rc.left + pos->left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 532,
        "text": "Right location",
        "context_before": "530: \t\trcDraw.right = rcDraw.left + width;\n531: \t}",
        "context_after": "533: \t{\n534: \t\trcDraw.left = rc.right - width - pos->right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 538,
        "text": "Top location",
        "context_before": "536: \t}\n537: ",
        "context_after": "539: \t{\n540: \t\trcDraw.top = rc.top + pos->top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 543,
        "text": "Bottom location",
        "context_before": "541: \t\trcDraw.bottom = rcDraw.top + height;\n542: \t}",
        "context_after": "544: \t{\n545: \t\trcDraw.top = rc.bottom - height - pos->bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 555,
        "text": "rcDraw.top = rc.top;",
        "context_before": "553: \t\telm->expand[1].Draw(dc, rcDraw.left, rcDraw.top);\n554: ",
        "context_after": "556: //\trcDraw.bottom = rc.bottom;\n557: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 556,
        "text": "rcDraw.bottom = rc.bottom;",
        "context_before": "554: \n555: //\trcDraw.top = rc.top;",
        "context_after": "557: \n558: //\trcExpand = rcDraw;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 558,
        "text": "rcExpand = rcDraw;",
        "context_before": "556: //\trcDraw.bottom = rc.bottom;\n557: ",
        "context_after": "559: }\n560: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 569,
        "text": "If element or position for the state exists then use it else use default",
        "context_before": "567: \tstructElm* elm = &defElm;\n568: ",
        "context_after": "570: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n571: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 572,
        "text": "Check all states",
        "context_before": "570: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n571: \t{",
        "context_after": "573: \t\tif ((listState[i].stateSelect & stateSelect) &&\n574: \t\t\t(listState[i].stateLine & stateLine))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 592,
        "text": "Left location",
        "context_before": "590: \tCRect rcDraw;\n591: ",
        "context_after": "593: \t{\n594: \t\trcDraw.left = rc.left + pos->left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 597,
        "text": "Right location",
        "context_before": "595: \t\trcDraw.right = rcDraw.left + width;\n596: \t}",
        "context_after": "598: \t{\n599: \t\trcDraw.left = rc.right - width - pos->right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 603,
        "text": "Top location",
        "context_before": "601: \t}\n602: ",
        "context_after": "604: \t{\n605: \t\trcDraw.top = rc.top + pos->top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 608,
        "text": "Bottom location",
        "context_before": "606: \t\trcDraw.bottom = rcDraw.top + height;\n607: \t}",
        "context_after": "609: \t{\n610: \t\trcDraw.top = rc.bottom - height - pos->bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 614,
        "text": "Check if expand is clicked",
        "context_before": "612: \t}\n613: ",
        "context_after": "615: \trcDraw.top = rc.top;\n616: \trcDraw.bottom = rc.bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 636,
        "text": "If element or position for the state exists then use it else use default",
        "context_before": "634: \tstructElm* elm = &defElm;\n635: ",
        "context_after": "637: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n638: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 639,
        "text": "Check all states",
        "context_before": "637: \tfor (std::size_t i = 0, size = listState.size(); i < size; ++i)\n638: \t{",
        "context_after": "640: \t\tif ((listState[i].stateSelect & stateSelect) &&\n641: \t\t\t(listState[i].stateLine & stateLine))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 659,
        "text": "Left location",
        "context_before": "657: \tCRect rcDraw;\n658: ",
        "context_after": "660: \t{\n661: \t\trcDraw.left = rc.left + pos->left;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 664,
        "text": "Right location",
        "context_before": "662: \t\trcDraw.right = rcDraw.left + width;\n663: \t}",
        "context_after": "665: \t{\n666: \t\trcDraw.left = rc.right - width - pos->right;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 670,
        "text": "Top location",
        "context_before": "668: \t}\n669: ",
        "context_after": "671: \t{\n672: \t\trcDraw.top = rc.top + pos->top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.cpp",
        "line": 675,
        "text": "Bottom location",
        "context_before": "673: \t\trcDraw.bottom = rcDraw.top + height;\n674: \t}",
        "context_after": "676: \t{\n677: \t\trcDraw.top = rc.bottom - height - pos->bottom;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.h",
        "line": 41,
        "text": "Total number (Latest + 1)",
        "context_before": "39: \t\tText   =  0,\n40: ",
        "context_after": "42: \t};\n43: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.h",
        "line": 47,
        "text": "Left indent",
        "context_before": "45: \t{\n46: \t\tbool isLoad;",
        "context_after": "48: \t\tint right;   // Right indent\n49: \t\tint top;     // Top indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.h",
        "line": 48,
        "text": "Right indent",
        "context_before": "46: \t\tbool isLoad;\n47: \t\tint left;    // Left indent",
        "context_after": "49: \t\tint top;     // Top indent\n50: \t\tint bottom;  // Bottom indent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.h",
        "line": 49,
        "text": "Top indent",
        "context_before": "47: \t\tint left;    // Left indent\n48: \t\tint right;   // Right indent",
        "context_after": "50: \t\tint bottom;  // Bottom indent\n51: \t\tint width;   // Width"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.h",
        "line": 50,
        "text": "Bottom indent",
        "context_before": "48: \t\tint right;   // Right indent\n49: \t\tint top;     // Top indent",
        "context_after": "51: \t\tint width;   // Width\n52: \t\t// int height;  // Height"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.h",
        "line": 52,
        "text": "int height;  // Height",
        "context_before": "50: \t\tint bottom;  // Bottom indent\n51: \t\tint width;   // Width",
        "context_after": "53: \t\tbool isLeft;   // Left indent in priority (else right indent)\n54: \t\tbool isTop;    // Top indent in priority (else bottom indent)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.h",
        "line": 53,
        "text": "Left indent in priority (else right indent)",
        "context_before": "51: \t\tint width;   // Width\n52: \t\t// int height;  // Height",
        "context_after": "54: \t\tbool isTop;    // Top indent in priority (else bottom indent)\n55: \t\tbool isWidth;  // Width in priority (else right indent)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.h",
        "line": 54,
        "text": "Top indent in priority (else bottom indent)",
        "context_before": "52: \t\t// int height;  // Height\n53: \t\tbool isLeft;   // Left indent in priority (else right indent)",
        "context_after": "55: \t\tbool isWidth;  // Width in priority (else right indent)\n56: \t\t// bool isHeight; // Height in priority (else bottom indent)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.h",
        "line": 55,
        "text": "Width in priority (else right indent)",
        "context_before": "53: \t\tbool isLeft;   // Left indent in priority (else right indent)\n54: \t\tbool isTop;    // Top indent in priority (else bottom indent)",
        "context_after": "56: \t\t// bool isHeight; // Height in priority (else bottom indent)\n57: \t}defPos;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.h",
        "line": 56,
        "text": "bool isHeight; // Height in priority (else bottom indent)",
        "context_before": "54: \t\tbool isTop;    // Top indent in priority (else bottom indent)\n55: \t\tbool isWidth;  // Width in priority (else right indent)",
        "context_after": "57: \t}defPos;\n58: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.h",
        "line": 63,
        "text": "Text color",
        "context_before": "61: \t\tbool isLoad;\n62: \t\tHFONT font; // Font",
        "context_after": "64: \t\tint align; // Text align\n65: \t\tExImage expand[2]; // Rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.h",
        "line": 64,
        "text": "Text align",
        "context_before": "62: \t\tHFONT font; // Font\n63: \t\tCOLORREF color; // Text color",
        "context_after": "65: \t\tExImage expand[2]; // Rating\n66: \t\tExImage icon[10]; // Cover"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.h",
        "line": 65,
        "text": "Rating",
        "context_before": "63: \t\tCOLORREF color; // Text color\n64: \t\tint align; // Text align",
        "context_after": "66: \t\tExImage icon[10]; // Cover\n67: \t}defElm;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeElement.h",
        "line": 77,
        "text": "State arrays",
        "context_before": "75: \tType type = Type::None;\n76: ",
        "context_after": "78: \tstd::vector<structState> listState;\n79: \tstd::vector<structPos> listPos;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 33,
        "text": "Parent node",
        "context_before": "31: \n32: private:",
        "context_after": "34: \tSkinTreeNode* child = nullptr; // First child node\n35: \tSkinTreeNode* clast = nullptr; // Last child node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 34,
        "text": "First child node",
        "context_before": "32: private:\n33: \tSkinTreeNode* parent = nullptr; // Parent node",
        "context_after": "35: \tSkinTreeNode* clast = nullptr; // Last child node\n36: \tSkinTreeNode* next = nullptr; // Next node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 35,
        "text": "Last child node",
        "context_before": "33: \tSkinTreeNode* parent = nullptr; // Parent node\n34: \tSkinTreeNode* child = nullptr; // First child node",
        "context_after": "36: \tSkinTreeNode* next = nullptr; // Next node\n37: \tSkinTreeNode* prev = nullptr; // Previous node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 36,
        "text": "Next node",
        "context_before": "34: \tSkinTreeNode* child = nullptr; // First child node\n35: \tSkinTreeNode* clast = nullptr; // Last child node",
        "context_after": "37: \tSkinTreeNode* prev = nullptr; // Previous node\n38: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 37,
        "text": "Previous node",
        "context_before": "35: \tSkinTreeNode* clast = nullptr; // Last child node\n36: \tSkinTreeNode* next = nullptr; // Next node",
        "context_after": "38: \n39: \tint refCount = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 86,
        "text": "if (clast == nodeBefore) // Don't do this! Leave it commented to don't forget.",
        "context_before": "84: \t\tif (child == nodeBefore)\n85: \t\t\tchild = node;",
        "context_after": "87: \t\t//\tclast = node;\n88: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 87,
        "text": "clast = node;",
        "context_before": "85: \t\t\tchild = node;\n86: \t\t//if (clast == nodeBefore) // Don't do this! Leave it commented to don't forget.",
        "context_after": "88: \n89: \t\tif (nodeBefore->prev)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 108,
        "text": "If this assert was called then 1 of smart pointers still owns the node.",
        "context_before": "106: \t\t\tnode->next->prev = node->prev;\n107: ",
        "context_after": "109: \t\t// In case this error pop up in the release just remove all node relationships (cause memory leak),\n110: \t\t// or otherwise it will cause undefined behaviour and the program just crash in the best case."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 109,
        "text": "In case this error pop up in the release just remove all node relationships (cause memory leak),",
        "context_before": "107: \n108: \t\t// If this assert was called then 1 of smart pointers still owns the node.",
        "context_after": "110: \t\t// or otherwise it will cause undefined behaviour and the program just crash in the best case.\n111: \t\tassert(node->refCount == 0); // Critical error"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 111,
        "text": "Critical error",
        "context_before": "109: \t\t// In case this error pop up in the release just remove all node relationships (cause memory leak),\n110: \t\t// or otherwise it will cause undefined behaviour and the program just crash in the best case.",
        "context_after": "112: \t\tif (node->refCount == 0)\n113: \t\t\tdelete node;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 127,
        "text": "If this assert was called then 1 of smart pointers still owns the node.",
        "context_before": "125: \t\t\tSkinTreeNode* t = n->next;\n126: ",
        "context_after": "128: \t\t\t// In case this error pop up in the release just remove all node's relationships (cause memory leak),\n129: \t\t\t// or otherwise it will cause undefined behaviour and the program just crash in the best case."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 128,
        "text": "In case this error pop up in the release just remove all node's relationships (cause memory leak),",
        "context_before": "126: \n127: \t\t\t// If this assert was called then 1 of smart pointers still owns the node.",
        "context_after": "129: \t\t\t// or otherwise it will cause undefined behaviour and the program just crash in the best case.\n130: \t\t\tassert(n->refCount == 0); // Critical error"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 130,
        "text": "Critical error",
        "context_before": "128: \t\t\t// In case this error pop up in the release just remove all node's relationships (cause memory leak),\n129: \t\t\t// or otherwise it will cause undefined behaviour and the program just crash in the best case.",
        "context_after": "131: \t\t\tif (n->refCount == 0)\n132: \t\t\t\tdelete n;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 160,
        "text": "node - remove this node from the old place and insert it into the new one",
        "context_before": "158: \tinline void MoveChild(SkinTreeNode* node, SkinTreeNode* newParent, SkinTreeNode* nodeBefore)\n159: \t{",
        "context_after": "161: \t\t// newParent - new parent for the node\n162: \t\t// nodeBefore - insert before this node, if nullptr then insert to the end"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 161,
        "text": "newParent - new parent for the node",
        "context_before": "159: \t{\n160: \t\t// node - remove this node from the old place and insert it into the new one",
        "context_after": "162: \t\t// nodeBefore - insert before this node, if nullptr then insert to the end\n163: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 162,
        "text": "nodeBefore - insert before this node, if nullptr then insert to the end",
        "context_before": "160: \t\t// node - remove this node from the old place and insert it into the new one\n161: \t\t// newParent - new parent for the node",
        "context_after": "163: \n164: \t\tif (node == nodeBefore) // Do not insert into the same place"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 164,
        "text": "Do not insert into the same place",
        "context_before": "162: \t\t// nodeBefore - insert before this node, if nullptr then insert to the end\n163: ",
        "context_after": "165: \t\t\treturn;\n166: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 167,
        "text": "Remove from the old place",
        "context_before": "165: \t\t\treturn;\n166: ",
        "context_after": "168: \t\tif (child == node)\n169: \t\t\tchild = node->next;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 182,
        "text": "Insert into the new place",
        "context_before": "180: \t\tnode->prev = nullptr;\n181: ",
        "context_after": "183: \t\tif (nodeBefore == nullptr)\n184: \t\t\tnewParent->AddChild(node);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 219,
        "text": "AudioBook  = 11,",
        "context_before": "217: \t\tFolder     = 9,\n218: \t\tRadio      = 10",
        "context_after": "220: \t\t//Podcast    = 12,\n221: \t\t//Device     = 13"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 220,
        "text": "Podcast    = 12,",
        "context_before": "218: \t\tRadio      = 10\n219: \t\t//AudioBook  = 11,",
        "context_after": "221: \t\t//Device     = 13\n222: \t};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 221,
        "text": "Device     = 13",
        "context_before": "219: \t\t//AudioBook  = 11,\n220: \t\t//Podcast    = 12,",
        "context_after": "222: \t};\n223: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 237,
        "text": "type is used",
        "context_before": "235: \tstd::vector<std::wstring> labels;\n236: ",
        "context_after": "238: \tbool isValue = false; // type, value are used\n239: \tbool isArtist = false; // type, value, artist are used"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 238,
        "text": "type, value are used",
        "context_before": "236: \n237: \tbool isType = false; // type is used",
        "context_after": "239: \tbool isArtist = false; // type, value, artist are used\n240: \tbool isAlbum = false; // type, value, artist, album are used"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 239,
        "text": "type, value, artist are used",
        "context_before": "237: \tbool isType = false; // type is used\n238: \tbool isValue = false; // type, value are used",
        "context_after": "240: \tbool isAlbum = false; // type, value, artist, album are used\n241: \tstd::wstring value;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 240,
        "text": "type, value, artist, album are used",
        "context_before": "238: \tbool isValue = false; // type, value are used\n239: \tbool isArtist = false; // type, value, artist are used",
        "context_after": "241: \tstd::wstring value;\n242: \tstd::wstring artist;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 248,
        "text": "Show open/close icon",
        "context_before": "246: \tbool isSelect = false;\n247: ",
        "context_after": "249: \n250: \tstruct StateFlag"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 252,
        "text": "Selection states",
        "context_before": "250: \tstruct StateFlag\n251: \t{",
        "context_after": "253: \t\tstatic const int Normal = 0x0001;\n254: \t\tstatic const int Select = 0x0002;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 257,
        "text": "Play states",
        "context_before": "255: \t\tstatic const int Focus  = 0x0004;\n256: ",
        "context_after": "258: \t\tstatic const int Open   = 0x0001;\n259: \t\tstatic const int Close  = 0x0002;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 261,
        "text": "Line number states",
        "context_before": "259: \t\tstatic const int Close  = 0x0002;\n260: ",
        "context_after": "262: \t\tstatic const int Line1  = 0x0001;\n263: \t\tstatic const int Line2  = 0x0002;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 269,
        "text": "TreeNodeUnsafe (raw pointer) for pointers used at the same place where received.",
        "context_before": "267: \tint stateLine = 0;\n268: ",
        "context_after": "270: \t// TreeNodeSafe (smart pointer) for pointers used at different places of the code.\n271: public:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 270,
        "text": "TreeNodeSafe (smart pointer) for pointers used at different places of the code.",
        "context_before": "268: \n269: \t// TreeNodeUnsafe (raw pointer) for pointers used at the same place where received.",
        "context_after": "271: public:\n272: \tclass SmartPtr final"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 296,
        "text": "operator SkinListNode*() const {return node;}",
        "context_before": "294: \t\tinline SkinTreeNode& operator*() const {return *node;}\n295: \t\tinline SkinTreeNode* operator->() const {return node;}",
        "context_after": "297: \t\tinline explicit operator bool() const {return node != nullptr;}\n298: \t\tinline bool operator!=(const SmartPtr& smart) const {return node != smart.node;}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTrigger.cpp",
        "line": 80,
        "text": "Deprecated function",
        "context_before": "78: bool SkinTrigger::LoadTrigger(const std::wstring& file, ZipFile* zipFile)\n79: {",
        "context_after": "81: \n82: \t//assert(false);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTrigger.cpp",
        "line": 82,
        "text": "assert(false);",
        "context_before": "80: \t//Deprecated function\n81: ",
        "context_after": "83: \n84: \tXmlFile xmlFile;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTrigger.h",
        "line": 35,
        "text": "Element ID",
        "context_before": "33: \tstruct structTrigger\n34: \t{",
        "context_after": "36: \t\tbool isHide;\n37: \t\tint width;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 78,
        "text": "imBack.Crop(dcMemory, rc);",
        "context_before": "76: \n77: ",
        "context_after": "79: \timBack.Draw(dcMemory, rc);\n80: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 81,
        "text": "Draw bands",
        "context_before": "79: \timBack.Draw(dcMemory, rc);\n80: ",
        "context_after": "82: \tif (!rects.empty())\n83: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 87,
        "text": "Draw peaks",
        "context_before": "85: \t\t\timMain.Crop2(dcMemory, (int)i * bandSize, rc.Height() - imMain.Height(), rects[bands[i].band]);\n86: ",
        "context_after": "88: \t\t{\n89: \t\t\tfor (std::size_t i = 0, size = bands.size(); i < size; ++i)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 95,
        "text": "Copy memDC //",
        "context_before": "93: \n94: ",
        "context_after": "96: \t::BitBlt(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcMemory, rc.left, rc.top, SRCCOPY);\n97: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 98,
        "text": "Release resources",
        "context_before": "96: \t::BitBlt(dc, rc.left, rc.top, rc.Width(), rc.Height(), dcMemory, rc.left, rc.top, SRCCOPY);\n97: ",
        "context_after": "99: \t::SelectObject(dcMemory, oldMemory);\n100: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 125,
        "text": "Return true if the animation is completed.",
        "context_before": "123: \n124: ",
        "context_after": "126: // If fft == nullptr then complete the animation,\n127: // If previous and isPause == true then complete the animation of peaks only."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 126,
        "text": "If fft == nullptr then complete the animation,",
        "context_before": "124: \n125: // Return true if the animation is completed.",
        "context_after": "127: // If previous and isPause == true then complete the animation of peaks only.\n128: bool SkinVis::SetFFT(float* fft, bool isPause)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 127,
        "text": "If previous and isPause == true then complete the animation of peaks only.",
        "context_before": "125: // Return true if the animation is completed.\n126: // If fft == nullptr then complete the animation,",
        "context_after": "128: bool SkinVis::SetFFT(float* fft, bool isPause)\n129: {"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 175,
        "text": "Start position is 50 the first values isn't good",
        "context_before": "173: \t}\n174: ",
        "context_after": "176: \tint stepFFT = 1024 / sizeBands / 5; // Step, reduced by 5 times to collect only first values in general\n177: \tint maxFFT = 1000; // End position is not 1024 because the last values are almost invisible"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 176,
        "text": "Step, reduced by 5 times to collect only first values in general",
        "context_before": "174: \n175: \tint curFFT = 50; // Start position is 50 the first values isn't good",
        "context_after": "177: \tint maxFFT = 1000; // End position is not 1024 because the last values are almost invisible\n178: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 177,
        "text": "End position is not 1024 because the last values are almost invisible",
        "context_before": "175: \tint curFFT = 50; // Start position is 50 the first values isn't good\n176: \tint stepFFT = 1024 / sizeBands / 5; // Step, reduced by 5 times to collect only first values in general",
        "context_after": "178: \n179: \t// Step cannot be less than 1"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 179,
        "text": "Step cannot be less than 1",
        "context_before": "177: \tint maxFFT = 1000; // End position is not 1024 because the last values are almost invisible\n178: ",
        "context_after": "180: \tstepFFT = std::max(1, stepFFT);\n181: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 190,
        "text": "Calculate the arithmetic mean, so Bands will be more smooth to each other",
        "context_before": "188: \t\tint sum = 0;\n189: ",
        "context_after": "191: \t\tfor (int j = curFFT; j < curFFT + stepFFT; j += 1)\n192: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 194,
        "text": "(sqrt to make low values more visible)",
        "context_before": "192: \t\t{\n193: \t\t\t++num;",
        "context_after": "195: \t\t}\n196: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 199,
        "text": "Move FFT",
        "context_before": "197: \t\tnum = sum / num;\n198: ",
        "context_after": "200: \t\tcurFFT += stepFFT;\n201: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 202,
        "text": "Adjust",
        "context_before": "200: \t\tcurFFT += stepFFT;\n201: ",
        "context_after": "203: \t\tif (num > sizeRects - 1)\n204: \t\t\tnum = sizeRects - 1;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 206,
        "text": "Set Band",
        "context_before": "204: \t\t\tnum = sizeRects - 1;\n205: ",
        "context_after": "207: \t\tif (num > bands[i].band)\n208: \t\t\tbands[i].band = num;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 210,
        "text": "Set Peak",
        "context_before": "208: \t\t\tbands[i].band = num;\n209: ",
        "context_after": "211: \t\tif (hasPeaks)\n212: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 213,
        "text": "If Band > Peak, then set Peak and its Wait interval",
        "context_before": "211: \t\tif (hasPeaks)\n212: \t\t{",
        "context_after": "214: \t\t\tif (num > bands[i].peak)\n215: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 223,
        "text": "::UpdateWindow(thisWnd);",
        "context_before": "221: \n222: \t::InvalidateRect(thisWnd, NULL, TRUE);",
        "context_after": "224: \n225: \treturn false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.cpp",
        "line": 259,
        "text": "Default",
        "context_before": "257: \t\t\t\t\timBack.LoadEx(path + attr, zipFile);\n258: ",
        "context_after": "260: \n261: \t\t\t\tconst char* strColor = xmlBack.AttributeRaw(\"Color\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 18,
        "text": "stdafx.cpp : source file that includes just the standard includes",
        "context_before": "16: */\n17: ",
        "context_after": "19: // Winyl.pch will be the pre-compiled header\n20: // stdafx.obj will contain the pre-compiled type information"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 19,
        "text": "Winyl.pch will be the pre-compiled header",
        "context_before": "17: \n18: // stdafx.cpp : source file that includes just the standard includes",
        "context_after": "20: // stdafx.obj will contain the pre-compiled type information\n21: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 20,
        "text": "stdafx.obj will contain the pre-compiled type information",
        "context_before": "18: // stdafx.cpp : source file that includes just the standard includes\n19: // Winyl.pch will be the pre-compiled header",
        "context_after": "21: \n22: #include \"stdafx.h\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 24,
        "text": "Winyl project settings. Changes from Win32 (not empty) project default settings:",
        "context_before": "22: #include \"stdafx.h\"\n23: ",
        "context_after": "25: // Debug:\n26: // C/C++->Code Generation->Runtime Library->/MTd"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 25,
        "text": "Debug:",
        "context_before": "23: \n24: // Winyl project settings. Changes from Win32 (not empty) project default settings:",
        "context_after": "26: // C/C++->Code Generation->Runtime Library->/MTd\n27: // Linker->Input->Ignore Specific Default Libraries->LIBCMT"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 26,
        "text": "C/C++->Code Generation->Runtime Library->/MTd",
        "context_before": "24: // Winyl project settings. Changes from Win32 (not empty) project default settings:\n25: // Debug:",
        "context_after": "27: // Linker->Input->Ignore Specific Default Libraries->LIBCMT\n28: // Release:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 27,
        "text": "Linker->Input->Ignore Specific Default Libraries->LIBCMT",
        "context_before": "25: // Debug:\n26: // C/C++->Code Generation->Runtime Library->/MTd",
        "context_after": "28: // Release:\n29: // C/C++->Code Generation->Runtime Library->/MT"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 28,
        "text": "Release:",
        "context_before": "26: // C/C++->Code Generation->Runtime Library->/MTd\n27: // Linker->Input->Ignore Specific Default Libraries->LIBCMT",
        "context_after": "29: // C/C++->Code Generation->Runtime Library->/MT\n30: // Linker->Debugging->Generate Debug Info->No"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 29,
        "text": "C/C++->Code Generation->Runtime Library->/MT",
        "context_before": "27: // Linker->Input->Ignore Specific Default Libraries->LIBCMT\n28: // Release:",
        "context_after": "30: // Linker->Debugging->Generate Debug Info->No\n31: //"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 30,
        "text": "Linker->Debugging->Generate Debug Info->No",
        "context_before": "28: // Release:\n29: // C/C++->Code Generation->Runtime Library->/MT",
        "context_after": "31: //\n32: // Reminder: How to set Precompiled Header in VS"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 32,
        "text": "Reminder: How to set Precompiled Header in VS",
        "context_before": "30: // Linker->Debugging->Generate Debug Info->No\n31: //",
        "context_after": "33: // C/C++->Precompiled Headers->Precompiled Header->Use (/Yu)\n34: // C/C++->Precompiled Headers->Precompiled Header File->stdafx.h"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 33,
        "text": "C/C++->Precompiled Headers->Precompiled Header->Use (/Yu)",
        "context_before": "31: //\n32: // Reminder: How to set Precompiled Header in VS",
        "context_after": "34: // C/C++->Precompiled Headers->Precompiled Header File->stdafx.h\n35: // And for stdafx.cpp file properties set C/C++->Precompiled Header->Create (/Yc)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 34,
        "text": "C/C++->Precompiled Headers->Precompiled Header File->stdafx.h",
        "context_before": "32: // Reminder: How to set Precompiled Header in VS\n33: // C/C++->Precompiled Headers->Precompiled Header->Use (/Yu)",
        "context_after": "35: // And for stdafx.cpp file properties set C/C++->Precompiled Header->Create (/Yc)\n36: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 35,
        "text": "And for stdafx.cpp file properties set C/C++->Precompiled Header->Create (/Yc)",
        "context_before": "33: // C/C++->Precompiled Headers->Precompiled Header->Use (/Yu)\n34: // C/C++->Precompiled Headers->Precompiled Header File->stdafx.h",
        "context_after": "36: \n37: // Just link all libs here, I hate to edit project settings in VS"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 37,
        "text": "Just link all libs here, I hate to edit project settings in VS",
        "context_before": "35: // And for stdafx.cpp file properties set C/C++->Precompiled Header->Create (/Yc)\n36: ",
        "context_after": "38: \n39: #pragma comment(lib, \"Comctl32.lib\")"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 50,
        "text": "_WIN64",
        "context_before": "48: #\tpragma comment(lib, \"src/bass/basswasapi.lib\")\n49: #\tpragma comment(lib, \"src/bass/bassasio.lib\")",
        "context_after": "51: #\tpragma comment(lib, \"src/bass/x64/bass.lib\")\n52: #\tpragma comment(lib, \"src/bass/x64/bass_fx.lib\")"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 64,
        "text": "_WIN64",
        "context_before": "62: #\t\tpragma comment(lib, \"src/sqlite3/sqlite3/Release/sqlite3.lib\")\n63: #\tendif",
        "context_after": "65: #\tifndef NDEBUG\n66: #\t\tpragma comment(lib, \"src/sqlite3/sqlite3/x64/Debug/sqlite3.lib\")"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 72,
        "text": "TagLib is compiled as source files, not as a separate library",
        "context_before": "70: #endif\n71: ",
        "context_after": "73: //#ifndef _WIN64\n74: //#\tifndef NDEBUG"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 73,
        "text": "#ifndef _WIN64",
        "context_before": "71: \n72: // TagLib is compiled as source files, not as a separate library",
        "context_after": "74: //#\tifndef NDEBUG\n75: //#\t\tpragma comment(lib, \"src/taglib/Debug/tag.lib\")"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 74,
        "text": "#\tifndef NDEBUG",
        "context_before": "72: // TagLib is compiled as source files, not as a separate library\n73: //#ifndef _WIN64",
        "context_after": "75: //#\t\tpragma comment(lib, \"src/taglib/Debug/tag.lib\")\n76: //#\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 75,
        "text": "#\t\tpragma comment(lib, \"src/taglib/Debug/tag.lib\")",
        "context_before": "73: //#ifndef _WIN64\n74: //#\tifndef NDEBUG",
        "context_after": "76: //#\telse\n77: //#\t\tpragma comment(lib, \"src/taglib/Release/tag.lib\")"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 76,
        "text": "#\telse",
        "context_before": "74: //#\tifndef NDEBUG\n75: //#\t\tpragma comment(lib, \"src/taglib/Debug/tag.lib\")",
        "context_after": "77: //#\t\tpragma comment(lib, \"src/taglib/Release/tag.lib\")\n78: //#\tendif"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 77,
        "text": "#\t\tpragma comment(lib, \"src/taglib/Release/tag.lib\")",
        "context_before": "75: //#\t\tpragma comment(lib, \"src/taglib/Debug/tag.lib\")\n76: //#\telse",
        "context_after": "78: //#\tendif\n79: //#else // _WIN64"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 78,
        "text": "#\tendif",
        "context_before": "76: //#\telse\n77: //#\t\tpragma comment(lib, \"src/taglib/Release/tag.lib\")",
        "context_after": "79: //#else // _WIN64\n80: //#\tifndef NDEBUG"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 79,
        "text": "#else // _WIN64",
        "context_before": "77: //#\t\tpragma comment(lib, \"src/taglib/Release/tag.lib\")\n78: //#\tendif",
        "context_after": "80: //#\tifndef NDEBUG\n81: //#\t\tpragma comment(lib, \"src/taglib/x64/Debug/tag.lib\")"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 80,
        "text": "#\tifndef NDEBUG",
        "context_before": "78: //#\tendif\n79: //#else // _WIN64",
        "context_after": "81: //#\t\tpragma comment(lib, \"src/taglib/x64/Debug/tag.lib\")\n82: //#\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 81,
        "text": "#\t\tpragma comment(lib, \"src/taglib/x64/Debug/tag.lib\")",
        "context_before": "79: //#else // _WIN64\n80: //#\tifndef NDEBUG",
        "context_after": "82: //#\telse\n83: //#\t\tpragma comment(lib, \"src/taglib/x64/Release/tag.lib\")"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 82,
        "text": "#\telse",
        "context_before": "80: //#\tifndef NDEBUG\n81: //#\t\tpragma comment(lib, \"src/taglib/x64/Debug/tag.lib\")",
        "context_after": "83: //#\t\tpragma comment(lib, \"src/taglib/x64/Release/tag.lib\")\n84: //#\tendif"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 83,
        "text": "#\t\tpragma comment(lib, \"src/taglib/x64/Release/tag.lib\")",
        "context_before": "81: //#\t\tpragma comment(lib, \"src/taglib/x64/Debug/tag.lib\")\n82: //#\telse",
        "context_after": "84: //#\tendif\n85: //#endif"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 84,
        "text": "#\tendif",
        "context_before": "82: //#\telse\n83: //#\t\tpragma comment(lib, \"src/taglib/x64/Release/tag.lib\")",
        "context_after": "85: //#endif\n86: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.cpp",
        "line": 85,
        "text": "#endif",
        "context_before": "83: //#\t\tpragma comment(lib, \"src/taglib/x64/Release/tag.lib\")\n84: //#\tendif",
        "context_after": "86: \n87: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 18,
        "text": "stdafx.h : include file for standard system include files,",
        "context_before": "16: */\n17: ",
        "context_after": "19: // or project specific include files that are used frequently,\n20: // but are changed infrequently"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 19,
        "text": "or project specific include files that are used frequently,",
        "context_before": "17: \n18: // stdafx.h : include file for standard system include files,",
        "context_after": "20: // but are changed infrequently\n21: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 20,
        "text": "but are changed infrequently",
        "context_before": "18: // stdafx.h : include file for standard system include files,\n19: // or project specific include files that are used frequently,",
        "context_after": "21: \n22: #pragma once"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 37,
        "text": "Modify the following defines if you have to target a platform prior to the ones specified below.",
        "context_before": "35: */\n36: ",
        "context_after": "38: // Refer to MSDN for the latest info on corresponding values for different platforms.\n39: #ifndef WINVER\t\t\t\t// Allow use of features specific to Windows XP or later."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 38,
        "text": "Refer to MSDN for the latest info on corresponding values for different platforms.",
        "context_before": "36: \n37: // Modify the following defines if you have to target a platform prior to the ones specified below.",
        "context_after": "39: #ifndef WINVER\t\t\t\t// Allow use of features specific to Windows XP or later.\n40: #define WINVER 0x0501\t\t// Change this to the appropriate value to target other versions of Windows."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 40,
        "text": "Change this to the appropriate value to target other versions of Windows.",
        "context_before": "38: // Refer to MSDN for the latest info on corresponding values for different platforms.\n39: #ifndef WINVER\t\t\t\t// Allow use of features specific to Windows XP or later.",
        "context_after": "41: #endif\n42: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 44,
        "text": "Change this to the appropriate value to target other versions of Windows.",
        "context_before": "42: \n43: #ifndef _WIN32_WINNT\t\t// Allow use of features specific to Windows XP or later.",
        "context_after": "45: #endif\n46: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 52,
        "text": "Change this to the appropriate value to target other versions of IE.",
        "context_before": "50: \n51: #ifndef _WIN32_IE\t\t\t// Allow use of features specific to IE 6.0 or later.",
        "context_after": "53: #endif\n54: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 55,
        "text": "Comment for include GdiPlus",
        "context_before": "53: #endif\n54: ",
        "context_after": "56: //#define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers\n57: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 56,
        "text": "#define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers",
        "context_before": "54: \n55: //Comment for include GdiPlus",
        "context_after": "57: \n58: #define STRICT"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 74,
        "text": "#include <GdiPlus.h>",
        "context_before": "72: \n73: ",
        "context_after": "75: ////using namespace Gdiplus;\n76: //#pragma comment(lib, \"GdiPlus.lib\")"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 75,
        "text": "//using namespace Gdiplus;",
        "context_before": "73: \n74: //#include <GdiPlus.h>",
        "context_after": "76: //#pragma comment(lib, \"GdiPlus.lib\")\n77: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 76,
        "text": "#pragma comment(lib, \"GdiPlus.lib\")",
        "context_before": "74: //#include <GdiPlus.h>\n75: ////using namespace Gdiplus;",
        "context_after": "77: \n78: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 93,
        "text": "Old code for Visual Leak Detector",
        "context_before": "91: #endif\n92: ",
        "context_after": "94: //#define _CRTDBG_MAP_ALLOC\n95: //#include <crtdbg.h>"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 94,
        "text": "#define _CRTDBG_MAP_ALLOC",
        "context_before": "92: \n93: // Old code for Visual Leak Detector",
        "context_after": "95: //#include <crtdbg.h>\n96: //#include <vld.h>"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 95,
        "text": "#include <crtdbg.h>",
        "context_before": "93: // Old code for Visual Leak Detector\n94: //#define _CRTDBG_MAP_ALLOC",
        "context_after": "96: //#include <vld.h>\n97: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 96,
        "text": "#include <vld.h>",
        "context_before": "94: //#define _CRTDBG_MAP_ALLOC\n95: //#include <crtdbg.h>",
        "context_after": "97: \n98: // To show line number in output window if memory leak occured"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 98,
        "text": "To show line number in output window if memory leak occured",
        "context_before": "96: //#include <vld.h>\n97: ",
        "context_after": "99: #ifdef _DEBUG\n100: #define _CRTDBG_MAP_ALLOC"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 104,
        "text": "#define new DEBUG_NEW",
        "context_before": "102: #include <crtdbg.h>\n103: #define DEBUG_NEW new(_NORMAL_BLOCK, __FILE__, __LINE__)",
        "context_after": "105: #endif\n106: // Add next lines for cases where new uses with additional parameters (if \"#define new DEBUG_NEW\" is used)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 106,
        "text": "Add next lines for cases where new uses with additional parameters (if \"#define new DEBUG_NEW\" is used)",
        "context_before": "104: //#define new DEBUG_NEW\n105: #endif",
        "context_after": "107: //#ifdef new\n108: //#undef new"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 107,
        "text": "#ifdef new",
        "context_before": "105: #endif\n106: // Add next lines for cases where new uses with additional parameters (if \"#define new DEBUG_NEW\" is used)",
        "context_after": "108: //#undef new\n109: //#endif"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 108,
        "text": "#undef new",
        "context_before": "106: // Add next lines for cases where new uses with additional parameters (if \"#define new DEBUG_NEW\" is used)\n107: //#ifdef new",
        "context_after": "109: //#endif\n110: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 109,
        "text": "#endif",
        "context_before": "107: //#ifdef new\n108: //#undef new",
        "context_after": "110: \n111: #include \"mtypes.h\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 118,
        "text": "#define UCD_OPENFILE     1",
        "context_before": "116: extern FutureWin* futureWin;\n117: ",
        "context_after": "119: \n120: //#define UWM_TRAYMSG\t     WM_APP"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 120,
        "text": "#define UWM_TRAYMSG\t     WM_APP",
        "context_before": "118: //#define UCD_OPENFILE     1\n119: ",
        "context_after": "121: #define UWM_FILLTREE     WM_USER + 100\n122: #define UWM_FILLLIST     WM_USER + 101"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 136,
        "text": "#define UWM_POPUP        WM_USER + 116",
        "context_before": "134: #define UWM_RADIOSTART   WM_USER + 114\n135: #define UWM_GLOBHOTKEY   WM_USER + 115",
        "context_after": "137: #define UWM_POPUPMENU    WM_USER + 117\n138: #define UWM_STOP         WM_USER + 118"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 139,
        "text": "#define UWM_MOUSEFOCUS   WM_USER + 119",
        "context_before": "137: #define UWM_POPUPMENU    WM_USER + 117\n138: #define UWM_STOP         WM_USER + 118",
        "context_after": "140: //#define UWM_MOUSEWHEEL   WM_USER + 120\n141: //#define UWM_SEARCHCLEAR  WM_USER + 121"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 140,
        "text": "#define UWM_MOUSEWHEEL   WM_USER + 120",
        "context_before": "138: #define UWM_STOP         WM_USER + 118\n139: //#define UWM_MOUSEFOCUS   WM_USER + 119",
        "context_after": "141: //#define UWM_SEARCHCLEAR  WM_USER + 121\n142: #define UWM_SEARCHCHANGE WM_USER + 122"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 141,
        "text": "#define UWM_SEARCHCLEAR  WM_USER + 121",
        "context_before": "139: //#define UWM_MOUSEFOCUS   WM_USER + 119\n140: //#define UWM_MOUSEWHEEL   WM_USER + 120",
        "context_after": "142: #define UWM_SEARCHCHANGE WM_USER + 122\n143: //#define UWM_SEARCHREDRAW WM_USER + 123"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 143,
        "text": "#define UWM_SEARCHREDRAW WM_USER + 123",
        "context_before": "141: //#define UWM_SEARCHCLEAR  WM_USER + 121\n142: #define UWM_SEARCHCHANGE WM_USER + 122",
        "context_after": "144: #define UWM_ACTION       WM_USER + 124\n145: #define UWM_MINIPLAYER   WM_USER + 125"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 165,
        "text": "Commands - wParam of WWM_COMMAND",
        "context_before": "163: #define UWM_COMMAND WM_APP + 1003\n164: ",
        "context_after": "166: #define CMD_NULL         0   // Does nothing, always return 1\n167: #define CMD_NONE         1   // Does nothing, always return 1"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 166,
        "text": "Does nothing, always return 1",
        "context_before": "164: \n165: // Commands - wParam of WWM_COMMAND",
        "context_after": "167: #define CMD_NONE         1   // Does nothing, always return 1\n168: #define CMD_NONE2        2   // Does nothing, always return 1"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 167,
        "text": "Does nothing, always return 1",
        "context_before": "165: // Commands - wParam of WWM_COMMAND\n166: #define CMD_NULL         0   // Does nothing, always return 1",
        "context_after": "168: #define CMD_NONE2        2   // Does nothing, always return 1\n169: #define CMD_MAGIC        3   // Does nothing, always return magic number 1237"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 168,
        "text": "Does nothing, always return 1",
        "context_before": "166: #define CMD_NULL         0   // Does nothing, always return 1\n167: #define CMD_NONE         1   // Does nothing, always return 1",
        "context_after": "169: #define CMD_MAGIC        3   // Does nothing, always return magic number 1237\n170: #define CMD_VER_WINYL    4   // Return Winyl version (30201 = 3.2.1)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 169,
        "text": "Does nothing, always return magic number 1237",
        "context_before": "167: #define CMD_NONE         1   // Does nothing, always return 1\n168: #define CMD_NONE2        2   // Does nothing, always return 1",
        "context_after": "170: #define CMD_VER_WINYL    4   // Return Winyl version (30201 = 3.2.1)\n171: #define CMD_VER_API      5   // Return Command API version (10000 = 1.0.0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 170,
        "text": "Return Winyl version (30201 = 3.2.1)",
        "context_before": "168: #define CMD_NONE2        2   // Does nothing, always return 1\n169: #define CMD_MAGIC        3   // Does nothing, always return magic number 1237",
        "context_after": "171: #define CMD_VER_API      5   // Return Command API version (10000 = 1.0.0)\n172: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 171,
        "text": "Return Command API version (10000 = 1.0.0)",
        "context_before": "169: #define CMD_MAGIC        3   // Does nothing, always return magic number 1237\n170: #define CMD_VER_WINYL    4   // Return Winyl version (30201 = 3.2.1)",
        "context_after": "172: \n173: // Command API 1.0.0 for Winyl 2.5.0"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 173,
        "text": "Command API 1.0.0 for Winyl 2.5.0",
        "context_before": "171: #define CMD_VER_API      5   // Return Command API version (10000 = 1.0.0)\n172: ",
        "context_after": "174: #define CMD_PLAY         100 // Play the focused track, if paused then play from the start\n175: #define CMD_PLAY_EX      101 // Same as Play but if paused then resume instead of play from the start"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 174,
        "text": "Play the focused track, if paused then play from the start",
        "context_before": "172: \n173: // Command API 1.0.0 for Winyl 2.5.0",
        "context_after": "175: #define CMD_PLAY_EX      101 // Same as Play but if paused then resume instead of play from the start\n176: #define CMD_PAUSE        102 // Pause the playing track, if stopped then does nothing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 175,
        "text": "Same as Play but if paused then resume instead of play from the start",
        "context_before": "173: // Command API 1.0.0 for Winyl 2.5.0\n174: #define CMD_PLAY         100 // Play the focused track, if paused then play from the start",
        "context_after": "176: #define CMD_PAUSE        102 // Pause the playing track, if stopped then does nothing\n177: #define CMD_PAUSE_EX     103 // Same as Pause but if stopped then start the playback instead of does nothing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 176,
        "text": "Pause the playing track, if stopped then does nothing",
        "context_before": "174: #define CMD_PLAY         100 // Play the focused track, if paused then play from the start\n175: #define CMD_PLAY_EX      101 // Same as Play but if paused then resume instead of play from the start",
        "context_after": "177: #define CMD_PAUSE_EX     103 // Same as Pause but if stopped then start the playback instead of does nothing\n178: #define CMD_STOP         104 // Stop playback"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 177,
        "text": "Same as Pause but if stopped then start the playback instead of does nothing",
        "context_before": "175: #define CMD_PLAY_EX      101 // Same as Play but if paused then resume instead of play from the start\n176: #define CMD_PAUSE        102 // Pause the playing track, if stopped then does nothing",
        "context_after": "178: #define CMD_STOP         104 // Stop playback\n179: #define CMD_NEXT         105 // Play next track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 178,
        "text": "Stop playback",
        "context_before": "176: #define CMD_PAUSE        102 // Pause the playing track, if stopped then does nothing\n177: #define CMD_PAUSE_EX     103 // Same as Pause but if stopped then start the playback instead of does nothing",
        "context_after": "179: #define CMD_NEXT         105 // Play next track\n180: #define CMD_PREV         106 // Play previous track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 179,
        "text": "Play next track",
        "context_before": "177: #define CMD_PAUSE_EX     103 // Same as Pause but if stopped then start the playback instead of does nothing\n178: #define CMD_STOP         104 // Stop playback",
        "context_after": "180: #define CMD_PREV         106 // Play previous track\n181: #define CMD_CLOSE        107 // Close Winyl (Does nothing at this time)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 180,
        "text": "Play previous track",
        "context_before": "178: #define CMD_STOP         104 // Stop playback\n179: #define CMD_NEXT         105 // Play next track",
        "context_after": "181: #define CMD_CLOSE        107 // Close Winyl (Does nothing at this time)\n182: #define CMD_CHECK_PLAY   200 // Return 1 if playing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 181,
        "text": "Close Winyl (Does nothing at this time)",
        "context_before": "179: #define CMD_NEXT         105 // Play next track\n180: #define CMD_PREV         106 // Play previous track",
        "context_after": "182: #define CMD_CHECK_PLAY   200 // Return 1 if playing\n183: #define CMD_CHECK_PAUSE  201 // Return 1 if paused (must be used with CMD_CHECK_PLAY)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 182,
        "text": "Return 1 if playing",
        "context_before": "180: #define CMD_PREV         106 // Play previous track\n181: #define CMD_CLOSE        107 // Close Winyl (Does nothing at this time)",
        "context_after": "183: #define CMD_CHECK_PAUSE  201 // Return 1 if paused (must be used with CMD_CHECK_PLAY)\n184: #define CMD_CHECK_RADIO  202 // Return 1 if playing file from internet (must be used with CMD_CHECK_PLAY)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 183,
        "text": "Return 1 if paused (must be used with CMD_CHECK_PLAY)",
        "context_before": "181: #define CMD_CLOSE        107 // Close Winyl (Does nothing at this time)\n182: #define CMD_CHECK_PLAY   200 // Return 1 if playing",
        "context_after": "184: #define CMD_CHECK_RADIO  202 // Return 1 if playing file from internet (must be used with CMD_CHECK_PLAY)\n185: #define CMD_GET_VOLUME   210 // Return volume in percent (0-100%)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 184,
        "text": "Return 1 if playing file from internet (must be used with CMD_CHECK_PLAY)",
        "context_before": "182: #define CMD_CHECK_PLAY   200 // Return 1 if playing\n183: #define CMD_CHECK_PAUSE  201 // Return 1 if paused (must be used with CMD_CHECK_PLAY)",
        "context_after": "185: #define CMD_GET_VOLUME   210 // Return volume in percent (0-100%)\n186: #define CMD_SET_VOLUME   211 // lParam = volume in percent (0-100%)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 185,
        "text": "Return volume in percent (0-100%)",
        "context_before": "183: #define CMD_CHECK_PAUSE  201 // Return 1 if paused (must be used with CMD_CHECK_PLAY)\n184: #define CMD_CHECK_RADIO  202 // Return 1 if playing file from internet (must be used with CMD_CHECK_PLAY)",
        "context_after": "186: #define CMD_SET_VOLUME   211 // lParam = volume in percent (0-100%)\n187: #define CMD_VOLUME_UP    212 // Volume Up by 5 percent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 186,
        "text": "lParam = volume in percent (0-100%)",
        "context_before": "184: #define CMD_CHECK_RADIO  202 // Return 1 if playing file from internet (must be used with CMD_CHECK_PLAY)\n185: #define CMD_GET_VOLUME   210 // Return volume in percent (0-100%)",
        "context_after": "187: #define CMD_VOLUME_UP    212 // Volume Up by 5 percent\n188: #define CMD_VOLUME_DOWN  213 // Volume Down by 5 percent"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 187,
        "text": "Volume Up by 5 percent",
        "context_before": "185: #define CMD_GET_VOLUME   210 // Return volume in percent (0-100%)\n186: #define CMD_SET_VOLUME   211 // lParam = volume in percent (0-100%)",
        "context_after": "188: #define CMD_VOLUME_DOWN  213 // Volume Down by 5 percent\n189: #define CMD_GET_MUTE     220 // Return 1 if mute is on"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 188,
        "text": "Volume Down by 5 percent",
        "context_before": "186: #define CMD_SET_VOLUME   211 // lParam = volume in percent (0-100%)\n187: #define CMD_VOLUME_UP    212 // Volume Up by 5 percent",
        "context_after": "189: #define CMD_GET_MUTE     220 // Return 1 if mute is on\n190: #define CMD_MUTE_ON      221 // Mute sound"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 189,
        "text": "Return 1 if mute is on",
        "context_before": "187: #define CMD_VOLUME_UP    212 // Volume Up by 5 percent\n188: #define CMD_VOLUME_DOWN  213 // Volume Down by 5 percent",
        "context_after": "190: #define CMD_MUTE_ON      221 // Mute sound\n191: #define CMD_MUTE_OFF     222 // Unmute sound"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 190,
        "text": "Mute sound",
        "context_before": "188: #define CMD_VOLUME_DOWN  213 // Volume Down by 5 percent\n189: #define CMD_GET_MUTE     220 // Return 1 if mute is on",
        "context_after": "191: #define CMD_MUTE_OFF     222 // Unmute sound\n192: #define CMD_MUTE_REV     223 // Toggle mute state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 191,
        "text": "Unmute sound",
        "context_before": "189: #define CMD_GET_MUTE     220 // Return 1 if mute is on\n190: #define CMD_MUTE_ON      221 // Mute sound",
        "context_after": "192: #define CMD_MUTE_REV     223 // Toggle mute state\n193: #define CMD_GET_REPEAT   230 // Return 1 if repeat is on"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 192,
        "text": "Toggle mute state",
        "context_before": "190: #define CMD_MUTE_ON      221 // Mute sound\n191: #define CMD_MUTE_OFF     222 // Unmute sound",
        "context_after": "193: #define CMD_GET_REPEAT   230 // Return 1 if repeat is on\n194: #define CMD_REPEAT_ON    231 // Turn repeat on"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 193,
        "text": "Return 1 if repeat is on",
        "context_before": "191: #define CMD_MUTE_OFF     222 // Unmute sound\n192: #define CMD_MUTE_REV     223 // Toggle mute state",
        "context_after": "194: #define CMD_REPEAT_ON    231 // Turn repeat on\n195: #define CMD_REPEAT_OFF   232 // Turn repeat off"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 194,
        "text": "Turn repeat on",
        "context_before": "192: #define CMD_MUTE_REV     223 // Toggle mute state\n193: #define CMD_GET_REPEAT   230 // Return 1 if repeat is on",
        "context_after": "195: #define CMD_REPEAT_OFF   232 // Turn repeat off\n196: #define CMD_REPEAT_REV   233 // Toggle repeat state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 195,
        "text": "Turn repeat off",
        "context_before": "193: #define CMD_GET_REPEAT   230 // Return 1 if repeat is on\n194: #define CMD_REPEAT_ON    231 // Turn repeat on",
        "context_after": "196: #define CMD_REPEAT_REV   233 // Toggle repeat state\n197: #define CMD_GET_SHUFFLE  240 // Return 1 if shuffle is on"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 196,
        "text": "Toggle repeat state",
        "context_before": "194: #define CMD_REPEAT_ON    231 // Turn repeat on\n195: #define CMD_REPEAT_OFF   232 // Turn repeat off",
        "context_after": "197: #define CMD_GET_SHUFFLE  240 // Return 1 if shuffle is on\n198: #define CMD_SHUFFLE_ON   241 // Turn shuffle on"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 197,
        "text": "Return 1 if shuffle is on",
        "context_before": "195: #define CMD_REPEAT_OFF   232 // Turn repeat off\n196: #define CMD_REPEAT_REV   233 // Toggle repeat state",
        "context_after": "198: #define CMD_SHUFFLE_ON   241 // Turn shuffle on\n199: #define CMD_SHUFFLE_OFF  242 // Turn shuffle off"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 198,
        "text": "Turn shuffle on",
        "context_before": "196: #define CMD_REPEAT_REV   233 // Toggle repeat state\n197: #define CMD_GET_SHUFFLE  240 // Return 1 if shuffle is on",
        "context_after": "199: #define CMD_SHUFFLE_OFF  242 // Turn shuffle off\n200: #define CMD_SHUFFLE_REV  243 // Toggle shuffle state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 199,
        "text": "Turn shuffle off",
        "context_before": "197: #define CMD_GET_SHUFFLE  240 // Return 1 if shuffle is on\n198: #define CMD_SHUFFLE_ON   241 // Turn shuffle on",
        "context_after": "200: #define CMD_SHUFFLE_REV  243 // Toggle shuffle state\n201: #define CMD_GET_RATING   250 // Get playing track rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 200,
        "text": "Toggle shuffle state",
        "context_before": "198: #define CMD_SHUFFLE_ON   241 // Turn shuffle on\n199: #define CMD_SHUFFLE_OFF  242 // Turn shuffle off",
        "context_after": "201: #define CMD_GET_RATING   250 // Get playing track rating\n202: #define CMD_SET_RATING   251 // Set playing track rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 201,
        "text": "Get playing track rating",
        "context_before": "199: #define CMD_SHUFFLE_OFF  242 // Turn shuffle off\n200: #define CMD_SHUFFLE_REV  243 // Toggle shuffle state",
        "context_after": "202: #define CMD_SET_RATING   251 // Set playing track rating"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 202,
        "text": "Set playing track rating",
        "context_before": "200: #define CMD_SHUFFLE_REV  243 // Toggle shuffle state\n201: #define CMD_GET_RATING   250 // Get playing track rating",
        "context_after": ""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\targetver.h",
        "line": 3,
        "text": "Including SDKDDKVer.h defines the highest available Windows platform.",
        "context_before": "1: #pragma once\n2: ",
        "context_after": "4: \n5: // If you wish to build your application for a previous Windows platform, include WinSDKVer.h and"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\targetver.h",
        "line": 5,
        "text": "If you wish to build your application for a previous Windows platform, include WinSDKVer.h and",
        "context_before": "3: // Including SDKDDKVer.h defines the highest available Windows platform.\n4: ",
        "context_after": "6: // set the _WIN32_WINNT macro to the platform you wish to support before including SDKDDKVer.h.\n7: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\targetver.h",
        "line": 6,
        "text": "set the _WIN32_WINNT macro to the platform you wish to support before including SDKDDKVer.h.",
        "context_before": "4: \n5: // If you wish to build your application for a previous Windows platform, include WinSDKVer.h and",
        "context_after": "7: \n8: #include <SDKDDKVer.h>"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 39,
        "text": "http://stackoverflow.com/questions/1413630/switchtothread-thread-yield-vs-thread-sleep0-vs-thead-sleep1",
        "context_before": "37: inline void ThreadYield()\n38: {",
        "context_after": "40: \t//::SwitchToThread();\n41: \t::Sleep(0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 40,
        "text": "::SwitchToThread();",
        "context_before": "38: {\n39: \t// http://stackoverflow.com/questions/1413630/switchtothread-thread-yield-vs-thread-sleep0-vs-thead-sleep1",
        "context_after": "41: \t::Sleep(0);\n42: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 44,
        "text": "Thread",
        "context_before": "42: }\n43: ",
        "context_after": "45: \n46: class Thread"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 54,
        "text": "template<class Function, class... Args>",
        "context_before": "52: \tThread& operator=(const Thread&) = delete;\n53: ",
        "context_after": "55: \t//void StartBind(Function&& f, Args&&... args) {Start(std::bind(std::forward<Function>(f), std::forward<Args>(args)...));}\n56: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 55,
        "text": "void StartBind(Function&& f, Args&&... args) {Start(std::bind(std::forward<Function>(f), std::forward<Args>(args)...));}",
        "context_before": "53: \n54: \t//template<class Function, class... Args>",
        "context_after": "56: \n57: \tinline bool IsJoinable() {return (threadHandle ? true : false);}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 101,
        "text": "Windows XP doesn't support background flag",
        "context_before": "99: \tbool StartBackground(const std::function<void(void)>& func)\n100: \t{",
        "context_after": "102: \t\t\treturn Start(func);\n103: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 120,
        "text": "return ::WaitForSingleObjectEx(threadHandle, 0, FALSE) != WAIT_OBJECT_0;",
        "context_before": "118: \t\tif (threadHandle)\n119: \t\t{",
        "context_after": "121: \n122: \t\t\tDWORD ec = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 174,
        "text": "_endthreadex(0); // Do we really need this?",
        "context_before": "172: \t\tthreadRun->stdFunc();\n173: ",
        "context_after": "175: \t\treturn 0;\n176: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 186,
        "text": "::SetThreadPriority(::GetCurrentThread(), THREAD_MODE_BACKGROUND_END); // Do we really need this?",
        "context_before": "184: \t\tthreadRun->stdFunc();\n185: ",
        "context_after": "187: \n188: \t\t//_endthreadex(0); // Do we really need this?"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 188,
        "text": "_endthreadex(0); // Do we really need this?",
        "context_before": "186: \t\t//::SetThreadPriority(::GetCurrentThread(), THREAD_MODE_BACKGROUND_END); // Do we really need this?\n187: ",
        "context_after": "189: \t\treturn 0;\n190: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 204,
        "text": "TryAcquireSRWLockExclusive available only since Win7",
        "context_before": "202: \tMutex()\n203: \t{",
        "context_after": "205: \t\t\tfutureWin->InitializeSRWLock(&srwLock);\n206: \t\telse if (futureWin->IsVistaOrLater())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 213,
        "text": "Mutex is locked",
        "context_before": "211: \t~Mutex()\n212: \t{",
        "context_after": "214: \n215: \t\tif (!futureWin->IsSevenOrLater())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 223,
        "text": "Lock on the same thread = deadlock",
        "context_before": "221: \tvoid Lock()\n222: \t{",
        "context_after": "224: \n225: \t\tif (futureWin->IsSevenOrLater())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 236,
        "text": "Mutex is not locked",
        "context_before": "234: \tvoid Unlock()\n235: \t{",
        "context_after": "237: #ifndef NDEBUG\n238: \t\tidThread = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 247,
        "text": "TryLock on the same thread = undefined behavior",
        "context_before": "245: \tbool TryLock()\n246: \t{",
        "context_after": "248: \n249: \t\tif (futureWin->IsSevenOrLater())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 273,
        "text": "Windows: exteptions and critical sections",
        "context_before": "271: \t}\n272: ",
        "context_after": "274: \t// http://blogs.msdn.com/b/oldnewthing/archive/2003/12/22/45152.aspx\n275: \t// https://msdn.microsoft.com/en-gb/magazine/jj721588.aspx"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 274,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2003/12/22/45152.aspx",
        "context_before": "272: \n273: \t// Windows: exteptions and critical sections",
        "context_after": "275: \t// https://msdn.microsoft.com/en-gb/magazine/jj721588.aspx\n276: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 275,
        "text": "https://msdn.microsoft.com/en-gb/magazine/jj721588.aspx",
        "context_before": "273: \t// Windows: exteptions and critical sections\n274: \t// http://blogs.msdn.com/b/oldnewthing/archive/2003/12/22/45152.aspx",
        "context_after": "276: \n277: private:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 281,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2004/02/23/78395.aspx",
        "context_before": "279: \tCRITICAL_SECTION critSection;\n280: #ifndef NDEBUG",
        "context_after": "282: \tunsigned long idThread = 0;\n283: #endif"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 298,
        "text": "Number of Locks must be equal to Unlocks",
        "context_before": "296: \t~RecursiveMutex()\n297: \t{",
        "context_after": "299: \n300: \t\t::DeleteCriticalSection(&critSection);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 314,
        "text": "Mutex is not locked",
        "context_before": "312: \tvoid Unlock()\n313: \t{",
        "context_after": "315: \n316: \t\t::LeaveCriticalSection(&critSection);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 338,
        "text": "LockGuard",
        "context_before": "336: };\n337: ",
        "context_after": "339: \n340: class LockGuard final"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 360,
        "text": "When drop Windows XP support:",
        "context_before": "358: // Event\n359: ",
        "context_after": "361: // 1. Remove EventXP and Event classes\n362: // 2. Remove Init and DeInit functions in EventVista"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 361,
        "text": "1. Remove EventXP and Event classes",
        "context_before": "359: \n360: // When drop Windows XP support:",
        "context_after": "362: // 2. Remove Init and DeInit functions in EventVista\n363: // 3. Uncomment constructor and destructor in EventVista"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 362,
        "text": "2. Remove Init and DeInit functions in EventVista",
        "context_before": "360: // When drop Windows XP support:\n361: // 1. Remove EventXP and Event classes",
        "context_after": "363: // 3. Uncomment constructor and destructor in EventVista\n364: // 4. Rename EventVista to Event"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 363,
        "text": "3. Uncomment constructor and destructor in EventVista",
        "context_before": "361: // 1. Remove EventXP and Event classes\n362: // 2. Remove Init and DeInit functions in EventVista",
        "context_after": "364: // 4. Rename EventVista to Event\n365: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 364,
        "text": "4. Rename EventVista to Event",
        "context_before": "362: // 2. Remove Init and DeInit functions in EventVista\n363: // 3. Uncomment constructor and destructor in EventVista",
        "context_after": "365: \n366: class Event final"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 369,
        "text": "~10 times faster than WinAPI Event",
        "context_before": "367: {\n368: private:",
        "context_after": "370: class EventVista final\n371: {"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 373,
        "text": "EventVista(bool autoReset = true) : autoFlag(autoReset), stateFlag(false)",
        "context_before": "371: {\n372: public:",
        "context_after": "374: \t//{\n375: \t//\tfutureWin->InitializeSRWLock(&srwLock);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 378,
        "text": "~EventVista() {}",
        "context_before": "376: \t//\tfutureWin->InitializeConditionVariable(&condVar);\n377: \t//}",
        "context_after": "379: \tEventVista() {}\n380: \t~EventVista() {}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 453,
        "text": "EventXP(bool autoReset = true)",
        "context_before": "451: {\n452: public:",
        "context_after": "454: \t//{\n455: \t//\teventHandle = ::CreateEventW(NULL, autoReset ? FALSE : TRUE, FALSE, NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 455,
        "text": "eventHandle = ::CreateEventW(NULL, autoReset ? FALSE : TRUE, FALSE, NULL);",
        "context_before": "453: \t//EventXP(bool autoReset = true)\n454: \t//{",
        "context_after": "456: \t//\tif (eventHandle == NULL)\n457: \t//\t\tthrow std::runtime_error(\"Event XP Init Error\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 456,
        "text": "if (eventHandle == NULL)",
        "context_before": "454: \t//{\n455: \t//\teventHandle = ::CreateEventW(NULL, autoReset ? FALSE : TRUE, FALSE, NULL);",
        "context_after": "457: \t//\t\tthrow std::runtime_error(\"Event XP Init Error\");\n458: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 457,
        "text": "throw std::runtime_error(\"Event XP Init Error\");",
        "context_before": "455: \t//\teventHandle = ::CreateEventW(NULL, autoReset ? FALSE : TRUE, FALSE, NULL);\n456: \t//\tif (eventHandle == NULL)",
        "context_after": "458: \t//}\n459: \t//~EventXP()"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 459,
        "text": "~EventXP()",
        "context_before": "457: \t//\t\tthrow std::runtime_error(\"Event XP Init Error\");\n458: \t//}",
        "context_after": "460: \t//{\n461: \t//\tif (eventHandle)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 461,
        "text": "if (eventHandle)",
        "context_before": "459: \t//~EventXP()\n460: \t//{",
        "context_after": "462: \t//\t\t::CloseHandle(eventHandle);\n463: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 462,
        "text": "::CloseHandle(eventHandle);",
        "context_before": "460: \t//{\n461: \t//\tif (eventHandle)",
        "context_after": "463: \t//}\n464: \tEventXP() {}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 571,
        "text": "namespace Threading",
        "context_before": "569: };\n570: ",
        "context_after": "572: \n573: // Global usings"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 573,
        "text": "Global usings",
        "context_before": "571: } // namespace Threading\n572: ",
        "context_after": "574: using LockGuard = Threading::LockGuard;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ToolTips.cpp",
        "line": 52,
        "text": "TTF_SUBCLASS",
        "context_before": "50: \t\t\t\t{\n51: \t\t\t\t\tTOOLINFO tool = {};",
        "context_after": "53: \t\t\t\t\ttool.cbSize = sizeof(TOOLINFO);\n54: \t\t\t\t\ttool.hwnd = wndOwner;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ToolTips.cpp",
        "line": 223,
        "text": "TTM_TRACKACTIVATE should be after TTM_UPDATETIPTEXT and before retrieving tooltip size or size will be incorrect",
        "context_before": "221: \t::SendMessage(trackingTip, TTM_UPDATETIPTEXT, 0, (LPARAM)&tool);\n222: ",
        "context_after": "224: \tif (activate)\n225: \t\t::SendMessage(trackingTip, TTM_TRACKACTIVATE, TRUE, (LPARAM)&tool);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ToolTips.cpp",
        "line": 227,
        "text": "Get tooltip size",
        "context_before": "225: \t\t::SendMessage(trackingTip, TTM_TRACKACTIVATE, TRUE, (LPARAM)&tool);\n226: ",
        "context_after": "228: \tCRect rc;\n229: \t::GetClientRect(trackingTip, rc);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ToolTips.cpp",
        "line": 230,
        "text": "Alternative way to get tooltip size",
        "context_before": "228: \tCRect rc;\n229: \t::GetClientRect(trackingTip, rc);",
        "context_after": "231: \t//LRESULT result = SendMessage(trackingTip, TTM_GETBUBBLESIZE, 0, (LPARAM)&tool);\n232: \t//SIZE sz = {GET_X_LPARAM(result), GET_Y_LPARAM(result)};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ToolTips.cpp",
        "line": 232,
        "text": "SIZE sz = {GET_X_LPARAM(result), GET_Y_LPARAM(result)};",
        "context_before": "230: \t// Alternative way to get tooltip size\n231: \t//LRESULT result = SendMessage(trackingTip, TTM_GETBUBBLESIZE, 0, (LPARAM)&tool);",
        "context_after": "233: \n234: \tPOINT pt = {x, y};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\TrayIcon.cpp",
        "line": 36,
        "text": "Random",
        "context_before": "34: \tNOTIFYICONDATA ni = {};\n35: \tni.cbSize = sizeof(NOTIFYICONDATA);",
        "context_after": "37: \tni.hWnd = wnd;\n38: \tni.uFlags = NIF_ICON | NIF_MESSAGE | NIF_TIP;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\TrayIcon.cpp",
        "line": 50,
        "text": "Random",
        "context_before": "48: \tNOTIFYICONDATA ni = {};\n49: \tni.cbSize = sizeof(NOTIFYICONDATA);",
        "context_after": "51: \tni.hWnd = wnd;\n52: \tni.uFlags = NIF_TIP;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\TrayIcon.cpp",
        "line": 56,
        "text": "-1 because null terminator",
        "context_before": "54: \tstd::wstring tip = str;\n55: ",
        "context_after": "57: \tif (tip.size() > tipSize)\n58: \t\ttip.resize(tipSize);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\TrayIcon.cpp",
        "line": 69,
        "text": "Random",
        "context_before": "67: \tNOTIFYICONDATA ni = {};\n68: \tni.cbSize = sizeof(NOTIFYICONDATA);",
        "context_after": "70: \tni.hWnd = wnd;\n71: \tni.uFlags = NIF_TIP;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\TrayIcon.cpp",
        "line": 82,
        "text": "Random",
        "context_before": "80: \tNOTIFYICONDATA ni = {};\n81: \tni.cbSize = sizeof(NOTIFYICONDATA);",
        "context_after": "83: \tni.hWnd = wnd;\n84: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 25,
        "text": "The following WINAPI functions: WideCharToMultiByte, MultiByteToWideChar, LCMapString, LCMapStringEx, FoldString",
        "context_before": "23: \n24: // Important Note!",
        "context_after": "26: // return number of characters in the translated string,\n27: // but be aware that if -1 is used as input for a source string length"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 26,
        "text": "return number of characters in the translated string,",
        "context_before": "24: // Important Note!\n25: // The following WINAPI functions: WideCharToMultiByte, MultiByteToWideChar, LCMapString, LCMapStringEx, FoldString",
        "context_after": "27: // but be aware that if -1 is used as input for a source string length\n28: // then the number of characters will be with null terminator (+1 char)."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 27,
        "text": "but be aware that if -1 is used as input for a source string length",
        "context_before": "25: // The following WINAPI functions: WideCharToMultiByte, MultiByteToWideChar, LCMapString, LCMapStringEx, FoldString\n26: // return number of characters in the translated string,",
        "context_after": "28: // then the number of characters will be with null terminator (+1 char).\n29: // For example, because of this I did -1 for len in UTF16(const char* utf8) func."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 28,
        "text": "then the number of characters will be with null terminator (+1 char).",
        "context_before": "26: // return number of characters in the translated string,\n27: // but be aware that if -1 is used as input for a source string length",
        "context_after": "29: // For example, because of this I did -1 for len in UTF16(const char* utf8) func.\n30: // ---"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 29,
        "text": "For example, because of this I did -1 for len in UTF16(const char* utf8) func.",
        "context_before": "27: // but be aware that if -1 is used as input for a source string length\n28: // then the number of characters will be with null terminator (+1 char).",
        "context_after": "30: // ---\n31: // Also NormalizeString always return bigger length than needed,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 31,
        "text": "Also NormalizeString always return bigger length than needed,",
        "context_before": "29: // For example, because of this I did -1 for len in UTF16(const char* utf8) func.\n30: // ---",
        "context_after": "32: // I added asserts to Normalize functions to don't forget it if NormalizeString will be used.\n33: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 32,
        "text": "I added asserts to Normalize functions to don't forget it if NormalizeString will be used.",
        "context_before": "30: // ---\n31: // Also NormalizeString always return bigger length than needed,",
        "context_after": "33: \n34: class UTF"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 41,
        "text": "int len = ((int)utf16.size() * 4) + 1;",
        "context_before": "39: \t\tstd::string utf8;\n40: ",
        "context_after": "42: \t\tint len = ::WideCharToMultiByte(CP_UTF8, 0, utf16.c_str(), (int)utf16.size(), NULL, 0, NULL, NULL);\n43: \t\tif (len > 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 56,
        "text": "int len = (int)utf8.size() + 1;",
        "context_before": "54: \t\tstd::wstring utf16;\n55: ",
        "context_after": "57: \t\tint len = ::MultiByteToWideChar(CP_UTF8, 0, utf8.c_str(), (int)utf8.size(), NULL, 0);\n58: \t\tif (len > 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 74,
        "text": "int len = (int)(wcslen(utf16) * 4) + 1;",
        "context_before": "72: \t\t\treturn utf8;\n73: ",
        "context_after": "75: \t\tint len = ::WideCharToMultiByte(CP_UTF8, 0, utf16, -1, NULL, 0, NULL, NULL) - 1;\n76: \t\tif (len > 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 92,
        "text": "int len = (int)strlen(utf8) + 1;",
        "context_before": "90: \t\t\treturn utf16;\n91: ",
        "context_after": "93: \t\tint len = ::MultiByteToWideChar(CP_UTF8, 0, utf8, -1, NULL, 0) - 1;\n94: \t\tif (len > 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 149,
        "text": "http://stackoverflow.com/questions/1031645/how-to-detect-utf-8-in-plain-c",
        "context_before": "147: \tstatic bool IsUTF8(const char* str)\n148: \t{",
        "context_after": "150: \n151: \t\tif (!str)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 157,
        "text": "if ((// ASCII",
        "context_before": "155: \t\twhile (*bytes)\n156: \t\t{",
        "context_after": "158: \t\t\t//\t// use bytes[0] <= 0x7F to allow ASCII control characters\n159: \t\t\t//\tbytes[0] == 0x09 ||"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 158,
        "text": "// use bytes[0] <= 0x7F to allow ASCII control characters",
        "context_before": "156: \t\t{\n157: \t\t\t//if ((// ASCII",
        "context_after": "159: \t\t\t//\tbytes[0] == 0x09 ||\n160: \t\t\t//\tbytes[0] == 0x0A ||"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 159,
        "text": "bytes[0] == 0x09 ||",
        "context_before": "157: \t\t\t//if ((// ASCII\n158: \t\t\t//\t// use bytes[0] <= 0x7F to allow ASCII control characters",
        "context_after": "160: \t\t\t//\tbytes[0] == 0x0A ||\n161: \t\t\t//\tbytes[0] == 0x0D ||"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 160,
        "text": "bytes[0] == 0x0A ||",
        "context_before": "158: \t\t\t//\t// use bytes[0] <= 0x7F to allow ASCII control characters\n159: \t\t\t//\tbytes[0] == 0x09 ||",
        "context_after": "161: \t\t\t//\tbytes[0] == 0x0D ||\n162: \t\t\t//\t(0x20 <= bytes[0] && bytes[0] <= 0x7E)))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 161,
        "text": "bytes[0] == 0x0D ||",
        "context_before": "159: \t\t\t//\tbytes[0] == 0x09 ||\n160: \t\t\t//\tbytes[0] == 0x0A ||",
        "context_after": "162: \t\t\t//\t(0x20 <= bytes[0] && bytes[0] <= 0x7E)))\n163: \t\t\tif (bytes[0] <= 0x7F)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 162,
        "text": "(0x20 <= bytes[0] && bytes[0] <= 0x7E)))",
        "context_before": "160: \t\t\t//\tbytes[0] == 0x0A ||\n161: \t\t\t//\tbytes[0] == 0x0D ||",
        "context_after": "163: \t\t\tif (bytes[0] <= 0x7F)\n164: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 169,
        "text": "non-overlong 2-byte",
        "context_before": "167: \t\t\t}\n168: ",
        "context_after": "170: \t\t\t\t(0xC2 <= bytes[0] && bytes[0] <= 0xDF) &&\n171: \t\t\t\t(0x80 <= bytes[1] && bytes[1] <= 0xBF)))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 177,
        "text": "excluding overlongs",
        "context_before": "175: \t\t\t}\n176: ",
        "context_after": "178: \t\t\t\tbytes[0] == 0xE0 &&\n179: \t\t\t\t(0xA0 <= bytes[1] && bytes[1] <= 0xBF) &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 181,
        "text": "straight 3-byte",
        "context_before": "179: \t\t\t\t(0xA0 <= bytes[1] && bytes[1] <= 0xBF) &&\n180: \t\t\t\t(0x80 <= bytes[2] && bytes[2] <= 0xBF)) ||",
        "context_after": "182: \t\t\t\t\t((0xE1 <= bytes[0] && bytes[0] <= 0xEC) ||\n183: \t\t\t\t\t\tbytes[0] == 0xEE ||"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 187,
        "text": "excluding surrogates",
        "context_before": "185: \t\t\t\t\t(0x80 <= bytes[1] && bytes[1] <= 0xBF) &&\n186: \t\t\t\t\t(0x80 <= bytes[2] && bytes[2] <= 0xBF)) ||",
        "context_after": "188: \t\t\t\t\tbytes[0] == 0xED &&\n189: \t\t\t\t\t(0x80 <= bytes[1] && bytes[1] <= 0x9F) &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 196,
        "text": "planes 1-3",
        "context_before": "194: \t\t\t}\n195: ",
        "context_after": "197: \t\t\t\tbytes[0] == 0xF0 &&\n198: \t\t\t\t(0x90 <= bytes[1] && bytes[1] <= 0xBF) &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 201,
        "text": "planes 4-15",
        "context_before": "199: \t\t\t\t(0x80 <= bytes[2] && bytes[2] <= 0xBF) &&\n200: \t\t\t\t(0x80 <= bytes[3] && bytes[3] <= 0xBF)) ||",
        "context_after": "202: \t\t\t\t\t(0xF1 <= bytes[0] && bytes[0] <= 0xF3) &&\n203: \t\t\t\t\t(0x80 <= bytes[1] && bytes[1] <= 0xBF) &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 206,
        "text": "plane 16",
        "context_before": "204: \t\t\t\t\t(0x80 <= bytes[2] && bytes[2] <= 0xBF) &&\n205: \t\t\t\t\t(0x80 <= bytes[3] && bytes[3] <= 0xBF)) ||",
        "context_after": "207: \t\t\t\t\tbytes[0] == 0xF4 &&\n208: \t\t\t\t\t(0x80 <= bytes[1] && bytes[1] <= 0x8F) &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 243,
        "text": "erase(pos) == resize(pos) -> very fast -> must be first",
        "context_before": "241: \t\tif (!str.empty())\n242: \t\t{",
        "context_after": "244: \t\t\tstr.erase(0, str.find_first_not_of(' '));\n245: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 269,
        "text": "template<typename T>",
        "context_before": "267: \t\t}\n268: \t}",
        "context_after": "270: \t//inline static std::basic_string<T> ToLowerAscii(const std::basic_string<T>& str)\n271: \t//{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 270,
        "text": "inline static std::basic_string<T> ToLowerAscii(const std::basic_string<T>& str)",
        "context_before": "268: \t}\n269: \t//template<typename T>",
        "context_after": "271: \t//{\n272: \t//\tstd::basic_string<T> result = str;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 272,
        "text": "std::basic_string<T> result = str;",
        "context_before": "270: \t//inline static std::basic_string<T> ToLowerAscii(const std::basic_string<T>& str)\n271: \t//{",
        "context_after": "273: \t//\tMakeLowerAscii(result);\n274: \t//\treturn result;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 273,
        "text": "MakeLowerAscii(result);",
        "context_before": "271: \t//{\n272: \t//\tstd::basic_string<T> result = str;",
        "context_after": "274: \t//\treturn result;\n275: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 274,
        "text": "return result;",
        "context_before": "272: \t//\tstd::basic_string<T> result = str;\n273: \t//\tMakeLowerAscii(result);",
        "context_after": "275: \t//}\n276: \t//template<typename T>"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 276,
        "text": "template<typename T>",
        "context_before": "274: \t//\treturn result;\n275: \t//}",
        "context_after": "277: \t//inline static std::basic_string<T> ToUpperAscii(const std::basic_string<T>& str)\n278: \t//{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 277,
        "text": "inline static std::basic_string<T> ToUpperAscii(const std::basic_string<T>& str)",
        "context_before": "275: \t//}\n276: \t//template<typename T>",
        "context_after": "278: \t//{\n279: \t//\tstd::basic_string<T> result = str;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 279,
        "text": "std::basic_string<T> result = str;",
        "context_before": "277: \t//inline static std::basic_string<T> ToUpperAscii(const std::basic_string<T>& str)\n278: \t//{",
        "context_after": "280: \t//\tMakeUpperAscii(result);\n281: \t//\treturn result;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 280,
        "text": "MakeUpperAscii(result);",
        "context_before": "278: \t//{\n279: \t//\tstd::basic_string<T> result = str;",
        "context_after": "281: \t//\treturn result;\n282: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 281,
        "text": "return result;",
        "context_before": "279: \t//\tstd::basic_string<T> result = str;\n280: \t//\tMakeUpperAscii(result);",
        "context_after": "282: \t//}\n283: \ttemplate<typename T>"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 309,
        "text": "http://stackoverflow.com/questions/1068134/comparing-wstring-with-ignoring-the-case",
        "context_before": "307: \t}\n308: ",
        "context_after": "310: \t// http://stackoverflow.com/questions/13656014/extremely-fast-is-iequal-case-insensitive-equality-comparison\n311: private:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 310,
        "text": "http://stackoverflow.com/questions/13656014/extremely-fast-is-iequal-case-insensitive-equality-comparison",
        "context_before": "308: \n309: \t// http://stackoverflow.com/questions/1068134/comparing-wstring-with-ignoring-the-case",
        "context_after": "311: private:\n312: \ttemplate<typename T>"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 403,
        "text": "inline static void FromInt(std::string& str, int i)",
        "context_before": "401: \t}\n402: ",
        "context_after": "404: //\t{\n405: //\t\tchar temp[64];"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 405,
        "text": "char temp[64];",
        "context_before": "403: //\tinline static void FromInt(std::string& str, int i)\n404: //\t{",
        "context_after": "406: //\t\t_itoa_s(i, temp, 10);\n407: //\t\tstr = temp;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 406,
        "text": "_itoa_s(i, temp, 10);",
        "context_before": "404: //\t{\n405: //\t\tchar temp[64];",
        "context_after": "407: //\t\tstr = temp;\n408: //\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 407,
        "text": "str = temp;",
        "context_before": "405: //\t\tchar temp[64];\n406: //\t\t_itoa_s(i, temp, 10);",
        "context_after": "408: //\t}\n409: //\tinline static void FromInt(std::wstring& str, int i)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 409,
        "text": "inline static void FromInt(std::wstring& str, int i)",
        "context_before": "407: //\t\tstr = temp;\n408: //\t}",
        "context_after": "410: //\t{\n411: //\t\twchar_t temp[64];"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 411,
        "text": "wchar_t temp[64];",
        "context_before": "409: //\tinline static void FromInt(std::wstring& str, int i)\n410: //\t{",
        "context_after": "412: //\t\ttemp[0] = '\\0';\n413: //\t\t_itow_s(i, temp, 10);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 412,
        "text": "temp[0] = '\\0';",
        "context_before": "410: //\t{\n411: //\t\twchar_t temp[64];",
        "context_after": "413: //\t\t_itow_s(i, temp, 10);\n414: //\t\tstr = temp;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 413,
        "text": "_itow_s(i, temp, 10);",
        "context_before": "411: //\t\twchar_t temp[64];\n412: //\t\ttemp[0] = '\\0';",
        "context_after": "414: //\t\tstr = temp;\n415: //\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 414,
        "text": "str = temp;",
        "context_before": "412: //\t\ttemp[0] = '\\0';\n413: //\t\t_itow_s(i, temp, 10);",
        "context_after": "415: //\t}\n416: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 423,
        "text": "vswprintf(temp, format, args);",
        "context_before": "421: \t\tva_list args;\n422: \t\tva_start(args, format);",
        "context_after": "424: \t\tvswprintf_s(temp, format, args);\n425: \t\tva_end(args);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 435,
        "text": "vswprintf(temp, format, args);",
        "context_before": "433: \t\tva_list args;\n434: \t\tva_start(args, format);",
        "context_after": "436: \t\tvswprintf_s(temp, format, args);\n437: \t\tva_end(args);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 440,
        "text": "Fix the float string. Example:",
        "context_before": "438: \t\tstd::wstring str = temp;\n439: ",
        "context_after": "441: \t\t// 14.08 -> 14,08\n442: \t\t// 14.00 -> 14"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 441,
        "text": "14.08 -> 14,08",
        "context_before": "439: \n440: \t\t// Fix the float string. Example:",
        "context_after": "442: \t\t// 14.00 -> 14\n443: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 442,
        "text": "14.00 -> 14",
        "context_before": "440: \t\t// Fix the float string. Example:\n441: \t\t// 14.08 -> 14,08",
        "context_after": "443: \n444: \t\twchar_t sDecimal[16]; sDecimal[0] = '\\0';"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 506,
        "text": "int len = ::LCMapStringEx(LOCALE_NAME_USER_DEFAULT, LCMAP_UPPERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), NULL, 0, 0, 0, 0);",
        "context_before": "504: \n505: \t\tint len = ::LCMapStringW(LOCALE_USER_DEFAULT, LCMAP_UPPERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), NULL, 0);",
        "context_after": "507: \t\tif (len > 0)\n508: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 511,
        "text": "::LCMapStringEx(LOCALE_NAME_USER_DEFAULT, LCMAP_UPPERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), &upper[0], len, 0, 0, 0);",
        "context_before": "509: \t\t\tupper.resize(len);\n510: \t\t\t::LCMapStringW(LOCALE_USER_DEFAULT, LCMAP_UPPERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), &upper[0], len);",
        "context_after": "512: \t\t}\n513: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 518,
        "text": "inline static std::wstring ToUpperInvariant(const std::wstring& text) { std::wstring upper; int len = ::LCMapStringW(LOCALE_INVARIANT, LCMAP_UPPERCASE, text.c_str(), (int)text.size(), NULL, 0); //int len = ::LCMapStringEx(LOCALE_NAME_INVARIANT, LCMAP_UPPERCASE, text.c_str(), (int)text.size(), NULL, 0, 0, 0, 0); if (len > 0) { upper.resize(len); ::LCMapStringW(LOCALE_INVARIANT, LCMAP_UPPERCASE, text.c_str(), (int)text.size(), &upper[0], len); //::LCMapStringEx(LOCALE_NAME_INVARIANT, LCMAP_UPPERCASE, text.c_str(), (int)text.size(), &upper[0], len, 0, 0, 0); } return upper; }",
        "context_before": "516: \n517: \t// Do not use invariant locale, this is Microsoft specific. Use en-US instead.",
        "context_after": "534: \tinline static std::wstring ToUpperUS(const std::wstring& text)\n535: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 539,
        "text": "int len = ::LCMapStringEx(L\"en-US\", LCMAP_UPPERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), NULL, 0, 0, 0, 0);",
        "context_before": "537: \n538: \t\tint len = ::LCMapStringW(MAKELCID(MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US), SORT_DEFAULT), LCMAP_UPPERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), NULL, 0);",
        "context_after": "540: \t\tif (len > 0)\n541: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 544,
        "text": "::LCMapStringEx(L\"en-US\", LCMAP_UPPERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), &upper[0], len, 0, 0, 0);",
        "context_before": "542: \t\t\tupper.resize(len);\n543: \t\t\t::LCMapStringW(MAKELCID(MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US), SORT_DEFAULT), LCMAP_UPPERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), &upper[0], len);",
        "context_after": "545: \t\t}\n546: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 555,
        "text": "int len = ::LCMapStringEx(LOCALE_NAME_USER_DEFAULT, LCMAP_LOWERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), NULL, 0, 0, 0, 0);",
        "context_before": "553: \n554: \t\tint len = ::LCMapStringW(LOCALE_USER_DEFAULT, LCMAP_LOWERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), NULL, 0);",
        "context_after": "556: \t\tif (len > 0)\n557: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 560,
        "text": "::LCMapStringEx(LOCALE_NAME_USER_DEFAULT, LCMAP_LOWERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), &lower[0], len, 0, 0, 0);",
        "context_before": "558: \t\t\tlower.resize(len);\n559: \t\t\t::LCMapStringW(LOCALE_USER_DEFAULT, LCMAP_LOWERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), &lower[0], len);",
        "context_after": "561: \t\t}\n562: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 567,
        "text": "inline static std::wstring ToLowerInvariant(const std::wstring& text) { std::wstring lower; int len = ::LCMapStringW(LOCALE_INVARIANT, LCMAP_LOWERCASE, text.c_str(), (int)text.size(), NULL, 0); //int len = ::LCMapStringEx(LOCALE_NAME_INVARIANT, LCMAP_LOWERCASE, text.c_str(), (int)text.size(), NULL, 0, 0, 0, 0); if (len > 0) { lower.resize(len); ::LCMapStringW(LOCALE_INVARIANT, LCMAP_LOWERCASE, text.c_str(), (int)text.size(), &lower[0], len); //::LCMapStringEx(LOCALE_NAME_INVARIANT, LCMAP_LOWERCASE, text.c_str(), (int)text.size(), &lower[0], len, 0, 0, 0); } return lower; }",
        "context_before": "565: \n566: \t// Do not use invariant locale, this is Microsoft specific. Use en-US instead.",
        "context_after": "583: \tinline static std::wstring ToLowerUS(const std::wstring& text)\n584: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 588,
        "text": "int len = ::LCMapStringEx(L\"en-US\", LCMAP_LOWERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), NULL, 0, 0, 0, 0);",
        "context_before": "586: \n587: \t\tint len = ::LCMapStringW(MAKELCID(MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US), SORT_DEFAULT), LCMAP_LOWERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), NULL, 0);",
        "context_after": "589: \t\tif (len > 0)\n590: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 593,
        "text": "::LCMapStringEx(L\"en-US\", LCMAP_LOWERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), &lower[0], len, 0, 0, 0);",
        "context_before": "591: \t\t\tlower.resize(len);\n592: \t\t\t::LCMapStringW(MAKELCID(MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US), SORT_DEFAULT), LCMAP_LOWERCASE|LCMAP_LINGUISTIC_CASING, text.c_str(), (int)text.size(), &lower[0], len);",
        "context_after": "594: \t\t}\n595: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 599,
        "text": "Quote from boost:",
        "context_before": "597: \t}\n598: ",
        "context_after": "600: \t// We use FoldString, under Vista it actually does normalization;\n601: \t// under XP and below it does something similar, half job, better then nothing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 600,
        "text": "We use FoldString, under Vista it actually does normalization;",
        "context_before": "598: \n599: \t// Quote from boost:",
        "context_after": "601: \t// under XP and below it does something similar, half job, better then nothing\n602: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 601,
        "text": "under XP and below it does something similar, half job, better then nothing",
        "context_before": "599: \t// Quote from boost:\n600: \t// We use FoldString, under Vista it actually does normalization;",
        "context_after": "602: \n603: \tinline static std::wstring NormalizeC(const std::wstring& text)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 608,
        "text": "int len = ::NormalizeString(NormalizationC, text.c_str(), (int)text.size(), NULL, 0);",
        "context_before": "606: \n607: \t\tint len = ::FoldStringW(MAP_PRECOMPOSED, text.c_str(), (int)text.size(), NULL, 0);",
        "context_after": "609: \t\tif (len > 0)\n610: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 613,
        "text": "len = ::NormalizeString(NormalizationC, text.c_str(), (int)text.size(), &result[0], len);",
        "context_before": "611: \t\t\tresult.resize(len);\n612: \t\t\t::FoldStringW(MAP_PRECOMPOSED, text.c_str(), (int)text.size(), &result[0], len);",
        "context_after": "614: \t\t\t//assert(result.size() == wcslen(result.c_str())); // see Important Note\n615: \t\t\t//result.resize(len);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 615,
        "text": "result.resize(len);",
        "context_before": "613: \t\t\t//len = ::NormalizeString(NormalizationC, text.c_str(), (int)text.size(), &result[0], len);\n614: \t\t\t//assert(result.size() == wcslen(result.c_str())); // see Important Note",
        "context_after": "616: \t\t}\n617: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 626,
        "text": "int len = ::NormalizeString(NormalizationD, text.c_str(), (int)text.size(), NULL, 0);",
        "context_before": "624: \n625: \t\tint len = ::FoldStringW(MAP_COMPOSITE, text.c_str(), (int)text.size(), NULL, 0);",
        "context_after": "627: \t\tif (len > 0)\n628: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 631,
        "text": "len = ::NormalizeString(NormalizationD, text.c_str(), (int)text.size(), &result[0], len);",
        "context_before": "629: \t\t\tresult.resize(len);\n630: \t\t\t::FoldStringW(MAP_COMPOSITE, text.c_str(), (int)text.size(), &result[0], len);",
        "context_after": "632: \t\t\t//assert(result.size() == wcslen(result.c_str())); // see Important Note\n633: \t\t\t//result.resize(len);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 633,
        "text": "result.resize(len);",
        "context_before": "631: \t\t\t//len = ::NormalizeString(NormalizationD, text.c_str(), (int)text.size(), &result[0], len);\n632: \t\t\t//assert(result.size() == wcslen(result.c_str())); // see Important Note",
        "context_after": "634: \t\t}\n635: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 644,
        "text": "int len = ::NormalizeString(NormalizationKC, text.c_str(), (int)text.size(), NULL, 0);",
        "context_before": "642: \n643: \t\tint len = ::FoldStringW(MAP_FOLDCZONE, text.c_str(), (int)text.size(), NULL, 0);",
        "context_after": "645: \t\tif (len > 0)\n646: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 649,
        "text": "len = ::NormalizeString(NormalizationKC, text.c_str(), (int)text.size(), &result[0], len);",
        "context_before": "647: \t\t\tresult.resize(len);\n648: \t\t\t::FoldStringW(MAP_FOLDCZONE, text.c_str(), (int)text.size(), &result[0], len);",
        "context_after": "650: \t\t\t//assert(result.size() == wcslen(result.c_str())); // see Important Note\n651: \t\t\t//result.resize(len);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 651,
        "text": "result.resize(len);",
        "context_before": "649: \t\t\t//len = ::NormalizeString(NormalizationKC, text.c_str(), (int)text.size(), &result[0], len);\n650: \t\t\t//assert(result.size() == wcslen(result.c_str())); // see Important Note",
        "context_after": "652: \t\t}\n653: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 662,
        "text": "int len = ::NormalizeString(NormalizationKD, text.c_str(), -1, NULL, 0);",
        "context_before": "660: \n661: \t\tint len = ::FoldStringW(MAP_FOLDCZONE|MAP_COMPOSITE, text.c_str(), -1, NULL, 0);",
        "context_after": "663: \t\tif (len > 0)\n664: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 667,
        "text": "len = ::NormalizeString(NormalizationKD, text.c_str(), -1, &result[0], len);",
        "context_before": "665: \t\t\tresult.resize(len);\n666: \t\t\t::FoldStringW(MAP_FOLDCZONE|MAP_COMPOSITE, text.c_str(), -1, &result[0], len);",
        "context_after": "668: \t\t\t//assert(result.size() == wcslen(result.c_str())); // see Important Note\n669: \t\t\t//result.resize(len);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 669,
        "text": "result.resize(len);",
        "context_before": "667: \t\t\t//len = ::NormalizeString(NormalizationKD, text.c_str(), -1, &result[0], len);\n668: \t\t\t//assert(result.size() == wcslen(result.c_str())); // see Important Note",
        "context_after": "670: \t\t}\n671: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 707,
        "text": "std::transform(result.begin(), result.end(), result.begin(), ::tolower);",
        "context_before": "705: \t\t{\n706: \t\t\tresult = file.substr(find + 1);",
        "context_after": "708: \t\t\tStringEx::MakeLowerAscii(result);\n709: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 735,
        "text": "FileFromPath + NameFromPath",
        "context_before": "733: \tinline static std::wstring NameFromPath(const std::wstring& pathFile)\n734: \t{",
        "context_after": "736: \t\tstd::wstring result;\n737: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 752,
        "text": "http:// , https:// , ftp:// , mms://",
        "context_before": "750: \tinline static bool IsURL(const std::wstring& path)\n751: \t{",
        "context_after": "753: \t\tif (path.find(L\"://\") != std::string::npos)\n754: \t\t\treturn true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 753,
        "text": "\") != std::string::npos)",
        "context_before": "751: \t{\n752: \t\t// http:// , https:// , ftp:// , mms://",
        "context_after": "754: \t\t\treturn true;\n755: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 758,
        "text": "inline static std::string DateTimeString(int year, int month, int day, int hour, int minute, int second)",
        "context_before": "756: \t\treturn false;\n757: \t}",
        "context_after": "759: \t//{\n760: \t//\tchar temp[128];"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 760,
        "text": "char temp[128];",
        "context_before": "758: \t//inline static std::string DateTimeString(int year, int month, int day, int hour, int minute, int second)\n759: \t//{",
        "context_after": "761: \t//\ttemp[0] = '\\0';\n762: \t//\t//sprintf(temp, \"%04d-%02d-%02d %02d:%02d:%02d\", year, month, day, hour, minute, second);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 761,
        "text": "temp[0] = '\\0';",
        "context_before": "759: \t//{\n760: \t//\tchar temp[128];",
        "context_after": "762: \t//\t//sprintf(temp, \"%04d-%02d-%02d %02d:%02d:%02d\", year, month, day, hour, minute, second);\n763: \t//\tsprintf_s(temp, \"%04d-%02d-%02d %02d:%02d:%02d\", year, month, day, hour, minute, second);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 762,
        "text": "//sprintf(temp, \"%04d-%02d-%02d %02d:%02d:%02d\", year, month, day, hour, minute, second);",
        "context_before": "760: \t//\tchar temp[128];\n761: \t//\ttemp[0] = '\\0';",
        "context_after": "763: \t//\tsprintf_s(temp, \"%04d-%02d-%02d %02d:%02d:%02d\", year, month, day, hour, minute, second);\n764: \t//\treturn temp;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 763,
        "text": "sprintf_s(temp, \"%04d-%02d-%02d %02d:%02d:%02d\", year, month, day, hour, minute, second);",
        "context_before": "761: \t//\ttemp[0] = '\\0';\n762: \t//\t//sprintf(temp, \"%04d-%02d-%02d %02d:%02d:%02d\", year, month, day, hour, minute, second);",
        "context_after": "764: \t//\treturn temp;\n765: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 764,
        "text": "return temp;",
        "context_before": "762: \t//\t//sprintf(temp, \"%04d-%02d-%02d %02d:%02d:%02d\", year, month, day, hour, minute, second);\n763: \t//\tsprintf_s(temp, \"%04d-%02d-%02d %02d:%02d:%02d\", year, month, day, hour, minute, second);",
        "context_after": "765: \t//}\n766: };"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WindowEx.cpp",
        "line": 47,
        "text": "Do not add CS_HREDRAW and CS_VREDRAW, we use manual redraw on MW_SIZE or WM_MOVE",
        "context_before": "45: \tif (!::GetClassInfoExW(instance, className, &wcex))\n46: \t{",
        "context_after": "48: \t\twcex.style          = (isDoubleClicks ? CS_DBLCLKS : 0);// | CS_HREDRAW | CS_VREDRAW;\n49: \t\twcex.lpfnWndProc\t= MainWindowProc;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WindowEx.cpp",
        "line": 48,
        "text": "| CS_HREDRAW | CS_VREDRAW;",
        "context_before": "46: \t{\n47: \t\t// Do not add CS_HREDRAW and CS_VREDRAW, we use manual redraw on MW_SIZE or WM_MOVE",
        "context_after": "49: \t\twcex.lpfnWndProc\t= MainWindowProc;\n50: \t\twcex.cbClsExtra\t\t= 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WindowEx.cpp",
        "line": 56,
        "text": "(HBRUSH)(COLOR_WINDOW + 1);",
        "context_before": "54: \t\twcex.hIconSm        = iconSm;\n55: \t\twcex.hCursor\t\t= ::LoadCursorW(NULL, IDC_ARROW);",
        "context_after": "57: \t\twcex.lpszMenuName\t= NULL;\n58: \t\twcex.lpszClassName\t= className;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WindowEx.cpp",
        "line": 63,
        "text": "thisWnd = ::CreateWindowEx(exStyle, className, NULL, style, x, y, cx, cy, parent, NULL, appInstance, NULL);",
        "context_before": "61: \t}\n62: ",
        "context_after": "64: \t::CreateWindowExW(exStyle, className, title, style, x, y, cx, cy, parent, NULL, instance, (LPVOID)this);\n65: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WindowEx.cpp",
        "line": 69,
        "text": "thisParentWnd = parent; mapWindows[thisWnd] = this;",
        "context_before": "67: \t\treturn false;\n68: ",
        "context_after": "73: \treturn true;\n74: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WindowEx.h",
        "line": 50,
        "text": "http://www.codeguru.com/forum/showthread.php?t=287823&highlight=WndProc",
        "context_before": "48: \n49: private:",
        "context_after": "51: \t// http://blogs.msdn.com/b/oldnewthing/archive/2005/04/22/410773.aspx\n52: \tstatic std::map<HWND, WindowEx*> mapWindows;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WindowEx.h",
        "line": 51,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2005/04/22/410773.aspx",
        "context_before": "49: private:\n50: \t// http://www.codeguru.com/forum/showthread.php?t=287823&highlight=WndProc",
        "context_after": "52: \tstatic std::map<HWND, WindowEx*> mapWindows;\n53: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 21,
        "text": "#include \"BugTrap/BugTrap.h\"",
        "context_before": "19: #include \"Winyl.h\"\n20: #include \"WinylApp.h\"",
        "context_after": "22: //#pragma comment(lib, \"src/BugTrap/BugTrapU.lib\")\n23: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 22,
        "text": "#pragma comment(lib, \"src/BugTrap/BugTrapU.lib\")",
        "context_before": "20: #include \"WinylApp.h\"\n21: //#include \"BugTrap/BugTrap.h\"",
        "context_after": "23: \n24: int APIENTRY _tWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, int nCmdShow)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 26,
        "text": "CRITICAL TEST - This should ALWAYS appear in DebugView",
        "context_before": "24: int APIENTRY _tWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, int nCmdShow)\n25: {",
        "context_after": "27: \t::OutputDebugStringW(L\"========== WINYL PLAYER STARTING ==========\\n\");\n28: \t::OutputDebugStringW(L\"If you see this in DebugView, OutputDebugString works!\\n\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 32,
        "text": "_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF /*| _CRTDBG_CHECK_ALWAYS_DF*/ | _CRTDBG_LEAK_CHECK_DF /*| _CRTDBG_DELAY_FREE_MEM_DF*/);",
        "context_before": "30: #ifdef _DEBUG\n31: \t::OutputDebugStringW(L\"WinMain: DEBUG build detected\\n\");",
        "context_after": "33: \t_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);\n34: \t// Output all memory problems to a new window to make it more noticeable."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 34,
        "text": "Output all memory problems to a new window to make it more noticeable.",
        "context_before": "32: \t//_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF /*| _CRTDBG_CHECK_ALWAYS_DF*/ | _CRTDBG_LEAK_CHECK_DF /*| _CRTDBG_DELAY_FREE_MEM_DF*/);\n33: \t_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);",
        "context_after": "35: \t// Comment next lines to output to the new window with more info (don't forget to uncomment it after tests).\n36: \t// Use DEBUG_NEW to show line number in the output window (see stdafx.h)."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 35,
        "text": "Comment next lines to output to the new window with more info (don't forget to uncomment it after tests).",
        "context_before": "33: \t_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);\n34: \t// Output all memory problems to a new window to make it more noticeable.",
        "context_after": "36: \t// Use DEBUG_NEW to show line number in the output window (see stdafx.h).\n37: \t_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_WNDW);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 36,
        "text": "Use DEBUG_NEW to show line number in the output window (see stdafx.h).",
        "context_before": "34: \t// Output all memory problems to a new window to make it more noticeable.\n35: \t// Comment next lines to output to the new window with more info (don't forget to uncomment it after tests).",
        "context_after": "37: \t_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_WNDW);\n38: \t_CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_WNDW);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 44,
        "text": "Use HeapEnableTerminationOnCorruption flag. It is better to crash than continue to work with corrupted heap.",
        "context_before": "42: #endif\n43: ",
        "context_after": "45: \t// HeapEnableTerminationOnCorruption is not needed if Win64 or SUBSYSTEM major version is 6 or higher,\n46: \t// it is enabled by default in this case, see: http://blogs.msdn.com/b/oldnewthing/archive/2013/12/27/10484882.aspx"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 45,
        "text": "HeapEnableTerminationOnCorruption is not needed if Win64 or SUBSYSTEM major version is 6 or higher,",
        "context_before": "43: \n44: \t// Use HeapEnableTerminationOnCorruption flag. It is better to crash than continue to work with corrupted heap.",
        "context_after": "46: \t// it is enabled by default in this case, see: http://blogs.msdn.com/b/oldnewthing/archive/2013/12/27/10484882.aspx\n47: \t// so remove it when drop WinXP support."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 46,
        "text": "it is enabled by default in this case, see: http://blogs.msdn.com/b/oldnewthing/archive/2013/12/27/10484882.aspx",
        "context_before": "44: \t// Use HeapEnableTerminationOnCorruption flag. It is better to crash than continue to work with corrupted heap.\n45: \t// HeapEnableTerminationOnCorruption is not needed if Win64 or SUBSYSTEM major version is 6 or higher,",
        "context_after": "47: \t// so remove it when drop WinXP support.\n48: #if (WINVER >= 0x0600)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 47,
        "text": "so remove it when drop WinXP support.",
        "context_before": "45: \t// HeapEnableTerminationOnCorruption is not needed if Win64 or SUBSYSTEM major version is 6 or higher,\n46: \t// it is enabled by default in this case, see: http://blogs.msdn.com/b/oldnewthing/archive/2013/12/27/10484882.aspx",
        "context_after": "48: #if (WINVER >= 0x0600)\n49: \tassert(false);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 54,
        "text": "Leak detectors/crash reporters: (store links here for now)",
        "context_before": "52: #endif\n53: ",
        "context_after": "55: // Visual Leak Detector: https://github.com/KindDragon/vld/wiki/Using-Visual-Leak-Detector\n56: // BugTrap: https://github.com/bchavez/BugTrap"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 55,
        "text": "Visual Leak Detector: https://github.com/KindDragon/vld/wiki/Using-Visual-Leak-Detector",
        "context_before": "53: \n54: // Leak detectors/crash reporters: (store links here for now)",
        "context_after": "56: // BugTrap: https://github.com/bchavez/BugTrap\n57: // CrashRpt: http://crashrpt.sourceforge.net/"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 56,
        "text": "BugTrap: https://github.com/bchavez/BugTrap",
        "context_before": "54: // Leak detectors/crash reporters: (store links here for now)\n55: // Visual Leak Detector: https://github.com/KindDragon/vld/wiki/Using-Visual-Leak-Detector",
        "context_after": "57: // CrashRpt: http://crashrpt.sourceforge.net/\n58: // Doctor Dump: https://drdump.com/CrashRpt.CPP/About"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 57,
        "text": "CrashRpt: http://crashrpt.sourceforge.net/",
        "context_before": "55: // Visual Leak Detector: https://github.com/KindDragon/vld/wiki/Using-Visual-Leak-Detector\n56: // BugTrap: https://github.com/bchavez/BugTrap",
        "context_after": "58: // Doctor Dump: https://drdump.com/CrashRpt.CPP/About\n59: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 58,
        "text": "Doctor Dump: https://drdump.com/CrashRpt.CPP/About",
        "context_before": "56: // BugTrap: https://github.com/bchavez/BugTrap\n57: // CrashRpt: http://crashrpt.sourceforge.net/",
        "context_after": "59: \n60: // Keep BugTrap config, we can use it to find difficult bugs in the future"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 61,
        "text": "BT_InstallSehFilter();",
        "context_before": "59: \n60: // Keep BugTrap config, we can use it to find difficult bugs in the future",
        "context_after": "62: //\tBT_SetAppName(_T(\"Winyl\"));\n63: //\tBT_SetSupportEMail(_T(\"email@example.com\"));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 62,
        "text": "BT_SetAppName(_T(\"Winyl\"));",
        "context_before": "60: // Keep BugTrap config, we can use it to find difficult bugs in the future\n61: //\tBT_InstallSehFilter();",
        "context_after": "63: //\tBT_SetSupportEMail(_T(\"email@example.com\"));\n64: //\tBT_SetFlags(BTF_DETAILEDMODE | BTF_EDITMAIL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 63,
        "text": "BT_SetSupportEMail(_T(\"email@example.com\"));",
        "context_before": "61: //\tBT_InstallSehFilter();\n62: //\tBT_SetAppName(_T(\"Winyl\"));",
        "context_after": "64: //\tBT_SetFlags(BTF_DETAILEDMODE | BTF_EDITMAIL);\n65: //\tBT_SetSupportServer(_T(\"localhost\"), 9999);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 64,
        "text": "BT_SetFlags(BTF_DETAILEDMODE | BTF_EDITMAIL);",
        "context_before": "62: //\tBT_SetAppName(_T(\"Winyl\"));\n63: //\tBT_SetSupportEMail(_T(\"email@example.com\"));",
        "context_after": "65: //\tBT_SetSupportServer(_T(\"localhost\"), 9999);\n66: //\tBT_SetSupportURL(_T(\"http://www.example.com\"));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 65,
        "text": "BT_SetSupportServer(_T(\"localhost\"), 9999);",
        "context_before": "63: //\tBT_SetSupportEMail(_T(\"email@example.com\"));\n64: //\tBT_SetFlags(BTF_DETAILEDMODE | BTF_EDITMAIL);",
        "context_after": "66: //\tBT_SetSupportURL(_T(\"http://www.example.com\"));\n67: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 66,
        "text": "BT_SetSupportURL(_T(\"http://www.example.com\"));",
        "context_before": "64: //\tBT_SetFlags(BTF_DETAILEDMODE | BTF_EDITMAIL);\n65: //\tBT_SetSupportServer(_T(\"localhost\"), 9999);",
        "context_after": "67: \n68: \t// Reduce the scope for better resource leak detection"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 68,
        "text": "Reduce the scope for better resource leak detection",
        "context_before": "66: //\tBT_SetSupportURL(_T(\"http://www.example.com\"));\n67: ",
        "context_after": "69: \t{\n70: \t\tWinylApp app;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 79,
        "text": "This assert help us to find large (and sometimes small) resource leak.",
        "context_before": "77: \t::OutputDebugStringW((L\"GDI Objects: \" + std::to_wstring(gdiObjects) + L'\\n').c_str());\n78: \t::OutputDebugStringW((L\"USER Objects: \" + std::to_wstring(userObjects) + L'\\n').c_str());",
        "context_after": "80: \t// It is hard to calculate max gdi and user objects here because for example\n81: \t// file dialog add many objects if opened, so I just use max values which I saw."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 80,
        "text": "It is hard to calculate max gdi and user objects here because for example",
        "context_before": "78: \t::OutputDebugStringW((L\"USER Objects: \" + std::to_wstring(userObjects) + L'\\n').c_str());\n79: \t// This assert help us to find large (and sometimes small) resource leak.",
        "context_after": "81: \t// file dialog add many objects if opened, so I just use max values which I saw.\n82: \t// So the values can be changed if assert appears without any reason."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 81,
        "text": "file dialog add many objects if opened, so I just use max values which I saw.",
        "context_before": "79: \t// This assert help us to find large (and sometimes small) resource leak.\n80: \t// It is hard to calculate max gdi and user objects here because for example",
        "context_after": "82: \t// So the values can be changed if assert appears without any reason.\n83: \t// Under comment max values which I saw without file dialog (use it for testing)."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 82,
        "text": "So the values can be changed if assert appears without any reason.",
        "context_before": "80: \t// It is hard to calculate max gdi and user objects here because for example\n81: \t// file dialog add many objects if opened, so I just use max values which I saw.",
        "context_after": "83: \t// Under comment max values which I saw without file dialog (use it for testing).\n84: \tassert(gdiObjects <= 100); // 47"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 83,
        "text": "Under comment max values which I saw without file dialog (use it for testing).",
        "context_before": "81: \t// file dialog add many objects if opened, so I just use max values which I saw.\n82: \t// So the values can be changed if assert appears without any reason.",
        "context_after": "84: \tassert(gdiObjects <= 100); // 47\n85: \tassert(userObjects <= 25); // 4"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 88,
        "text": "Check for memory corruption",
        "context_before": "86: #endif\n87: ",
        "context_after": "89: \tassert(_CrtCheckMemory());\n90: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 35,
        "text": "if (gdiplusToken)",
        "context_before": "33: WinylApp::~WinylApp()\n34: {",
        "context_after": "36: \t//\tGdiplus::GdiplusShutdown(gdiplusToken);\n37: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 36,
        "text": "Gdiplus::GdiplusShutdown(gdiplusToken);",
        "context_before": "34: {\n35: \t//if (gdiplusToken)",
        "context_after": "37: \n38: \t// OleUninitialize should be here after all other parts of the program are unloaded"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 38,
        "text": "OleUninitialize should be here after all other parts of the program are unloaded",
        "context_before": "36: \t//\tGdiplus::GdiplusShutdown(gdiplusToken);\n37: ",
        "context_after": "39: \t// or if it will be called before for example BASS_ASIO_Free that uses COM it will cause bugs\n40: \tif (isOleInitialize)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 39,
        "text": "or if it will be called before for example BASS_ASIO_Free that uses COM it will cause bugs",
        "context_before": "37: \n38: \t// OleUninitialize should be here after all other parts of the program are unloaded",
        "context_after": "40: \tif (isOleInitialize)\n41: \t\t::OleUninitialize();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 58,
        "text": "Remove file associations when start with /Unregister command line flag",
        "context_before": "56: \tParseCommandLine(openFiles, cmdEmbedding, cmdPortable, cmdUnregister);\n57: ",
        "context_after": "59: \tif (cmdUnregister)\n60: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 70,
        "text": "::CoInitialize(NULL);",
        "context_before": "68: \t}\n69: ",
        "context_after": "71: \t::OleInitialize(NULL);\n72: \tisOleInitialize = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 155,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2009/02/20/9435239.aspx",
        "context_before": "153: \t\t\t\t::SendMessage(hWnd, UWM_NOMINIPLAYER, 0, 0);\n154: ",
        "context_after": "156: \n157: \t\t\t\tif (::IsIconic(hWnd))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 171,
        "text": "Init Gdiplus",
        "context_before": "169: \tfutureWin = new FutureWin();\n170: ",
        "context_after": "172: \t//Gdiplus::GdiplusStartupInput gdiplusStartupInput;\n173: \t//Gdiplus::GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 172,
        "text": "Gdiplus::GdiplusStartupInput gdiplusStartupInput;",
        "context_before": "170: \n171: \t// Init Gdiplus",
        "context_after": "173: \t//Gdiplus::GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);\n174: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 173,
        "text": "Gdiplus::GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);",
        "context_before": "171: \t// Init Gdiplus\n172: \t//Gdiplus::GdiplusStartupInput gdiplusStartupInput;",
        "context_after": "174: \n175: \t{ // Start"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 194,
        "text": "Do not use it yet (affects only DlgProgress anyway)",
        "context_before": "192: \t\twhile (::GetMessage(&msg, NULL, 0, 0))// > 0)\n193: \t\t{",
        "context_after": "195: \t\t\t//if (DialogEx::IsDialogExMessage(&msg))\n196: \t\t\t//\tcontinue;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 196,
        "text": "continue;",
        "context_before": "194: \t\t\t// Do not use it yet (affects only DlgProgress anyway)\n195: \t\t\t//if (DialogEx::IsDialogExMessage(&msg))",
        "context_after": "197: \n198: \t\t\t// If dragging something then process Escape key here to stop Drag'n'Drop"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 198,
        "text": "If dragging something then process Escape key here to stop Drag'n'Drop",
        "context_before": "196: \t\t\t//\tcontinue;\n197: ",
        "context_after": "199: \t\t\t// Also in WindowProc of the main window process WM_ACTIVATE we can't do it here\n200: \t\t\tif (winylWnd.isDragDrop)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 199,
        "text": "Also in WindowProc of the main window process WM_ACTIVATE we can't do it here",
        "context_before": "197: \n198: \t\t\t// If dragging something then process Escape key here to stop Drag'n'Drop",
        "context_after": "200: \t\t\tif (winylWnd.isDragDrop)\n201: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 203,
        "text": "continue;",
        "context_before": "201: \t\t\t{\n202: \t\t\t\t//if (msg.message == WM_SYSKEYDOWN)",
        "context_after": "204: \t\t\t\tif (msg.message == WM_KEYDOWN)\n205: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 209,
        "text": "continue;",
        "context_before": "207: \t\t\t\t\t\twinylWnd.StopDragDrop();\n208: \t\t\t\t//\telse",
        "context_after": "210: \t\t\t\t}\n211: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 218,
        "text": "winylWnd.toolTips.RelayEvent(&msg);",
        "context_before": "216: \t\t\twinylWnd.PreTranslateRelayEvent(&msg);\n217: \t\t\t::TranslateMessage(&msg);",
        "context_after": "219: \t\t\t::DispatchMessage(&msg);\n220: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 227,
        "text": "Destructors here",
        "context_before": "225: \tExImage::Source::ImagingFactory::Instance().Free();\n226: ",
        "context_after": "228: \t} // End\n229: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 230,
        "text": "//Gdiplus::GdiplusShutdown(gdiplusToken);",
        "context_before": "228: \t} // End\n229: ",
        "context_after": "231: \n232: \tdelete futureWin;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 234,
        "text": "::CoUninitialize();",
        "context_before": "232: \tdelete futureWin;\n233: ",
        "context_after": "235: \t//::OleUninitialize();\n236: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 235,
        "text": "::OleUninitialize();",
        "context_before": "233: \n234: \t//::CoUninitialize();",
        "context_after": "236: \n237: \t//if (mutexHandle) ::CloseHandle(mutexHandle);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 237,
        "text": "if (mutexHandle) ::CloseHandle(mutexHandle);",
        "context_before": "235: \t//::OleUninitialize();\n236: ",
        "context_after": "238: \n239: \treturn;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.h",
        "line": 35,
        "text": "ULONG_PTR gdiplusToken = NULL;",
        "context_before": "33: \n34: \tbool isOleInitialize = false;",
        "context_after": "36: };\n37: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 143,
        "text": "Load settings",
        "context_before": "141: bool WinylWnd::NewWindow()\n142: {",
        "context_after": "144: \tsettings.SetProfilePath(profilePath);\n145: \tsettings.SetPortableVersion(isPortableVersion);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 148,
        "text": "Load language",
        "context_before": "146: \tsettings.LoadSettings();\n147: ",
        "context_after": "149: \tlang.SetProgramPath(programPath);\n150: \tif (settings.IsFirstRun())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 197,
        "text": "LARGE_INTEGER freq; QueryPerformanceFrequency(&freq);",
        "context_before": "195: \tLoadLibraryFolders();\n196: ",
        "context_after": "198: //\tLARGE_INTEGER counter1; QueryPerformanceCounter(&counter1);\n199: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 198,
        "text": "LARGE_INTEGER counter1; QueryPerformanceCounter(&counter1);",
        "context_before": "196: \n197: //\tLARGE_INTEGER freq; QueryPerformanceFrequency(&freq);",
        "context_after": "199: \n200: \tstd::unique_ptr<ZipFile> zipFile;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 207,
        "text": "Load skin fonts if needed",
        "context_before": "205: \t\tsettings.SetSkinPack(false);\n206: ",
        "context_after": "208: \tfontsLoader.LoadSkinFonts(programPath, settings.GetSkin(), zipFile.get(), true);\n209: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 210,
        "text": "Load skin",
        "context_before": "208: \tfontsLoader.LoadSkinFonts(programPath, settings.GetSkin(), zipFile.get(), true);\n209: ",
        "context_after": "211: \tif (!skinDraw.LoadSkin(programPath, settings.GetSkin(), zipFile.get()))\n212: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 225,
        "text": "LARGE_INTEGER counter2; QueryPerformanceCounter(&counter2);",
        "context_before": "223: \tskinDraw.LoadSkinSettings(profilePath, settings.GetSkin());\n224: ",
        "context_after": "226: //\tdouble perfDiffMs = (counter2.QuadPart - counter1.QuadPart) *1000.0 / freq.QuadPart;\n227: //\tint i = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 226,
        "text": "double perfDiffMs = (counter2.QuadPart - counter1.QuadPart) *1000.0 / freq.QuadPart;",
        "context_before": "224: \n225: //\tLARGE_INTEGER counter2; QueryPerformanceCounter(&counter2);",
        "context_after": "227: //\tint i = 0;\n228: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 227,
        "text": "int i = 0;",
        "context_before": "225: //\tLARGE_INTEGER counter2; QueryPerformanceCounter(&counter2);\n226: //\tdouble perfDiffMs = (counter2.QuadPart - counter1.QuadPart) *1000.0 / freq.QuadPart;",
        "context_after": "228: \n229: \t// Adjust the main window position and size by the monitor"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 229,
        "text": "Adjust the main window position and size by the monitor",
        "context_before": "227: //\tint i = 0;\n228: ",
        "context_after": "230: \tsettings.FixWinPosMain(skinDraw.GetMinSize(), skinDraw.GetMaxSize());\n231: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 232,
        "text": "Adjust the main window position and size by Alpha Window if present",
        "context_before": "230: \tsettings.FixWinPosMain(skinDraw.GetMinSize(), skinDraw.GetMaxSize());\n231: ",
        "context_after": "233: \tsettings.FixWinPosAlphaGet(skinDraw.IsLayeredAlpha(), skinDraw.GetAlphaBorder());\n234: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 243,
        "text": "Use LoadImage for 32, 48, 64 etc. icons. LoadIconMetric load",
        "context_before": "241: \t\t\tint cyIconLarge = ::GetSystemMetrics(SM_CYICON);\n242: ",
        "context_after": "244: \t\t\t// the wrong icon from the external file in these cases for some reason.\n245: \t\t\t// In other cases like 125% DPI (40px) LoadIconMetric must be used."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 244,
        "text": "the wrong icon from the external file in these cases for some reason.",
        "context_before": "242: \n243: \t\t\t// Use LoadImage for 32, 48, 64 etc. icons. LoadIconMetric load",
        "context_after": "245: \t\t\t// In other cases like 125% DPI (40px) LoadIconMetric must be used.\n246: \t\t\t// It only affects the large icon."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 245,
        "text": "In other cases like 125% DPI (40px) LoadIconMetric must be used.",
        "context_before": "243: \t\t\t// Use LoadImage for 32, 48, 64 etc. icons. LoadIconMetric load\n244: \t\t\t// the wrong icon from the external file in these cases for some reason.",
        "context_after": "246: \t\t\t// It only affects the large icon.\n247: \t\t\tif (cxIconLarge % 16 == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 246,
        "text": "It only affects the large icon.",
        "context_before": "244: \t\t\t// the wrong icon from the external file in these cases for some reason.\n245: \t\t\t// In other cases like 125% DPI (40px) LoadIconMetric must be used.",
        "context_after": "247: \t\t\tif (cxIconLarge % 16 == 0)\n248: \t\t\t\ticonLarge = (HICON)::LoadImageW(NULL, iconFile.c_str(), IMAGE_ICON, cxIconLarge, cyIconLarge, LR_LOADFROMFILE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 288,
        "text": "Set ResizeBorder",
        "context_before": "286: \tskinDraw.EnableFade(settings.IsEffect());\n287: ",
        "context_after": "289: \tmoveResize.SetResizeBorder(skinDraw.GetResizeBorder());\n290: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 321,
        "text": "Adjust the mini player position and size by the monitor",
        "context_before": "319: \t\tif (skinMini->LoadSkin(programPath, settings.GetSkin(), zipFile.get()))\n320: \t\t{",
        "context_after": "322: \t\t\tsettings.FixWinPosMini(skinMini->skinDraw.GetMinSize(),\n323: \t\t\t\tskinMini->skinDraw.GetMaxSize());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 340,
        "text": "Set skin values",
        "context_before": "338: \t\tskinDraw.SetSkinDrawMini(nullptr);\n339: ",
        "context_after": "341: \tskinDraw.DrawMute(settings.IsMute());\n342: \tif (settings.IsMute())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 354,
        "text": "Load popup window",
        "context_before": "352: \tskinDraw.DrawSearchClear(false);\n353: ",
        "context_after": "355: \tif (SkinPopup::IsSkinFile(programPath, settings.GetSkin(), zipFile.get()))\n356: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 357,
        "text": "Load skin for the popup window",
        "context_before": "355: \tif (SkinPopup::IsSkinFile(programPath, settings.GetSkin(), zipFile.get()))\n356: \t{",
        "context_after": "358: \t\tskinPopup.reset(new SkinPopup());\n359: \t\tif (skinPopup->LoadSkin(programPath, settings.GetSkin(), zipFile.get()))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 374,
        "text": "Set audio library parameters",
        "context_before": "372: \t\tsettings.GetProxyLogin(),  settings.GetProxyPass());\n373: ",
        "context_after": "375: \tlibAudio.SetProgramPath(programPath);\n376: \tlibAudio.SetProfilePath(profilePath);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 379,
        "text": "Init audio library",
        "context_before": "377: \tlibAudio.SetUserAgent(settings.GetBassUserAgent());\n378: \tif (!libAudio.Init(this, settings.GetBassDriver(), settings.GetBassDevice(),",
        "context_after": "380: \t{\n381: \t\tsettings.SetBassDriver(0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 393,
        "text": "Set database library parameters",
        "context_before": "391: \tlibAudio.SetVolume(settings.GetVolume());\n392: ",
        "context_after": "394: \tdBase.SetProgramPath(programPath);\n395: \tdBase.SetProfilePath(profilePath);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 404,
        "text": "Tray icon",
        "context_before": "402: \thotKeys.RegisterHotKeys(thisWnd);\n403: ",
        "context_after": "405: \ttrayIcon.SetHideToTray(settings.IsHideToTray());\n406: \ttrayIcon.SetMiniPlayer(settings.IsMiniPlayer());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 422,
        "text": "contextMenu.CheckLastFM(settings.IsLastFM());",
        "context_before": "420: \t\tsettings.SetLastFM(lastFM.Init());\n421: ",
        "context_after": "423: \tcontextMenu.CheckPopup(settings.IsPopup());\n424: \tcontextMenu.CheckEffect(settings.IsEffect());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 466,
        "text": "Load windows",
        "context_before": "464: \t}\n465: ",
        "context_after": "467: \n468: \tif (settings.IsSmoothScroll())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 472,
        "text": "skinDraw.RefreshWindow(); // Refresh all skin elements",
        "context_before": "470: \n471: \t// [ver 2.1] It's not needed anymore it seems (but I don't have time to test)",
        "context_after": "473: \n474: \treturn true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 483,
        "text": "Refactoring needed",
        "context_before": "481: \t\tsettings.SaveSettings();\n482: ",
        "context_after": "484: \t\tEnableAll(false);\n485: \t\tDlgLibrary dlg;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 505,
        "text": "Show first artist",
        "context_before": "503: \t\tEnableAll(true);\n504: ",
        "context_after": "506: \t\tif (skinTree->GetRootNode())\n507: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 549,
        "text": "Show Alpha Window before showing the main window",
        "context_before": "547: \t\tskinDraw.RedrawWindow();\n548: ",
        "context_after": "550: \t\tif (skinAlpha)\n551: \t\t\t::ShowWindow(skinAlpha->Wnd(), SW_SHOW);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 584,
        "text": "Select the last played track if there is one",
        "context_before": "582: \telse\n583: \t{",
        "context_after": "585: \t\tif (settings.GetLastPlayIndex())\n586: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 599,
        "text": "Save skin settings",
        "context_before": "597: bool WinylWnd::ReloadSkin(const std::wstring& skinName, bool isSkinPack)\n598: {",
        "context_after": "600: \tskinDraw.SaveSkinSettings(profilePath, settings.GetSkin());\n601: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 602,
        "text": "Save main window position",
        "context_before": "600: \tskinDraw.SaveSkinSettings(profilePath, settings.GetSkin());\n601: ",
        "context_after": "603: \tWINDOWPLACEMENT pl;\n604: \t::GetWindowPlacement(thisWnd, &pl);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 608,
        "text": "Adjust the main window position and size by Alpha Window if present",
        "context_before": "606: \tsettings.SetWinPosition(CRect(pl.rcNormalPosition));\n607: ",
        "context_after": "609: \tsettings.FixWinPosAlphaSet(skinDraw.IsLayeredAlpha(), skinDraw.GetAlphaBorder());\n610: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 611,
        "text": "Save mini player position",
        "context_before": "609: \tsettings.FixWinPosAlphaSet(skinDraw.IsLayeredAlpha(), skinDraw.GetAlphaBorder());\n610: ",
        "context_after": "612: \tif (skinMini)\n613: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 619,
        "text": "To check that the skin is loaded correctly",
        "context_before": "617: \t}\n618: ",
        "context_after": "620: \tsettings.SetSkin(skinName);\n621: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 629,
        "text": "Destroy Alpha Window",
        "context_before": "627: \t}\n628: ",
        "context_after": "630: \tif (skinAlpha) skinAlpha.reset();\n631: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 632,
        "text": "Destroy shadow windows",
        "context_before": "630: \tif (skinAlpha) skinAlpha.reset();\n631: ",
        "context_after": "633: \tif (skinShadow) skinShadow.reset();\n634: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 635,
        "text": "Destroy all visualizer windows",
        "context_before": "633: \tif (skinShadow) skinShadow.reset();\n634: ",
        "context_after": "636: \tvisuals.clear();\n637: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 638,
        "text": "Destroy all other windows",
        "context_before": "636: \tvisuals.clear();\n637: ",
        "context_after": "639: \tskinTree.reset();\n640: \tskinList.reset();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 644,
        "text": "Destroy tooltips",
        "context_before": "642: \tskinLyrics.reset();\n643: ",
        "context_after": "645: \ttoolTips.Destroy();\n646: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 647,
        "text": "{ WINDOWPLACEMENT wp; //wp.length = sizeof(WINDOWPLACEMENT); GetWindowPlacement(&wp); wp.showCmd = SW_MINIMIZE; SetWindowPlacement(&wp); }",
        "context_before": "645: \ttoolTips.Destroy();\n646: ",
        "context_after": "656: \t// Hide the main window to do not see the skin rebuilding\n657: \t::ShowWindow(thisWnd, SW_HIDE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 656,
        "text": "Hide the main window to do not see the skin rebuilding",
        "context_before": "654: \t}*/\n655: ",
        "context_after": "657: \t::ShowWindow(thisWnd, SW_HIDE);\n658: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 668,
        "text": "Load new skin fonts if needed",
        "context_before": "666: \t\tsettings.SetSkinPack(false);\n667: ",
        "context_after": "669: \tfontsLoader.LoadSkinFonts(programPath, settings.GetSkin(), zipFile.get(), true);\n670: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 671,
        "text": "Load new skin",
        "context_before": "669: \tfontsLoader.LoadSkinFonts(programPath, settings.GetSkin(), zipFile.get(), true);\n670: ",
        "context_after": "672: \tif (!skinDraw.LoadSkin(programPath, settings.GetSkin(), zipFile.get()))\n673: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 686,
        "text": "Load new skin settings",
        "context_before": "684: \t}\n685: ",
        "context_after": "687: \tskinDraw.LoadSkinSettings(profilePath, settings.GetSkin());\n688: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 689,
        "text": "Adjust the main window position and size by the monitor",
        "context_before": "687: \tskinDraw.LoadSkinSettings(profilePath, settings.GetSkin());\n688: ",
        "context_after": "690: \tsettings.FixWinPosMain(skinDraw.GetMinSize(), skinDraw.GetMaxSize());\n691: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 692,
        "text": "Set ResizeBorder",
        "context_before": "690: \tsettings.FixWinPosMain(skinDraw.GetMinSize(), skinDraw.GetMaxSize());\n691: ",
        "context_after": "693: \tmoveResize.SetResizeBorder(skinDraw.GetResizeBorder());\n694: \tmoveResize.Resize(settings.GetWinPosition().Width(), settings.GetWinPosition().Height());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 699,
        "text": "Load Alpha Window",
        "context_before": "697: \tskinDraw.EnableFade(settings.IsEffect());\n698: ",
        "context_after": "700: \tif (skinDraw.IsLayeredAlpha())\n701: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 716,
        "text": "Load shadow windows",
        "context_before": "714: \t\tskinDraw.SetSkinDrawAlpha(nullptr);\n715: ",
        "context_after": "717: \tif (skinDraw.IsShadowLayered())\n718: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 727,
        "text": "Load mini player",
        "context_before": "725: \n726: ",
        "context_after": "728: \tskinMini.reset();\n729: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 732,
        "text": "Load skin for the mini player",
        "context_before": "730: \tif (SkinMini::IsSkinFile(programPath, settings.GetSkin(), zipFile.get()))\n731: \t{",
        "context_after": "733: \t\tskinMini.reset(new SkinMini());\n734: \t\tif (skinMini->LoadSkin(programPath, settings.GetSkin(), zipFile.get()))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 736,
        "text": "Adjust the mini player position and size by the monitor",
        "context_before": "734: \t\tif (skinMini->LoadSkin(programPath, settings.GetSkin(), zipFile.get()))\n735: \t\t{",
        "context_after": "737: \t\t\tsettings.FixWinPosMini(skinMini->skinDraw.GetMinSize(),\n738: \t\t\t\tskinMini->skinDraw.GetMaxSize());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 757,
        "text": "Set skin values",
        "context_before": "755: \tsettings.SetMaximized(false);\n756: ",
        "context_after": "758: \tskinDraw.DrawMute(settings.IsMute());\n759: \tif (settings.IsMute())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 772,
        "text": "Load popup window",
        "context_before": "770: \n771: ",
        "context_after": "773: \tskinPopup.reset();\n774: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 777,
        "text": "Load skin for the popup window",
        "context_before": "775: \tif (SkinPopup::IsSkinFile(programPath, settings.GetSkin(), zipFile.get()))\n776: \t{",
        "context_after": "778: \t\tskinPopup.reset(new SkinPopup());\n779: \t\tif (skinPopup->LoadSkin(programPath, settings.GetSkin(), zipFile.get()))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 791,
        "text": "Set tooltips",
        "context_before": "789: \t}\n790: ",
        "context_after": "792: \ttoolTips.SetWindow(thisWnd, &skinDraw);\n793: \tif (settings.IsToolTips())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 804,
        "text": "Reset Now Playing",
        "context_before": "802: \t}\n803: ",
        "context_after": "805: \tif (settings.GetNowPlayingType() > 0)\n806: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 811,
        "text": "Load windows",
        "context_before": "809: \t}\n810: ",
        "context_after": "812: \tLoadWindows(true);\n813: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 814,
        "text": "Adjust the main window position and size by Alpha Window if present",
        "context_before": "812: \tLoadWindows(true);\n813: ",
        "context_after": "815: \tsettings.FixWinPosAlphaGet(skinDraw.IsLayeredAlpha(), skinDraw.GetAlphaBorder());\n816: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 817,
        "text": "Set the main window position and size (MoveWindow calls WM_GETMINMAXINFO)",
        "context_before": "815: \tsettings.FixWinPosAlphaGet(skinDraw.IsLayeredAlpha(), skinDraw.GetAlphaBorder());\n816: ",
        "context_after": "818: \t::MoveWindow(thisWnd, settings.GetWinPosition().left, settings.GetWinPosition().top,\n819: \t\tsettings.GetWinPosition().Width(), settings.GetWinPosition().Height(), TRUE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 830,
        "text": "Refresh and redraw all skin elements",
        "context_before": "828: \t\tcontextMenu.EnableMiniPlayer(false);\n829: ",
        "context_after": "831: \tskinDraw.RefreshWindow();\n832: \tskinDraw.RedrawWindow();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 834,
        "text": "SW_RESTORE instead of SW_SHOW to restore the main window if the mini player was enabled",
        "context_before": "832: \tskinDraw.RedrawWindow();\n833: ",
        "context_after": "835: \t::ShowWindow(thisWnd, SW_RESTORE);\n836: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 837,
        "text": "Show Alpha Window after showing the main window",
        "context_before": "835: \t::ShowWindow(thisWnd, SW_RESTORE);\n836: ",
        "context_after": "838: \tif (skinAlpha)\n839: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 845,
        "text": "Show shadow windows",
        "context_before": "843: \t}\n844: ",
        "context_after": "846: \tif (skinShadow)\n847: \t\tskinShadow->Show(true);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1003,
        "text": "if (settings.IsLibraryPlaylists())",
        "context_before": "1001: \tif (settings.IsLibrarySmartlists())\n1002: \t\tskinTree->InsertHead(nullptr, lang.GetLineS(Lang::Library, 4), SkinTreeNode::Type::Smartlist, false, false);",
        "context_after": "1004: \t\tskinTree->InsertHead(nullptr, lang.GetLineS(Lang::Library, 3), SkinTreeNode::Type::Playlist, false, true);\n1005: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1034,
        "text": "Also when resized",
        "context_before": "1032: \t\tskinDraw.Minimized();\n1033: \t}",
        "context_after": "1035: \t{\n1036: \t\t//MessageBeep(1);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1057,
        "text": "Tracking tooltip",
        "context_before": "1055: \t\t\tAction(element, MouseAction::Move);\n1056: ",
        "context_after": "1058: \t\tif (element && element->type == SkinElement::Type::Volume)\n1059: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1077,
        "text": "https://msdn.microsoft.com/en-us/library/windows/desktop/hh298405%28v=vs.85%29.aspx",
        "context_before": "1075: \t\t\t\tif (isTrackTooltip)\n1076: \t\t\t\t{",
        "context_after": "1078: \t\t\t\t\t// Make sure the mouse has actually moved. The presence of the tooltip\n1079: \t\t\t\t\t// causes Windows to send the message continuously."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1078,
        "text": "Make sure the mouse has actually moved. The presence of the tooltip",
        "context_before": "1076: \t\t\t\t{\n1077: \t\t\t\t\t// https://msdn.microsoft.com/en-us/library/windows/desktop/hh298405%28v=vs.85%29.aspx",
        "context_after": "1079: \t\t\t\t\t// causes Windows to send the message continuously.\n1080: \t\t\t\t\tstatic POINT oldPoint = {};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1145,
        "text": "Move window",
        "context_before": "1143: \t\t}\n1144: \t}",
        "context_after": "1146: \t{\n1147: \t\tskinDraw.EmptyClick();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1194,
        "text": "::SetCursor(::LoadCursorW(NULL, IDC_ARROW));",
        "context_before": "1192: //\tif (message == 0) // When open a menu set default cursor\n1193: //\t{",
        "context_after": "1195: //\t\treturn true;\n1196: //\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1195,
        "text": "return true;",
        "context_before": "1193: //\t{\n1194: //\t\t::SetCursor(::LoadCursorW(NULL, IDC_ARROW));",
        "context_after": "1196: //\t}\n1197: \tif (message == 0) // When open a menu set default cursor"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1197,
        "text": "When open a menu set default cursor",
        "context_before": "1195: //\t\treturn true;\n1196: //\t}",
        "context_after": "1198: \t\treturn false;\n1199: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1221,
        "text": "if (pWnd == this && skinDraw.GetHoverElement() &&",
        "context_before": "1219: \t}\n1220: ",
        "context_after": "1222: //\t\t(skinDraw.GetHoverElement()->iType == SkinElement::TYPE_VOLUME ||\n1223: //\t\tskinDraw.GetHoverElement()->iType == SkinElement::TYPE_TRACK))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1222,
        "text": "(skinDraw.GetHoverElement()->iType == SkinElement::TYPE_VOLUME ||",
        "context_before": "1220: \n1221: //\tif (pWnd == this && skinDraw.GetHoverElement() &&",
        "context_after": "1223: //\t\tskinDraw.GetHoverElement()->iType == SkinElement::TYPE_TRACK))\n1224: //\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1223,
        "text": "skinDraw.GetHoverElement()->iType == SkinElement::TYPE_TRACK))",
        "context_before": "1221: //\tif (pWnd == this && skinDraw.GetHoverElement() &&\n1222: //\t\t(skinDraw.GetHoverElement()->iType == SkinElement::TYPE_VOLUME ||",
        "context_after": "1224: //\t{\n1225: //\t\t::SetCursor(::LoadCursorW(NULL, IDC_HAND));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1225,
        "text": "::SetCursor(::LoadCursorW(NULL, IDC_HAND));",
        "context_before": "1223: //\t\tskinDraw.GetHoverElement()->iType == SkinElement::TYPE_TRACK))\n1224: //\t{",
        "context_after": "1226: //\t\treturn true;\n1227: //\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1226,
        "text": "return true;",
        "context_before": "1224: //\t{\n1225: //\t\t::SetCursor(::LoadCursorW(NULL, IDC_HAND));",
        "context_after": "1227: //\t}\n1228: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1229,
        "text": "hWnd == thisWnd is needed because sometimes a wrong cursor is set",
        "context_before": "1227: //\t}\n1228: ",
        "context_after": "1230: \t// if mouse is not over the main window and over playlist/library for example\n1231: \tif (hWnd == thisWnd && moveResize.SetCursor() && !skinDraw.IsHoverElement())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1230,
        "text": "if mouse is not over the main window and over playlist/library for example",
        "context_before": "1228: \n1229: \t// hWnd == thisWnd is needed because sometimes a wrong cursor is set",
        "context_after": "1231: \tif (hWnd == thisWnd && moveResize.SetCursor() && !skinDraw.IsHoverElement())\n1232: \t\treturn true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1248,
        "text": "if (settings.IsMSN())",
        "context_before": "1246: \tif (settings.IsLastFM())\n1247: \t\tlastFM.Stop();",
        "context_after": "1249: \t//\tMessengers::MSNStop();\n1250: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1275,
        "text": "Use GetWindowPlacement instead of GetWindowRect or if minimized coords will be negative",
        "context_before": "1273: \tsettings.SetProfilePath(profilePath);\n1274: ",
        "context_after": "1276: \tWINDOWPLACEMENT pl;\n1277: \tGetWindowPlacement(thisWnd, &pl);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1280,
        "text": "Adjust the main window position and size by Alpha Window if present",
        "context_before": "1278: \tsettings.SetWinPosition(CRect(pl.rcNormalPosition));\n1279: ",
        "context_after": "1281: \tsettings.FixWinPosAlphaSet(skinDraw.IsLayeredAlpha(), skinDraw.GetAlphaBorder());\n1282: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1290,
        "text": "WINDOWPLACEMENT pl;",
        "context_before": "1288: \tif (skinMini)\n1289: \t{",
        "context_after": "1291: \t\t//::GetWindowPlacement(skinMini->Wnd(), &pl);\n1292: \t\t//settings.SetWinPositionMini(CRect(pl.rcNormalPosition));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1291,
        "text": "::GetWindowPlacement(skinMini->Wnd(), &pl);",
        "context_before": "1289: \t{\n1290: \t\t//WINDOWPLACEMENT pl;",
        "context_after": "1292: \t\t//settings.SetWinPositionMini(CRect(pl.rcNormalPosition));\n1293: \t\tsettings.SetWinPositionMini(skinMini->rcValidRect);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1292,
        "text": "settings.SetWinPositionMini(CRect(pl.rcNormalPosition));",
        "context_before": "1290: \t\t//WINDOWPLACEMENT pl;\n1291: \t\t//::GetWindowPlacement(skinMini->Wnd(), &pl);",
        "context_after": "1293: \t\tsettings.SetWinPositionMini(skinMini->rcValidRect);\n1294: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1298,
        "text": "settings.SetVolume(libAudio.GetVolume());",
        "context_before": "1296: \tsettings.SetLanguage(lang.GetLanguage());\n1297: ",
        "context_after": "1299: \t//settings.SetMute(libAudio.GetMute());\n1300: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1299,
        "text": "settings.SetMute(libAudio.GetMute());",
        "context_before": "1297: \n1298: \t//settings.SetVolume(libAudio.GetVolume());",
        "context_after": "1300: \n1301: \tskinDraw.SaveSkinSettings(profilePath, settings.GetSkin());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1468,
        "text": "Stop the playback",
        "context_before": "1466: \n1467: void WinylWnd::ActionStop()",
        "context_after": "1469: \tif (isMediaPlay == false)\n1470: \t\treturn;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1505,
        "text": "if (settings.IsMSN())",
        "context_before": "1503: \tif (settings.IsLastFM())\n1504: \t\tlastFM.Stop();",
        "context_after": "1506: \t//\tMessengers::MSNStop();\n1507: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1510,
        "text": "\"Smart\" Play",
        "context_before": "1508: \n1509: void WinylWnd::ActionPlayEx()",
        "context_after": "1511: \t// Same as Play but if paused then resume instead of play from the start\n1512: \tif (isMediaPlay && isMediaPause)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1511,
        "text": "Same as Play but if paused then resume instead of play from the start",
        "context_before": "1509: void WinylWnd::ActionPlayEx()\n1510: { // \"Smart\" Play",
        "context_after": "1512: \tif (isMediaPlay && isMediaPause)\n1513: \t\tActionPause();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1519,
        "text": "\"Smart\" Pause",
        "context_before": "1517: \n1518: void WinylWnd::ActionPauseEx()",
        "context_after": "1520: \t// Same as Pause but if stopped then start the playback instead of does nothing\n1521: \tif (isMediaPlay)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1520,
        "text": "Same as Pause but if stopped then start the playback instead of does nothing",
        "context_before": "1518: void WinylWnd::ActionPauseEx()\n1519: { // \"Smart\" Pause",
        "context_after": "1521: \tif (isMediaPlay)\n1522: \t\tActionPause();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1528,
        "text": "Play a track",
        "context_before": "1526: \n1527: void WinylWnd::ActionPlay(bool isPlayFocused, bool isReplay, bool isRepeat)",
        "context_after": "1529: \tskinDraw.DrawPosition(0);\n1530: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1534,
        "text": "Play the same track",
        "context_before": "1532: \n1533: \tif (isReplay)",
        "context_after": "1535: \n1536: \tif (node == nullptr)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1538,
        "text": "|| !skinList->IsNowPlayingList())",
        "context_before": "1536: \tif (node == nullptr)\n1537: \t{",
        "context_after": "1539: \t\t\tnode = skinList->GetFocusNode(); // Or the selected track\n1540: \t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1539,
        "text": "Or the selected track",
        "context_before": "1537: \t{\n1538: \t\tif (isPlayFocused)// || !skinList->IsNowPlayingList())",
        "context_after": "1540: \t\telse\n1541: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1542,
        "text": "Or the last played",
        "context_before": "1540: \t\telse\n1541: \t\t{",
        "context_after": "1543: \t\t\tif (node == nullptr)\n1544: \t\t\t\tnode = skinList->GetFocusNode(); // Or the selected track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1544,
        "text": "Or the selected track",
        "context_before": "1542: \t\t\tnode = skinList->GetLastPlayNode(); // Or the last played\n1543: \t\t\tif (node == nullptr)",
        "context_after": "1545: \t\t}\n1546: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1549,
        "text": "Or the first track",
        "context_before": "1547: \n1548: \tif (node == nullptr)",
        "context_after": "1550: \n1551: \tif (node)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1553,
        "text": "skinList->SetPlayNode(pNode);",
        "context_before": "1551: \tif (node)\n1552: \t{",
        "context_after": "1554: \t\tif (!skinList->IsNowPlaying() ||\n1555: \t\t\t(isPlayFocused && !isReplay && !skinList->IsNowPlayingOpen()))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1569,
        "text": "Pause/Resume the playback",
        "context_before": "1567: \n1568: void WinylWnd::ActionPause()",
        "context_after": "1570: \tif (isMediaPlay)\n1571: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1598,
        "text": "Resume",
        "context_before": "1596: \t\t\t\tlastFM.Pause();\n1597: \t\t}",
        "context_after": "1599: \t\t{\n1600: \t\t\tisMediaPause = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1622,
        "text": "Set the position of the playing track",
        "context_before": "1620: \n1621: void WinylWnd::ActionPosition(int position)",
        "context_after": "1623: \tif (isMediaPlay && !isMediaRadio)\n1624: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1630,
        "text": "If nothing is playing then reset the position",
        "context_before": "1628: \t\t\tActionPause();\n1629: \t}",
        "context_after": "1631: \t\tskinDraw.DrawPosition(0);\n1632: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1635,
        "text": "Mute the sound",
        "context_before": "1633: \n1634: void WinylWnd::ActionMute(bool isMute)",
        "context_after": "1636: \tsettings.SetMute(isMute);\n1637: \tlibAudio.SetMute(isMute);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1647,
        "text": "Set the volume",
        "context_before": "1645: \n1646: void WinylWnd::ActionVolume(int volume, bool isSkinDraw)",
        "context_after": "1648: \tsettings.SetVolume(volume);\n1649: \tlibAudio.SetVolume(volume);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1664,
        "text": "Set the rating of the playing track",
        "context_before": "1662: \n1663: void WinylWnd::ActionSetRating(int rating, bool isSkinDraw)",
        "context_after": "1665: \tskinList->SetPlayRating(rating);\n1666: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1674,
        "text": "Volume up 5%",
        "context_before": "1672: \n1673: void WinylWnd::ActionVolumeUp()",
        "context_after": "1675: \tint volume = settings.GetVolume(); //libAudio.GetVolume();\n1676: \tvolume += 5000;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1675,
        "text": "libAudio.GetVolume();",
        "context_before": "1673: void WinylWnd::ActionVolumeUp()\n1674: { // Volume up 5%",
        "context_after": "1676: \tvolume += 5000;\n1677: \tvolume = std::min(volume, 100000);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1683,
        "text": "Volume down 5%",
        "context_before": "1681: \n1682: void WinylWnd::ActionVolumeDown()",
        "context_after": "1684: \tint volume = settings.GetVolume(); //libAudio.GetVolume();\n1685: \tvolume -= 5000;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1684,
        "text": "libAudio.GetVolume();",
        "context_before": "1682: void WinylWnd::ActionVolumeDown()\n1683: { // Volume down 5%",
        "context_after": "1685: \tvolume -= 5000;\n1686: \tvolume = std::max(volume, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1692,
        "text": "Next track",
        "context_before": "1690: \n1691: void WinylWnd::ActionNextTrack()",
        "context_after": "1693: \n1694: \tListNodeUnsafe newNode = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1697,
        "text": "Shuffle is on",
        "context_before": "1695: \tListNodeUnsafe playNode = skinList->GetPlayNode();\n1696: ",
        "context_after": "1698: \t{\n1699: \t\t// Increase skip count of the previous track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1699,
        "text": "Increase skip count of the previous track",
        "context_before": "1697: \tif (settings.IsShuffle()) // Shuffle is on\n1698: \t{",
        "context_after": "1700: \t\tif (!isMediaRadio) // If it wasn't a radio\n1701: \t\t\tdBase.IncreaseSkip(idMediaLibrary, idMediaPlaylist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1700,
        "text": "If it wasn't a radio",
        "context_before": "1698: \t{\n1699: \t\t// Increase skip count of the previous track",
        "context_after": "1701: \t\t\tdBase.IncreaseSkip(idMediaLibrary, idMediaPlaylist);\n1702: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1703,
        "text": "Search for a random track that wasn't played before",
        "context_before": "1701: \t\t\tdBase.IncreaseSkip(idMediaLibrary, idMediaPlaylist);\n1702: ",
        "context_after": "1704: \t\tnewNode = skinList->FindNextTrackShuffle();\n1705: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1708,
        "text": "skinList->SetPlayNode(newNode);",
        "context_before": "1706: \t\tif (newNode) // Play\n1707: \t\t{",
        "context_after": "1709: \t\t\tskinList->ScrollToMyNode(newNode);\n1710: \t\t\tPlayNode(newNode);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1714,
        "text": "Repeat is on",
        "context_before": "1712: \t\telse // Found nothing means all tracks are played\n1713: \t\t{",
        "context_after": "1715: \t\t\t{\n1716: \t\t\t\t// Create a new shuffle list and search for a random track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1716,
        "text": "Create a new shuffle list and search for a random track",
        "context_before": "1714: \t\t\tif (settings.IsRepeat()) // Repeat is on\n1715: \t\t\t{",
        "context_after": "1717: \t\t\t\tskinList->RemoveShuffle();\n1718: \t\t\t\tnewNode = skinList->FindNextTrackShuffle();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1722,
        "text": "skinList->SetPlayNode(newNode);",
        "context_before": "1720: \t\t\t\tif (newNode) // Play\n1721: \t\t\t\t{",
        "context_after": "1723: \t\t\t\t\tskinList->ScrollToMyNode(newNode);\n1724: \t\t\t\t\tPlayNode(newNode);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1727,
        "text": "Stop the playback",
        "context_before": "1725: \t\t\t\t}\n1726: \t\t\t}",
        "context_after": "1728: \t\t\t\tActionStop(); // Also destroys the current shuffle list\n1729: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1728,
        "text": "Also destroys the current shuffle list",
        "context_before": "1726: \t\t\t}\n1727: \t\t\telse // Stop the playback",
        "context_after": "1729: \t\t}\n1730: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1734,
        "text": "Shuffle is off",
        "context_before": "1732: \t}\n1733: ",
        "context_after": "1735: \n1736: \tif (playNode) // Something is playing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1736,
        "text": "Something is playing",
        "context_before": "1734: \t// Shuffle is off\n1735: ",
        "context_after": "1737: \t{\n1738: \t\t// Increase skip count of the previous track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1738,
        "text": "Increase skip count of the previous track",
        "context_before": "1736: \tif (playNode) // Something is playing\n1737: \t{",
        "context_after": "1739: \t\tif (!isMediaRadio) // If it wasn't a radio\n1740: \t\t\tdBase.IncreaseSkip(idMediaLibrary, idMediaPlaylist);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1739,
        "text": "If it wasn't a radio",
        "context_before": "1737: \t{\n1738: \t\t// Increase skip count of the previous track",
        "context_after": "1740: \t\t\tdBase.IncreaseSkip(idMediaLibrary, idMediaPlaylist);\n1741: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1742,
        "text": "Search for the next track",
        "context_before": "1740: \t\t\tdBase.IncreaseSkip(idMediaLibrary, idMediaPlaylist);\n1741: ",
        "context_after": "1743: \t\tListNodeUnsafe nextNode = skinList->FindNextTrack(playNode);\n1744: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1747,
        "text": "Repeat is on",
        "context_before": "1745: \t\tif (nextNode == nullptr) // Found nothing means that it was the last track\n1746: \t\t{",
        "context_after": "1748: \t\t\t\tnewNode = skinList->FindPrevTrack(nullptr); // Go to the first track\n1749: \t\t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1748,
        "text": "Go to the first track",
        "context_before": "1746: \t\t{\n1747: \t\t\tif (settings.IsRepeat()) // Repeat is on",
        "context_after": "1749: \t\t\telse\n1750: \t\t\t\tnewNode = nullptr; // Stop the playback"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1750,
        "text": "Stop the playback",
        "context_before": "1748: \t\t\t\tnewNode = skinList->FindPrevTrack(nullptr); // Go to the first track\n1749: \t\t\telse",
        "context_after": "1751: \t\t}\n1752: \t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1757,
        "text": "skinList->SetPlayNode(newNode);",
        "context_before": "1755: \t\tif (newNode) // Play\n1756: \t\t{",
        "context_after": "1758: \t\t\tskinList->ScrollToMyNode(newNode);\n1759: \t\t\tPlayNode(newNode);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1761,
        "text": "Stop the playback",
        "context_before": "1759: \t\t\tPlayNode(newNode);\n1760: \t\t}",
        "context_after": "1762: \t\t\tActionStop();\n1763: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1764,
        "text": "Nothing is playing",
        "context_before": "1762: \t\t\tActionStop();\n1763: \t}",
        "context_after": "1765: \t{\n1766: \t\t// Get last played track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1766,
        "text": "Get last played track",
        "context_before": "1764: \telse // Nothing is playing\n1765: \t{",
        "context_after": "1767: \t\tListNodeUnsafe lastPlayNode = skinList->GetLastPlayNode();\n1768: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1771,
        "text": "Search for the next track that after the last played track",
        "context_before": "1769: \t\tif (lastPlayNode)\n1770: \t\t{",
        "context_after": "1772: \t\t\tListNodeUnsafe nextNode = skinList->FindNextTrack(lastPlayNode);\n1773: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1776,
        "text": "Repeat is on",
        "context_before": "1774: \t\t\tif (nextNode == nullptr) // Found nothing means that it was the last track\n1775: \t\t\t{",
        "context_after": "1777: \t\t\t\t\tnewNode = skinList->FindPrevTrack(nullptr); // Go to the first track\n1778: \t\t\t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1777,
        "text": "Go to the first track",
        "context_before": "1775: \t\t\t{\n1776: \t\t\t\tif (settings.IsRepeat()) // Repeat is on",
        "context_after": "1778: \t\t\t\telse\n1779: \t\t\t\t\tnewNode = nullptr; // Do nothing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1779,
        "text": "Do nothing",
        "context_before": "1777: \t\t\t\t\tnewNode = skinList->FindPrevTrack(nullptr); // Go to the first track\n1778: \t\t\t\telse",
        "context_after": "1780: \t\t\t}\n1781: \t\t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1784,
        "text": "If there is not last played track just play the first track",
        "context_before": "1782: \t\t\t\tnewNode = nextNode;\n1783: \t\t}",
        "context_after": "1785: \t\t\tnewNode = skinList->FindPrevTrack(nullptr);\n1786: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1789,
        "text": "skinList->SetPlayNode(newNode);",
        "context_before": "1787: \t\tif (newNode) // Play\n1788: \t\t{",
        "context_after": "1790: \t\t\tskinList->ScrollToMyNode(newNode);\n1791: \t\t\tPlayNode(newNode);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1797,
        "text": "Previous track",
        "context_before": "1795: \n1796: void WinylWnd::ActionPrevTrack()",
        "context_after": "1798: \n1799: \tListNodeUnsafe newNode = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1802,
        "text": "Shuffle is on",
        "context_before": "1800: \tListNodeUnsafe playNode = skinList->GetPlayNode();\n1801: ",
        "context_after": "1803: \t{\n1804: \t\t// Get the previous track from the shuffle list"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1804,
        "text": "Get the previous track from the shuffle list",
        "context_before": "1802: \tif (settings.IsShuffle()) // Shuffle is on\n1803: \t{",
        "context_after": "1805: \t\tnewNode = skinList->FindPrevTrackShuffle();\n1806: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1809,
        "text": "skinList->SetPlayNode(newNode);",
        "context_before": "1807: \t\tif (newNode) // Play\n1808: \t\t{",
        "context_after": "1810: \t\t\tskinList->ScrollToMyNode(newNode);\n1811: \t\t\tPlayNode(newNode);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1813,
        "text": "Stop the playback",
        "context_before": "1811: \t\t\tPlayNode(newNode);\n1812: \t\t}",
        "context_after": "1814: \t\t\tActionStop(); // Also destroys the current shuffle list\n1815: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1814,
        "text": "Also destroys the current shuffle list",
        "context_before": "1812: \t\t}\n1813: \t\telse // Stop the playback",
        "context_after": "1815: \n1816: \t\treturn;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1819,
        "text": "Shuffle is off",
        "context_before": "1817: \t}\n1818: ",
        "context_after": "1820: \n1821: \tif (playNode) // Something is playing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1821,
        "text": "Something is playing",
        "context_before": "1819: \t// Shuffle is off\n1820: ",
        "context_after": "1822: \t{\n1823: \t\t// Search for the previous track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1823,
        "text": "Search for the previous track",
        "context_before": "1821: \tif (playNode) // Something is playing\n1822: \t{",
        "context_after": "1824: \t\tListNodeUnsafe prevNode = skinList->FindPrevTrack(playNode);\n1825: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1828,
        "text": "Repeat is on",
        "context_before": "1826: \t\tif (prevNode == nullptr) // Found nothing means that it was the first track\n1827: \t\t{",
        "context_after": "1829: \t\t\t\tnewNode = skinList->FindNextTrack(nullptr); // Go to the last track\n1830: \t\t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1829,
        "text": "Go to the last track",
        "context_before": "1827: \t\t{\n1828: \t\t\tif (settings.IsRepeat()) // Repeat is on",
        "context_after": "1830: \t\t\telse\n1831: \t\t\t\tnewNode = nullptr; // Stop the playback"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1831,
        "text": "Stop the playback",
        "context_before": "1829: \t\t\t\tnewNode = skinList->FindNextTrack(nullptr); // Go to the last track\n1830: \t\t\telse",
        "context_after": "1832: \t\t}\n1833: \t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1838,
        "text": "skinList->SetPlayNode(newNode);",
        "context_before": "1836: \t\tif (newNode) // Play\n1837: \t\t{",
        "context_after": "1839: \t\t\tskinList->ScrollToMyNode(newNode);\n1840: \t\t\tPlayNode(newNode);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1842,
        "text": "Stop the playback",
        "context_before": "1840: \t\t\tPlayNode(newNode);\n1841: \t\t}",
        "context_after": "1843: \t\t\tActionStop();\n1844: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1845,
        "text": "Nothing is playing",
        "context_before": "1843: \t\t\tActionStop();\n1844: \t}",
        "context_after": "1846: \t{\n1847: \t\t// Get last played track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1847,
        "text": "Get last played track",
        "context_before": "1845: \telse // Nothing is playing\n1846: \t{",
        "context_after": "1848: \t\tListNodeUnsafe lastPlayNode = skinList->GetLastPlayNode();\n1849: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1852,
        "text": "Search for the previous track that before the last played track",
        "context_before": "1850: \t\tif (lastPlayNode)\n1851: \t\t{",
        "context_after": "1853: \t\t\tListNodeUnsafe prevNode = skinList->FindPrevTrack(lastPlayNode);\n1854: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1857,
        "text": "Repeat is on",
        "context_before": "1855: \t\t\tif (prevNode == nullptr) // Found nothing means that it was the first track\n1856: \t\t\t{",
        "context_after": "1858: \t\t\t\t\tnewNode = skinList->FindNextTrack(nullptr); // Go to the last track\n1859: \t\t\t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1858,
        "text": "Go to the last track",
        "context_before": "1856: \t\t\t{\n1857: \t\t\t\tif (settings.IsRepeat()) // Repeat is on",
        "context_after": "1859: \t\t\t\telse\n1860: \t\t\t\t\tnewNode = nullptr; // Do nothing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1860,
        "text": "Do nothing",
        "context_before": "1858: \t\t\t\t\tnewNode = skinList->FindNextTrack(nullptr); // Go to the last track\n1859: \t\t\t\telse",
        "context_after": "1861: \t\t\t}\n1862: \t\t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1865,
        "text": "If there is not last played track just play the first track",
        "context_before": "1863: \t\t\t\tnewNode = prevNode;\n1864: \t\t}",
        "context_after": "1866: \t\t\tnewNode = skinList->FindPrevTrack(nullptr);\n1867: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1870,
        "text": "skinList->SetPlayNode(newNode);",
        "context_before": "1868: \t\tif (newNode) // Play\n1869: \t\t{",
        "context_after": "1871: \t\t\tskinList->ScrollToMyNode(newNode);\n1872: \t\t\tPlayNode(newNode);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1878,
        "text": "Toggle shuffle",
        "context_before": "1876: \n1877: void WinylWnd::ActionShuffle(bool isShuffle)",
        "context_after": "1879: \tsettings.SetShuffle(isShuffle);\n1880: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1894,
        "text": "Toggle repeat",
        "context_before": "1892: \n1893: void WinylWnd::ActionRepeat(bool isRepeat)",
        "context_after": "1895: \tsettings.SetRepeat(isRepeat);\n1896: \tskinDraw.DrawRepeat(isRepeat);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1907,
        "text": "This function can invalidate nodes so make the node safe just in case",
        "context_before": "1905: \t\treturn false;\n1906: ",
        "context_after": "1908: \tListNodeSafe safeNode(node);\n1909: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1928,
        "text": "File error",
        "context_before": "1926: \t\tActionStop();\n1927: \t\tEnableAll(false);",
        "context_after": "1929: \t\t\tMessageBox::Show(thisWnd, lang.GetLine(Lang::Message, 0), lang.GetLine(Lang::Message, 3), MessageBox::Icon::Warning);\n1930: \t\telse //if (error == LibAudio::Error::Device) // Device error"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1930,
        "text": "if (error == LibAudio::Error::Device) // Device error",
        "context_before": "1928: \t\tif (error == LibAudio::Error::File) // File error\n1929: \t\t\tMessageBox::Show(thisWnd, lang.GetLine(Lang::Message, 0), lang.GetLine(Lang::Message, 3), MessageBox::Icon::Warning);",
        "context_after": "1931: \t\t\tMessageBox::Show(thisWnd, lang.GetLine(Lang::Message, 0), lang.GetLine(Lang::Message, 8), MessageBox::Icon::Warning);\n1932: \t\tEnableAll(true);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1933,
        "text": "skinList->SetPlayNode(nullptr);",
        "context_before": "1931: \t\t\tMessageBox::Show(thisWnd, lang.GetLine(Lang::Message, 0), lang.GetLine(Lang::Message, 8), MessageBox::Icon::Warning);\n1932: \t\tEnableAll(true);",
        "context_after": "1934: \t\treturn false;\n1935: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1992,
        "text": "skinDraw.DrawCover(pNode->csFile, csAlbum);",
        "context_before": "1990: \t\tLyricsThread(node->GetFile(), title, artist);\n1991: ",
        "context_after": "1993: \t\tbool coverThread = CoverThread(node->GetFile());\n1994: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2004,
        "text": "if (settings.IsMSN())",
        "context_before": "2002: \t\tif (settings.IsLastFM())\n2003: \t\t\tlastFM.Start(artist, title.empty() ? filename : title, album, libAudio.GetTimeLength());",
        "context_after": "2005: \t\t//\tMessengers::MSNPlay(artist, title.empty() ? filename : title);\n2006: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2036,
        "text": "if (settings.IsMSN())",
        "context_before": "2034: \t\tif (settings.IsLastFM())\n2035: \t\t\tlastFM.Stop();",
        "context_after": "2037: \t\t//\tMessengers::MSNStop();\n2038: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2052,
        "text": "::SetTimer(thisWnd, TIMER_POS_ID, TIMER_POS, NULL);",
        "context_before": "2050: \t\tisMediaPause = false;\n2051: ",
        "context_after": "2053: \t\tif (!visuals.empty())\n2054: \t\t\t::SetTimer(thisWnd, TimerValue::VisID, TimerValue::Vis, NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2075,
        "text": "File error",
        "context_before": "2073: \t\t{\n2074: \t\t\tEnableAll(false);",
        "context_after": "2076: \t\t\t\tMessageBox::Show(thisWnd, lang.GetLine(Lang::Message, 0), lang.GetLine(Lang::Message, 3), MessageBox::Icon::Warning);\n2077: \t\t\telse if (error == LibAudio::Error::Inet) // Inet error"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2077,
        "text": "Inet error",
        "context_before": "2075: \t\t\tif (error == LibAudio::Error::File) // File error\n2076: \t\t\t\tMessageBox::Show(thisWnd, lang.GetLine(Lang::Message, 0), lang.GetLine(Lang::Message, 3), MessageBox::Icon::Warning);",
        "context_after": "2078: \t\t\t\tMessageBox::Show(thisWnd, lang.GetLine(Lang::Message, 0), lang.GetLine(Lang::Message, 4), MessageBox::Icon::Warning);\n2079: \t\t\telse //if (error == LibAudio::Error::Device) // Device error"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2079,
        "text": "if (error == LibAudio::Error::Device) // Device error",
        "context_before": "2077: \t\t\telse if (error == LibAudio::Error::Inet) // Inet error\n2078: \t\t\t\tMessageBox::Show(thisWnd, lang.GetLine(Lang::Message, 0), lang.GetLine(Lang::Message, 4), MessageBox::Icon::Warning);",
        "context_after": "2080: \t\t\t\tMessageBox::Show(thisWnd, lang.GetLine(Lang::Message, 0), lang.GetLine(Lang::Message, 8), MessageBox::Icon::Warning);\n2081: \t\t\tEnableAll(true);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2097,
        "text": "tempFocusNode = nullptr;",
        "context_before": "2095: {\n2096: \tListNodeUnsafe tempNode = nullptr;",
        "context_after": "2098: \n2099: \tstd::wstring file;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2102,
        "text": "Return the same track",
        "context_before": "2100: \toutCue = 0;\n2101: ",
        "context_after": "2103: \t{\n2104: \t\tListNodeUnsafe playNode = skinList->GetPlayNode();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2114,
        "text": "Return a random track",
        "context_before": "2112: \t}\n2113: ",
        "context_after": "2115: \t{\n2116: \t\ttempNode = skinList->FindNextTrackShuffle();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2117,
        "text": "All tracks are played",
        "context_before": "2115: \t{\n2116: \t\ttempNode = skinList->FindNextTrackShuffle();",
        "context_after": "2118: \t\t{\n2119: \t\t\tif (settings.IsRepeat()) // Repeat is on"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2119,
        "text": "Repeat is on",
        "context_before": "2117: \t\tif (tempNode == nullptr) // All tracks are played\n2118: \t\t{",
        "context_after": "2120: \t\t\t{\n2121: \t\t\t\t// Create a new shuffle list and return a random track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2121,
        "text": "Create a new shuffle list and return a random track",
        "context_before": "2119: \t\t\tif (settings.IsRepeat()) // Repeat is on\n2120: \t\t\t{",
        "context_after": "2122: \t\t\t\tskinList->RemoveShuffle();\n2123: \t\t\t\ttempNode = skinList->FindNextTrackShuffle();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2133,
        "text": "focusNode = skinList->GetFocusNode(); tempFocusNode = focusNode; if (focusNode == nullptr && settings.IsLibraryNowPlaying()) focusNode = skinList->GetFocusNodePlay();",
        "context_before": "2131: \t\tif (settings.IsPlayFocus())\n2132: \t\t{",
        "context_after": "2139: \t\t\tif (!settings.IsLibraryNowPlaying())\n2140: \t\t\t\tfocusNode = skinList->GetFocusNode();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2145,
        "text": "ListNodeUnsafe focusNode = skinList->GetFocusNodePlay();",
        "context_before": "2143: \t\t}\n2144: ",
        "context_after": "2146: \t\tListNodeUnsafe playNode = skinList->GetPlayNode();\n2147: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2148,
        "text": "If nothing is selected use playing node",
        "context_before": "2146: \t\tListNodeUnsafe playNode = skinList->GetPlayNode();\n2147: ",
        "context_after": "2149: \t\tif (focusNode == nullptr)\n2150: \t\t\tfocusNode = playNode;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2153,
        "text": "If nothing is selected and playing then return the first track",
        "context_before": "2151: \n2152: \t\tif (focusNode == nullptr)",
        "context_after": "2154: \t\t\ttempNode = skinList->FindPrevTrack(nullptr);\n2155: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2157,
        "text": "If selected and playing are the same then return the next track",
        "context_before": "2155: \t\t}\n2156: \t\telse if (focusNode == playNode)",
        "context_after": "2158: \t\t\tListNodeUnsafe nextNode = skinList->FindNextTrack(playNode);\n2159: \t\t\tif (nextNode == nullptr) // If it is the last track"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2159,
        "text": "If it is the last track",
        "context_before": "2157: \t\t{ // If selected and playing are the same then return the next track\n2158: \t\t\tListNodeUnsafe nextNode = skinList->FindNextTrack(playNode);",
        "context_after": "2160: \t\t\t{\n2161: \t\t\t\tif (settings.IsRepeat()) // Repeat is on"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2161,
        "text": "Repeat is on",
        "context_before": "2159: \t\t\tif (nextNode == nullptr) // If it is the last track\n2160: \t\t\t{",
        "context_after": "2162: \t\t\t\t\ttempNode = skinList->FindPrevTrack(nullptr); // Return the first track\n2163: \t\t\t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2162,
        "text": "Return the first track",
        "context_before": "2160: \t\t\t{\n2161: \t\t\t\tif (settings.IsRepeat()) // Repeat is on",
        "context_after": "2163: \t\t\t\telse\n2164: \t\t\t\t\ttempNode = nullptr; // Stop the playback"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2164,
        "text": "Stop the playback",
        "context_before": "2162: \t\t\t\t\ttempNode = skinList->FindPrevTrack(nullptr); // Return the first track\n2163: \t\t\t\telse",
        "context_after": "2165: \t\t\t}\n2166: \t\t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2170,
        "text": "Return the selected track",
        "context_before": "2168: \t\t}\n2169: \t\telse",
        "context_after": "2171: \t\t\ttempNode = focusNode;\n2172: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2175,
        "text": "Return the track",
        "context_before": "2173: \t}\n2174: ",
        "context_after": "2176: \t{\n2177: \t\tfile = tempNode->GetFile();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2198,
        "text": "else { if (settings.IsPlayFocus() && tempFocusNode) { if (!dBase.IsNowPlaying()) { dBase.CloseNowPlaying(); dBase.NewNowPlaying(); } if (!skinList->IsNowPlayingList()) { skinList->DeleteNowPlaying(); skinList->NewNowPlaying(); settings.NewNowPlaying(); } } }",
        "context_before": "2196: \t\t\t}\n2197: \t\t}",
        "context_after": "2216: \t\tskinList->SetPlayNode(skinList->GetTempNode());\n2217: \t\tif (isMediaPause)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2239,
        "text": "Increase skip count of the previous track",
        "context_before": "2237: \t\t\tSetWindowCaption(artist, title.empty() ? filename : title);\n2238: ",
        "context_after": "2240: \t\t\tdBase.IncreaseCount(idMediaLibrary, idMediaPlaylist);\n2241: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2247,
        "text": "if (settings.IsMSN())",
        "context_before": "2245: \t\t\tif (settings.IsLastFM())\n2246: \t\t\t\tlastFM.Start(artist, title.empty() ? filename : title, album, libAudio.GetTimeLength());",
        "context_after": "2248: \t\t\t//\tMessengers::MSNPlay(artist, title.empty() ? filename : title);\n2249: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2278,
        "text": "if (settings.IsMSN())",
        "context_before": "2276: \t\t\tif (settings.IsLastFM())\n2277: \t\t\t\tlastFM.Stop();",
        "context_after": "2279: \t\t\t//\tMessengers::MSNStop();\n2280: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2282,
        "text": "Always at the end or IncreaseCount that above will set incorrect values",
        "context_before": "2280: \t\t}\n2281: ",
        "context_after": "2283: \t\tidMediaLibrary = skinList->GetTempNode()->idLibrary;\n2284: \t\tidMediaPlaylist = skinList->GetTempNode()->idPlaylist;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2406,
        "text": "First always need to stop and clear the search",
        "context_before": "2404: void WinylWnd::FillList(TreeNodeUnsafe node)\n2405: {",
        "context_after": "2407: \tif (threadSearch.IsJoinable())\n2408: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2421,
        "text": "Return to Now Playing view",
        "context_before": "2419: \tif (node && node->GetNodeType() == SkinTreeNode::NodeType::Head)\n2420: \t{",
        "context_after": "2422: \t\tif (node->GetType() == SkinTreeNode::Type::NowPlaying)\n2423: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2448,
        "text": "!!! In FillJump below should be the same",
        "context_before": "2446: \t}\n2447: ",
        "context_after": "2449: \n2450: \t// If select the same as now playing playlist or library item (if playing) and not smatrlist."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2450,
        "text": "If select the same as now playing playlist or library item (if playing) and not smatrlist.",
        "context_before": "2448: \t// !!! In FillJump below should be the same\n2449: ",
        "context_after": "2451: \t//if ((isMediaPlay || settings.GetLibraryType() == (int)SkinTreeNode::Type::Playlist) &&\n2452: \t//\tsettings.IsNowPlaying() &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2451,
        "text": "if ((isMediaPlay || settings.GetLibraryType() == (int)SkinTreeNode::Type::Playlist) &&",
        "context_before": "2449: \n2450: \t// If select the same as now playing playlist or library item (if playing) and not smatrlist.",
        "context_after": "2452: \t//\tsettings.IsNowPlaying() &&\n2453: \t//\tsettings.GetLibraryType() != (int)SkinTreeNode::Type::Smartlist)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2452,
        "text": "settings.IsNowPlaying() &&",
        "context_before": "2450: \t// If select the same as now playing playlist or library item (if playing) and not smatrlist.\n2451: \t//if ((isMediaPlay || settings.GetLibraryType() == (int)SkinTreeNode::Type::Playlist) &&",
        "context_after": "2453: \t//\tsettings.GetLibraryType() != (int)SkinTreeNode::Type::Smartlist)\n2454: \tif (isMediaPlay &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2453,
        "text": "settings.GetLibraryType() != (int)SkinTreeNode::Type::Smartlist)",
        "context_before": "2451: \t//if ((isMediaPlay || settings.GetLibraryType() == (int)SkinTreeNode::Type::Playlist) &&\n2452: \t//\tsettings.IsNowPlaying() &&",
        "context_after": "2454: \tif (isMediaPlay &&\n2455: \t\t(settings.GetLibraryType() == (int)SkinTreeNode::Type::Playlist ||"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2553,
        "text": "First always need to stop and clear the search",
        "context_before": "2551: \tBeginWaitCursor();\n2552: ",
        "context_after": "2554: \tif (threadSearch.IsJoinable())\n2555: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2566,
        "text": "////////////",
        "context_before": "2564: \t}\n2565: ",
        "context_after": "2567: \tif (type != SkinTreeNode::Type::Folder)\n2568: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2584,
        "text": "Folder",
        "context_before": "2582: \t\t\tsettings.SetLibraryValue(true, genre);\n2583: \t}",
        "context_after": "2585: \t{\n2586: \t\tstd::wstring folder = PathEx::PathFromFile(node->GetFile());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2590,
        "text": "Only for drives",
        "context_before": "2588: \t\tif (isPortableVersion && !folder.empty())\n2589: \t\t{",
        "context_after": "2591: \t\t\t{\n2592: \t\t\t\tstd::wstring folderDrive(1, folder[0]);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2605,
        "text": "!!! From FillList above",
        "context_before": "2603: \t}\n2604: ",
        "context_after": "2606: \n2607: \tif ((isMediaPlay || settings.GetLibraryType() == (int)SkinTreeNode::Type::Playlist) &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2661,
        "text": "Return previous view",
        "context_before": "2659: \t\tSearchThreadStart();\n2660: \t}",
        "context_after": "2662: \t{\n2663: \t\tif (threadSearch.IsJoinable())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2732,
        "text": "For layered window use fast (without animation) minimize",
        "context_before": "2730: \t\tisWindowIconic = true;\n2731: ",
        "context_after": "2733: \t\tif (skinDraw.IsLayeredAlpha())\n2734: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2743,
        "text": "For layered window use fast (without animation) restore",
        "context_before": "2741: \t\tisWindowIconic = false;\n2742: ",
        "context_after": "2744: \t\tif (skinDraw.IsLayeredAlpha())\n2745: \t\t\ttrayIcon.Restore(thisWnd, true, settings.IsMaximized());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2747,
        "text": "When the skin is changing skinList can be nullptr",
        "context_before": "2745: \t\t\ttrayIcon.Restore(thisWnd, true, settings.IsMaximized());\n2746: ",
        "context_after": "2748: \t\t\tskinList->ScrollToPlayNode();\n2749: \t\tLyricsThreadReload();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2779,
        "text": "We use custom implementation of Drag'n'Drop",
        "context_before": "2777: \t\treturn 0;\n2778: ",
        "context_after": "2780: \t// so if the window lost the focus we need to stop Drag'n'Drop\n2781: \t// also we need to process Escape key in WinylApp.cpp"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2780,
        "text": "so if the window lost the focus we need to stop Drag'n'Drop",
        "context_before": "2778: \n2779: \t// We use custom implementation of Drag'n'Drop",
        "context_after": "2781: \t// also we need to process Escape key in WinylApp.cpp\n2782: \tcase WM_ACTIVATE:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2781,
        "text": "also we need to process Escape key in WinylApp.cpp",
        "context_before": "2779: \t// We use custom implementation of Drag'n'Drop\n2780: \t// so if the window lost the focus we need to stop Drag'n'Drop",
        "context_after": "2782: \tcase WM_ACTIVATE:\n2783: \t\tif (isDragDrop)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2791,
        "text": "Experimental feature for minimize/restore animation in Win7",
        "context_before": "2789: \t\treturn 0;\n2790: ",
        "context_after": "2792: \tcase WM_NCCALCSIZE:\n2793: \t\tif (!skinDraw.IsStyleBorder() && !skinDraw.IsLayeredAlpha())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2813,
        "text": "End of the feature",
        "context_before": "2811: \t\t}\n2812: \t\treturn ::DefWindowProc(hWnd, message, wParam, lParam);",
        "context_after": "2814: \n2815: \t// Icons in the tray menu (only for WinXP)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2815,
        "text": "Icons in the tray menu (only for WinXP)",
        "context_before": "2813: \t// End of the feature\n2814: ",
        "context_after": "2816: \tcase WM_MEASUREITEM:\n2817: \t\treturn contextMenu.MeasureDrawTrayMenuXP(true, lParam);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2846,
        "text": "Global hotkeys",
        "context_before": "2844: \t\treturn 0;\n2845: ",
        "context_after": "2847: \tcase WM_HOTKEY:\n2848: \t\tswitch ((HotKeys::KeyType)wParam)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2898,
        "text": "Media keys",
        "context_before": "2896: \t\treturn 0;\n2897: ",
        "context_after": "2899: \t// http://blogs.msdn.com/b/oldnewthing/archive/2006/04/25/583093.aspx\n2900: \tcase WM_APPCOMMAND:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2899,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2006/04/25/583093.aspx",
        "context_before": "2897: \n2898: \t// Media keys",
        "context_after": "2900: \tcase WM_APPCOMMAND:\n2901: \t\tswitch (GET_APPCOMMAND_LPARAM(lParam))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2919,
        "text": "case APPCOMMAND_VOLUME_MUTE:",
        "context_before": "2917: \t\t\tActionPrevTrack();\n2918: \t\t\treturn 1;",
        "context_after": "2920: \t\t//\tActionMute(!settings.IsMute());\n2921: \t\t//\treturn 1;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2920,
        "text": "ActionMute(!settings.IsMute());",
        "context_before": "2918: \t\t\treturn 1;\n2919: \t\t//case APPCOMMAND_VOLUME_MUTE:",
        "context_after": "2921: \t\t//\treturn 1;\n2922: \t\t//case APPCOMMAND_VOLUME_UP:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2921,
        "text": "return 1;",
        "context_before": "2919: \t\t//case APPCOMMAND_VOLUME_MUTE:\n2920: \t\t//\tActionMute(!settings.IsMute());",
        "context_after": "2922: \t\t//case APPCOMMAND_VOLUME_UP:\n2923: \t\t//\tActionVolumeUp();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2922,
        "text": "case APPCOMMAND_VOLUME_UP:",
        "context_before": "2920: \t\t//\tActionMute(!settings.IsMute());\n2921: \t\t//\treturn 1;",
        "context_after": "2923: \t\t//\tActionVolumeUp();\n2924: \t\t//\treturn 1;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2923,
        "text": "ActionVolumeUp();",
        "context_before": "2921: \t\t//\treturn 1;\n2922: \t\t//case APPCOMMAND_VOLUME_UP:",
        "context_after": "2924: \t\t//\treturn 1;\n2925: \t\t//case APPCOMMAND_VOLUME_DOWN:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2924,
        "text": "return 1;",
        "context_before": "2922: \t\t//case APPCOMMAND_VOLUME_UP:\n2923: \t\t//\tActionVolumeUp();",
        "context_after": "2925: \t\t//case APPCOMMAND_VOLUME_DOWN:\n2926: \t\t//\tActionVolumeDown();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2925,
        "text": "case APPCOMMAND_VOLUME_DOWN:",
        "context_before": "2923: \t\t//\tActionVolumeUp();\n2924: \t\t//\treturn 1;",
        "context_after": "2926: \t\t//\tActionVolumeDown();\n2927: \t\t//\treturn 1;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2926,
        "text": "ActionVolumeDown();",
        "context_before": "2924: \t\t//\treturn 1;\n2925: \t\t//case APPCOMMAND_VOLUME_DOWN:",
        "context_after": "2927: \t\t//\treturn 1;\n2928: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2927,
        "text": "return 1;",
        "context_before": "2925: \t\t//case APPCOMMAND_VOLUME_DOWN:\n2926: \t\t//\tActionVolumeDown();",
        "context_after": "2928: \t\t}\n2929: \t\treturn ::DefWindowProc(hWnd, message, wParam, lParam);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2979,
        "text": "case UWM_BASSPRELOAD:",
        "context_before": "2977: \treturn 0;\n2978: ",
        "context_after": "2980: //\t{\n2981: //\t\tlibAudio.SyncProcPreloadImpl();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2981,
        "text": "libAudio.SyncProcPreloadImpl();",
        "context_before": "2979: //\tcase UWM_BASSPRELOAD:\n2980: //\t{",
        "context_after": "2982: //\t\treturn true;\n2983: //\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2982,
        "text": "return true;",
        "context_before": "2980: //\t{\n2981: //\t\tlibAudio.SyncProcPreloadImpl();",
        "context_after": "2983: //\t}\n2984: //\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2984,
        "text": "break;",
        "context_before": "2982: //\t\treturn true;\n2983: //\t}",
        "context_after": "2985: \n2986: \tcase UWM_ACTION:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3051,
        "text": "case UWM_NEXTFILE:",
        "context_before": "3049: \treturn 0;\n3050: ",
        "context_after": "3052: \t//{\n3053: \t//\t*(std::wstring*)lParam = ChangeFile();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3053,
        "text": "*(std::wstring*)lParam = ChangeFile();",
        "context_before": "3051: \t//case UWM_NEXTFILE:\n3052: \t//{",
        "context_after": "3054: \t//}\n3055: \t//return 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3055,
        "text": "return 0;",
        "context_before": "3053: \t//\t*(std::wstring*)lParam = ChangeFile();\n3054: \t//}",
        "context_after": "3056: \n3057: \tcase UWM_PLAYDRAW:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3161,
        "text": "case UWM_RADIOSTART:",
        "context_before": "3159: \treturn 0;\n3160: ",
        "context_after": "3162: //\t{\n3163: //\t\tStartRadio((int)wParam);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3163,
        "text": "StartRadio((int)wParam);",
        "context_before": "3161: //\tcase UWM_RADIOSTART:\n3162: //\t{",
        "context_after": "3164: //\t}\n3165: //\treturn 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3165,
        "text": "return 0;",
        "context_before": "3163: //\t\tStartRadio((int)wParam);\n3164: //\t}",
        "context_after": "3166: \n3167: \tcase UWM_TREEDRAG:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3212,
        "text": "Track the mouse and use ProcessId to make sure that it is our window",
        "context_before": "3210: \t\t\t::ScreenToClient(thisWnd, &ptWin);\n3211: ",
        "context_after": "3213: \t\t\tHWND wndPoint = ::WindowFromPoint(ptScreen);\n3214: \t\t\tDWORD processID = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3219,
        "text": "Mouse over the playlist",
        "context_before": "3217: \t\t\t\twndPoint = NULL;\n3218: ",
        "context_after": "3220: \t\t\tif (wndPoint == skinList->Wnd())\n3221: \t\t\t\tskinList->SetDropMovePoint(&ptList);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3225,
        "text": "Mouse over the library",
        "context_before": "3223: \t\t\t\tskinList->SetDropMovePoint(nullptr);\n3224: ",
        "context_after": "3226: \t\t\tif (wndPoint == skinTree->Wnd())\n3227: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3235,
        "text": "Mouse leaves the main window",
        "context_before": "3233: \t\t\t\tskinTree->SetDropPoint(nullptr);\n3234: ",
        "context_after": "3236: \t\t\tif (wndPoint == NULL)\n3237: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3243,
        "text": "Mouse returns to SkinList",
        "context_before": "3241: \t\t\t\tReleaseCapture();\n3242: \t\t\t\tif (!CopySelectedToClipboard(false))",
        "context_after": "3244: \t\t\t\telse\n3245: \t\t\t\t\tskinList->SetDropMoveStop(); // Files are dropped to other program"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3245,
        "text": "Files are dropped to other program",
        "context_before": "3243: \t\t\t\t\t::SetCapture(skinList->Wnd()); // Mouse returns to SkinList\n3244: \t\t\t\telse",
        "context_after": "3246: \n3247: \t\t\t\tisDragDropOLE = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3279,
        "text": "When click on the tray icon then bring the window to the front",
        "context_before": "3277: \t\tcase WM_LBUTTONDOWN:\n3278: \t\tcase WM_LBUTTONDBLCLK:",
        "context_after": "3280: \t\t\t// or minimize if it's already the foreground window or restore if it's minimized\n3281: \t\t\tif (!settings.IsMiniPlayer())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3280,
        "text": "or minimize if it's already the foreground window or restore if it's minimized",
        "context_before": "3278: \t\tcase WM_LBUTTONDBLCLK:\n3279: \t\t\t// When click on the tray icon then bring the window to the front",
        "context_after": "3281: \t\t\tif (!settings.IsMiniPlayer())\n3282: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3295,
        "text": "When the skin is changing skinList can be nullptr",
        "context_before": "3293: \t\t\t\t\tif (::IsIconic(thisWnd))\n3294: \t\t\t\t\t\ttrayIcon.Restore(thisWnd, skinDraw.IsLayeredAlpha(), settings.IsMaximized());",
        "context_after": "3296: \t\t\t\t\t\tskinList->ScrollToPlayNode();\n3297: \t\t\t\t\tLyricsThreadReload();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3329,
        "text": "case WM_RBUTTONDOWN:",
        "context_before": "3327: \t\t\t}\n3328: \t\t\tbreak;",
        "context_after": "3330: \t\t//case WM_CONTEXTMENU:\n3331: \t\tcase WM_RBUTTONUP:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3330,
        "text": "case WM_CONTEXTMENU:",
        "context_before": "3328: \t\t\tbreak;\n3329: \t\t//case WM_RBUTTONDOWN:",
        "context_after": "3331: \t\tcase WM_RBUTTONUP:\n3332: \t\t\tcontextMenu.ShowTrayMenu(thisWnd);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3437,
        "text": "memcpy(bufCursor, skinList->GetSelectedAt(i)->GetFile().c_str(), sizeFile);",
        "context_before": "3435: \t\t\tsize_t sizeFile = skinList->GetSelectedAt(i)->GetFile().size() * sizeof(wchar_t) + sizeof(wchar_t);\n3436: ",
        "context_after": "3438: \t\t\tmemcpy_s(bufCursor, sizeFile, skinList->GetSelectedAt(i)->GetFile().c_str(), sizeFile);\n3439: \t\t\tbufCursor += sizeFile;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3455,
        "text": "Self delete",
        "context_before": "3453: \t\tbool isStopDrag = myDropSource->IsStopDrag();\n3454: ",
        "context_after": "3456: \t\tmyDropSource->Release(); // Self delete\n3457: \t\tmyDataObject->Release(); // Self delete"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3456,
        "text": "Self delete",
        "context_before": "3454: \n3455: \t\tmyDropTarget->Release(); // Self delete",
        "context_after": "3457: \t\tmyDataObject->Release(); // Self delete\n3458: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3457,
        "text": "Self delete",
        "context_before": "3455: \t\tmyDropTarget->Release(); // Self delete\n3456: \t\tmyDropSource->Release(); // Self delete",
        "context_after": "3458: \n3459: \t\t::GlobalFree(hMem);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3468,
        "text": "http://blogs.msdn.com/b/oldnewthing/archive/2008/05/27/8553638.aspx",
        "context_before": "3466: \telse\n3467: \t{",
        "context_after": "3469: \n3470: \t\tif (!::OpenClipboard(thisWnd))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3478,
        "text": "Copy files to clipboard",
        "context_before": "3476: \t\t}\n3477: ",
        "context_after": "3479: \n3480: \t\tsize_t bufSize = sizeof(DROPFILES) + sizeof(wchar_t);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3497,
        "text": "memcpy(bufCursor, skinList->GetSelectedAt(i)->GetFile().c_str(), sizeFile);",
        "context_before": "3495: \t\t\tsize_t sizeFile = skinList->GetSelectedAt(i)->GetFile().size() * sizeof(wchar_t) + sizeof(wchar_t);\n3496: ",
        "context_after": "3498: \t\t\tmemcpy_s(bufCursor, sizeFile, skinList->GetSelectedAt(i)->GetFile().c_str(), sizeFile);\n3499: \t\t\tbufCursor += sizeFile;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3507,
        "text": "Also copy focused track Artist - Title to clipboard",
        "context_before": "3505: \t\t::SetClipboardData(CF_HDROP, hMem);\n3506: ",
        "context_after": "3508: \t\tHGLOBAL hMemText = NULL;\n3509: \t\tif (skinList->GetFocusNode())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3536,
        "text": "memcpy(bufText, artistTitle.c_str(), bufSizeText);",
        "context_before": "3534: \t\t\t\tLPVOID bufText = ::GlobalLock(hMemText);\n3535: ",
        "context_after": "3537: \t\t\t\tmemcpy_s(bufText, bufSizeText, artistTitle.c_str(), bufSizeText);\n3538: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3559,
        "text": "Just in case",
        "context_before": "3557: \tif (msg->message == WM_MOUSEWHEEL)\n3558: \t{",
        "context_after": "3560: \t\t\treturn;\n3561: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3641,
        "text": "Always kill the timer if all windows are hidded for example",
        "context_before": "3639: \t\tif (!isMainWnd && !isMiniWnd)\n3640: \t\t{",
        "context_after": "3642: \t\t\tif (!isMediaPlay || isMediaPause)\n3643: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3650,
        "text": "Get FFT data and draw it in visualizers",
        "context_before": "3648: \t\telse\n3649: \t\t{",
        "context_after": "3651: \n3652: \t\t\tfloat fft[1024];"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3657,
        "text": "if (isMainWnd)",
        "context_before": "3655: \t\t\tbool needStop = true;\n3656: ",
        "context_after": "3658: \t\t\t{\n3659: \t\t\t\tfor (std::size_t i = 0, size = visuals.size(); i < size; ++i)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3666,
        "text": "if (isMiniWnd)",
        "context_before": "3664: \t\t\t}\n3665: ",
        "context_after": "3667: \t\t\tif (skinMini)\n3668: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3713,
        "text": "Menu key or Shift+F10",
        "context_before": "3711: \tif (hWnd == thisWnd)\n3712: \t{",
        "context_after": "3714: \t\t\t::GetCursorPos(&point);\n3715: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3722,
        "text": "\"Add to Playlist\" menu item",
        "context_before": "3720: void WinylWnd::OnCommand(WPARAM wParam, LPARAM lParam)\n3721: {",
        "context_after": "3723: \tif (LOWORD(wParam) >= 10000 && LOWORD(wParam) <= 12000)\n3724: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3725,
        "text": "Playlist db file",
        "context_before": "3723: \tif (LOWORD(wParam) >= 10000 && LOWORD(wParam) <= 12000)\n3724: \t{",
        "context_after": "3726: \n3727: \t\tif (LOWORD(wParam) == 10000) // \"To New Playlist\" menu item"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3727,
        "text": "\"To New Playlist\" menu item",
        "context_before": "3725: \t\tstd::wstring file; // Playlist db file\n3726: ",
        "context_after": "3728: \t\t{\n3729: \t\t\tTreeNodeUnsafe node = dBase.CreatePlaylist(skinTree.get(), lang.GetLineS(Lang::DefaultList, 0) +"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3735,
        "text": "\"To Now Playing\" menu item",
        "context_before": "3733: \t\t\t\tfile = node->GetValue();\n3734: \t\t}",
        "context_after": "3736: \t\t{\n3737: \t\t\tif (settings.GetNowPlayingType() == (int)SkinTreeNode::Type::Playlist)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3742,
        "text": "Let's find out to which playlist we add tracks",
        "context_before": "3740: \t\telse\n3741: \t\t{",
        "context_after": "3743: \t\t\tTreeNodeUnsafe plsNode = skinTree->GetPlaylistNode();\n3744: \t\t\tif (plsNode->HasChild())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3754,
        "text": "Add to the playlist",
        "context_before": "3752: \t\t}\n3753: ",
        "context_after": "3755: \t\tif (!file.empty())\n3756: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3770,
        "text": "If add to a now playing playlist then need to fill the playlist right away",
        "context_before": "3768: \t\t\tif (settings.IsLibraryNowPlaying())\n3769: \t\t\t{",
        "context_after": "3771: \t\t\t\tif (dBase.IsNowPlaying() && !dBase.IsNowPlayingOpen())\n3772: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4160,
        "text": "std::wstring url = L\"https://google.com/search?q=%22\" + lyricsArtist + L\"%22+%22\" + lyricsTitle + L\"%22+lyrics\";",
        "context_before": "4158: \t\t\tif (!lyricsArtist.empty() && !lyricsTitle.empty())\n4159: \t\t\t{",
        "context_after": "4161: \t\t\t\tstd::wstring url = L\"https://google.com/search?q=\" + lyricsArtist + L\"+\" + lyricsTitle + L\"+lyrics\";\n4162: \t\t\t\t::ShellExecute(NULL, L\"open\", url.c_str(), NULL, NULL, SW_SHOWNORMAL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4161,
        "text": "google.com/search?q=\" + lyricsArtist + L\"+\" + lyricsTitle + L\"+lyrics\";",
        "context_before": "4159: \t\t\t{\n4160: \t\t\t\t//std::wstring url = L\"https://google.com/search?q=%22\" + lyricsArtist + L\"%22+%22\" + lyricsTitle + L\"%22+lyrics\";",
        "context_after": "4162: \t\t\t\t::ShellExecute(NULL, L\"open\", url.c_str(), NULL, NULL, SW_SHOWNORMAL);\n4163: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4183,
        "text": "memcpy(bufText, lyrics.c_str(), bufSizeText);",
        "context_before": "4181: \t\t\t\t\tLPVOID bufText = ::GlobalLock(hMemText);\n4182: ",
        "context_after": "4184: \t\t\t\t\tmemcpy_s(bufText, bufSizeText, lyrics.c_str(), bufSizeText);\n4185: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4200,
        "text": "std::wstring operation = L\"/select, \\\"\" + focusNode->GetFile() + L\"\\\"\";",
        "context_before": "4198: \t\t\tif (focusNode)\n4199: \t\t\t{",
        "context_after": "4201: \t\t\t\t//::ShellExecute(thisWnd, L\"open\", L\"Explorer\", operation.c_str(), NULL, SW_SHOWNORMAL);\n4202: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4201,
        "text": "::ShellExecute(thisWnd, L\"open\", L\"Explorer\", operation.c_str(), NULL, SW_SHOWNORMAL);",
        "context_before": "4199: \t\t\t{\n4200: \t\t\t\t//std::wstring operation = L\"/select, \\\"\" + focusNode->GetFile() + L\"\\\"\";",
        "context_after": "4202: \n4203: \t\t\t\t// Here we fix a problem, when url then IE opens and Winyl hangs when close."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4207,
        "text": "= ::ILCreateFromPath(focusNode->GetFile().c_str());",
        "context_before": "4205: \t\t\t\t\tFileSystem::Exists(focusNode->GetFile()))\n4206: \t\t\t\t{",
        "context_after": "4208: \t\t\t\t\tSFGAOF attrIn = SFGAO_FILESYSTEM;\n4209: \t\t\t\t\tSFGAOF attrOut = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4213,
        "text": "Additional fix for the url bug",
        "context_before": "4211: \t\t\t\t\tif (pidl)\n4212: \t\t\t\t\t{",
        "context_after": "4214: \t\t\t\t\t\t\t::SHOpenFolderAndSelectItems(pidl, 0, 0, 0);\n4215: \t\t\t\t\t\t::CoTaskMemFree(pidl);//::ILFree(pidl);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4215,
        "text": "::ILFree(pidl);",
        "context_before": "4213: \t\t\t\t\t\tif (attrOut & SFGAO_FILESYSTEM) // Additional fix for the url bug\n4214: \t\t\t\t\t\t\t::SHOpenFolderAndSelectItems(pidl, 0, 0, 0);",
        "context_after": "4216: \t\t\t\t\t}\n4217: \t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4221,
        "text": "case ID_MENU_LASTFM:",
        "context_before": "4219: \t\t}\n4220: \t\tbreak;",
        "context_after": "4222: //\t\tif (!settings.IsLastFM())\n4223: //\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4222,
        "text": "if (!settings.IsLastFM())",
        "context_before": "4220: \t\tbreak;\n4221: //\tcase ID_MENU_LASTFM:",
        "context_after": "4223: //\t\t{\n4224: //\t\t\tsettings.SetLastFM(lastFM.Init());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4224,
        "text": "settings.SetLastFM(lastFM.Init());",
        "context_before": "4222: //\t\tif (!settings.IsLastFM())\n4223: //\t\t{",
        "context_after": "4225: \n4226: //\t\t\tif (settings.IsLastFM())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4226,
        "text": "if (settings.IsLastFM())",
        "context_before": "4224: //\t\t\tsettings.SetLastFM(lastFM.Init());\n4225: ",
        "context_after": "4227: //\t\t\t\tcontextMenu.CheckLastFM(true);\n4228: //\t\t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4227,
        "text": "contextMenu.CheckLastFM(true);",
        "context_before": "4225: \n4226: //\t\t\tif (settings.IsLastFM())",
        "context_after": "4228: //\t\t\telse\n4229: //\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4230,
        "text": "EnableAll(false);",
        "context_before": "4228: //\t\t\telse\n4229: //\t\t\t{",
        "context_after": "4231: //\t\t\t\tMessageBox::Show(thisWnd, lang.GetLine(Lang::MESSAGE, 1), lang.GetLine(Lang::MESSAGE, 7), MessageBox::IconWarning);\n4232: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4233,
        "text": "EnableAll(true);",
        "context_before": "4231: //\t\t\t\tMessageBox::Show(thisWnd, lang.GetLine(Lang::MESSAGE, 1), lang.GetLine(Lang::MESSAGE, 7), MessageBox::IconWarning);\n4232: ",
        "context_after": "4234: //\t\t\t}\n4235: //\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4238,
        "text": "lastFM.Stop();",
        "context_before": "4236: //\t\telse\n4237: //\t\t{",
        "context_after": "4239: //\t\t\tsettings.SetLastFM(false);\n4240: //\t\t\tcontextMenu.CheckLastFM(false);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4239,
        "text": "settings.SetLastFM(false);",
        "context_before": "4237: //\t\t{\n4238: //\t\t\tlastFM.Stop();",
        "context_after": "4240: //\t\t\tcontextMenu.CheckLastFM(false);\n4241: //\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4240,
        "text": "contextMenu.CheckLastFM(false);",
        "context_before": "4238: //\t\t\tlastFM.Stop();\n4239: //\t\t\tsettings.SetLastFM(false);",
        "context_after": "4241: //\t\t}\n4242: //\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4242,
        "text": "break;",
        "context_before": "4240: //\t\t\tcontextMenu.CheckLastFM(false);\n4241: //\t\t}",
        "context_after": "4243: \tcase ID_MENU_CONFIG:\n4244: \tcase ID_KEY_F8:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4306,
        "text": "If delete the current playlist",
        "context_before": "4304: \t\tif (!settings.IsLibraryNowPlaying())\n4305: \t\t{",
        "context_after": "4307: \t\t\tif (settings.GetLibraryType() == (int)SkinTreeNode::Type::Playlist &&\n4308: \t\t\t\tsettings.GetLibraryValue() == skinTree->GetFocusNode()->GetValue())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4316,
        "text": "If delete the current playlist",
        "context_before": "4314: \t\telse\n4315: \t\t{",
        "context_after": "4317: \t\t\tif (settings.GetLibraryType() == (int)SkinTreeNode::Type::Playlist &&\n4318: \t\t\t\tsettings.GetLibraryValue() == skinTree->GetFocusNode()->GetValue())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4322,
        "text": "If delete the now playing playlist",
        "context_before": "4320: \t\t\t\tdBase.ClosePlaylist();\n4321: \t\t\t}",
        "context_after": "4323: \t\t\tif (dBase.IsNowPlaying())\n4324: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4330,
        "text": "Needed or delete the default playlist cause a bug",
        "context_before": "4328: \t\t\t\t\tdBase.CloseNowPlaying();\n4329: \t\t\t\t\tskinList->DeleteNowPlaying();",
        "context_after": "4331: \t\t\t\t\tActionStop();\n4332: \t\t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4336,
        "text": "Delete playlist",
        "context_before": "4334: \t\t}\n4335: ",
        "context_after": "4337: \t\tdBase.DeletePlaylist(skinTree.get());\n4338: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4341,
        "text": "Delete smartlist",
        "context_before": "4339: \telse\n4340: \t{",
        "context_after": "4342: \t\tdBase.DeleteTreeSmartlist(skinTree.get());\n4343: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4345,
        "text": "Needed or delete the last playlist cause a bug",
        "context_before": "4343: \t}\n4344: ",
        "context_after": "4346: \tsettings.EmptyLibrary();\n4347: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4348,
        "text": "Choose the next playlist or clear the list if latest",
        "context_before": "4346: \tsettings.EmptyLibrary();\n4347: ",
        "context_after": "4349: \tif (skinTree->GetFocusNode())\n4350: \t\tFillList(skinTree->GetFocusNode());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4432,
        "text": "!(lpwndpos->flags & SWP_NOZORDER)",
        "context_before": "4430: \t\t\t\t!(lpwndpos->flags & SWP_NOACTIVATE) ||\n4431: \t\t\t\t((lpwndpos->flags & SWP_NOMOVE) && (lpwndpos->flags & SWP_NOSIZE) &&",
        "context_after": "4433: \n4434: \t\tif (isShowActivate)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4478,
        "text": "Drop to a selected playlist",
        "context_before": "4476: void WinylWnd::DropFilesToPlaylist()\n4477: {",
        "context_after": "4479: \n4480: \tif (skinTree->GetDropNode()) // Only if drop from the player"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4480,
        "text": "Only if drop from the player",
        "context_before": "4478: \t// Drop to a selected playlist\n4479: ",
        "context_after": "4481: \t{\n4482: \t\tTreeNodeUnsafe dropNode = skinTree->GetDropNode();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4485,
        "text": "Drop to \"Now Playing\"",
        "context_before": "4483: \t\tstd::wstring file;\n4484: ",
        "context_after": "4486: \t\tif (dropNode->GetNodeType() == SkinTreeNode::NodeType::Head && dropNode->GetType() == SkinTreeNode::Type::NowPlaying)\n4487: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4491,
        "text": "Drop to a playlist",
        "context_before": "4489: \t\t\t\tfile = settings.GetNowPlayingValue();\n4490: \t\t}",
        "context_after": "4492: \t\t{\n4493: \t\t\t// Cannot drop to the same playlist"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4493,
        "text": "Cannot drop to the same playlist",
        "context_before": "4491: \t\telse // Drop to a playlist\n4492: \t\t{",
        "context_after": "4494: \t\t\tif (!(dBase.IsPlaylistOpen() && settings.GetLibraryValue() == dropNode->GetValue()))\n4495: \t\t\t\tfile = dropNode->GetValue();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4516,
        "text": "If drop to a now playing playlist then need to fill the playlist right away",
        "context_before": "4514: \t\tif (settings.IsLibraryNowPlaying())\n4515: \t\t{",
        "context_after": "4517: \t\t\tif (dBase.IsNowPlaying() && !dBase.IsNowPlayingOpen())\n4518: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4531,
        "text": "Do not add if the library is scanning",
        "context_before": "4529: void WinylWnd::OnDropFiles(HDROP hDropInfo)\n4530: {",
        "context_after": "4532: \t\treturn;\n4533: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4534,
        "text": "Drop to the current open playlist",
        "context_before": "4532: \t\treturn;\n4533: ",
        "context_after": "4535: \n4536: \tstd::vector<std::wstring> files;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4550,
        "text": "Playlist is closed then drop to the default playlist",
        "context_before": "4548: \tbool isDefaultPlaylist = false;\n4549: ",
        "context_after": "4551: \tif (!dBase.IsPlaylistOpen() && !isImportPlaylist)\n4552: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4580,
        "text": "If there is no default playlist then create one",
        "context_before": "4578: void WinylWnd::DropNewDefault()\n4579: {",
        "context_after": "4581: \tif (skinTree->GetDefPlaylistNode() == nullptr)\n4582: \t\tdBase.CreatePlaylist(skinTree.get(), lang.GetLineS(Lang::DefaultList, 2), true);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4586,
        "text": "Select the default playlist",
        "context_before": "4584: \tif (skinTree->GetDefPlaylistNode())\n4585: \t{",
        "context_after": "4587: //\t\tskinTree->SetFocusNode(skinTree->GetDefPlaylistNode());\n4588: //\t\tskinTree->ScrollToFocusNode();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4587,
        "text": "skinTree->SetFocusNode(skinTree->GetDefPlaylistNode());",
        "context_before": "4585: \t{\n4586: \t\t// Select the default playlist",
        "context_after": "4588: //\t\tskinTree->ScrollToFocusNode();\n4589: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4588,
        "text": "skinTree->ScrollToFocusNode();",
        "context_before": "4586: \t\t// Select the default playlist\n4587: //\t\tskinTree->SetFocusNode(skinTree->GetDefPlaylistNode());",
        "context_after": "4589: \n4590: \t\t// Choose the default playlist if it's not choosen"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4590,
        "text": "Choose the default playlist if it's not choosen",
        "context_before": "4588: //\t\tskinTree->ScrollToFocusNode();\n4589: ",
        "context_after": "4591: \t\tif (settings.GetLibraryNoneOld() ||\n4592: \t\t\t!(settings.GetLibraryType() == (int)SkinTreeNode::Type::Playlist &&"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4609,
        "text": "Add files from this position",
        "context_before": "4607: \t\tskinList->EnablePlayFocus(false);\n4608: ",
        "context_after": "4610: \tint start = dBase.GetPlaylistMax();\n4611: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4614,
        "text": "If only 1 file then try to add it fast",
        "context_before": "4612: \tbool isFolder = false;\n4613: ",
        "context_after": "4615: \tif (files.size() == 1)\n4616: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4629,
        "text": "Multiple files or folder",
        "context_before": "4627: \t}\n4628: ",
        "context_after": "4630: \tif (isFolder || files.size() > 1)\n4631: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4651,
        "text": "ActionPlay",
        "context_before": "4649: \t}\n4650: ",
        "context_after": "4652: \t{\n4653: \t\tif (skinList->GetSelectedSize() > 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4655,
        "text": "Get first selected",
        "context_before": "4653: \t\tif (skinList->GetSelectedSize() > 0)\n4654: \t\t{",
        "context_after": "4656: \n4657: \t\t\tskinList->SetFocusNode(node, false); // Focus it"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4657,
        "text": "Focus it",
        "context_before": "4655: \t\t\tListNodeUnsafe node = skinList->GetSelectedAt(0); // Get first selected\n4656: ",
        "context_after": "4658: \n4659: \t\t\tskinList->ScrollToMyNode(node); // Scroll to it"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4659,
        "text": "Scroll to it",
        "context_before": "4657: \t\t\tskinList->SetFocusNode(node, false); // Focus it\n4658: ",
        "context_after": "4660: \n4661: \t\t\tActionPlay(true); // Play"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4666,
        "text": "Scroll to the area of the added tracks",
        "context_before": "4664: \telse\n4665: \t{",
        "context_after": "4667: \t\tif (skinList->GetSelectedSize() > 0)\n4668: \t\t\tskinList->ScrollToMyNode(skinList->GetSelectedAt(0));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4750,
        "text": "Do not add if the library is scanning",
        "context_before": "4748: void WinylWnd::OnCopyData(HWND hWnd, COPYDATASTRUCT* pCopyDataStruct)\n4749: {",
        "context_after": "4751: \t\treturn;\n4752: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4768,
        "text": "The files came from the command line",
        "context_before": "4766: \tif (!isImportPlaylist)\n4767: \t{",
        "context_after": "4769: \t\t\tDropAddFiles(files, true /*!isMediaPlay*/, isDefaultPlaylist);\n4770: \t\telse if (pCopyDataStruct->dwData == 2) // The files came from Windows Shell"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4769,
        "text": "!isMediaPlay",
        "context_before": "4767: \t{\n4768: \t\tif (pCopyDataStruct->dwData == 1) // The files came from the command line",
        "context_after": "4771: \t\t\tDropAddFiles(files, true, isDefaultPlaylist);\n4772: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4770,
        "text": "The files came from Windows Shell",
        "context_before": "4768: \t\tif (pCopyDataStruct->dwData == 1) // The files came from the command line\n4769: \t\t\tDropAddFiles(files, true /*!isMediaPlay*/, isDefaultPlaylist);",
        "context_after": "4771: \t\t\tDropAddFiles(files, true, isDefaultPlaylist);\n4772: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4775,
        "text": "The files came from the command line",
        "context_before": "4773: \telse\n4774: \t{",
        "context_after": "4776: \t\t\tDropAddPlaylist(files, true /*!isMediaPlay*/);\n4777: \t\telse if (pCopyDataStruct->dwData == 2) // The files came from Windows Shell"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4776,
        "text": "!isMediaPlay",
        "context_before": "4774: \t{\n4775: \t\tif (pCopyDataStruct->dwData == 1) // The files came from the command line",
        "context_after": "4778: \t\t\tDropAddPlaylist(files, true);\n4779: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4777,
        "text": "The files came from Windows Shell",
        "context_before": "4775: \t\tif (pCopyDataStruct->dwData == 1) // The files came from the command line\n4776: \t\t\tDropAddPlaylist(files, true /*!isMediaPlay*/);",
        "context_after": "4778: \t\t\tDropAddPlaylist(files, true);\n4779: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4784,
        "text": "Split the line by '|'",
        "context_before": "4782: void WinylWnd::DropParseFiles(const std::wstring& file, std::vector<std::wstring>& files)\n4783: {",
        "context_after": "4785: \n4786: \tstd::size_t start = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4826,
        "text": "Do not add if library scanning",
        "context_before": "4824: void WinylWnd::AddFileFolder(bool isFolder)\n4825: {",
        "context_after": "4827: \t\treturn;\n4828: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4841,
        "text": "Check the file despite of isMulti flag because WinXP doesn't support multiple folders",
        "context_before": "4839: \t\tif (fileDialog.DoModalFolder(thisWnd, true))\n4840: \t\t{",
        "context_after": "4842: \t\t\tif (!fileDialog.GetFile().empty())\n4843: \t\t\t\tfiles.push_back(fileDialog.GetFile());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4920,
        "text": "Below is a simpler version of DropAddFiles",
        "context_before": "4918: \t\t\tDropNewDefault();\n4919: ",
        "context_after": "4921: \t\tskinList->RemoveSelection();\n4922: \t\tif (settings.IsPlayFocus())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4930,
        "text": "Scroll to the area of the added tracks",
        "context_before": "4928: \t\tdBase.FillPlaylistOpenFile(skinList.get(), settings.GetLibraryValue(), start);\n4929: ",
        "context_after": "4931: \t\tif (skinList->GetSelectedSize() > 0)\n4932: \t\t\tskinList->ScrollToMyNode(skinList->GetSelectedAt(0));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5018,
        "text": "If don't press stop while loading",
        "context_before": "5016: \t\t\tcoverExternal = coverLoader.LoadCoverImage(file);\n5017: ",
        "context_after": "5019: \t\t\t{\n5020: \t\t\t\tif (coverLoader.GetImage().IsValid())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5137,
        "text": "Sleep(3300);",
        "context_before": "5135: \t}\n5136: ",
        "context_after": "5138: \tif (IsWnd()) ::PostMessageW(Wnd(), UWM_LYRICSDONE, 0, 0);\n5139: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5220,
        "text": "SetActiveWindow();",
        "context_before": "5218: void WinylWnd::DialogConfig(int page)\n5219: {",
        "context_after": "5221: \tEnableAll(false);\n5222: \tDlgConfig dlg;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5270,
        "text": "contextMenu.CheckLastFM(settings.IsLastFM());",
        "context_before": "5268: \t\tcontextMenu.CheckMute(settings.IsMute());\n5269: \t\tcontextMenu.CheckHideToTray(settings.IsHideToTray());",
        "context_after": "5271: \t\tcontextMenu.CheckPopup(settings.IsPopup());\n5272: \t\tcontextMenu.CheckEffect(settings.IsEffect());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5339,
        "text": "Set min and max window size",
        "context_before": "5337: void WinylWnd::OnGetMinMaxInfo(MINMAXINFO* lpMMI)\n5338: {",
        "context_after": "5340: \tlpMMI->ptMaxTrackSize.x = skinDraw.GetMaxSize().cx;\n5341: \tlpMMI->ptMaxTrackSize.y = skinDraw.GetMaxSize().cy;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5346,
        "text": "Adjust min and max size if alpha window is present",
        "context_before": "5344: \tlpMMI->ptMinTrackSize.y = skinDraw.GetMinSize().cy;\n5345: ",
        "context_after": "5347: \tif (skinDraw.IsLayeredAlpha())\n5348: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5356,
        "text": "Set size for maximized window, only if window is borderless",
        "context_before": "5354: \t}\n5355: ",
        "context_after": "5357: \tif (!skinDraw.IsStyleBorder())\n5358: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5361,
        "text": "Get work rect (depending on the number of monitors)",
        "context_before": "5359: \t\tCRect rcRect;\n5360: ",
        "context_after": "5362: \t\tif (::GetSystemMetrics(SM_CMONITORS) > 1)\n5363: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5371,
        "text": "http://blogs.msdn.com/b/llobo/archive/2006/08/01/maximizing-window-_2800_with-windowstyle_3d00_none_2900_-considering-taskbar.aspx",
        "context_before": "5369: \t\t\trcRect = mi.rcWork;\n5370: ",
        "context_after": "5372: \t\t\t// Move work rect for second, third etc. monitor to default (0, 0) coordinates\n5373: \t\t\t// i.e. work rect for any monitor with same resolution and taskbar position must be equal"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5372,
        "text": "Move work rect for second, third etc. monitor to default (0, 0) coordinates",
        "context_before": "5370: \n5371: \t\t\t// http://blogs.msdn.com/b/llobo/archive/2006/08/01/maximizing-window-_2800_with-windowstyle_3d00_none_2900_-considering-taskbar.aspx",
        "context_after": "5373: \t\t\t// i.e. work rect for any monitor with same resolution and taskbar position must be equal\n5374: \t\t\trcRect.MoveToX(mi.rcWork.left - mi.rcMonitor.left);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5373,
        "text": "i.e. work rect for any monitor with same resolution and taskbar position must be equal",
        "context_before": "5371: \t\t\t// http://blogs.msdn.com/b/llobo/archive/2006/08/01/maximizing-window-_2800_with-windowstyle_3d00_none_2900_-considering-taskbar.aspx\n5372: \t\t\t// Move work rect for second, third etc. monitor to default (0, 0) coordinates",
        "context_after": "5374: \t\t\trcRect.MoveToX(mi.rcWork.left - mi.rcMonitor.left);\n5375: \t\t\trcRect.MoveToY(mi.rcWork.top - mi.rcMonitor.top);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5384,
        "text": "Add maximize border",
        "context_before": "5382: \t\t}\n5383: ",
        "context_after": "5385: \t\trcRect.left -= skinDraw.GetMaximizeBorder().left;\n5386: \t\trcRect.top -= skinDraw.GetMaximizeBorder().top;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5390,
        "text": "Adjust window size if alpha window is present",
        "context_before": "5388: \t\trcRect.bottom += skinDraw.GetMaximizeBorder().bottom;\n5389: ",
        "context_after": "5391: \t\tif (skinDraw.IsLayeredAlpha())\n5392: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5426,
        "text": "When the skin is changing skinList can be nullptr",
        "context_before": "5424: \t\t\tskinMini->SetVisible(false);\n5425: \t\t\ttrayIcon.Restore(thisWnd, true, settings.IsMaximized());",
        "context_after": "5427: \t\t\t\tskinList->ScrollToPlayNode();\n5428: \t\t\tLyricsThreadReload();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5524,
        "text": "Do not show if the library is scanning",
        "context_before": "5522: void WinylWnd::DialogLibrary()\n5523: {",
        "context_after": "5525: \t\treturn;\n5526: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5615,
        "text": "Ver: 2.6.0 In old versions the last slash was cutted off",
        "context_before": "5613: \t\t\t\tif (!path.empty())\n5614: \t\t\t\t{",
        "context_after": "5616: \t\t\t\t\tif (!path.empty() && path.back() != '\\\\')\n5617: \t\t\t\t\t\tpath.push_back('\\\\');"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5627,
        "text": "libraryFolders.push_back(L\"C:\\\\\");",
        "context_before": "5625: \t\treturn false;\n5626: ",
        "context_after": "5628: //\tlibraryFolders.push_back(L\"D:\\\\\");\n5629: \treturn true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5628,
        "text": "libraryFolders.push_back(L\"D:\\\\\");",
        "context_before": "5626: \n5627: //\tlibraryFolders.push_back(L\"C:\\\\\");",
        "context_after": "5629: \treturn true;\n5630: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5674,
        "text": "16 ms = 60 FPS = NO LAGS",
        "context_before": "5672: \tHANDLE timerHandle = ::CreateWaitableTimerW(NULL, FALSE, NULL);\n5673: \tLARGE_INTEGER dueTime = {};",
        "context_after": "5675: \n5676: \t//LARGE_INTEGER freq; QueryPerformanceFrequency(&freq);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5676,
        "text": "LARGE_INTEGER freq; QueryPerformanceFrequency(&freq);",
        "context_before": "5674: \t::SetWaitableTimer(timerHandle, &dueTime, 16, NULL, NULL, FALSE); // 16 ms = 60 FPS = NO LAGS\n5675: ",
        "context_after": "5677: \t//LARGE_INTEGER counter1; QueryPerformanceCounter(&counter1);\n5678: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5677,
        "text": "LARGE_INTEGER counter1; QueryPerformanceCounter(&counter1);",
        "context_before": "5675: \n5676: \t//LARGE_INTEGER freq; QueryPerformanceFrequency(&freq);",
        "context_after": "5678: \n5679: \twhile (!isTimerSmooth)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5690,
        "text": "Previously I was trying to use WaitForSingleObject on Event and Sleep here,",
        "context_before": "5688: \t\tif (IsWnd()) ::PostMessageW(Wnd(), UWM_TIMERTHREAD, 0, 0);\n5689: ",
        "context_after": "5691: \t\t// but these functions are very inaccurate with small interval, for example on Win10 under VirtualBox:\n5692: \t\t// With WaitForSingleObject on Event and 16ms interval real interval was ~32ms, but with 15ms real interval was ~15ms."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5691,
        "text": "but these functions are very inaccurate with small interval, for example on Win10 under VirtualBox:",
        "context_before": "5689: \n5690: \t\t// Previously I was trying to use WaitForSingleObject on Event and Sleep here,",
        "context_after": "5692: \t\t// With WaitForSingleObject on Event and 16ms interval real interval was ~32ms, but with 15ms real interval was ~15ms.\n5693: \t\t// With Sleep real interval was always ~32ms, maybe it is just under VirtualBox, but I am not sure."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5692,
        "text": "With WaitForSingleObject on Event and 16ms interval real interval was ~32ms, but with 15ms real interval was ~15ms.",
        "context_before": "5690: \t\t// Previously I was trying to use WaitForSingleObject on Event and Sleep here,\n5691: \t\t// but these functions are very inaccurate with small interval, for example on Win10 under VirtualBox:",
        "context_after": "5693: \t\t// With Sleep real interval was always ~32ms, maybe it is just under VirtualBox, but I am not sure.\n5694: \t\t// So use much better waitable timer here, it is more accurate and can wait for difference of intervals between waits."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5694,
        "text": "So use much better waitable timer here, it is more accurate and can wait for difference of intervals between waits.",
        "context_before": "5692: \t\t// With WaitForSingleObject on Event and 16ms interval real interval was ~32ms, but with 15ms real interval was ~15ms.\n5693: \t\t// With Sleep real interval was always ~32ms, maybe it is just under VirtualBox, but I am not sure.",
        "context_after": "5695: \t\t::WaitForSingleObject(timerHandle, INFINITE);\n5696: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5697,
        "text": "LARGE_INTEGER counter2; QueryPerformanceCounter(&counter2);",
        "context_before": "5695: \t\t::WaitForSingleObject(timerHandle, INFINITE);\n5696: ",
        "context_after": "5698: \t\t//double diffMs = (counter2.QuadPart - counter1.QuadPart) * 1000.0 / freq.QuadPart;\n5699: \t\t//QueryPerformanceCounter(&counter1);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5698,
        "text": "double diffMs = (counter2.QuadPart - counter1.QuadPart) * 1000.0 / freq.QuadPart;",
        "context_before": "5696: \n5697: \t\t//LARGE_INTEGER counter2; QueryPerformanceCounter(&counter2);",
        "context_after": "5699: \t\t//QueryPerformanceCounter(&counter1);\n5700: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5699,
        "text": "QueryPerformanceCounter(&counter1);",
        "context_before": "5697: \t\t//LARGE_INTEGER counter2; QueryPerformanceCounter(&counter2);\n5698: \t\t//double diffMs = (counter2.QuadPart - counter1.QuadPart) * 1000.0 / freq.QuadPart;",
        "context_after": "5700: \n5701: \t\t//AllocConsole();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5701,
        "text": "AllocConsole();",
        "context_before": "5699: \t\t//QueryPerformanceCounter(&counter1);\n5700: ",
        "context_after": "5702: \t\t//freopen(\"CONOUT$\", \"w\", stdout);\n5703: \t\t//printf(\"%f\\n\", diffMs);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5702,
        "text": "freopen(\"CONOUT$\", \"w\", stdout);",
        "context_before": "5700: \n5701: \t\t//AllocConsole();",
        "context_after": "5703: \t\t//printf(\"%f\\n\", diffMs);\n5704: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5703,
        "text": "printf(\"%f\\n\", diffMs);",
        "context_before": "5701: \t\t//AllocConsole();\n5702: \t\t//freopen(\"CONOUT$\", \"w\", stdout);",
        "context_after": "5704: \t}\n5705: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5706,
        "text": "::CancelWaitableTimer(timerHandle);",
        "context_before": "5704: \t}\n5705: ",
        "context_after": "5707: \t::CloseHandle(timerHandle);\n5708: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5710,
        "text": "According to this test the precission of SetWaitableTimer is always 1ms",
        "context_before": "5708: \n5709: \t// Test",
        "context_after": "5711: \t// even if set nanosecs with DueTime so there is no point to use DueTime instead of Period\n5712: \t//LARGE_INTEGER dueTime = {};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5711,
        "text": "even if set nanosecs with DueTime so there is no point to use DueTime instead of Period",
        "context_before": "5709: \t// Test\n5710: \t// According to this test the precission of SetWaitableTimer is always 1ms",
        "context_after": "5712: \t//LARGE_INTEGER dueTime = {};\n5713: \t//::GetSystemTimeAsFileTime((LPFILETIME)&dueTime);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5712,
        "text": "LARGE_INTEGER dueTime = {};",
        "context_before": "5710: \t// According to this test the precission of SetWaitableTimer is always 1ms\n5711: \t// even if set nanosecs with DueTime so there is no point to use DueTime instead of Period",
        "context_after": "5713: \t//::GetSystemTimeAsFileTime((LPFILETIME)&dueTime);\n5714: \t//dueTime.QuadPart += 166666; // 1000 / 60 = 16.6666"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5713,
        "text": "::GetSystemTimeAsFileTime((LPFILETIME)&dueTime);",
        "context_before": "5711: \t// even if set nanosecs with DueTime so there is no point to use DueTime instead of Period\n5712: \t//LARGE_INTEGER dueTime = {};",
        "context_after": "5714: \t//dueTime.QuadPart += 166666; // 1000 / 60 = 16.6666\n5715: \t//::SetWaitableTimer(timerHandle, &dueTime, 0, NULL, NULL, FALSE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5714,
        "text": "dueTime.QuadPart += 166666; // 1000 / 60 = 16.6666",
        "context_before": "5712: \t//LARGE_INTEGER dueTime = {};\n5713: \t//::GetSystemTimeAsFileTime((LPFILETIME)&dueTime);",
        "context_after": "5715: \t//::SetWaitableTimer(timerHandle, &dueTime, 0, NULL, NULL, FALSE);\n5716: \t//while (!isTimerSmooth)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5715,
        "text": "::SetWaitableTimer(timerHandle, &dueTime, 0, NULL, NULL, FALSE);",
        "context_before": "5713: \t//::GetSystemTimeAsFileTime((LPFILETIME)&dueTime);\n5714: \t//dueTime.QuadPart += 166666; // 1000 / 60 = 16.6666",
        "context_after": "5716: \t//while (!isTimerSmooth)\n5717: \t//{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5716,
        "text": "while (!isTimerSmooth)",
        "context_before": "5714: \t//dueTime.QuadPart += 166666; // 1000 / 60 = 16.6666\n5715: \t//::SetWaitableTimer(timerHandle, &dueTime, 0, NULL, NULL, FALSE);",
        "context_after": "5717: \t//{\n5718: \t//\t// Do stuff"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5718,
        "text": "// Do stuff",
        "context_before": "5716: \t//while (!isTimerSmooth)\n5717: \t//{",
        "context_after": "5719: \t//\t::WaitForSingleObject(timerHandle, INFINITE);\n5720: \t//\t::GetSystemTimeAsFileTime((LPFILETIME)&dueTime);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5719,
        "text": "::WaitForSingleObject(timerHandle, INFINITE);",
        "context_before": "5717: \t//{\n5718: \t//\t// Do stuff",
        "context_after": "5720: \t//\t::GetSystemTimeAsFileTime((LPFILETIME)&dueTime);\n5721: \t//\tdueTime.QuadPart += 166666; // 1000 / 60 = 16.6666"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5720,
        "text": "::GetSystemTimeAsFileTime((LPFILETIME)&dueTime);",
        "context_before": "5718: \t//\t// Do stuff\n5719: \t//\t::WaitForSingleObject(timerHandle, INFINITE);",
        "context_after": "5721: \t//\tdueTime.QuadPart += 166666; // 1000 / 60 = 16.6666\n5722: \t//\t::SetWaitableTimer(timerHandle, &dueTime, 0, NULL, NULL, FALSE);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5721,
        "text": "dueTime.QuadPart += 166666; // 1000 / 60 = 16.6666",
        "context_before": "5719: \t//\t::WaitForSingleObject(timerHandle, INFINITE);\n5720: \t//\t::GetSystemTimeAsFileTime((LPFILETIME)&dueTime);",
        "context_after": "5722: \t//\t::SetWaitableTimer(timerHandle, &dueTime, 0, NULL, NULL, FALSE);\n5723: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5722,
        "text": "::SetWaitableTimer(timerHandle, &dueTime, 0, NULL, NULL, FALSE);",
        "context_before": "5720: \t//\t::GetSystemTimeAsFileTime((LPFILETIME)&dueTime);\n5721: \t//\tdueTime.QuadPart += 166666; // 1000 / 60 = 16.6666",
        "context_after": "5723: \t//}\n5724: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 108,
        "text": "Class to move and resize the main window",
        "context_before": "106: \tstd::wstring* pointerOpenFiles = nullptr;\n107: ",
        "context_after": "109: \tstd::unique_ptr<SkinList> skinList; // Playlist window\n110: \tstd::unique_ptr<SkinTree> skinTree; // Library window"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 109,
        "text": "Playlist window",
        "context_before": "107: \n108: \tMoveResize moveResize; // Class to move and resize the main window",
        "context_after": "110: \tstd::unique_ptr<SkinTree> skinTree; // Library window\n111: \tstd::unique_ptr<SkinLyrics> skinLyrics; // Lyrics window"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 110,
        "text": "Library window",
        "context_before": "108: \tMoveResize moveResize; // Class to move and resize the main window\n109: \tstd::unique_ptr<SkinList> skinList; // Playlist window",
        "context_after": "111: \tstd::unique_ptr<SkinLyrics> skinLyrics; // Lyrics window\n112: \tstd::vector<std::unique_ptr<SkinVis>> visuals; // Visualizer windows"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 111,
        "text": "Lyrics window",
        "context_before": "109: \tstd::unique_ptr<SkinList> skinList; // Playlist window\n110: \tstd::unique_ptr<SkinTree> skinTree; // Library window",
        "context_after": "112: \tstd::vector<std::unique_ptr<SkinVis>> visuals; // Visualizer windows\n113: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 112,
        "text": "Visualizer windows",
        "context_before": "110: \tstd::unique_ptr<SkinTree> skinTree; // Library window\n111: \tstd::unique_ptr<SkinLyrics> skinLyrics; // Lyrics window",
        "context_after": "113: \n114: \tstd::unique_ptr<SkinMini> skinMini; // Mini player window"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 114,
        "text": "Mini player window",
        "context_before": "112: \tstd::vector<std::unique_ptr<SkinVis>> visuals; // Visualizer windows\n113: ",
        "context_after": "115: \tstd::unique_ptr<SkinPopup> skinPopup; // Popup window\n116: \tstd::unique_ptr<SkinAlpha> skinAlpha; // Skin Alpha window"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 115,
        "text": "Popup window",
        "context_before": "113: \n114: \tstd::unique_ptr<SkinMini> skinMini; // Mini player window",
        "context_after": "116: \tstd::unique_ptr<SkinAlpha> skinAlpha; // Skin Alpha window\n117: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 116,
        "text": "Skin Alpha window",
        "context_before": "114: \tstd::unique_ptr<SkinMini> skinMini; // Mini player window\n115: \tstd::unique_ptr<SkinPopup> skinPopup; // Popup window",
        "context_after": "117: \n118: \tstd::unique_ptr<SkinShadow> skinShadow; // Skin shadow windows"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 118,
        "text": "Skin shadow windows",
        "context_before": "116: \tstd::unique_ptr<SkinAlpha> skinAlpha; // Skin Alpha window\n117: ",
        "context_after": "119: \n120: \tbool isWindowIconic = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 127,
        "text": "Database library",
        "context_before": "125: \tstd::vector<std::wstring> libraryFolders;\n126: ",
        "context_after": "128: \tLibAudio libAudio; // Audio library\n129: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 128,
        "text": "Audio library",
        "context_before": "126: \n127: \tDBase dBase; // Database library",
        "context_after": "129: \n130: \tSkinDraw skinDraw; // Skin library"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 130,
        "text": "Skin library",
        "context_before": "128: \tLibAudio libAudio; // Audio library\n129: ",
        "context_after": "131: \tTrayIcon trayIcon; // Tray icon\n132: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 131,
        "text": "Tray icon",
        "context_before": "129: \n130: \tSkinDraw skinDraw; // Skin library",
        "context_after": "132: \n133: \tContextMenu contextMenu; // Menus"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 135,
        "text": "Language",
        "context_before": "133: \tContextMenu contextMenu; // Menus\n134: ",
        "context_after": "136: \tstd::wstring programPath; // Program path\n137: \tstd::wstring profilePath; // Profile path"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 136,
        "text": "Program path",
        "context_before": "134: \n135: \tLanguage lang; // Language",
        "context_after": "137: \tstd::wstring profilePath; // Profile path\n138: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 137,
        "text": "Profile path",
        "context_before": "135: \tLanguage lang; // Language\n136: \tstd::wstring programPath; // Program path",
        "context_after": "138: \n139: \tLastFM lastFM; // Last.FM scrobbling"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 139,
        "text": "Last.FM scrobbling",
        "context_before": "137: \tstd::wstring profilePath; // Profile path\n138: ",
        "context_after": "140: \tSettings settings; // Settings\n141: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 140,
        "text": "Settings",
        "context_before": "138: \n139: \tLastFM lastFM; // Last.FM scrobbling",
        "context_after": "141: \n142: \t//CSHOUTcast radio; // Shoutcast radio"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 142,
        "text": "CSHOUTcast radio; // Shoutcast radio",
        "context_before": "140: \tSettings settings; // Settings\n141: ",
        "context_after": "143: \tRadio radio; // Radio\n144: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 145,
        "text": "Global hotkeys",
        "context_before": "143: \tRadio radio; // Radio\n144: ",
        "context_after": "146: \n147: \tWin7TaskBar win7TaskBar;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 152,
        "text": "Play state",
        "context_before": "150: \tUINT wmTaskbarButtonCreated = 0;\n151: ",
        "context_after": "153: \tbool isMediaPause = false; // Pause state\n154: \tbool isMediaRadio = false; // Radio state"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 153,
        "text": "Pause state",
        "context_before": "151: \n152: \tbool isMediaPlay = false; // Play state",
        "context_after": "154: \tbool isMediaRadio = false; // Radio state\n155: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 154,
        "text": "Radio state",
        "context_before": "152: \tbool isMediaPlay = false; // Play state\n153: \tbool isMediaPause = false; // Pause state",
        "context_after": "155: \n156: \tbool isRepeatTrack = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 158,
        "text": "Library ID of the playing track",
        "context_before": "156: \tbool isRepeatTrack = false;\n157: ",
        "context_after": "159: \tlong long idMediaPlaylist = 0; // Playlist ID of the playing track\n160: \tstd::wstring radioString;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 159,
        "text": "Playlist ID of the playing track",
        "context_before": "157: \n158: \tlong long idMediaLibrary = 0; // Library ID of the playing track",
        "context_after": "160: \tstd::wstring radioString;\n161: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 162,
        "text": "Cover thread",
        "context_before": "160: \tstd::wstring radioString;\n161: ",
        "context_after": "163: \tThreading::Thread threadCover;\n164: \tThreading::Mutex mutexCover;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 178,
        "text": "Lyrics thread",
        "context_before": "176: \tvoid SetCoverNone();\n177: ",
        "context_after": "179: \tThreading::Thread threadLyrics;\n180: \tThreading::Mutex mutexLyrics;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 198,
        "text": "Search thread",
        "context_before": "196: \tvoid LyricsThreadReload();\n197: ",
        "context_after": "199: \tThreading::Thread threadSearch;\n200: \tstd::atomic<bool> isThreadSearch = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 206,
        "text": "Smooth scrolling thread",
        "context_before": "204: \tvoid SearchThreadDone();\n205: ",
        "context_after": "207: \tThreading::Thread threadTimerSmooth;\n208: \tThreading::Event eventTimerSmooth = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 215,
        "text": "Consts for timers",
        "context_before": "213: \tbool isTrackTooltip = false;\n214: ",
        "context_after": "216: \t{\n217: \t\tstatic const int PosID  = 100; // Timer ID for track bar"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 217,
        "text": "Timer ID for track bar",
        "context_before": "215: \tstruct TimerValue // Consts for timers\n216: \t{",
        "context_after": "218: \t\tstatic const int Pos    = 500; // Update period for track bar\n219: \t\tstatic const int VisID  = 200; // Timer ID for visualizer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 218,
        "text": "Update period for track bar",
        "context_before": "216: \t{\n217: \t\tstatic const int PosID  = 100; // Timer ID for track bar",
        "context_after": "219: \t\tstatic const int VisID  = 200; // Timer ID for visualizer\n220: \t\tstatic const int Vis    = 30;  // Update period for visualizer"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 219,
        "text": "Timer ID for visualizer",
        "context_before": "217: \t\tstatic const int PosID  = 100; // Timer ID for track bar\n218: \t\tstatic const int Pos    = 500; // Update period for track bar",
        "context_after": "220: \t\tstatic const int Vis    = 30;  // Update period for visualizer\n221: \t\tstatic const int TimeID = 300; // Timer ID for time line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 220,
        "text": "Update period for visualizer",
        "context_before": "218: \t\tstatic const int Pos    = 500; // Update period for track bar\n219: \t\tstatic const int VisID  = 200; // Timer ID for visualizer",
        "context_after": "221: \t\tstatic const int TimeID = 300; // Timer ID for time line\n222: \t\tstatic const int Time   = 950; // Update period for time line"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 221,
        "text": "Timer ID for time line",
        "context_before": "219: \t\tstatic const int VisID  = 200; // Timer ID for visualizer\n220: \t\tstatic const int Vis    = 30;  // Update period for visualizer",
        "context_after": "222: \t\tstatic const int Time   = 950; // Update period for time line\n223: \t\tstatic const int FadeID = 400; // Timer ID for animation"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 222,
        "text": "Update period for time line",
        "context_before": "220: \t\tstatic const int Vis    = 30;  // Update period for visualizer\n221: \t\tstatic const int TimeID = 300; // Timer ID for time line",
        "context_after": "223: \t\tstatic const int FadeID = 400; // Timer ID for animation\n224: \t\tstatic const int Track   = 200; // Update period for tracking tooltip"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 223,
        "text": "Timer ID for animation",
        "context_before": "221: \t\tstatic const int TimeID = 300; // Timer ID for time line\n222: \t\tstatic const int Time   = 950; // Update period for time line",
        "context_after": "224: \t\tstatic const int Track   = 200; // Update period for tracking tooltip\n225: \t\tstatic const int TrackID = 500; // Timer ID for tracking tooltip"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 224,
        "text": "Update period for tracking tooltip",
        "context_before": "222: \t\tstatic const int Time   = 950; // Update period for time line\n223: \t\tstatic const int FadeID = 400; // Timer ID for animation",
        "context_after": "225: \t\tstatic const int TrackID = 500; // Timer ID for tracking tooltip\n226: \t};"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 225,
        "text": "Timer ID for tracking tooltip",
        "context_before": "223: \t\tstatic const int FadeID = 400; // Timer ID for animation\n224: \t\tstatic const int Track   = 200; // Update period for tracking tooltip",
        "context_after": "226: \t};\n227: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\XmlFile.h",
        "line": 71,
        "text": "add a custom declaration node",
        "context_before": "69: \tinline bool SaveFile(const std::wstring& file)\n70: \t{",
        "context_after": "72: \t\tpugi::xml_node decl = doc.prepend_child(pugi::node_declaration);\n73: \t\tdecl.append_attribute(\"version\") = \"1.0\";"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\XmlNode.h",
        "line": 33,
        "text": "inline bool IsEmpty()",
        "context_before": "31: public:\n32: \tinline explicit operator bool() {return (node ? true : false);}",
        "context_after": "34: //\t{\n35: //\t\treturn node.empty();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\XmlNode.h",
        "line": 35,
        "text": "return node.empty();",
        "context_before": "33: //\tinline bool IsEmpty()\n34: //\t{",
        "context_after": "36: //\t}\n37: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\XmlNode.h",
        "line": 238,
        "text": "//////////////",
        "context_before": "236: \t}\n237: ",
        "context_after": "239: \n240: \tinline XmlNode FirstChildNoCase(const char* child)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 33,
        "text": "http://en.wikipedia.org/wiki/Zip_(file_format)#Structure",
        "context_before": "31: bool ZipFile::OpenFile(const std::wstring& file)\n32: {",
        "context_after": "34: \t// http://www.pkware.com/documents/casestudies/APPNOTE.TXT\n35: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 49,
        "text": "End of central directory record",
        "context_before": "47: \tzipStream.seekg(-22, std::ios::end);\n48: ",
        "context_after": "50: \tchar headbuf[22];\n51: \tzipStream.read(headbuf, 22);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 59,
        "text": "Size of central directory",
        "context_before": "57: \t}\n58: ",
        "context_after": "60: \tunsigned int diroffset = 0; // Offset to start of central directory\n61: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 60,
        "text": "Offset to start of central directory",
        "context_before": "58: \n59: \tunsigned int dirsize = 0; // Size of central directory",
        "context_after": "61: \n62: \tmemcpy(&dirsize, headbuf + 12, 4);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 65,
        "text": "Central directory",
        "context_before": "63: \tmemcpy(&diroffset, headbuf + 16, 4);\n64: ",
        "context_after": "66: \tzipStream.seekg(diroffset, std::ios::beg);\n67: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 79,
        "text": "To test the integrity of the archive",
        "context_before": "77: \t}\n78: ",
        "context_after": "80: \n81: \tfor (unsigned int cursor = 0; cursor < dirsize;)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 83,
        "text": "Compression method",
        "context_before": "81: \tfor (unsigned int cursor = 0; cursor < dirsize;)\n82: \t{",
        "context_after": "84: \t\tunsigned int zipfilesize = 0; // Uncompressed size\n85: \t\tunsigned int zipfileoffset = 0; // Relative offset of local file header"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 84,
        "text": "Uncompressed size",
        "context_before": "82: \t{\n83: \t\tunsigned int compmethod = 0; // Compression method",
        "context_after": "85: \t\tunsigned int zipfileoffset = 0; // Relative offset of local file header\n86: \t\tunsigned int lengthfilename = 0; // File name length"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 85,
        "text": "Relative offset of local file header",
        "context_before": "83: \t\tunsigned int compmethod = 0; // Compression method\n84: \t\tunsigned int zipfilesize = 0; // Uncompressed size",
        "context_after": "86: \t\tunsigned int lengthfilename = 0; // File name length\n87: \t\tunsigned int lengthextrafield = 0; // Extra field length"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 86,
        "text": "File name length",
        "context_before": "84: \t\tunsigned int zipfilesize = 0; // Uncompressed size\n85: \t\tunsigned int zipfileoffset = 0; // Relative offset of local file header",
        "context_after": "87: \t\tunsigned int lengthextrafield = 0; // Extra field length\n88: \t\tunsigned int lengthcomment = 0; // File comment length"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 87,
        "text": "Extra field length",
        "context_before": "85: \t\tunsigned int zipfileoffset = 0; // Relative offset of local file header\n86: \t\tunsigned int lengthfilename = 0; // File name length",
        "context_after": "88: \t\tunsigned int lengthcomment = 0; // File comment length\n89: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 88,
        "text": "File comment length",
        "context_before": "86: \t\tunsigned int lengthfilename = 0; // File name length\n87: \t\tunsigned int lengthextrafield = 0; // Extra field length",
        "context_after": "89: \n90: \t\tcursor += 10;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 110,
        "text": "Only no compression && no directories",
        "context_before": "108: \t\tcursor += lengthfilename + lengthextrafield + lengthcomment;\n109: ",
        "context_after": "111: \t\t{\n112: \t\t\tMAP_FILES frame;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 146,
        "text": "http://stackoverflow.com/questions/2256160/how-bad-is-code-using-stdbasic-stringt-as-a-contiguous-buffer",
        "context_before": "144: bool ZipFile::UnzipToBuffer(const std::wstring& file)\n145: {",
        "context_after": "147: \tstd::string fileUTF8;\n148: \tint len = WideCharToMultiByte(CP_UTF8, 0, file.c_str(), (int)file.size(), NULL, 0, NULL, NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 200,
        "text": "if the path ends with '\\\\' then add a content of the path to a zip file",
        "context_before": "198: bool ZipFile::ZipPathToFile(const std::wstring& file, const std::wstring& path, int level)\n199: {",
        "context_after": "201: \t// if the path does not end with '\\\\' then add a folder/file\n202: \t// We always use first option so I added assert for this"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 201,
        "text": "if the path does not end with '\\\\' then add a folder/file",
        "context_before": "199: {\n200: \t// if the path ends with '\\\\' then add a content of the path to a zip file",
        "context_after": "202: \t// We always use first option so I added assert for this\n203: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 202,
        "text": "We always use first option so I added assert for this",
        "context_before": "200: \t// if the path ends with '\\\\' then add a content of the path to a zip file\n201: \t// if the path does not end with '\\\\' then add a folder/file",
        "context_after": "203: \n204: \tassert(!path.empty() && path.back() == '\\\\');"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 252,
        "text": "Skip dots",
        "context_before": "250: \tdo\n251: \t{",
        "context_after": "253: \t\tif (fd->dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)\n254: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 260,
        "text": "Make paths for a file and the file in the zip archive",
        "context_before": "258: \t\t}\n259: ",
        "context_after": "261: \t\tstd::wstring filePath = folderPath;\n262: \t\tif (filePath.back() == '\\\\')"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 266,
        "text": "If it's a folder then the paths must end with a slash",
        "context_before": "264: \t\tstd::wstring fileZip = folderZip + fd->cFileName;\n265: ",
        "context_after": "267: \t\tif (fd->dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)\n268: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 273,
        "text": "Use UTF8 encoding for file names in the zip archive",
        "context_before": "271: \t\t}\n272: ",
        "context_after": "274: \t\tstd::string fileZipUTF8;\n275: \t\tint len = WideCharToMultiByte(CP_UTF8, 0, fileZip.c_str(), (int)fileZip.size(), NULL, 0, NULL, NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 282,
        "text": "Fill file attributes",
        "context_before": "280: \t\t}\n281: ",
        "context_after": "283: \t\tzip_fileinfo zi = {};\n284: \t\tzi.external_fa = fd->dwFileAttributes;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 289,
        "text": "Add folder",
        "context_before": "287: \t\t::FileTimeToDosDateTime(&ftLocal, ((LPWORD)&zi.dosDate) + 1 , ((LPWORD)&zi.dosDate) + 0);\n288: ",
        "context_after": "290: \t\t{\n291: \t\t\t// Check below about the options. And as a reminder, the folder must be added without compression"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 291,
        "text": "Check below about the options. And as a reminder, the folder must be added without compression",
        "context_before": "289: \t\tif (fd->dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) // Add folder\n290: \t\t{",
        "context_after": "292: \t\t\tzipOpenNewFileInZip4_64(zfile, fileZipUTF8.c_str(), &zi, NULL, 0, NULL, 0, NULL, 0, 0, 0,\n293: \t\t\t\t -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY, NULL, 0, 20, 0x0800, 0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 296,
        "text": "Recursively pack all subfolders",
        "context_before": "294: \t\t\tzipCloseFileInZip(zfile);\n295: ",
        "context_after": "297: \t\t\tZipPathRecur(zfile, filePath, fileZip, level);\n298: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 299,
        "text": "Add file",
        "context_before": "297: \t\t\tZipPathRecur(zfile, filePath, fileZip, level);\n298: \t\t}",
        "context_after": "300: \t\t{\n301: \t\t\t// 0x0800 this is 11 bit (1 << 11) which is responsible for UTF-8 encoding for file names"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 303,
        "text": "(fd->nFileSizeHigh ? 1 : 0) - if the file is too big then we use Zip64",
        "context_before": "301: \t\t\t// 0x0800 this is 11 bit (1 << 11) which is responsible for UTF-8 encoding for file names\n302: \t\t\t// 20 this is the version 2.0 (used by default)",
        "context_after": "304: \t\t\tif (zipOpenNewFileInZip4_64(zfile, fileZipUTF8.c_str(), &zi, NULL, 0, NULL, 0, NULL,\n305: \t\t\t\tlevel ? Z_DEFLATED : 0, level, 0, //Z_DEFLATED, 5, 0,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 305,
        "text": "Z_DEFLATED, 5, 0,",
        "context_before": "303: \t\t\t// (fd->nFileSizeHigh ? 1 : 0) - if the file is too big then we use Zip64\n304: \t\t\tif (zipOpenNewFileInZip4_64(zfile, fileZipUTF8.c_str(), &zi, NULL, 0, NULL, 0, NULL,",
        "context_after": "306: \t\t\t\t-MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY, NULL, 0, 20, 0x0800, fd->nFileSizeHigh ? 1 : 0) == ZIP_OK)\n307: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 311,
        "text": "4096 * 4;",
        "context_before": "309: \t\t\t\tif (fileHandle)\n310: \t\t\t\t{",
        "context_after": "312: \t\t\t\t\tDWORD readsize = 0;\n313: \t\t\t\t\t//char* buf = new char[bufsize];"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 313,
        "text": "char* buf = new char[bufsize];",
        "context_before": "311: \t\t\t\t\tconst DWORD bufsize = 4096;//4096 * 4;\n312: \t\t\t\t\tDWORD readsize = 0;",
        "context_after": "314: \t\t\t\t\tchar buf[bufsize];\n315: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 325,
        "text": "delete[] buf;",
        "context_before": "323: \t\t\t\t\t::CloseHandle(fileHandle);\n324: ",
        "context_after": "326: \t\t\t\t}\n327: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 348,
        "text": "if bit 11 then UTF8",
        "context_before": "346: \n347: \t\tstd::wstring filePath;",
        "context_after": "349: \t\tint len = MultiByteToWideChar(codePage, 0, filename, -1, NULL, 0) - 1;\n350: \t\tif (len > 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 358,
        "text": "Folder",
        "context_before": "356: \t\tstd::replace(filePath.begin(), filePath.end(), '/', '\\\\');\n357: ",
        "context_after": "359: \t\t{\n360: \t\t\t// The folder ends with slash, remove it"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 360,
        "text": "The folder ends with slash, remove it",
        "context_before": "358: \t\tif (fi.external_fa & FILE_ATTRIBUTE_DIRECTORY) // Folder\n359: \t\t{",
        "context_after": "361: \t\t\tif (!filePath.empty() && filePath.back() == '\\\\')\n362: \t\t\t\tfilePath.pop_back();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 366,
        "text": "::CreateDirectoryW(filePath.c_str(), NULL);",
        "context_before": "364: \t\t\tfilePath = folderPath + filePath;\n365: ",
        "context_after": "367: \t\t\tif (::GetFileAttributesW(filePath.c_str()) == INVALID_FILE_ATTRIBUTES)\n368: \t\t\t\tCreateFullPath(filePath, &fi);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 376,
        "text": "Get a path from the file",
        "context_before": "374: \t\t\t\tfilePath = folderPath + filePath;\n375: ",
        "context_after": "377: \t\t\t\tstd::wstring path;\n378: \t\t\t\tstd::size_t find = filePath.rfind('\\\\');"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 382,
        "text": "Create the path if not exists",
        "context_before": "380: \t\t\t\t\tpath = filePath.substr(0, find);\n381: ",
        "context_after": "383: \t\t\t\tif (::GetFileAttributesW(path.c_str()) == INVALID_FILE_ATTRIBUTES)\n384: \t\t\t\t\tCreateFullPath(path, &fi);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 389,
        "text": "4096 * 4;",
        "context_before": "387: \t\t\t\tif (fileHandle)\n388: \t\t\t\t{",
        "context_after": "390: \t\t\t\t\tDWORD readsize = 0;\n391: \t\t\t\t\tDWORD writtensize = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 392,
        "text": "char* buf = new char[bufsize];",
        "context_before": "390: \t\t\t\t\tDWORD readsize = 0;\n391: \t\t\t\t\tDWORD writtensize = 0;",
        "context_after": "393: \t\t\t\t\tchar buf[bufsize];\n394: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 407,
        "text": "delete[] buf;",
        "context_before": "405: \t\t\t\t\t::CloseHandle(fileHandle);\n406: ",
        "context_after": "408: \t\t\t\t}\n409: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 436,
        "text": "if (::CreateDirectoryW(path.c_str(), NULL))",
        "context_before": "434: bool ZipFile::CreateFullPath(const std::wstring& path, unz_file_info64* fi)\n435: {",
        "context_after": "437: \t//\treturn true;\n438: \tif (CreateDirectoryWithFileInfo(path.c_str(), fi))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 437,
        "text": "return true;",
        "context_before": "435: {\n436: \t//if (::CreateDirectoryW(path.c_str(), NULL))",
        "context_after": "438: \tif (CreateDirectoryWithFileInfo(path.c_str(), fi))\n439: \t\treturn true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 441,
        "text": "Skip drive",
        "context_before": "439: \t\treturn true;\n440: ",
        "context_after": "442: \tif (path.size() > 2 && path[2] == '?') // Start with \"\\\\?\\\" = long unicode path\n443: \t\tstart += 4; // Skip \"\\\\?\\\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 442,
        "text": "Start with \"\\\\?\\\" = long unicode path",
        "context_before": "440: \n441: \tsize_t start = 3; // Skip drive",
        "context_after": "443: \t\tstart += 4; // Skip \"\\\\?\\\"\n444: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 443,
        "text": "Skip \"\\\\?\\\"",
        "context_before": "441: \tsize_t start = 3; // Skip drive\n442: \tif (path.size() > 2 && path[2] == '?') // Start with \"\\\\?\\\" = long unicode path",
        "context_after": "444: \n445: \tif (path.size() < start)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 452,
        "text": "result = ::CreateDirectoryW(path.substr(0, start).c_str(), NULL) == TRUE;",
        "context_before": "450: \twhile ((start = path.find('\\\\', start)) != std::string::npos)\n451: \t{",
        "context_after": "453: \t\tresult = CreateDirectoryWithFileInfo(path.substr(0, start).c_str(), fi);\n454: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 459,
        "text": "result = ::CreateDirectoryW(path.c_str(), NULL) == TRUE;",
        "context_before": "457: \n458: \tif (path.back() != '\\\\')",
        "context_after": "460: \t\tresult = CreateDirectoryWithFileInfo(path.c_str(), fi);\n461: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 485,
        "text": "///////////////////////////////////////////////////////////////////////////////////////",
        "context_before": "483: }\n484: ",
        "context_after": "486: \n487: voidpf ZipFile::fopen64_file_func (voidpf opaque, const void* filename, int mode)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 501,
        "text": "file = _wfopen((const wchar_t*)filename, mode_fopen);",
        "context_before": "499: \n500:     if ((filename!=NULL) && (mode_fopen != NULL))",
        "context_after": "502: \t\t_wfopen_s(&file, (const wchar_t*)filename, mode_fopen);\n503:     return file;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 579,
        "text": "PACKSKIN",
        "context_before": "577: }\n578: ",
        "context_after": ""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.h",
        "line": 20,
        "text": "zlib is only used by PackSkin utility",
        "context_before": "18: #pragma once\n19: ",
        "context_after": "21: #define ZLIB_WINAPI\n22: #include \"zlib/zip.h\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.h",
        "line": 24,
        "text": "PACKSKIN",
        "context_before": "22: #include \"zlib/zip.h\"\n23: #include \"zlib/unzip.h\"",
        "context_after": "25: \n26: #include <string>"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.h",
        "line": 73,
        "text": "There is iowin32.c for WinAPI IO in minizip (part of zlib)",
        "context_before": "71: \tstatic bool CreateDirectoryWithFileInfo(const std::wstring& path, unz_file_info64* fi);\n72: ",
        "context_after": "74: \t// but it doesn't use buffering for read/write and it's very slow (sometimes it reads/writes by one byte)\n75: \t// so use functions from ioapi.c with some modifications for file names in unicode."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.h",
        "line": 74,
        "text": "but it doesn't use buffering for read/write and it's very slow (sometimes it reads/writes by one byte)",
        "context_before": "72: \n73: \t// There is iowin32.c for WinAPI IO in minizip (part of zlib)",
        "context_after": "75: \t// so use functions from ioapi.c with some modifications for file names in unicode.\n76: \t// ---"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.h",
        "line": 75,
        "text": "so use functions from ioapi.c with some modifications for file names in unicode.",
        "context_before": "73: \t// There is iowin32.c for WinAPI IO in minizip (part of zlib)\n74: \t// but it doesn't use buffering for read/write and it's very slow (sometimes it reads/writes by one byte)",
        "context_after": "76: \t// ---\n77: \t// Advanced version of minizip: https://github.com/nmoinvaz/minizip"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.h",
        "line": 77,
        "text": "Advanced version of minizip: https://github.com/nmoinvaz/minizip",
        "context_before": "75: \t// so use functions from ioapi.c with some modifications for file names in unicode.\n76: \t// ---",
        "context_after": "78: \n79: \tstatic voidpf fopen64_file_func (voidpf opaque, const void* filename, int mode);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.h",
        "line": 87,
        "text": "PACKSKIN",
        "context_before": "85: \tstatic int ferror_file_func (voidpf opaque, voidpf stream);\n86: \tstatic void fill_fopen64_filefunc (zlib_filefunc64_def*  pzlib_filefunc_def);",
        "context_after": "88: };"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\PackSkin.cpp",
        "line": 18,
        "text": "PackSkin.cpp : Defines the entry point for the console application.",
        "context_before": "16: */\n17: ",
        "context_after": "19: //\n20: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\PackSkin.cpp",
        "line": 32,
        "text": "Forward declaration",
        "context_before": "30: #endif\n31: ",
        "context_after": "33: bool PackSkin(const std::wstring& folder);\n34: bool UnpackSkin(const std::wstring& file);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\PackSkin.cpp",
        "line": 70,
        "text": "puts(\"Do not run this program from program files folder.\");",
        "context_before": "68: \telse\n69: \t{",
        "context_after": "71: \t\t//puts(\"\\n\");\n72: \t\tputs(\"Pack skin:    PackSkin.exe <skin folder>\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\PackSkin.cpp",
        "line": 71,
        "text": "puts(\"\\n\");",
        "context_before": "69: \t{\n70: \t\t//puts(\"Do not run this program from program files folder.\");",
        "context_after": "72: \t\tputs(\"Pack skin:    PackSkin.exe <skin folder>\");\n73: \t\tputs(\"Unpack skin:  PackSkin.exe -u <skin file>\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\PackSkin.cpp",
        "line": 74,
        "text": "puts(\"\\n\");",
        "context_before": "72: \t\tputs(\"Pack skin:    PackSkin.exe <skin folder>\");\n73: \t\tputs(\"Unpack skin:  PackSkin.exe -u <skin file>\");",
        "context_after": "75: \t\tsystem(\"pause\");\n76: \t\t//_getch();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\PackSkin.cpp",
        "line": 76,
        "text": "_getch();",
        "context_before": "74: \t\t//puts(\"\\n\");\n75: \t\tsystem(\"pause\");",
        "context_after": "77: \t}\n78: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\stdafx.cpp",
        "line": 18,
        "text": "stdafx.cpp : source file that includes just the standard includes",
        "context_before": "16: */\n17: ",
        "context_after": "19: // PackSkin.pch will be the pre-compiled header\n20: // stdafx.obj will contain the pre-compiled type information"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\stdafx.cpp",
        "line": 19,
        "text": "PackSkin.pch will be the pre-compiled header",
        "context_before": "17: \n18: // stdafx.cpp : source file that includes just the standard includes",
        "context_after": "20: // stdafx.obj will contain the pre-compiled type information\n21: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\stdafx.cpp",
        "line": 20,
        "text": "stdafx.obj will contain the pre-compiled type information",
        "context_before": "18: // stdafx.cpp : source file that includes just the standard includes\n19: // PackSkin.pch will be the pre-compiled header",
        "context_after": "21: \n22: #include \"stdafx.h\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\stdafx.cpp",
        "line": 24,
        "text": "TODO: reference any additional headers you need in STDAFX.H",
        "context_before": "22: #include \"stdafx.h\"\n23: ",
        "context_after": "25: // and not in this file"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\stdafx.cpp",
        "line": 25,
        "text": "and not in this file",
        "context_before": "23: \n24: // TODO: reference any additional headers you need in STDAFX.H",
        "context_after": ""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\stdafx.h",
        "line": 18,
        "text": "stdafx.h : include file for standard system include files,",
        "context_before": "16: */\n17: ",
        "context_after": "19: // or project specific include files that are used frequently, but\n20: // are changed infrequently"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\stdafx.h",
        "line": 19,
        "text": "or project specific include files that are used frequently, but",
        "context_before": "17: \n18: // stdafx.h : include file for standard system include files,",
        "context_after": "20: // are changed infrequently\n21: //"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\stdafx.h",
        "line": 20,
        "text": "are changed infrequently",
        "context_before": "18: // stdafx.h : include file for standard system include files,\n19: // or project specific include files that are used frequently, but",
        "context_after": "21: //\n22: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\stdafx.h",
        "line": 35,
        "text": "TODO: reference additional headers your program requires here",
        "context_before": "33: \n34: ",
        "context_after": ""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\targetver.h",
        "line": 3,
        "text": "Including SDKDDKVer.h defines the highest available Windows platform.",
        "context_before": "1: #pragma once\n2: ",
        "context_after": "4: \n5: // If you wish to build your application for a previous Windows platform, include WinSDKVer.h and"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\targetver.h",
        "line": 5,
        "text": "If you wish to build your application for a previous Windows platform, include WinSDKVer.h and",
        "context_before": "3: // Including SDKDDKVer.h defines the highest available Windows platform.\n4: ",
        "context_after": "6: // set the _WIN32_WINNT macro to the platform you wish to support before including SDKDDKVer.h.\n7: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\PackSkin\\PackSkin\\targetver.h",
        "line": 6,
        "text": "set the _WIN32_WINNT macro to the platform you wish to support before including SDKDDKVer.h.",
        "context_before": "4: \n5: // If you wish to build your application for a previous Windows platform, include WinSDKVer.h and",
        "context_after": "7: \n8: #include <SDKDDKVer.h>"
      }
    ],
    "uncertainty": [
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 254,
        "text": "// Maybe truncate? (if DELETE and EXCLUSIVE or WAL)",
        "context_before": "252: \t//// Can be changed back with\n253: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA journal_mode=DELETE;\");",
        "context_after": "255: \t//SQLRequest::Exec(dbLibrary, \"PRAGMA journal_size_limit=0;\");\n256: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3631,
        "text": "It's only BindTextRaw here now, maybe use for?",
        "context_before": "3629: \t\t\tif (isPlaylist)\n3630: \t\t\t{",
        "context_after": "3632: \t\t\t\tsqlInsert.BindTextRaw(4, sqlSelect.ColumnTextRaw(1));\n3633: \t\t\t\tsqlInsert.BindTextRaw(5, sqlSelect.ColumnTextRaw(2));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 638,
        "text": "If streamPreload == NULL then most probably it is URL, we will check it in SyncProcEndImpl",
        "context_before": "636: \t\tfilePreload = file;\n637: ",
        "context_after": "639: \t\tif (streamPreload == NULL)\n640: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 707,
        "text": "Maybe it is URL",
        "context_before": "705: \t\t\telse // File is not preloaded\n706: \t\t\t{",
        "context_after": "708: \t\t\t\tif (PathEx::IsURL(filePreload))\n709: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 717,
        "text": "Or maybe the file is not found then stop",
        "context_before": "715: \t\t\t\t}\n716: ",
        "context_after": "718: \t\t\t\tfilePreload.clear();\n719: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1358,
        "text": "Enable mirror for mono to make it stereo (I'm not sure that it's right way to do this)",
        "context_before": "1356: \n1357: \tBASS_ASIO_ChannelEnable(FALSE, asioChannel, &AsioProc, (void*)(DWORD_PTR)streamMixer); // enable 1st output channel...",
        "context_after": "1359: \t\tBASS_ASIO_ChannelEnableMirror(asioChannel + 1, FALSE, 0);\n1360: \telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MoveResize.cpp",
        "line": 115,
        "text": "SC_SIZE part is pure magic (I just don't remember where I found it maybe I just used Spy++ to get it)",
        "context_before": "113: \t// The following code uses some undocumented features\n114: \t// SC_MOVE part is used by many programs like: WMP, iTunes, .NET (DragMove) so it should be fine",
        "context_after": "116: \n117: \t// Some magic stuff"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 387,
        "text": "Check tags, maybe it's moved file",
        "context_before": "385: \t\tlong long idTags = 0;\n386: ",
        "context_after": "388: \t\t{\n389: \t\t\tdBase->UpdateTagsFileMove(idTags, &dataSongInfo);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 537,
        "text": "Check tags, maybe it's moved file",
        "context_before": "535: \t\t\tlong long idTags = 0;\n536: ",
        "context_after": "538: \t\t\t{\n539: \t\t\t\tdBase->UpdateTagsFileMove(idTags, &dataSongInfo);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.h",
        "line": 105,
        "text": "12 maybe?",
        "context_before": "103: \tint nodeHeight = 0;\n104: \tint headHeight = 0;",
        "context_after": "106: \tunsigned backColor = 0x00FFFFFF;\n107: \tint countNodes = 0;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 5693,
        "text": "With Sleep real interval was always ~32ms, maybe it is just under VirtualBox, but I am not sure.",
        "context_before": "5691: \t\t// but these functions are very inaccurate with small interval, for example on Win10 under VirtualBox:\n5692: \t\t// With WaitForSingleObject on Event and 16ms interval real interval was ~32ms, but with 15ms real interval was ~15ms.",
        "context_after": "5694: \t\t// So use much better waitable timer here, it is more accurate and can wait for difference of intervals between waits.\n5695: \t\t::WaitForSingleObject(timerHandle, INFINITE);"
      }
    ],
    "caution": [
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 263,
        "text": "Note: Instead of this it would be better to use sqlite3_compileoption_used to check both",
        "context_before": "261: \t// SQLite must be compiled with SQLITE_DEFAULT_FOREIGN_KEYS=1, use these asserts to check this,\n262: \t// but to be sure we still use PRAGMA foreign_keys = ON.",
        "context_after": "264: \t// SQLITE_DEFAULT_FOREIGN_KEYS and SQLITE_USE_URI, but it seems the function does not work for these options.\n265: \t// See also constructor of DBase for comment about SQLITE_USE_URI."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1233,
        "text": "Note: We do not change any ratings.",
        "context_before": "1231: \t// Update tags because a file was modified\n1232: \t// We skip \"file\" and \"added\" because the file was just updated.",
        "context_after": "1234: \n1235: \tSQLRequest sqlUpdate(dbLibrary,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 1433,
        "text": "Note: We do not change any ratings.",
        "context_before": "1431: {\n1432: \t// Update tags because a file was moved",
        "context_after": "1434: \n1435: \tSQLRequest sqlUpdate(dbLibrary,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4236,
        "text": "Note. I don't know why but in SQLite \"IS\" and \"IS NOT\" sometimes works much faster than \"=\" and \"<>\".",
        "context_before": "4234: \t}\n4235: ",
        "context_after": "4237: \t// For example our first condition (artist=? OR albumartist=?) much slower than (artist IS ? OR albumartist IS ?)\n4238: \t// So we use \"IS\" instead of \"=\". Also we use it in all our conditions because we need a comparison with NULL."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5255,
        "text": "Note: We do not change any ratings.",
        "context_before": "5253: \t// Update tags through tags editor (through properties dialog)\n5254: \t// We skip \"file\" and \"added\" because the file was just updated.",
        "context_after": "5256: \n5257: \tconst char* update = nullptr;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 518,
        "text": "MessageBox(lang->GetLine(Lang::MESSAGE, 9) + CString('\\n') + lang->GetLine(Lang::MESSAGE, 10), lang->GetLine(Lang::MESSAGE, 1), MB_OK|MB_ICONWARNING);",
        "context_before": "516: \n517: \t\t//if (!libAudio->IsFloatSupport())",
        "context_after": "519: \t}\n520: \telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 235,
        "text": "F12 note https://msdn.microsoft.com/en-us/library/windows/desktop/ms646309(v=vs.85).aspx",
        "context_before": "233: \n234: \t// When press \"Delete\", \"Backspace\", \"F12\" or an undefined key remove the hotkey",
        "context_after": "236: \t// The F12 key is reserved for use by the debugger at all times, so it should not be registered as a hot key.\n237: \t// Even when you are not debugging an application, F12 is reserved in case a kernel-mode debugger or a just-in-time debugger is resident."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 33,
        "text": "every change should be as careful as possible or it can just break things.",
        "context_before": "31: \n32: // In short, this class is a mess. This class is a mix of BASS C api and C++",
        "context_after": "34: \n35: // BASS uses api similar to WinAPI and sometimes it's a bit hard to notice"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 786,
        "text": "Important!",
        "context_before": "784: \t\t\t// Use BASS_STREAM_AUTOFREE without sync.\n785: \t\t\tassert(!(BASS_ChannelFlags(streamMixer, 0, 0) & BASS_STREAM_DECODE));",
        "context_after": "787: \t\t\tverify(BASS_ChannelFlags(streamMixer, BASS_STREAM_AUTOFREE, BASS_STREAM_AUTOFREE) != -1); // Important!\n788: \t\t\t//BASS_ChannelSetSync(streamMixer, BASS_SYNC_MIXTIME|BASS_SYNC_SLIDE, 0, SyncFreeMixer, this);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 787,
        "text": "Important!",
        "context_before": "785: \t\t\tassert(!(BASS_ChannelFlags(streamMixer, 0, 0) & BASS_STREAM_DECODE));\n786: \t\t\tverify(BASS_Mixer_ChannelFlags(streamPlay, BASS_STREAM_AUTOFREE, BASS_STREAM_AUTOFREE) != -1); // Important!",
        "context_after": "788: \t\t\t//BASS_ChannelSetSync(streamMixer, BASS_SYNC_MIXTIME|BASS_SYNC_SLIDE, 0, SyncFreeMixer, this);\n789: \t\t\tBASS_ChannelSlideAttribute(streamMixer, BASS_ATTRIB_VOL, -1, FadeTime::Pos);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1648,
        "text": "Important!",
        "context_before": "1646: \tFreePreload();\n1647: ",
        "context_after": "1649: \n1650: \tPrepareOpen(true);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1735,
        "text": "Important!",
        "context_before": "1733: \t\t\t// Use BASS_STREAM_AUTOFREE without sync.\n1734: \t\t\tassert(!(BASS_ChannelFlags(streamMixer, 0, 0) & BASS_STREAM_DECODE));",
        "context_after": "1736: \t\t\tverify(BASS_ChannelFlags(streamMixer, BASS_STREAM_AUTOFREE, BASS_STREAM_AUTOFREE) != -1); // Important!\n1737: \t\t\t//BASS_ChannelSetSync(streamMixer, BASS_SYNC_SLIDE|BASS_SYNC_ONETIME, 0, SyncFreeMixer, this);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1736,
        "text": "Important!",
        "context_before": "1734: \t\t\tassert(!(BASS_ChannelFlags(streamMixer, 0, 0) & BASS_STREAM_DECODE));\n1735: \t\t\tverify(BASS_Mixer_ChannelFlags(streamPlay, BASS_STREAM_AUTOFREE, BASS_STREAM_AUTOFREE) != -1); // Important!",
        "context_after": "1737: \t\t\t//BASS_ChannelSetSync(streamMixer, BASS_SYNC_SLIDE|BASS_SYNC_ONETIME, 0, SyncFreeMixer, this);\n1738: \t\t\tBASS_ChannelSlideAttribute(streamMixer, BASS_ATTRIB_VOL, -1, FadeTime::Stop);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2046,
        "text": "Note: Success case logging removed to reduce noise",
        "context_before": "2044: \t\tEQ_DEBUG_LOGF(\"ERROR: EQ band %d (%.0f Hz, %.1f dB) failed with BASS error %d\", band, eq.fCenter, eq.fGain, error);\n2045: \t}",
        "context_after": "2047: }\n2048: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 2144,
        "text": "Note: Settings will be applied when SetEq/SetPreamp are called",
        "context_before": "2142: \t\t}\n2143: ",
        "context_after": "2145: \t}\n2146: \telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 356,
        "text": "It's just a note this check is needed here anyway.",
        "context_before": "354: \t// that is strange because before UpdateLayeredWindowIndirect\n355: \t// added to RedrawElementDefault everything works fine.",
        "context_after": "357: \tif (::IsIconic(wndOwner) || !::IsWindowVisible(wndOwner))\n358: \t\treturn;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 312,
        "text": "so we need to carefully control removing of nodes in Delete* functions below (I call them \"dead\" nodes there),",
        "context_before": "310: // They are critical because this class designed wrong from the start,\n311: // it uses raw pointers to nodes everywhere and there are so many pointer owners that it hard to control all this mess,",
        "context_after": "313: // or otherwise it cause random crashes with random errors like heap corruption, recursive destructor calls etc.\n314: // Need to redesign this class!"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1749,
        "text": "For smooth scrolling use two important variables smoothScrollNew and smoothScrollAcc.",
        "context_before": "1747: void SkinList::SmoothScroll(int scroll)\n1748: {",
        "context_after": "1750: \t// smoothScrollNew is a new scroll position that the scroll should reach.\n1751: \t// smoothScrollAcc is the scroll acceleration:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 51,
        "text": "Warning! Can invalidate unsafe nodes.",
        "context_before": "49: \tvoid SetRightString(ListNodeUnsafe node, SkinListElement::Type type, const std::wstring& label);\n50: ",
        "context_after": "52: \tvoid DeleteSelected(); // Warning! Can invalidate unsafe nodes.\n53: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 52,
        "text": "Warning! Can invalidate unsafe nodes.",
        "context_before": "50: \n51: \tvoid DeleteAllNode(); // Warning! Can invalidate unsafe nodes.",
        "context_after": "53: \n54: \tstd::vector<std::unique_ptr<SkinListElement>> skinTrack;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 138,
        "text": "Warning! Can invalidate unsafe nodes.",
        "context_before": "136: \tvoid ResetIndex(bool isNowPlaying = false);\n137: ",
        "context_after": "139: \tvoid NewNowPlaying();\n140: \tvoid DeleteAllNodePlay(bool isReturnToDefault); // Warning! Can invalidate unsafe nodes."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 140,
        "text": "Warning! Can invalidate unsafe nodes.",
        "context_before": "138: \tvoid DeleteNowPlaying(); // Warning! Can invalidate unsafe nodes.\n139: \tvoid NewNowPlaying();",
        "context_after": "141: \tvoid NowPlayingList();\n142: \tinline bool IsNowPlayingOpen() {return (rootNodePlay && (rootNodePlay == rootNode));}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 126,
        "text": "or otherwise it will cause undefined behaviour and the program just crash in the best case.",
        "context_before": "124: \t\t// If this assert was called then 1 of smart pointers still owns the node.\n125: \t\t// In case this error pop up in the release just remove all node's relationships (cause memory leak),",
        "context_after": "127: \t\tassert(node->refCount == 0); // Critical error\n128: \t\tif (node->refCount == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListNode.h",
        "line": 147,
        "text": "or otherwise it will cause undefined behaviour and the program just crash in the best case.",
        "context_before": "145: \t\t\t// If this assert was called then 1 of smart pointers still owns the node.\n146: \t\t\t// In case this error pop up in the release just remove all node relationships (cause memory leak),",
        "context_after": "148: \t\t\tassert(n->refCount == 0); // Critical error\n149: \t\t\tif (n->refCount == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.cpp",
        "line": 678,
        "text": "For smooth scrolling use two important variables smoothScrollNew and smoothScrollAcc.",
        "context_before": "676: void SkinLyrics::SmoothScroll(int scroll)\n677: {",
        "context_after": "679: \t// smoothScrollNew is a new scroll position that the scroll should reach.\n680: \t// smoothScrollAcc is the scroll acceleration:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1147,
        "text": "For smooth scrolling use two important variables smoothScrollNew and smoothScrollAcc.",
        "context_before": "1145: void SkinTree::SmoothScroll(int scroll)\n1146: {",
        "context_after": "1148: \t// smoothScrollNew is a new scroll position that the scroll should reach.\n1149: \t// smoothScrollAcc is the scroll acceleration:"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 110,
        "text": "or otherwise it will cause undefined behaviour and the program just crash in the best case.",
        "context_before": "108: \t\t// If this assert was called then 1 of smart pointers still owns the node.\n109: \t\t// In case this error pop up in the release just remove all node relationships (cause memory leak),",
        "context_after": "111: \t\tassert(node->refCount == 0); // Critical error\n112: \t\tif (node->refCount == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTreeNode.h",
        "line": 129,
        "text": "or otherwise it will cause undefined behaviour and the program just crash in the best case.",
        "context_before": "127: \t\t\t// If this assert was called then 1 of smart pointers still owns the node.\n128: \t\t\t// In case this error pop up in the release just remove all node's relationships (cause memory leak),",
        "context_after": "130: \t\t\tassert(n->refCount == 0); // Critical error\n131: \t\t\tif (n->refCount == 0)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 24,
        "text": "IMPORTANT! I describe here why WINVER = 0x0501 but _WIN32_WINNT = 0x0601. WINVER is set for WinXP, so size of structures will be for this system, otherwise strange things will happen. _WIN32_WINNT is set for Win7, so COM for this system will be defined and used. I do not know why WINVER is responsible for size of structures and _WIN32_WINNT for COM, but it is helpful for us. Here some info about these defines: http://blogs.msdn.com/b/oldnewthing/archive/2007/04/11/2079137.aspx it does not answer the question though. --- When drop WinXP support WINVER should be 0x0600 and will not forget to change compiler option SUBSYSTEM version to 6.00. --- Note: it is compiling under VS 2005 (without SP1) with including only header files from SDK Win 7 (this info is old, but I'll leave it for history).",
        "context_before": "22: #pragma once\n23: ",
        "context_after": "37: // Modify the following defines if you have to target a platform prior to the ones specified below.\n38: // Refer to MSDN for the latest info on corresponding values for different platforms."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 24,
        "text": "Important Note!",
        "context_before": "22: #include <cassert>\n23: ",
        "context_after": "25: // The following WINAPI functions: WideCharToMultiByte, MultiByteToWideChar, LCMapString, LCMapStringEx, FoldString\n26: // return number of characters in the translated string,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 614,
        "text": "assert(result.size() == wcslen(result.c_str())); // see Important Note",
        "context_before": "612: \t\t\t::FoldStringW(MAP_PRECOMPOSED, text.c_str(), (int)text.size(), &result[0], len);\n613: \t\t\t//len = ::NormalizeString(NormalizationC, text.c_str(), (int)text.size(), &result[0], len);",
        "context_after": "615: \t\t\t//result.resize(len);\n616: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 632,
        "text": "assert(result.size() == wcslen(result.c_str())); // see Important Note",
        "context_before": "630: \t\t\t::FoldStringW(MAP_COMPOSITE, text.c_str(), (int)text.size(), &result[0], len);\n631: \t\t\t//len = ::NormalizeString(NormalizationD, text.c_str(), (int)text.size(), &result[0], len);",
        "context_after": "633: \t\t\t//result.resize(len);\n634: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 650,
        "text": "assert(result.size() == wcslen(result.c_str())); // see Important Note",
        "context_before": "648: \t\t\t::FoldStringW(MAP_FOLDCZONE, text.c_str(), (int)text.size(), &result[0], len);\n649: \t\t\t//len = ::NormalizeString(NormalizationKC, text.c_str(), (int)text.size(), &result[0], len);",
        "context_after": "651: \t\t\t//result.resize(len);\n652: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 668,
        "text": "assert(result.size() == wcslen(result.c_str())); // see Important Note",
        "context_before": "666: \t\t\t::FoldStringW(MAP_FOLDCZONE|MAP_COMPOSITE, text.c_str(), -1, &result[0], len);\n667: \t\t\t//len = ::NormalizeString(NormalizationKD, text.c_str(), -1, &result[0], len);",
        "context_after": "669: \t\t\t//result.resize(len);\n670: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 164,
        "text": "::OleUninitialize(); // Important!",
        "context_before": "162: \t\t}\n163: ",
        "context_after": "165: \t\treturn;\n166: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4231,
        "text": "MessageBox::Show(thisWnd, lang.GetLine(Lang::MESSAGE, 1), lang.GetLine(Lang::MESSAGE, 7), MessageBox::IconWarning);",
        "context_before": "4229: //\t\t\t{\n4230: //\t\t\t\tEnableAll(false);",
        "context_after": "4232: \n4233: //\t\t\t\tEnableAll(true);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4731,
        "text": "Will be a crash without this line if a track is playing",
        "context_before": "4729: \tif (isPlay)\n4730: \t{",
        "context_after": "4732: \t\tskinList->DeleteNowPlaying();\n4733: \t\tActionPlay(true);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 34,
        "text": "http://www.pkware.com/documents/casestudies/APPNOTE.TXT",
        "context_before": "32: {\n33: \t// http://en.wikipedia.org/wiki/Zip_(file_format)#Structure",
        "context_after": "35: \n36: \tzipStream.open(file.c_str(), std::ios::in|std::ios::binary);"
      }
    ],
    "discovery": [
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 264,
        "text": "SQLITE_DEFAULT_FOREIGN_KEYS and SQLITE_USE_URI, but it seems the function does not work for these options.",
        "context_before": "262: \t// but to be sure we still use PRAGMA foreign_keys = ON.\n263: \t// Note: Instead of this it would be better to use sqlite3_compileoption_used to check both",
        "context_after": "265: \t// See also constructor of DBase for comment about SQLITE_USE_URI.\n266: #ifndef NDEBUG"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2024,
        "text": "It seems SQLite is extremely slow when deleting massive data with indexes",
        "context_before": "2022: void DBase::DeleteNotUpdated()\n2023: {",
        "context_after": "2025: \t// and again from other thread. With my tests delete 60000 tracks takes 3+ min, but 20000 only 4 sec\n2026: \t// It looks like a bug in SQLite. We can drop and recreate indexes here to avoid this, but I don't like it."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2028,
        "text": "It seems PRAGMA cache_spill=OFF can help, but it increases memory usage of commits, so don't use it.",
        "context_before": "2026: \t// It looks like a bug in SQLite. We can drop and recreate indexes here to avoid this, but I don't like it.\n2027: \t// ---",
        "context_after": "2029: \t// OK we can just increase cache to avoid this, use PRAGMA cache_size = 10000.\n2030: \t// ---"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2031,
        "text": "It seems all the above is not actual for new versions of SQLite, but I'll leave it for history.",
        "context_before": "2029: \t// OK we can just increase cache to avoid this, use PRAGMA cache_size = 10000.\n2030: \t// ---",
        "context_after": "2032: \n2033: \t// With database lock"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 2871,
        "text": "Further I noticed, if we need to find artist and albumartist separately, if we use \"=\" then it does not work, but if we use \"IS\" then it does, I don't know why. Affect our collation LIKECASE, which doesn't compare but find the substring.",
        "context_before": "2869: \tSQLRequest sqlSelect(dbLibrary,\n2870: \t\t//\"SELECT id,file,size,number,title,artist,albumartist,album,year,genre,time,rating FROM library WHERE deleted IS NULL AND IFNULL(albumartist,artist)=? COLLATE LIKECASE ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,year DESC,album COLLATE MYCASE,number LIMIT 1000;\");",
        "context_after": "2872: \t\t//\"SELECT id,file,size,number,title,artist,albumartist,album,year,genre,time,rating FROM library WHERE deleted IS NULL AND (artist IS ?1 COLLATE LIKECASE OR albumartist IS ?1 COLLATE LIKECASE) ORDER BY IFNULL(albumartist,artist) COLLATE MYCASE,year DESC,album COLLATE MYCASE,number LIMIT 500;\");\n2873: \t\t\"SELECT id,cue,path,file,filesize,CAST(track AS INTEGER),CAST(disc AS INTEGER),title,album,artist,albumartist,genre,CAST(year AS INTEGER),duration,rating FROM library\""
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4241,
        "text": "It seems all that above is not actual with new versions of SQLite, performance is equal. But I leave as is.",
        "context_before": "4239: \t// Also we use \"IS\" in our last condition (file IS ?) because \"=\" doesn't work with multiple values.\n4240: \t// It doesn't work because we use our own collation COLLATE FSELECT.",
        "context_after": "4242: \n4243: \tbool isYearSkip = false;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 289,
        "text": "Search for a duplicate hotkey and remove it if found",
        "context_before": "287: void DlgHotKeys::DeleteDuplicated(int index)\n288: {",
        "context_after": "290: \tfor (std::size_t i = 0, size = keys.size(); i < size; ++i)\n291: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageSystem.cpp",
        "line": 176,
        "text": "When navigate from the keyboard if appear \"Not found ASIO devices.\" MessageBox,",
        "context_before": "174: void DlgPageSystem::OnBnClickedRadioAsio()\n175: {",
        "context_after": "177: \t// we can't close it anymore with OK button so fix this strange behaviour.\n178: \tif (!::IsDlgButtonChecked(thisWnd, IDC_RADIO_ASIO))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LastFM.cpp",
        "line": 67,
        "text": "exe is not found",
        "context_before": "65: \n66: \t\t\tif (::GetFileAttributes(file.c_str()) == INVALID_FILE_ATTRIBUTES)",
        "context_after": "68: \t\t\telse\n69: \t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 717,
        "text": "Or maybe the file is not found then stop",
        "context_before": "715: \t\t\t\t}\n716: ",
        "context_after": "718: \t\t\t\tfilePreload.clear();\n719: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MoveResize.cpp",
        "line": 115,
        "text": "SC_SIZE part is pure magic (I just don't remember where I found it maybe I just used Spy++ to get it)",
        "context_before": "113: \t// The following code uses some undocumented features\n114: \t// SC_MOVE part is used by many programs like: WMP, iTunes, .NET (DragMove) so it should be fine",
        "context_after": "116: \n117: \t// Some magic stuff"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2340,
        "text": "Found a node",
        "context_before": "2338: \t\t\t\t}\n2339: ",
        "context_after": "2341: \t\t\t\t\tisFind = true;\n2342: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2401,
        "text": "Already found",
        "context_before": "2399: \n2400: \t\t\tif (findNode == nullptr) // Search for the first track",
        "context_after": "2402: \n2403: \t\t\tif (node == findNode) // Found a node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2403,
        "text": "Found a node",
        "context_before": "2401: \t\t\t\treturn nullptr; // Already found\n2402: ",
        "context_after": "2404: \t\t\t\treturn foundNode; // Return previous (KEY_UP)\n2405: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2446,
        "text": "Found start node",
        "context_before": "2444: \t\tif (node->nodeType == SkinListNode::NodeType::Song) // Search only tracks\n2445: \t\t{",
        "context_after": "2447: \t\t\t{\n2448: \t\t\t\tisFind = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 2463,
        "text": "Found end node",
        "context_before": "2461: \t\t\t\t}\n2462: ",
        "context_after": "2464: \t\t\t\t\treturn false;\n2465: \t\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1675,
        "text": "Found a node",
        "context_before": "1673: \t\t\t}\n1674: ",
        "context_after": "1676: \t\t\t\tisFind = true;\n1677: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1730,
        "text": "Already found",
        "context_before": "1728: \n1729: \t\tif (firstNode == nullptr) // Search for the first track",
        "context_after": "1731: \n1732: \t\tif (node == findNode) // Found a node"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1732,
        "text": "Found a node",
        "context_before": "1730: \t\t\treturn nullptr; // Already found\n1731: ",
        "context_after": "1733: \t\t\treturn foundNode; // Return previous (KEY_UP)\n1734: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 471,
        "text": "[ver 2.1] It's not needed anymore it seems (but I don't have time to test)",
        "context_before": "469: \t\tthreadTimerSmooth.Start(std::bind(&WinylWnd::TimerEffectsThreadRun, this));\n470: ",
        "context_after": "472: \t//skinDraw.RefreshWindow(); // Refresh all skin elements\n473: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1712,
        "text": "Found nothing means all tracks are played",
        "context_before": "1710: \t\t\tPlayNode(newNode);\n1711: \t\t}",
        "context_after": "1713: \t\t{\n1714: \t\t\tif (settings.IsRepeat()) // Repeat is on"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1745,
        "text": "Found nothing means that it was the last track",
        "context_before": "1743: \t\tListNodeUnsafe nextNode = skinList->FindNextTrack(playNode);\n1744: ",
        "context_after": "1746: \t\t{\n1747: \t\t\tif (settings.IsRepeat()) // Repeat is on"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1774,
        "text": "Found nothing means that it was the last track",
        "context_before": "1772: \t\t\tListNodeUnsafe nextNode = skinList->FindNextTrack(lastPlayNode);\n1773: ",
        "context_after": "1775: \t\t\t{\n1776: \t\t\t\tif (settings.IsRepeat()) // Repeat is on"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1826,
        "text": "Found nothing means that it was the first track",
        "context_before": "1824: \t\tListNodeUnsafe prevNode = skinList->FindPrevTrack(playNode);\n1825: ",
        "context_after": "1827: \t\t{\n1828: \t\t\tif (settings.IsRepeat()) // Repeat is on"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1855,
        "text": "Found nothing means that it was the first track",
        "context_before": "1853: \t\t\tListNodeUnsafe prevNode = skinList->FindPrevTrack(lastPlayNode);\n1854: ",
        "context_after": "1856: \t\t\t{\n1857: \t\t\t\tif (settings.IsRepeat()) // Repeat is on"
      }
    ],
    "todo_future": [
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3206,
        "text": "The query is not much optimized, but most of the time the number of tracks in a playlist is not that big, so it doesn't matter.",
        "context_before": "3204: \n3205: \t// Select tracks from the playlist on the basis of: first select all linked with the library, then all others, and then sort them by order in the playlist.",
        "context_after": "3207: \n3208: \tSQLRequest sqlSelect(dbLibrary,"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLanguage.cpp",
        "line": 144,
        "text": "/////// Test for button with icon (works properly only on Vista or later) LONG_PTR style = ::GetWindowLongPtr(::GetDlgItem(thisWnd, IDOK), GWL_STYLE); ::SetWindowLongPtr(::GetDlgItem(thisWnd, IDOK), GWL_STYLE, style | BS_ICON); // On WinXP: Old style Button with icon (can add BS_FLAT for better look on XP) //::SetWindowLongPtr(::GetDlgItem(thisWnd, IDOK), GWL_STYLE, style | BS_BITMAP); // On WinXP: Default style button without icon // LoadIcon doesn't work properly //HICON icon = ::LoadIconW(::GetModuleHandleW(NULL), MAKEINTRESOURCE(IDI_ICON_TRAY_PLAY)); HICON icon = (HICON)::LoadImageW(::GetModuleHandleW(NULL), MAKEINTRESOURCE(IDI_ICON_TRAY_PLAY), IMAGE_ICON, 16, 16, LR_DEFAULTCOLOR); // Test for button with icon only (on WinXP behave depending on the style above) ::SendMessageW(::GetDlgItem(thisWnd, IDOK), BM_SETIMAGE, IMAGE_ICON, (LPARAM)icon); // Test for button with icon and text (does nothing on WinXP) ::SendMessageW(::GetDlgItem(thisWnd, IDCANCEL), BM_SETIMAGE, IMAGE_ICON, (LPARAM)icon); ::DestroyIcon(icon); // Don't forget to destroy icon",
        "context_before": "142: \n143: ",
        "context_after": "159: \t/////// Another test for button with icon (works on XP or later, but for icon with text we need manually calculate margins)\n160: \t::SetDlgItemTextW(thisWnd, IDOK, L\"\"); // Remove text for testing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLanguage.cpp",
        "line": 158,
        "text": "/////// Another test for button with icon (works on XP or later, but for icon with text we need manually calculate margins) ::SetDlgItemTextW(thisWnd, IDOK, L\"\"); // Remove text for testing // Test for 1 image for all button states HIMAGELIST imageList = ::ImageList_Create(16, 16, ILC_COLOR32, 1, 0); HICON icon = (HICON)::LoadImageW(::GetModuleHandle(NULL), MAKEINTRESOURCE(IDI_ICON_TRAY_PLAY), IMAGE_ICON, 16, 16, LR_DEFAULTCOLOR); ::ImageList_AddIcon(imageList, icon); ::DestroyIcon(icon); // Test for 6 images for all button states // PBS_NORMAL = 1, // PBS_HOT = 2, // PBS_PRESSED = 3, // PBS_DISABLED = 4, // PBS_DEFAULTED = 5, // PBS_STYLUSHOT = 6, You must specify the bitmap for PBS_STYLUSHOT index, otherwise the bitmap will be invisible half of the time when the button is in focused state. //HIMAGELIST imageList = ::ImageList_Create(16, 16, ILC_COLOR32, 6, 0); //HICON icon = (HICON)::LoadImageW(::GetModuleHandle(NULL), MAKEINTRESOURCE(IDI_ICON_TRAY_PLAY), IMAGE_ICON, 16, 16, LR_DEFAULTCOLOR); //::ImageList_AddIcon(imageList, icon); //::DestroyIcon(icon); //icon = (HICON)::LoadImageW(::GetModuleHandle(NULL), MAKEINTRESOURCE(IDI_ICON_TRAY_PAUSE), IMAGE_ICON, 16, 16, LR_DEFAULTCOLOR); //::ImageList_AddIcon(imageList, icon); //::ImageList_AddIcon(imageList, icon); //::ImageList_AddIcon(imageList, icon); //::ImageList_AddIcon(imageList, icon); //::ImageList_AddIcon(imageList, icon); //::DestroyIcon(icon); BUTTON_IMAGELIST buttonImageList; buttonImageList.himl = imageList; buttonImageList.margin = {0, 0, 0, 0}; buttonImageList.uAlign = BUTTON_IMAGELIST_ALIGN_CENTER; // Test for button with icon and text \"OK\" //::SetDlgItemTextW(thisWnd, IDOK, L\"OK\"); //buttonImageList.margin.left = 18; //buttonImageList.margin.right = -22; // OR //buttonImageList.margin.left = 0; //buttonImageList.margin.right = -16; //buttonImageList.uAlign = BUTTON_IMAGELIST_ALIGN_LEFT; Button_SetImageList(::GetDlgItem(thisWnd, IDOK), &buttonImageList); //::ImageList_Destroy(imageList); // need to destroy ImageList on WM_DESTROY message",
        "context_before": "156: \t::DestroyIcon(icon); // Don't forget to destroy icon\n157: */",
        "context_after": "200: \n201: void DlgLanguage::OnBnClickedOK()"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\MyDataObject.h",
        "line": 21,
        "text": "#include <shlobj.h> // (will be needed in future articles)",
        "context_before": "19: \n20: //#include <strsafe.h> // for StringCchCopy",
        "context_after": "22: \n23: // http://blogs.msdn.com/b/oldnewthing/archive/2014/06/09/10532207.aspx (Vista+)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 512,
        "text": "The following part is similar to AddToLibrary function we can refactor it later",
        "context_before": "510: \t\tlong long cueValue = cueFile.GetCueValue(i);\n511: ",
        "context_after": "513: \t\t// but right now I don't want to break something that already tested and working\n514: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 615,
        "text": "The following part is similar to AddToPlaylist function we can refactor it later",
        "context_before": "613: \t\tlong long cueValue = cueFile.GetCueValue(i);\n614: ",
        "context_after": "616: \t\t// but right now I don't want to break something that already tested and working\n617: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinEdit.cpp",
        "line": 210,
        "text": "CDCHandle bufferedDC; futureWin->BufferedPaintInit(); HPAINTBUFFER hPaint = futureWin->BeginBufferedPaint(dc, dc.m_ps.rcPaint, BPBF_TOPDOWNDIB, NULL, bufferedDC); if (hPaint) { SendMessage(WM_PRINTCLIENT, (WPARAM)bufferedDC.m_hDC, PRF_CLIENT); futureWin->BufferedPaintSetAlpha(hPaint, NULL, 255); futureWin->EndBufferedPaint(hPaint, TRUE); } futureWin->BufferedPaintUnInit(); return 0;",
        "context_before": "208: \t// http://weblogs.asp.net/kennykerr/archive/2007/01/23/controls-and-the-desktop-window-manager.aspx\n209: ",
        "context_after": "224: \t// Do not call CWnd::OnPaint() for painting messages\n225: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 316,
        "text": "there is no point to redesign anymore, I'll try to refactor some of the code later.",
        "context_before": "314: // Need to redesign this class!\n315: // 5.04.2011 After Now Playing view added it became even worse, it just became too overcomlicated,",
        "context_after": "317: // 10.03.2012 There are 2 typedefs now: ListNodeUnsafe and ListNodeSafe for raw and safe pointers,\n318: // safe pointers uses smart pointers, it helps to control all this mess (also check a comment in RemoveChild function)."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1799,
        "text": "if (futureWin->IsVistaOrLater() && futureWin->IsCompositionEnabled())",
        "context_before": "1797: \t\t// http://stackoverflow.com/questions/17277622/dwm-in-win7-8-gdi\n1798: \t\t// Test: redraw main window for smoother scrolling",
        "context_after": "1800: \t\t//\t::InvalidateRect(thisParentWnd, NULL, FALSE);\n1801: \t\t::UpdateWindow(thisWnd);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 1867,
        "text": "if (dropNode) // For the future",
        "context_before": "1865: \t\t\t// Insert into this parent\n1866: \t\t\tListNodeUnsafe newParent = rootNode.get();",
        "context_after": "1868: \t\t\t//\tnewParent = dropNode->Parent();\n1869: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinListElement.cpp",
        "line": 505,
        "text": "DTTOPTS opt = {}; opt.dwSize = sizeof(opt); opt.dwFlags = DTT_TEXTCOLOR|DTT_COMPOSITED; opt.crText = elm2->color2; if (pos->right > 0) { if (elm->align == 1) futureWin->DrawThemeTextEx(pFutureWin->hTheme, dc, 0, 0, text.c_str(), -1, DT_RIGHT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX, rcText, &opt); else if (elm->align == 2) futureWin->DrawThemeTextEx(pFutureWin->hTheme, dc, 0, 0, text.c_str(), -1, DT_CENTER|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX, rcText, &opt); else futureWin->DrawThemeTextEx(pFutureWin->hTheme, dc, 0, 0, text.c_str(), -1, DT_LEFT|DT_SINGLELINE|DT_END_ELLIPSIS|DT_NOPREFIX, rcText, &opt); } else futureWin->DrawThemeTextEx(pFutureWin->hTheme, dc, 0, 0, text.c_str(), -1, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX, rcText, &opt);",
        "context_before": "503: \t//\t::DrawText(dc, text.c_str(), (int)text.size(), rcText, DT_LEFT|DT_SINGLELINE|DT_NOPREFIX|DT_NOCLIP/*|DT_VCENTER*/);\n504: ",
        "context_after": "522: \t::SelectObject(dc, oldFont);\n523: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 439,
        "text": "if (!futureWin->IsVistaOrBetter() || !futureWin->IsTheme())",
        "context_before": "437: //\tif (effect.isFixOpacity) // Fix opacity in WinXP is enabled\n438: //\t{",
        "context_after": "440: //\t\t\tDrawTextAlpha7(dc, text, rc, clr, alpha, format);\n441: //"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinText.cpp",
        "line": 542,
        "text": "Transfer background (isn't needed we just use 32 bit color text later)",
        "context_before": "540: \tHGDIOBJ oldBitmap = ::SelectObject(dcBitmap, bitmap);\n541: ",
        "context_after": "543: \t//::GdiAlphaBlend(dcBitmap, 0, 0, rc.Width(), rc.Height(), hDC, rc.left, rc.top, rc.Width(), rc.Height(), bf);\n544: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 39,
        "text": "Allow use of features specific to Windows XP or later.",
        "context_before": "37: // Modify the following defines if you have to target a platform prior to the ones specified below.\n38: // Refer to MSDN for the latest info on corresponding values for different platforms.",
        "context_after": "40: #define WINVER 0x0501\t\t// Change this to the appropriate value to target other versions of Windows.\n41: #endif"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 43,
        "text": "Allow use of features specific to Windows XP or later.",
        "context_before": "41: #endif\n42: ",
        "context_after": "44: #define _WIN32_WINNT 0x0601\t// Change this to the appropriate value to target other versions of Windows.\n45: #endif"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 47,
        "text": "Allow use of features specific to Windows 98 or later.",
        "context_before": "45: #endif\n46: ",
        "context_after": "48: #define _WIN32_WINDOWS 0x0410 // Change this to the appropriate value to target Windows Me or later.\n49: #endif"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 48,
        "text": "Change this to the appropriate value to target Windows Me or later.",
        "context_before": "46: \n47: #ifndef _WIN32_WINDOWS\t\t// Allow use of features specific to Windows 98 or later.",
        "context_after": "49: #endif\n50: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\stdafx.h",
        "line": 51,
        "text": "Allow use of features specific to IE 6.0 or later.",
        "context_before": "49: #endif\n50: ",
        "context_after": "52: #define _WIN32_IE 0x0600\t// Change this to the appropriate value to target other versions of IE.\n53: #endif"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 375,
        "text": "futureWin->InitializeSRWLock(&srwLock);",
        "context_before": "373: \t//EventVista(bool autoReset = true) : autoFlag(autoReset), stateFlag(false)\n374: \t//{",
        "context_after": "376: \t//\tfutureWin->InitializeConditionVariable(&condVar);\n377: \t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Threading.h",
        "line": 376,
        "text": "futureWin->InitializeConditionVariable(&condVar);",
        "context_before": "374: \t//{\n375: \t//\tfutureWin->InitializeSRWLock(&srwLock);",
        "context_after": "377: \t//}\n378: \t//~EventVista() {}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Win7TaskBar.cpp",
        "line": 88,
        "text": "if (!futureWin->IsSevenOrBetter()) return; if (pCover) { HBITMAP hBitmap = NULL; ((Bitmap*)pCover)->GetHBITMAP(Color(0, 0, 0, 0), &hBitmap); WINDOWPLACEMENT pl; ::GetWindowPlacement(hWnd, &pl); CPoint pt((pl.rcNormalPosition.right -  pl.rcNormalPosition.left) / 2 - 100, (pl.rcNormalPosition.bottom -  pl.rcNormalPosition.top) / 2 - 100); futureWin->DwmSetIconicLivePreviewBitmap(hWnd, hBitmap, &pt, DWM_SIT_DISPLAYFRAME); ::DeleteObject(hBitmap); }",
        "context_before": "86: void Win7TaskBar::MessageCoverPreview(HWND wnd)\n87: {",
        "context_after": "108: \n109: void Win7TaskBar::AddButtons(HWND wnd, bool isPlay)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Winyl.cpp",
        "line": 60,
        "text": "Keep BugTrap config, we can use it to find difficult bugs in the future",
        "context_before": "58: // Doctor Dump: https://drdump.com/CrashRpt.CPP/About\n59: ",
        "context_after": "61: //\tBT_InstallSehFilter();\n62: //\tBT_SetAppName(_T(\"Winyl\"));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 168,
        "text": "Init Future Windows Versions module",
        "context_before": "166: \t}\n167: ",
        "context_after": "169: \tfutureWin = new FutureWin();\n170: "
      }
    ],
    "explanation": [
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 3950,
        "text": "Either this is a file and skip or error",
        "context_before": "3948: \t\t\t\tstd::size_t j = path.find('\\\\', i) + 1;\n3949: \t\t\t\tif (j == std::string::npos || j == 0)",
        "context_after": "3951: \t\t\t\telse if (j == 2)\n3952: \t\t\t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4600,
        "text": "Here we add additional condition in WHERE to exclude not played tracks",
        "context_before": "4598: \t\t\tbreak;\n4599: \t\tcase 5: // Recently Played",
        "context_after": "4601: \t\t\tselect += \"ORDER BY lastplayed DESC\";\n4602: \t\t\tbreak;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 5199,
        "text": "The file with the smartlist database doesn't exist, so this is not auto updating playlist",
        "context_before": "5197: \tfileDB += file + L\".db\";\n5198: ",
        "context_after": "5200: \tif (!FileSystem::Exists(fileDB))\n5201: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.h",
        "line": 39,
        "text": "See IsDialogMessage WinAPI function to know why this is needed for modeless dialogs",
        "context_before": "37: \n38: \t// Add 'if (DialogEx::IsDialogMsg(&msg)) continue;' to beginning of the main message loop (in WinylApp.cpp)",
        "context_after": "40: \tstatic bool IsDialogExMessage(MSG* msg);\n41: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 32,
        "text": "In short, this class is a mess. This class is a mix of BASS C api and C++",
        "context_before": "30: #include \"DebugMacros.h\"\n31: ",
        "context_after": "33: // every change should be as careful as possible or it can just break things.\n34: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1639,
        "text": "Preloaded stream can be already added into the mixer, this is more likely for DirectSound because",
        "context_before": "1637: \t//BASS_ChannelSetPosition(stream, bytepos, BASS_POS_BYTE);\n1638: ",
        "context_after": "1640: \t// the stream added to the mixer a second before a new track starts but it possible for WASAPI/ASIO too\n1641: \t// so remove the stream from the mixer or it will cause a problem when a new stream will be added to the mixer."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 301,
        "text": "The point of this is to replace invalidated data in the window with a new data in the window cache",
        "context_before": "299: {\n300: \t// Draw the window in standard way (without layered style)",
        "context_after": "302: \n303: \tif (isLayered) // Just in case"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\TrayIcon.cpp",
        "line": 119,
        "text": "needMaximize - this is a fix, the window restore incorrectly without it",
        "context_before": "117: \n118: \t\t::GetWindowPlacement(wnd, &wp);",
        "context_after": "120: \t\tif (!needMaximize)\n121: \t\t\twp.showCmd = SW_RESTORE;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 517,
        "text": "Do not use invariant locale, this is Microsoft specific. Use en-US instead.",
        "context_before": "515: \t}\n516: ",
        "context_after": "518: \t/*inline static std::wstring ToUpperInvariant(const std::wstring& text)\n519: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\UTF.h",
        "line": 566,
        "text": "Do not use invariant locale, this is Microsoft specific. Use en-US instead.",
        "context_before": "564: \t}\n565: ",
        "context_after": "567: \t/*inline static std::wstring ToLowerInvariant(const std::wstring& text)\n568: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4203,
        "text": "Here we fix a problem, when url then IE opens and Winyl hangs when close.",
        "context_before": "4201: \t\t\t\t//::ShellExecute(thisWnd, L\"open\", L\"Explorer\", operation.c_str(), NULL, SW_SHOWNORMAL);\n4202: ",
        "context_after": "4204: \t\t\t\tif (focusNode->GetFile().size() > 2 && focusNode->GetFile()[1] == ':' &&\n4205: \t\t\t\t\tFileSystem::Exists(focusNode->GetFile()))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 301,
        "text": "0x0800 this is 11 bit (1 << 11) which is responsible for UTF-8 encoding for file names",
        "context_before": "299: \t\telse // Add file\n300: \t\t{",
        "context_after": "302: \t\t\t// 20 this is the version 2.0 (used by default)\n303: \t\t\t// (fd->nFileSizeHigh ? 1 : 0) - if the file is too big then we use Zip64"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ZipFile.cpp",
        "line": 302,
        "text": "20 this is the version 2.0 (used by default)",
        "context_before": "300: \t\t{\n301: \t\t\t// 0x0800 this is 11 bit (1 << 11) which is responsible for UTF-8 encoding for file names",
        "context_after": "303: \t\t\t// (fd->nFileSizeHigh ? 1 : 0) - if the file is too big then we use Zip64\n304: \t\t\tif (zipOpenNewFileInZip4_64(zfile, fileZipUTF8.c_str(), &zi, NULL, 0, NULL, 0, NULL,"
      }
    ],
    "frustration": [
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4651,
        "text": "MessageBoxA(NULL, request.c_str(), \"\", NULL);",
        "context_before": "4649: \t\tSmartFilterTracks(smart, select, values);\n4650: ",
        "context_after": "4652: \n4653: \t\tSQLRequest sqlSelect(dbLibrary, select.c_str());"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DBase.cpp",
        "line": 4688,
        "text": "MessageBoxA(NULL, request.c_str(), \"\", NULL);",
        "context_before": "4686: \t\tSmartFilterAlbums(smart, select, values);\n4687: ",
        "context_after": "4689: \n4690: \t\tSQLRequest::Exec(dbLibrary, \"ATTACH DATABASE ':memory:' AS mem;\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 56,
        "text": "msg.message = WM_NULL;",
        "context_before": "54: \n55: \t//MSG msg;",
        "context_after": "57: \t//stopResult = 0;\n58: \t//while (!stopResult)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 60,
        "text": "if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))",
        "context_before": "58: \t//while (!stopResult)\n59: \t//{",
        "context_after": "61: \t//\t{\n62: \t//\t\tif (msg.message == WM_QUIT)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 62,
        "text": "if (msg.message == WM_QUIT)",
        "context_before": "60: \t//\tif (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))\n61: \t//\t{",
        "context_after": "63: \t//\t\t\tbreak;\n64: \t//\t\telse if (!IsDialogMessage(thisWnd, &msg))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 64,
        "text": "else if (!IsDialogMessage(thisWnd, &msg))",
        "context_before": "62: \t//\t\tif (msg.message == WM_QUIT)\n63: \t//\t\t\tbreak;",
        "context_after": "65: \t//\t\t{\n66: \t//\t\t\tTranslateMessage(&msg);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 66,
        "text": "TranslateMessage(&msg);",
        "context_before": "64: \t//\t\telse if (!IsDialogMessage(thisWnd, &msg))\n65: \t//\t\t{",
        "context_after": "67: \t//\t\t\tDispatchMessage(&msg);\n68: \t//\t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 67,
        "text": "DispatchMessage(&msg);",
        "context_before": "65: \t//\t\t{\n66: \t//\t\t\tTranslateMessage(&msg);",
        "context_after": "68: \t//\t\t}\n69: \t//\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 71,
        "text": "WaitMessage();",
        "context_before": "69: \t//\t}\n70: \t//\telse if (!stopResult)",
        "context_after": "72: \t//}\n73: \t//if (msg.message == WM_QUIT)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 73,
        "text": "if (msg.message == WM_QUIT)",
        "context_before": "71: \t//\t\tWaitMessage();\n72: \t//}",
        "context_after": "74: \t//\tPostQuitMessage((int)msg.wParam);\n75: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 74,
        "text": "PostQuitMessage((int)msg.wParam);",
        "context_before": "72: \t//}\n73: \t//if (msg.message == WM_QUIT)",
        "context_after": "75: \n76: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 104,
        "text": "IsDialogMessage is only needed for modeless dialogs",
        "context_before": "102: \t\treturn false;\n103: ",
        "context_after": "105: \t// but don't need to check for modeless dialog here\n106: \t// because the main message loop waits when modal dialog"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.cpp",
        "line": 106,
        "text": "because the main message loop waits when modal dialog",
        "context_before": "104: \t// IsDialogMessage is only needed for modeless dialogs\n105: \t// but don't need to check for modeless dialog here",
        "context_after": "107: \t// so it will be working for modeless dialogs only anyway\n108: \tfor (std::map<HWND, DialogEx*>::iterator it = mapDialogs.begin(), end = mapDialogs.end(); it != end; ++it)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.h",
        "line": 38,
        "text": "Add 'if (DialogEx::IsDialogMsg(&msg)) continue;' to beginning of the main message loop (in WinylApp.cpp)",
        "context_before": "36: \tvoid CenterDialog(HWND hDlg, HWND hParentWnd);\n37: ",
        "context_after": "39: \t// See IsDialogMessage WinAPI function to know why this is needed for modeless dialogs\n40: \tstatic bool IsDialogExMessage(MSG* msg);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DialogEx.h",
        "line": 39,
        "text": "See IsDialogMessage WinAPI function to know why this is needed for modeless dialogs",
        "context_before": "37: \n38: \t// Add 'if (DialogEx::IsDialogMsg(&msg)) continue;' to beginning of the main message loop (in WinylApp.cpp)",
        "context_after": "40: \tstatic bool IsDialogExMessage(MSG* msg);\n41: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgAbout.h",
        "line": 57,
        "text": "Messages",
        "context_before": "55: \t//};\n56: ",
        "context_after": "58: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n59: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgConfig.h",
        "line": 52,
        "text": "Messages",
        "context_before": "50: \tint openPage = 0;\n51: ",
        "context_after": "53: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n54: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 250,
        "text": "::SendMessage(nmhdr->hwndFrom, TTM_GETTOOLINFO, 0, (LPARAM)&ti);",
        "context_before": "248: \n249: \t\t::SendMessage(nmhdr->hwndFrom, TTM_ENUMTOOLS, 0, (LPARAM)&ti);",
        "context_after": "251: \n252: \t\tti.hinst = ::GetModuleHandle(NULL);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.cpp",
        "line": 518,
        "text": "MessageBox(lang->GetLine(Lang::MESSAGE, 9) + CString('\\n') + lang->GetLine(Lang::MESSAGE, 10), lang->GetLine(Lang::MESSAGE, 1), MB_OK|MB_ICONWARNING);",
        "context_before": "516: \n517: \t\t//if (!libAudio->IsFloatSupport())",
        "context_after": "519: \t}\n520: \telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgEqualizer.h",
        "line": 94,
        "text": "Messages",
        "context_before": "92: \tHWND sliderEQ9 = NULL;\n93: ",
        "context_after": "95: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n96: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 38,
        "text": "Take the entire input and overlap it, also blocks the beep sound (MessageBeep) when press a key",
        "context_before": "36: LRESULT DlgHotKeys::DlgKeyProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)\n37: {",
        "context_after": "39: \tif (message == WM_GETDLGCODE)\n40: \t\treturn DLGC_WANTALLKEYS;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.cpp",
        "line": 41,
        "text": "|| message == WM_SYSCHAR",
        "context_before": "39: \tif (message == WM_GETDLGCODE)\n40: \t\treturn DLGC_WANTALLKEYS;",
        "context_after": "42: \t\treturn 0;\n43: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgHotKeys.h",
        "line": 60,
        "text": "Messages",
        "context_before": "58: \tstatic LRESULT CALLBACK DlgKeyProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);\n59: ",
        "context_after": "61: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n62: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLanguage.cpp",
        "line": 144,
        "text": "/////// Test for button with icon (works properly only on Vista or later) LONG_PTR style = ::GetWindowLongPtr(::GetDlgItem(thisWnd, IDOK), GWL_STYLE); ::SetWindowLongPtr(::GetDlgItem(thisWnd, IDOK), GWL_STYLE, style | BS_ICON); // On WinXP: Old style Button with icon (can add BS_FLAT for better look on XP) //::SetWindowLongPtr(::GetDlgItem(thisWnd, IDOK), GWL_STYLE, style | BS_BITMAP); // On WinXP: Default style button without icon // LoadIcon doesn't work properly //HICON icon = ::LoadIconW(::GetModuleHandleW(NULL), MAKEINTRESOURCE(IDI_ICON_TRAY_PLAY)); HICON icon = (HICON)::LoadImageW(::GetModuleHandleW(NULL), MAKEINTRESOURCE(IDI_ICON_TRAY_PLAY), IMAGE_ICON, 16, 16, LR_DEFAULTCOLOR); // Test for button with icon only (on WinXP behave depending on the style above) ::SendMessageW(::GetDlgItem(thisWnd, IDOK), BM_SETIMAGE, IMAGE_ICON, (LPARAM)icon); // Test for button with icon and text (does nothing on WinXP) ::SendMessageW(::GetDlgItem(thisWnd, IDCANCEL), BM_SETIMAGE, IMAGE_ICON, (LPARAM)icon); ::DestroyIcon(icon); // Don't forget to destroy icon",
        "context_before": "142: \n143: ",
        "context_after": "159: \t/////// Another test for button with icon (works on XP or later, but for icon with text we need manually calculate margins)\n160: \t::SetDlgItemTextW(thisWnd, IDOK, L\"\"); // Remove text for testing"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLanguage.cpp",
        "line": 158,
        "text": "/////// Another test for button with icon (works on XP or later, but for icon with text we need manually calculate margins) ::SetDlgItemTextW(thisWnd, IDOK, L\"\"); // Remove text for testing // Test for 1 image for all button states HIMAGELIST imageList = ::ImageList_Create(16, 16, ILC_COLOR32, 1, 0); HICON icon = (HICON)::LoadImageW(::GetModuleHandle(NULL), MAKEINTRESOURCE(IDI_ICON_TRAY_PLAY), IMAGE_ICON, 16, 16, LR_DEFAULTCOLOR); ::ImageList_AddIcon(imageList, icon); ::DestroyIcon(icon); // Test for 6 images for all button states // PBS_NORMAL = 1, // PBS_HOT = 2, // PBS_PRESSED = 3, // PBS_DISABLED = 4, // PBS_DEFAULTED = 5, // PBS_STYLUSHOT = 6, You must specify the bitmap for PBS_STYLUSHOT index, otherwise the bitmap will be invisible half of the time when the button is in focused state. //HIMAGELIST imageList = ::ImageList_Create(16, 16, ILC_COLOR32, 6, 0); //HICON icon = (HICON)::LoadImageW(::GetModuleHandle(NULL), MAKEINTRESOURCE(IDI_ICON_TRAY_PLAY), IMAGE_ICON, 16, 16, LR_DEFAULTCOLOR); //::ImageList_AddIcon(imageList, icon); //::DestroyIcon(icon); //icon = (HICON)::LoadImageW(::GetModuleHandle(NULL), MAKEINTRESOURCE(IDI_ICON_TRAY_PAUSE), IMAGE_ICON, 16, 16, LR_DEFAULTCOLOR); //::ImageList_AddIcon(imageList, icon); //::ImageList_AddIcon(imageList, icon); //::ImageList_AddIcon(imageList, icon); //::ImageList_AddIcon(imageList, icon); //::ImageList_AddIcon(imageList, icon); //::DestroyIcon(icon); BUTTON_IMAGELIST buttonImageList; buttonImageList.himl = imageList; buttonImageList.margin = {0, 0, 0, 0}; buttonImageList.uAlign = BUTTON_IMAGELIST_ALIGN_CENTER; // Test for button with icon and text \"OK\" //::SetDlgItemTextW(thisWnd, IDOK, L\"OK\"); //buttonImageList.margin.left = 18; //buttonImageList.margin.right = -22; // OR //buttonImageList.margin.left = 0; //buttonImageList.margin.right = -16; //buttonImageList.uAlign = BUTTON_IMAGELIST_ALIGN_LEFT; Button_SetImageList(::GetDlgItem(thisWnd, IDOK), &buttonImageList); //::ImageList_Destroy(imageList); // need to destroy ImageList on WM_DESTROY message",
        "context_before": "156: \t::DestroyIcon(icon); // Don't forget to destroy icon\n157: */",
        "context_after": "200: \n201: void DlgLanguage::OnBnClickedOK()"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLanguage.h",
        "line": 43,
        "text": "Messages",
        "context_before": "41: \tHIMAGELIST imListLanguage = NULL;\n42: ",
        "context_after": "44: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n45: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgLibrary.h",
        "line": 46,
        "text": "Messages",
        "context_before": "44: \tHWND tabLibrary = NULL;\n45: ",
        "context_after": "47: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n48: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.cpp",
        "line": 39,
        "text": "CenterDialog(hDlg, wndMessage);",
        "context_before": "37: \t{\n38: \tcase WM_INITDIALOG:",
        "context_after": "40: \t\tOnInitDialog();\n41: \t\treturn TRUE;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgNewVersion.h",
        "line": 70,
        "text": "Messages",
        "context_before": "68: \tvoid ConvertPortableDB(bool toPortable, const std::string& drive, DBase::SQLRequest& sqlSelect, DBase::SQLRequest& sqlUpdate);\n69: ",
        "context_after": "71: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n72: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgOpenURL.h",
        "line": 57,
        "text": "Messages",
        "context_before": "55: \t}\n56: ",
        "context_after": "58: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n59: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageCover.h",
        "line": 60,
        "text": "Messages",
        "context_before": "58: \tbool isSaveCoverFile = false;\n59: ",
        "context_after": "61: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n62: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageGeneral.h",
        "line": 51,
        "text": "Messages",
        "context_before": "49: \tbool isAssocFolder = false;\n50: ",
        "context_after": "52: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n53: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageGeneralXP.h",
        "line": 38,
        "text": "Messages",
        "context_before": "36: \tHWND listAssoc = NULL;\n37: ",
        "context_after": "39: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n40: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageLibrary.h",
        "line": 50,
        "text": "Messages",
        "context_before": "48: \tHIMAGELIST imListFolder = NULL;\n49: ",
        "context_after": "51: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n52: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageLibraryOpt.h",
        "line": 50,
        "text": "Messages",
        "context_before": "48: \tbool isRescanAll = false;\n49: ",
        "context_after": "51: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n52: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageLyrics.h",
        "line": 80,
        "text": "Messages",
        "context_before": "78: \t}\n79: ",
        "context_after": "81: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n82: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageMini.h",
        "line": 46,
        "text": "Messages",
        "context_before": "44: \tHWND sliderOpacity = NULL;\n45: ",
        "context_after": "47: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n48: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPagePopup.h",
        "line": 54,
        "text": "Messages",
        "context_before": "52: \tHWND sliderHide = NULL;\n53: ",
        "context_after": "55: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n56: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageSystem.cpp",
        "line": 176,
        "text": "When navigate from the keyboard if appear \"Not found ASIO devices.\" MessageBox,",
        "context_before": "174: void DlgPageSystem::OnBnClickedRadioAsio()\n175: {",
        "context_after": "177: \t// we can't close it anymore with OK button so fix this strange behaviour.\n178: \tif (!::IsDlgButtonChecked(thisWnd, IDC_RADIO_ASIO))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageSystem.h",
        "line": 74,
        "text": "Messages",
        "context_before": "72: \t}\n73: ",
        "context_after": "75: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n76: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgPageTags.h",
        "line": 64,
        "text": "Messages",
        "context_before": "62: \t}\n63: ",
        "context_after": "65: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n66: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgProgress.h",
        "line": 60,
        "text": "Messages",
        "context_before": "58: \tvoid UpdateProgressTextEmpty(bool cancel);\n59: ",
        "context_after": "61: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n62: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgProperties.h",
        "line": 83,
        "text": "Messages",
        "context_before": "81: \tvoid ProgressFunc(int pos);\n82: ",
        "context_after": "84: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n85: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgRename.h",
        "line": 55,
        "text": "Messages",
        "context_before": "53: \t}\n54: ",
        "context_after": "56: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n57: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSkin.h",
        "line": 61,
        "text": "Messages",
        "context_before": "59: \n60: ",
        "context_after": "62: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n63: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmart.cpp",
        "line": 270,
        "text": "message == WM_KEYDOWN || message == WM_SYSKEYDOWN)",
        "context_before": "268: {\n269: \tif (message == WM_LBUTTONDOWN || message == WM_RBUTTONDOWN)",
        "context_after": "271: \t{\n272: \t\tif (::IsWindowVisible(toolTip))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmart.cpp",
        "line": 308,
        "text": "::SendMessage(toolTip, TTM_TRACKPOSITION, 0, MAKELPARAM(rc.left+rc.Width()/2, rc.bottom));",
        "context_before": "306: \t\t\t//CRect rc;\n307: \t\t\t//::GetWindowRect(::GetDlgItem(thisWnd, IDC_EDIT_FROM), rc);",
        "context_after": "309: \t\t\t::SendMessage(toolTip, TTM_TRACKACTIVATE, TRUE, (LPARAM)&ti);\n310: \t\t\tif (::IsWindowVisible(toolTip))"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmart.h",
        "line": 76,
        "text": "Messages",
        "context_before": "74: \t}\n75: ",
        "context_after": "77: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n78: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmartAlbums.h",
        "line": 38,
        "text": "Messages",
        "context_before": "36: \tDBase::SmartList* smart = nullptr;\n37: ",
        "context_after": "39: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n40: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DlgSmartTracks.h",
        "line": 38,
        "text": "Messages",
        "context_before": "36: \tDBase::SmartList* smart = nullptr;\n37: ",
        "context_after": "39: \tINT_PTR DialogProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam) override;\n40: \tvoid OnInitDialog();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 67,
        "text": "if (lRef == 0) PostThreadMessage(m_dwThread, WM_NULL, 0, 0);",
        "context_before": "65: \t{\n66: \t\tLONG lRef = InterlockedDecrement(&m_cRef);",
        "context_after": "68: \t\treturn lRef;\n69: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 83,
        "text": "while (m_cRef && GetMessage(&msg, NULL, 0, 0))",
        "context_before": "81: \n82: \t\t//MSG msg;",
        "context_after": "84: \t\t//{\n85: \t\t//\tTranslateMessage(&msg);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 85,
        "text": "TranslateMessage(&msg);",
        "context_before": "83: \t\t//while (m_cRef && GetMessage(&msg, NULL, 0, 0))\n84: \t\t//{",
        "context_after": "86: \t\t//\tDispatchMessage(&msg);\n87: \t\t//}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\DropTargetOpen.h",
        "line": 86,
        "text": "DispatchMessage(&msg);",
        "context_before": "84: \t\t//{\n85: \t\t//\tTranslateMessage(&msg);",
        "context_after": "87: \t\t//}\n88: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ExImage.cpp",
        "line": 920,
        "text": "wcscpy_s(ncm.lfMessageFont.lfFaceName, L\"Arial\");",
        "context_before": "918: \t\t\twcscpy_s(ncm.lfMessageFont.lfFaceName, L\"Segoe UI\");\n919: \t\t//else if (size == 9)",
        "context_after": "921: \t\telse\n922: \t\t\twcscpy_s(ncm.lfMessageFont.lfFaceName, L\"Tahoma\");"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 32,
        "text": "In short, this class is a mess. This class is a mix of BASS C api and C++",
        "context_before": "30: #include \"DebugMacros.h\"\n31: ",
        "context_after": "33: // every change should be as careful as possible or it can just break things.\n34: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 83,
        "text": "if (bassDriver > 0) // Hack",
        "context_before": "81: \t{ // Fade out the volume when close the program\n82: \t\tStop();",
        "context_after": "84: \t//\t{\n85: \t//\t\tisMediaPlay = true;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 97,
        "text": "ALWAYS output this message - regardless of Debug/Release",
        "context_before": "95: bool LibAudio::Init(WinylWnd* wnd, int driver, int device, bool isBit32, bool isSoftMix, bool isLoadEq)\n96: {",
        "context_after": "98: \t::OutputDebugStringW(L\"*** WINYL AUDIO SYSTEM INITIALIZING - DebugView should see this! ***\\n\");\n99: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 555,
        "text": "::PostMessage(libAudio->hParent, UWM_BASSPRELOAD, 0, 0); // Don't do this",
        "context_before": "553: \t\treturn;\n554: ",
        "context_after": "556: \tlibAudio->SyncProcPreloadImpl();\n557: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 597,
        "text": "::SendMessage(hParent, UWM_NEXTFILE, (LPARAM)&csFile, 0);",
        "context_before": "595: \n596: \t// Get the next track",
        "context_after": "598: \tfile = wndWinyl->ChangeFile(cuePreload);\n599: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 700,
        "text": "::SendMessage(hParent, UWM_PLAYDRAW, 0, 0);",
        "context_before": "698: \t\t\t\t\tisPreloadRate = false;\n699: ",
        "context_after": "701: \t\t\t\twndWinyl->ChangeNode(false, false);\n702: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 712,
        "text": "::SendMessage(hParent, UWM_PLAYDRAW, 0, 1);",
        "context_before": "710: \t\t\t\t\tPlayURL(filePreload);\n711: \t\t\t\t\tfilePreload.clear();",
        "context_after": "713: \t\t\t\t\twndWinyl->ChangeNode(false, true);\n714: \t\t\t\t\treturn;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 768,
        "text": "::SendMessage(hParent, UWM_PLAYDRAW, 1, 0); // PostMessage",
        "context_before": "766: \tisMediaRadio = false;\n767: ",
        "context_after": "769: \twndWinyl->ChangeNode(true, false);\n770: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 869,
        "text": "::PostMessage(libAudio->hParent, UWM_BASSPRELOAD, 0, 0);",
        "context_before": "867: \n868: \t\t\t\t\t\t// Preload next file",
        "context_after": "870: \t\t\t\t\t\tSyncProcPreloadImpl();\n871: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.cpp",
        "line": 1893,
        "text": "::PostMessage(libAudio->wndWinyl->Wnd(), UWM_BASSCHFREE, 0, (LPARAM)channel);",
        "context_before": "1891: //\n1892: //\tif (libAudio->wndWinyl->IsWnd())",
        "context_after": "1894: //}\n1895: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\LibAudio.h",
        "line": 207,
        "text": "Main window (to send messages)",
        "context_before": "205: \tstd::wstring eqPreset; // Name of the equalizer preset\n206: ",
        "context_after": "208: \n209: \tfloat soundVolume = 1.0f; // Sound volume"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\Progress.cpp",
        "line": 962,
        "text": "::MessageBoxW(NULL, std::to_wstring(perfDiffMs).c_str(), L\"\", 0);",
        "context_before": "960: \t//double perfDiffMs = (counter2.QuadPart - counter1.QuadPart) *1000.0 / freq.QuadPart;\n961: \t//int i = 0;",
        "context_after": "963: \n964: \tif (isAddAllToLibrary)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 155,
        "text": "causes Windows to send the message continuously.",
        "context_before": "153: \t\t\t\t// https://msdn.microsoft.com/en-us/library/windows/desktop/hh298405%28v=vs.85%29.aspx\n154: \t\t\t\t// Make sure the mouse has actually moved. The presence of the tooltip",
        "context_after": "156: \t\t\t\tstatic POINT oldPoint = {};\n157: \t\t\t\tif (point != oldPoint)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 256,
        "text": "if (message == 0) // When open a menu set default cursor",
        "context_before": "254: bool SkinAlpha::OnSetCursor(HWND hWnd, UINT nHitTest, UINT message)\n255: {",
        "context_after": "257: //\t{\n258: //\t\t::SetCursor(::LoadCursorW(NULL, IDC_ARROW));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.cpp",
        "line": 310,
        "text": "void SkinAlpha::OnActivate(UINT nState, CWnd* pWndOther, BOOL bMinimized) { CWnd::OnActivate(nState, pWndOther, bMinimized); //\tif (nState == WA_ACTIVE || nState == WA_CLICKACTIVE) //\t\tpParentWnd->SendMessage(WM_ACTIVATE, MAKELONG(nState, 0), (LPARAM)pParentWnd->m_hWnd); //\tpParentWnd->BringWindowToTop(); }",
        "context_before": "308: \t}\n309: }",
        "context_after": "321: void SkinAlpha::OnTimer(UINT_PTR nIDEvent)\n322: {"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinAlpha.h",
        "line": 74,
        "text": "Messages",
        "context_before": "72: \tvoid Action(SkinElement* element, MouseAction mouseAction);\n73: ",
        "context_after": "75: \tLRESULT WindowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) override;\n76: \tvoid OnPaint(HDC dc, PAINTSTRUCT& ps);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinDraw.cpp",
        "line": 1779,
        "text": "MessageBeep(1);",
        "context_before": "1777: \tfor (std::size_t i = 0; i < fadeElements.size(); ++i)\n1778: \t{",
        "context_after": "1780: \n1781: \t\tHGDIOBJ oldMemory = ::SelectObject(dcMemory, bmMemory);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinEdit.cpp",
        "line": 210,
        "text": "CDCHandle bufferedDC; futureWin->BufferedPaintInit(); HPAINTBUFFER hPaint = futureWin->BeginBufferedPaint(dc, dc.m_ps.rcPaint, BPBF_TOPDOWNDIB, NULL, bufferedDC); if (hPaint) { SendMessage(WM_PRINTCLIENT, (WPARAM)bufferedDC.m_hDC, PRF_CLIENT); futureWin->BufferedPaintSetAlpha(hPaint, NULL, 255); futureWin->EndBufferedPaint(hPaint, TRUE); } futureWin->BufferedPaintUnInit(); return 0;",
        "context_before": "208: \t// http://weblogs.asp.net/kennykerr/archive/2007/01/23/controls-and-the-desktop-window-manager.aspx\n209: ",
        "context_after": "224: \t// Do not call CWnd::OnPaint() for painting messages\n225: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinEdit.cpp",
        "line": 224,
        "text": "Do not call CWnd::OnPaint() for painting messages",
        "context_before": "222: \t*/\n223: ",
        "context_after": "225: }\n226: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinEdit.h",
        "line": 87,
        "text": "Messages",
        "context_before": "85: \tstatic LRESULT CALLBACK EditProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);\n86: ",
        "context_after": "88: \tLRESULT WindowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) override;\n89: \tvoid OnPaint(HDC dc, PAINTSTRUCT& ps);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 311,
        "text": "it uses raw pointers to nodes everywhere and there are so many pointer owners that it hard to control all this mess,",
        "context_before": "309: // Beginning of critical functions to remove nodes (check for ending below).\n310: // They are critical because this class designed wrong from the start,",
        "context_after": "312: // so we need to carefully control removing of nodes in Delete* functions below (I call them \"dead\" nodes there),\n313: // or otherwise it cause random crashes with random errors like heap corruption, recursive destructor calls etc."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.cpp",
        "line": 318,
        "text": "safe pointers uses smart pointers, it helps to control all this mess (also check a comment in RemoveChild function).",
        "context_before": "316: // there is no point to redesign anymore, I'll try to refactor some of the code later.\n317: // 10.03.2012 There are 2 typedefs now: ListNodeUnsafe and ListNodeSafe for raw and safe pointers,",
        "context_after": "319: // I've rewritten the code and use ListNodeUnsafe for pointers used at the same place where received\n320: // and ListNodeSafe for pointers used at different places of the code (it was easier this way)."
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 239,
        "text": "only exception in HScrollMessage when native scroll.",
        "context_before": "237: \t// The class interact with scroll throught these functions.\n238: \t// These functions does not interact with class only with scroll,",
        "context_after": "240: \tint HScrollGetPos();\n241: \tbool HScrollSetPos(int pos, bool needRedraw = true);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinList.h",
        "line": 306,
        "text": "Messages",
        "context_before": "304: \n305: ",
        "context_after": "307: \tLRESULT WindowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) override;\n308: \tvoid OnPaint(HDC dc, PAINTSTRUCT& ps);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.h",
        "line": 135,
        "text": "only exception in HScrollMessage when native scroll.",
        "context_before": "133: \t// The class interact with scroll throught these functions.\n134: \t// These functions does not interact with class only with scroll,",
        "context_after": "136: \tint HScrollGetPos();\n137: \tbool HScrollSetPos(int pos, bool needRedraw = true);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinLyrics.h",
        "line": 148,
        "text": "Messages",
        "context_before": "146: \tint HScrollMessageGetPosOld();\n147: ",
        "context_after": "149: \tLRESULT WindowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) override;\n150: \tvoid OnPaint(HDC dc, PAINTSTRUCT& ps);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 272,
        "text": "if (message == 0) // When open a menu set default cursor",
        "context_before": "270: bool SkinMini::OnSetCursor(HWND hWnd, UINT nHitTest, UINT message)\n271: {",
        "context_after": "273: //\t{\n274: //\t\t::SetCursor(::LoadCursorW(NULL, IDC_ARROW));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.cpp",
        "line": 356,
        "text": "Need to process these messages if mini player uses native window caption",
        "context_before": "354: bool SkinMini::OnSysCommand(WPARAM wParam, LPARAM lParam)\n355: {",
        "context_after": "357: \tif ((wParam & 0xFFF0) == SC_MINIMIZE)\n358: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinMini.h",
        "line": 73,
        "text": "Messages",
        "context_before": "71: \tvoid Action(SkinElement* element, MouseAction mouseAction);\n72: ",
        "context_after": "74: \tLRESULT WindowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) override;\n75: \tvoid OnPaint(HDC dc, PAINTSTRUCT& ps);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinPopup.h",
        "line": 152,
        "text": "Messages",
        "context_before": "150: \n151: ",
        "context_after": "153: \tLRESULT WindowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) override;\n154: \tvoid OnPaint(HDC dc, PAINTSTRUCT& ps);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.cpp",
        "line": 329,
        "text": "MessageBeep(1);",
        "context_before": "327: void SkinScroll::DrawScroll(HDC dc)\n328: {",
        "context_after": "330: \n331: \tCRect rc;"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinScroll.h",
        "line": 145,
        "text": "Messages",
        "context_before": "143: \tbool IsRedrawHoverReset(ActionType type);\n144: ",
        "context_after": "146: \tLRESULT WindowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) override;\n147: \tvoid OnPaint(HDC dc, PAINTSTRUCT& ps);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.cpp",
        "line": 1349,
        "text": "::SendMessage(thisParentWnd, UWM_TREEDRAG, 2, 0);",
        "context_before": "1347: \t\tdropNodeMove.reset();\n1348: ",
        "context_after": "1350: \t}\n1351: }"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.h",
        "line": 145,
        "text": "only exception in HScrollMessage when native scroll.",
        "context_before": "143: \t// The class interact with scroll throught these functions.\n144: \t// These functions does not interact with class only with scroll,",
        "context_after": "146: \tint HScrollGetPos();\n147: \tbool HScrollSetPos(int pos, bool needRedraw = true);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinTree.h",
        "line": 189,
        "text": "Messages",
        "context_before": "187: \n188: ",
        "context_after": "190: \tLRESULT WindowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) override;\n191: \tvoid OnPaint(HDC dc, PAINTSTRUCT& ps);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\SkinVis.h",
        "line": 62,
        "text": "Messages",
        "context_before": "60: \tstd::vector<structBand> bands;\n61: ",
        "context_after": "63: \tLRESULT WindowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) override;\n64: \tvoid OnPaint(HDC dc, PAINTSTRUCT& ps);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ToolTips.cpp",
        "line": 155,
        "text": "if (msg->message == WM_MOUSEMOVE ||",
        "context_before": "153: \tif (wndOwner == msg->hwnd)\n154: \t{",
        "context_after": "156: \t\t//\tmsg->message == WM_LBUTTONDOWN ||\n157: \t\t//\tmsg->message == WM_LBUTTONUP ||"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ToolTips.cpp",
        "line": 156,
        "text": "msg->message == WM_LBUTTONDOWN ||",
        "context_before": "154: \t{\n155: \t\t//if (msg->message == WM_MOUSEMOVE ||",
        "context_after": "157: \t\t//\tmsg->message == WM_LBUTTONUP ||\n158: \t\t//\tmsg->message == WM_RBUTTONDOWN ||"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ToolTips.cpp",
        "line": 157,
        "text": "msg->message == WM_LBUTTONUP ||",
        "context_before": "155: \t\t//if (msg->message == WM_MOUSEMOVE ||\n156: \t\t//\tmsg->message == WM_LBUTTONDOWN ||",
        "context_after": "158: \t\t//\tmsg->message == WM_RBUTTONDOWN ||\n159: \t\t//\tmsg->message == WM_RBUTTONUP)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ToolTips.cpp",
        "line": 158,
        "text": "msg->message == WM_RBUTTONDOWN ||",
        "context_before": "156: \t\t//\tmsg->message == WM_LBUTTONDOWN ||\n157: \t\t//\tmsg->message == WM_LBUTTONUP ||",
        "context_after": "159: \t\t//\tmsg->message == WM_RBUTTONUP)\n160: \t\tif (msg->message >= WM_MOUSEMOVE && msg->message < WM_MOUSEWHEEL)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ToolTips.cpp",
        "line": 159,
        "text": "msg->message == WM_RBUTTONUP)",
        "context_before": "157: \t\t//\tmsg->message == WM_LBUTTONUP ||\n158: \t\t//\tmsg->message == WM_RBUTTONDOWN ||",
        "context_after": "160: \t\tif (msg->message >= WM_MOUSEMOVE && msg->message < WM_MOUSEWHEEL)\n161: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\ToolTips.cpp",
        "line": 231,
        "text": "LRESULT result = SendMessage(trackingTip, TTM_GETBUBBLESIZE, 0, (LPARAM)&tool);",
        "context_before": "229: \t::GetClientRect(trackingTip, rc);\n230: \t// Alternative way to get tooltip size",
        "context_after": "232: \t//SIZE sz = {GET_X_LPARAM(result), GET_Y_LPARAM(result)};\n233: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 195,
        "text": "if (DialogEx::IsDialogExMessage(&msg))",
        "context_before": "193: \t\t{\n194: \t\t\t// Do not use it yet (affects only DlgProgress anyway)",
        "context_after": "196: \t\t\t//\tcontinue;\n197: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 202,
        "text": "if (msg.message == WM_SYSKEYDOWN)",
        "context_before": "200: \t\t\tif (winylWnd.isDragDrop)\n201: \t\t\t{",
        "context_after": "203: \t\t\t\t//\tcontinue;\n204: \t\t\t\tif (msg.message == WM_KEYDOWN)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylApp.cpp",
        "line": 215,
        "text": "Send mouse wheel messages from here",
        "context_before": "213: \t\t\t\t::TranslateAccelerator(winylWnd.Wnd(), accelerators, &msg);\n214: ",
        "context_after": "216: \t\t\twinylWnd.PreTranslateRelayEvent(&msg);\n217: \t\t\t::TranslateMessage(&msg);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 23,
        "text": "This class is a mess, need to refactor it, it's doing too many things already.",
        "context_before": "21: #include \"FileSystem.h\"\n22: ",
        "context_after": "24: \n25: WinylWnd::WinylWnd()"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 138,
        "text": "return ::DefWindowProc(hWnd, message, wParam, lParam);",
        "context_before": "136: \n137: \treturn WindowProcEx(hWnd, message, wParam, lParam);",
        "context_after": "139: }\n140: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1036,
        "text": "MessageBeep(1);",
        "context_before": "1034: \telse if (nType == SIZE_RESTORED || nType == SIZE_MAXIMIZED) // Also when resized\n1035: \t{",
        "context_after": "1037: \t\tif (!skinAlpha)\n1038: \t\t\tmoveResize.Resize(cx, cy);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1079,
        "text": "causes Windows to send the message continuously.",
        "context_before": "1077: \t\t\t\t\t// https://msdn.microsoft.com/en-us/library/windows/desktop/hh298405%28v=vs.85%29.aspx\n1078: \t\t\t\t\t// Make sure the mouse has actually moved. The presence of the tooltip",
        "context_after": "1080: \t\t\t\t\tstatic POINT oldPoint = {};\n1081: \t\t\t\t\tif (point != oldPoint)"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1192,
        "text": "if (message == 0) // When open a menu set default cursor",
        "context_before": "1190: bool WinylWnd::OnSetCursor(HWND hWnd, UINT nHitTest, UINT message)\n1191: {",
        "context_after": "1193: //\t{\n1194: //\t\t::SetCursor(::LoadCursorW(NULL, IDC_ARROW));"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1249,
        "text": "Messengers::MSNStop();",
        "context_before": "1247: \t\tlastFM.Stop();\n1248: \t//if (settings.IsMSN())",
        "context_after": "1250: \n1251: \tsettings.SetLastPlayIndex(0);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1506,
        "text": "Messengers::MSNStop();",
        "context_before": "1504: \t\tlastFM.Stop();\n1505: \t//if (settings.IsMSN())",
        "context_after": "1507: }\n1508: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1558,
        "text": "MessageBeep(1);",
        "context_before": "1556: \t\t{\n1557: \t\t\tPlayNode(node, isRepeat, true);",
        "context_after": "1559: \t\t}\n1560: \t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 1937,
        "text": "This setting is stupid it should be always true",
        "context_before": "1935: \t}\n1936: ",
        "context_after": "1938: \tif (!settings.IsLibraryNowPlaying())\n1939: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2005,
        "text": "Messengers::MSNPlay(artist, title.empty() ? filename : title);",
        "context_before": "2003: \t\t\tlastFM.Start(artist, title.empty() ? filename : title, album, libAudio.GetTimeLength());\n2004: \t\t//if (settings.IsMSN())",
        "context_after": "2006: \t}\n2007: \telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2037,
        "text": "Messengers::MSNStop();",
        "context_before": "2035: \t\t\tlastFM.Stop();\n2036: \t\t//if (settings.IsMSN())",
        "context_after": "2038: \t}\n2039: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2189,
        "text": "This setting is stupid it should be always true",
        "context_before": "2187: \tif (skinList->GetTempNode() && !isError)\n2188: \t{",
        "context_after": "2190: \t\tif (!settings.IsLibraryNowPlaying())\n2191: \t\t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2248,
        "text": "Messengers::MSNPlay(artist, title.empty() ? filename : title);",
        "context_before": "2246: \t\t\t\tlastFM.Start(artist, title.empty() ? filename : title, album, libAudio.GetTimeLength());\n2247: \t\t\t//if (settings.IsMSN())",
        "context_after": "2249: \t\t}\n2250: \t\telse"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2279,
        "text": "Messengers::MSNStop();",
        "context_before": "2277: \t\t\t\tlastFM.Stop();\n2278: \t\t\t//if (settings.IsMSN())",
        "context_after": "2280: \t\t}\n2281: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2821,
        "text": "DWM messages",
        "context_before": "2819: \t\treturn contextMenu.MeasureDrawTrayMenuXP(false, lParam);\n2820: ",
        "context_after": "2822: \tcase WM_THEMECHANGED:\n2823: \t\tfutureWin->ThemeChanged();"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2932,
        "text": "Taskbar messages",
        "context_before": "2930: \t}\n2931: ",
        "context_after": "2933: \tif (message == wmTaskbarCreated)\n2934: \t{"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 2945,
        "text": "return ::DefWindowProc(hWnd, message, wParam, lParam);",
        "context_before": "2943: \n2944: \treturn WindowProcMy(hWnd, message, wParam, lParam);",
        "context_after": "2946: }\n2947: "
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3631,
        "text": "::MessageBeep(1);",
        "context_before": "3629: \t\t{\n3630: \t\t\t::KillTimer(thisWnd, TimerValue::FadeID);",
        "context_after": "3632: \t\t}\n3633: \t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3645,
        "text": "::MessageBeep(1);",
        "context_before": "3643: \t\t\t{\n3644: \t\t\t\t::KillTimer(thisWnd, TimerValue::VisID);",
        "context_after": "3646: \t\t\t}\n3647: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 3679,
        "text": "::MessageBeep(1);",
        "context_before": "3677: \t\t\t{\n3678: \t\t\t\t::KillTimer(thisWnd, TimerValue::VisID);",
        "context_after": "3680: \t\t\t}\n3681: \t\t}"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4231,
        "text": "MessageBox::Show(thisWnd, lang.GetLine(Lang::MESSAGE, 1), lang.GetLine(Lang::MESSAGE, 7), MessageBox::IconWarning);",
        "context_before": "4229: //\t\t\t{\n4230: //\t\t\t\tEnableAll(false);",
        "context_after": "4232: \n4233: //\t\t\t\tEnableAll(true);"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.cpp",
        "line": 4411,
        "text": "Hack to always show centered around the main window",
        "context_before": "4409: \tif (skinAlpha)\n4410: \t{",
        "context_after": "4412: \n4413: \t\tif (skinAlpha->IsWnd())"
      },
      {
        "file": "C:\\Users\\Fede\\REPOS\\winyl-bp\\Winyl\\src\\WinylWnd.h",
        "line": 339,
        "text": "Messages",
        "context_before": "337: \t}\n338: ",
        "context_after": "340: \tLRESULT WindowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) override;\n341: \tLRESULT WindowProcEx(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);"
      }
    ]
  },
  "by_file": {
    "Associations.cpp": 13,
    "Associations.h": 3,
    "AutoHandle.h": 3,
    "ContextMenu.cpp": 25,
    "ContextMenu.h": 1,
    "CoverLoader.cpp": 2,
    "CoverLoader.h": 3,
    "CueFile.cpp": 33,
    "CueFile.h": 6,
    "DBase.cpp": 613,
    "DBase.h": 105,
    "DebugMacros.h": 8,
    "DialogEx.cpp": 31,
    "DialogEx.h": 6,
    "DlgAbout.cpp": 5,
    "DlgAbout.h": 11,
    "DlgConfig.cpp": 6,
    "DlgConfig.h": 1,
    "DlgEqualizer.cpp": 29,
    "DlgEqualizer.h": 1,
    "DlgHotKeys.cpp": 26,
    "DlgHotKeys.h": 2,
    "DlgLanguage.cpp": 11,
    "DlgLanguage.h": 1,
    "DlgLibrary.cpp": 3,
    "DlgLibrary.h": 1,
    "DlgNewVersion.cpp": 209,
    "DlgNewVersion.h": 1,
    "DlgOpenURL.h": 1,
    "DlgPageCover.cpp": 1,
    "DlgPageCover.h": 1,
    "DlgPageGeneral.cpp": 7,
    "DlgPageGeneral.h": 1,
    "DlgPageGeneralXP.h": 1,
    "DlgPageLibrary.cpp": 4,
    "DlgPageLibrary.h": 1,
    "DlgPageLibraryOpt.h": 1,
    "DlgPageLyrics.h": 1,
    "DlgPageMini.cpp": 1,
    "DlgPageMini.h": 1,
    "DlgPagePopup.cpp": 3,
    "DlgPagePopup.h": 1,
    "DlgPageSystem.cpp": 12,
    "DlgPageSystem.h": 1,
    "DlgPageTags.cpp": 3,
    "DlgPageTags.h": 1,
    "DlgProgress.h": 1,
    "DlgProperties.cpp": 7,
    "DlgProperties.h": 1,
    "DlgRename.h": 1,
    "DlgSkin.cpp": 4,
    "DlgSkin.h": 1,
    "DlgSmart.cpp": 12,
    "DlgSmart.h": 1,
    "DlgSmartAlbums.h": 1,
    "DlgSmartTracks.h": 1,
    "DragIconWnd.cpp": 17,
    "DragIconWnd.h": 1,
    "DropTargetOpen.cpp": 2,
    "DropTargetOpen.h": 16,
    "ExImage.cpp": 29,
    "ExImage.h": 2,
    "FileDialogEx.cpp": 15,
    "FileSystem.cpp": 16,
    "FileSystem.h": 1,
    "FutureWin.cpp": 21,
    "FutureWin.h": 39,
    "HotKeys.cpp": 5,
    "HttpClient.cpp": 10,
    "HttpClient.h": 1,
    "Language.cpp": 11,
    "Language.h": 1,
    "LastFM.cpp": 10,
    "LastFM.h": 2,
    "LibAudio.cpp": 263,
    "LibAudio.h": 45,
    "LyricsLoader.cpp": 37,
    "MessageBox.cpp": 2,
    "Messengers.cpp": 4,
    "MoveResize.cpp": 6,
    "MoveResize.h": 1,
    "mtypes.h": 78,
    "MyDataObject.cpp": 1,
    "MyDataObject.h": 7,
    "MyDropSource.cpp": 4,
    "MyDropSource.h": 5,
    "MyDropTarget.cpp": 3,
    "MyDropTarget.h": 5,
    "PlsFile.cpp": 4,
    "PlsFile.h": 4,
    "Progress.cpp": 75,
    "Progress.h": 1,
    "Properties.cpp": 13,
    "Radio.cpp": 12,
    "RadioList.h": 205,
    "resource.h": 4,
    "Settings.cpp": 34,
    "Settings.h": 14,
    "SkinAlpha.cpp": 16,
    "SkinAlpha.h": 1,
    "SkinButton.cpp": 4,
    "SkinButton.h": 1,
    "SkinCover.cpp": 2,
    "SkinCover.h": 9,
    "SkinDraw.cpp": 148,
    "SkinDraw.h": 18,
    "SkinEdit.cpp": 9,
    "SkinEdit.h": 2,
    "SkinElement.cpp": 2,
    "SkinElement.h": 76,
    "SkinLayout.cpp": 63,
    "SkinLayout.h": 18,
    "SkinLayoutBack.cpp": 62,
    "SkinLayoutBack.h": 19,
    "SkinLayoutElement.cpp": 41,
    "SkinLayoutElement.h": 16,
    "SkinList.cpp": 304,
    "SkinList.h": 36,
    "SkinListBack.cpp": 30,
    "SkinListBack.h": 14,
    "SkinListElement.cpp": 90,
    "SkinListElement.h": 15,
    "SkinListNode.h": 36,
    "SkinListThread.cpp": 1,
    "SkinLyrics.cpp": 30,
    "SkinLyrics.h": 9,
    "SkinMini.cpp": 22,
    "SkinMini.h": 1,
    "SkinPopup.cpp": 43,
    "SkinPopup.h": 32,
    "SkinPopupElement.cpp": 40,
    "SkinPopupElement.h": 15,
    "SkinRating.cpp": 3,
    "SkinScroll.cpp": 27,
    "SkinScroll.h": 32,
    "SkinShadow.cpp": 1,
    "SkinSlider.cpp": 8,
    "SkinSplitter.cpp": 2,
    "SkinSwitch.cpp": 5,
    "SkinSwitch.h": 1,
    "SkinText.cpp": 78,
    "SkinText.h": 16,
    "SkinTree.cpp": 170,
    "SkinTree.h": 10,
    "SkinTreeBack.cpp": 29,
    "SkinTreeBack.h": 14,
    "SkinTreeElement.cpp": 61,
    "SkinTreeElement.h": 14,
    "SkinTreeNode.h": 35,
    "SkinTrigger.cpp": 2,
    "SkinTrigger.h": 1,
    "SkinVis.cpp": 21,
    "SkinVis.h": 1,
    "stdafx.cpp": 36,
    "stdafx.h": 77,
    "targetver.h": 6,
    "Threading.h": 41,
    "ToolTips.cpp": 11,
    "TrayIcon.cpp": 6,
    "UTF.h": 94,
    "Win7TaskBar.cpp": 1,
    "WindowEx.cpp": 5,
    "WindowEx.h": 2,
    "Winyl.cpp": 30,
    "WinylApp.cpp": 27,
    "WinylApp.h": 1,
    "WinylWnd.cpp": 414,
    "WinylWnd.h": 40,
    "XmlFile.h": 1,
    "XmlNode.h": 3,
    "ZipFile.cpp": 53,
    "ZipFile.h": 7,
    "PackSkin.cpp": 6
  },
  "personality_insights": [
    "Desarrollador honesto sobre las dificultades del código: 123 comentarios de frustración",
    "Muestra humildad técnica: 11 comentarios de incertidumbre",
    "Preocupado por la estabilidad: 38 advertencias y precauciones"
  ],
  "interesting_quotes": [
    {
      "category": "uncertainty",
      "text": "// Maybe truncate? (if DELETE and EXCLUSIVE or WAL)",
      "file": "DBase.cpp",
      "line": 254
    },
    {
      "category": "uncertainty",
      "text": "It's only BindTextRaw here now, maybe use for?",
      "file": "DBase.cpp",
      "line": 3631
    },
    {
      "category": "uncertainty",
      "text": "If streamPreload == NULL then most probably it is URL, we will check it in SyncProcEndImpl",
      "file": "LibAudio.cpp",
      "line": 638
    },
    {
      "category": "explanation",
      "text": "Either this is a file and skip or error",
      "file": "DBase.cpp",
      "line": 3950
    },
    {
      "category": "explanation",
      "text": "Here we add additional condition in WHERE to exclude not played tracks",
      "file": "DBase.cpp",
      "line": 4600
    },
    {
      "category": "explanation",
      "text": "The file with the smartlist database doesn't exist, so this is not auto updating playlist",
      "file": "DBase.cpp",
      "line": 5199
    },
    {
      "category": "frustration",
      "text": "MessageBoxA(NULL, request.c_str(), \"\", NULL);",
      "file": "DBase.cpp",
      "line": 4651
    },
    {
      "category": "frustration",
      "text": "MessageBoxA(NULL, request.c_str(), \"\", NULL);",
      "file": "DBase.cpp",
      "line": 4688
    },
    {
      "category": "frustration",
      "text": "msg.message = WM_NULL;",
      "file": "DialogEx.cpp",
      "line": 56
    }
  ],
  "technical_insights": [
    {
      "type": "concurrency_insight",
      "text": "//SQLRequest::Exec(dbLibraryTemp, \"PRAGMA synchronous = OFF;\");",
      "file": "DBase.cpp",
      "line": 242
    },
    {
      "type": "concurrency_insight",
      "text": "SQLRequest::Exec(dbLibrary, \"PRAGMA synchronous=NORMAL;\");",
      "file": "DBase.cpp",
      "line": 250
    },
    {
      "type": "concurrency_insight",
      "text": "from other thread (for 60000 tracks, 4 sec from main thread, and 40+ sec! from other). So now I use temp table.",
      "file": "DBase.cpp",
      "line": 1972
    },
    {
      "type": "concurrency_insight",
      "text": "and again from other thread. With my tests delete 60000 tracks takes 3+ min, but 20000 only 4 sec",
      "file": "DBase.cpp",
      "line": 2025
    },
    {
      "type": "concurrency_insight",
      "text": "http://www.codeguru.com/forum/showthread.php?t=287823&highlight=WndProc",
      "file": "DialogEx.h",
      "line": 54
    },
    {
      "type": "concurrency_insight",
      "text": "if (HIWORD(GetAsyncKeyState(VK_CONTROL)))",
      "file": "DlgLibrary.cpp",
      "line": 111
    },
    {
      "type": "concurrency_insight",
      "text": "if (lRef == 0) PostThreadMessage(m_dwThread, WM_NULL, 0, 0);",
      "file": "DropTargetOpen.h",
      "line": 67
    },
    {
      "type": "concurrency_insight",
      "text": "::CoInitializeEx(NULL, COINIT_APARTMENTTHREADED|COINIT_DISABLE_OLE1DDE);",
      "file": "ExImage.h",
      "line": 126
    },
    {
      "type": "architecture_decision",
      "text": "In short, this class is a mess. This class is a mix of BASS C api and C++",
      "file": "LibAudio.cpp",
      "line": 32
    },
    {
      "type": "architecture_decision",
      "text": "BASS uses api similar to WinAPI and sometimes it's a bit hard to notice",
      "file": "LibAudio.cpp",
      "line": 35
    }
  ],
  "development_story": []
}